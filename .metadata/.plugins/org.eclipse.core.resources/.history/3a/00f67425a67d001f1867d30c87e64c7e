#include "I2C.h"

void MyI2C_W_SCL(uint8_t BitValue)
{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, (GPIO_PinState)BitValue);
    Delay();
}

void MyI2C_W_SDA(uint8_t BitValue)
{
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, (GPIO_PinState)BitValue);
    Delay();
}

uint8_t MyI2C_R_SDA()
{
    uint8_t BitValue;
    BitValue = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0);
    Delay();
    return BitValue;
}

static void Delay(void)
{
    volatile uint8_t i;

    for (i = 0; i < 10; i++);
}

void I2C_Init(void)
{
	GPIO_InitTypeDef GPIO_StructInit;
	
	__HAL_RCC_GPIOF_CLK_ENABLE();
	
	GPIO_StructInit.Mode = GPIO_MODE_AF_OD;	
	GPIO_StructInit.Pull = GPIO_NOPULL;
	GPIO_StructInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
	GPIO_StructInit.Pin = GPIO_PIN_0;
	HAL_GPIO_Init(GPIOF, &GPIO_StructInit);
		GPIO_StructInit.Pin = GPIO_PIN_1;
	HAL_GPIO_Init(GPIOF, &GPIO_StructInit);
	
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
}

void I2C_Start(void)
{
	MyI2C_W_SDA(1);
    MyI2C_W_SCL(1);
	MyI2C_W_SDA(0);
	MyI2C_W_SCL(0);
}

void I2C_Stop(void)
{
	MyI2C_W_SDA(0);
	MyI2C_W_SCL(1);  
	MyI2C_W_SDA(1);
}

void I2C_SendByte(uint8_t data)
{
	for (uint8_t i=0;i<8;i++)
	{
		if (data&0x80)
		{
			MyI2C_W_SDA(1);
			MyI2C_W_SCL(1);
		}else 
		{
			MyI2C_W_SDA(0);
			MyI2C_W_SCL(1);
		}
		data<<=1;
		MyI2C_W_SCL(0);
	}
}

uint8_t I2C_ReceiveByte(void)
{
	uint8_t Byte = 0x00;
    MyI2C_W_SDA(1);
	for (uint8_t i=0;i<8;i++)
	{
		if (MyI2C_R_SDA())
		{
            Byte |= 0x80;
			MyI2C_W_SCL(1);
		}else 
		{
			MyI2C_W_SCL(1);
		}
		Byte>>=1;
		MyI2C_W_SCL(0);
	}
    return Byte;
}

void I2C_SendAck(uint8_t AckBit)
{
    MyI2C_W_SDA(AckBit);
    MyI2C_W_SCL(1);
    MyI2C_W_SCL(0);
}

uint8_t I2C_ReceiveAck(void)
{
    uint8_t AckBit;
    MyI2C_W_SDA(1);
    MyI2C_W_SCL(1);
    AckBit = MyI2C_R_SDA();
    MyI2C_W_SCL(0);
    return AckBit;
}
