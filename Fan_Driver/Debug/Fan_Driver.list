
Fan_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000983c  08004608  08004608  00005608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de44  0800de44  0000f00c  2**0
                  CONTENTS
  4 .ARM          00000000  0800de44  0800de44  0000f00c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de44  0800de44  0000f00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de44  0800de44  0000ee44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de48  0800de48  0000ee48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800de4c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  0800de58  0000f00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  0800de58  0000f11c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce86  00000000  00000000  0000f035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023cc  00000000  00000000  0001bebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acd  00000000  00000000  0001f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000240f  00000000  00000000  0001fb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001145f  00000000  00000000  00021f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087c58  00000000  00000000  000333db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb033  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a0c  00000000  00000000  000bb078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000bea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080045f0 	.word	0x080045f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080045f0 	.word	0x080045f0

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <INA219_ReadDataForRegister_16Bits>:
//	I2C_ReceiveAck();
//	I2C_End();
//}

uint16_t INA219_ReadDataForRegister_16Bits(INA219_t *ina219, uint8_t registerAddress)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af04      	add	r7, sp, #16
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
  uint8_t Value[2];

  HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), registerAddress, 1, Value, 2, 1000);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	b29a      	uxth	r2, r3
 8000524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000528:	9302      	str	r3, [sp, #8]
 800052a:	2302      	movs	r3, #2
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2301      	movs	r3, #1
 8000536:	2180      	movs	r1, #128	@ 0x80
 8000538:	f001 feec 	bl	8002314 <HAL_I2C_Mem_Read>

  return ((Value[0] << 8) | Value[1]);
 800053c:	7b3b      	ldrb	r3, [r7, #12]
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	b21a      	sxth	r2, r3
 8000542:	7b7b      	ldrb	r3, [r7, #13]
 8000544:	b21b      	sxth	r3, r3
 8000546:	4313      	orrs	r3, r2
 8000548:	b21b      	sxth	r3, r3
 800054a:	b29b      	uxth	r3, r3
}
 800054c:	4618      	mov	r0, r3
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <INA219_WriteDataToRegister_16Bits>:
 * @param  ina219 Slave configuration structure of the IIC.
 * @param  registerAddress Internal memory address.
 * @param  Value 16 bits of data to be written.
 */
void INA219_WriteDataToRegister_16Bits(INA219_t *ina219, uint8_t registerAddress, uint16_t Value)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af04      	add	r7, sp, #16
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	70fb      	strb	r3, [r7, #3]
 8000560:	4613      	mov	r3, r2
 8000562:	803b      	strh	r3, [r7, #0]
  uint8_t regAddr[2];
  /* High Byte */
  regAddr[0] = (Value >> 8) & 0xff;
 8000564:	883b      	ldrh	r3, [r7, #0]
 8000566:	0a1b      	lsrs	r3, r3, #8
 8000568:	b29b      	uxth	r3, r3
 800056a:	b2db      	uxtb	r3, r3
 800056c:	733b      	strb	r3, [r7, #12]
  /* Low Byte */
  regAddr[1] = (Value >> 0) & 0xff;
 800056e:	883b      	ldrh	r3, [r7, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), registerAddress, 1, (uint8_t*)regAddr, 2, 1000);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000580:	9302      	str	r3, [sp, #8]
 8000582:	2302      	movs	r3, #2
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2301      	movs	r3, #1
 800058e:	2180      	movs	r1, #128	@ 0x80
 8000590:	f001 fdc6 	bl	8002120 <HAL_I2C_Mem_Write>
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <INA219_ReadBusVoltage>:
 * @brief  Read bus voltage.
 * @param  ina219 Slave configuration structure of the IIC.
 * @return Read voltage value, unit mV.
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint16_t result = INA219_ReadDataForRegister_16Bits(ina219, INA219_REG_BUS_VOLTAGE);
 80005a4:	2102      	movs	r1, #2
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ffb2 	bl	8000510 <INA219_ReadDataForRegister_16Bits>
 80005ac:	4603      	mov	r3, r0
 80005ae:	81fb      	strh	r3, [r7, #14]

  /* return mV */
  return ((result >> 3  ) * 4);
 80005b0:	89fb      	ldrh	r3, [r7, #14]
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	b29b      	uxth	r3, r3
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <INA219_ReadCurrentRaw>:
 * @brief  Read current register value.
 * @param  ina219 Slave configuration structure of the IIC.
 * @return Current register value.
 */
uint16_t INA219_ReadCurrentRaw(INA219_t *ina219)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b084      	sub	sp, #16
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
  uint16_t result = INA219_ReadDataForRegister_16Bits(ina219, INA219_REG_CURRENT);
 80005ca:	2104      	movs	r1, #4
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ff9f 	bl	8000510 <INA219_ReadDataForRegister_16Bits>
 80005d2:	4603      	mov	r3, r0
 80005d4:	81fb      	strh	r3, [r7, #14]

  return (result);
 80005d6:	89fb      	ldrh	r3, [r7, #14]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <INA219_ReadCurrent_mA>:
 * @brief  Read current register value, unit mA.
 * @param  ina219 Slave configuration structure of the IIC.
 * @return Current value.
 */
uint16_t INA219_ReadCurrent_mA(INA219_t *ina219)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint16_t result = INA219_ReadCurrentRaw(ina219);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ffea 	bl	80005c2 <INA219_ReadCurrentRaw>
 80005ee:	4603      	mov	r3, r0
 80005f0:	81fb      	strh	r3, [r7, #14]

  return (result / ina219_currentDivider_mA);
 80005f2:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <INA219_ReadCurrent_mA+0x28>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	89fa      	ldrh	r2, [r7, #14]
 80005f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fc:	b29b      	uxth	r3, r3
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000002a 	.word	0x2000002a

0800060c <INA219_ReadShuntVoltage_mV>:
 * @brief  Read current register value, unit mV.
 * @param  ina219 Slave configuration structure of the IIC.
 * @return Shunt Voltage value.
 */
uint16_t INA219_ReadShuntVoltage_mV(INA219_t *ina219)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint16_t result = INA219_ReadDataForRegister_16Bits(ina219, INA219_REG_SHUNT_VOLTAGE);
 8000614:	2101      	movs	r1, #1
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff ff7a 	bl	8000510 <INA219_ReadDataForRegister_16Bits>
 800061c:	4603      	mov	r3, r0
 800061e:	81fb      	strh	r3, [r7, #14]
  /* When multiple sign bits are present, they will all be the same value.
   * Negative numbers are represented in 2's complement format.
   * Generate the 2's complement of a negative number by complementing the absolute value binary number and adding 1.
   * Extend the sign, denoting a negative number by setting the MSB = 1.
   * Extend the sign to any additional sign bits to form the 16-bit word. */
  if(result > MAX_SHUNT_RANGE)
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000626:	d902      	bls.n	800062e <INA219_ReadShuntVoltage_mV+0x22>
  {
    result = 65536 - MAX_SHUNT_RANGE;
 8000628:	f24f 0360 	movw	r3, #61536	@ 0xf060
 800062c:	81fb      	strh	r3, [r7, #14]
  }

  /* Shunt voltage, unit mV. */
  return (result / 100);
 800062e:	89fb      	ldrh	r3, [r7, #14]
 8000630:	4a04      	ldr	r2, [pc, #16]	@ (8000644 <INA219_ReadShuntVoltage_mV+0x38>)
 8000632:	fba2 2303 	umull	r2, r3, r2, r3
 8000636:	095b      	lsrs	r3, r3, #5
 8000638:	b29b      	uxth	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	51eb851f 	.word	0x51eb851f

08000648 <INA219_Reset>:
/**
 * @brief  INA219 system reset.
 * @param  ina219 Slave configuration structure of the IIC.
 */
void INA219_Reset(INA219_t *ina219)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  INA219_WriteDataToRegister_16Bits(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000650:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000654:	2100      	movs	r1, #0
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ff7c 	bl	8000554 <INA219_WriteDataToRegister_16Bits>
  HAL_Delay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f001 f91d 	bl	800189c <HAL_Delay>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <INA219_SetCalibration>:
 * @brief Set calibration register.
 * @param ina219 Slave configuration structure of the IIC.
 * @param calibrationData Calibrated data.
 */
void INA219_SetCalibration(INA219_t *ina219, uint16_t calibrationData)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	807b      	strh	r3, [r7, #2]
  INA219_WriteDataToRegister_16Bits(ina219, INA219_REG_CALIBRATION, calibrationData);
 8000676:	887b      	ldrh	r3, [r7, #2]
 8000678:	461a      	mov	r2, r3
 800067a:	2105      	movs	r1, #5
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ff69 	bl	8000554 <INA219_WriteDataToRegister_16Bits>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <INA219_SetConfig>:
 * @brief Set configuration register.
 * @param ina219 Slave configuration structure of the IIC.
 * @param configData Configuration data.
 */
void INA219_SetConfig(INA219_t *ina219, uint16_t configData)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	460b      	mov	r3, r1
 8000694:	807b      	strh	r3, [r7, #2]
  INA219_WriteDataToRegister_16Bits(ina219, INA219_REG_CONFIG, configData);
 8000696:	887b      	ldrh	r3, [r7, #2]
 8000698:	461a      	mov	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff59 	bl	8000554 <INA219_WriteDataToRegister_16Bits>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <INA219_SetCalibration_16V_8A>:
/**
 * @brief The measurement results are calibrated. Voltage range is 16V, Current range is 8A.
 * @param ina219 Slave configuration structure of the IIC.
 */
void INA219_SetCalibration_16V_8A(INA219_t *ina219)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint16_t configInfo = INA219_CONFIG_VOLTAGE_RANGE_16V |
 80006b4:	f640 139f 	movw	r3, #2463	@ 0x99f
 80006b8:	81fb      	strh	r3, [r7, #14]
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

  // Current_LSB = Maximum Expected Current / 2^15 = (80 / 10) / 2^15 = 0.0002
  // Cal = 0.04096 / (Current_LSB / R) = 0.04096 / (0.0002A * 0.01R) = 20480 = 0x5000
  // Calibration Register = 20480
  ina219_calibrationValue = 20480;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <INA219_SetCalibration_16V_8A+0x44>)
 80006bc:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80006c0:	801a      	strh	r2, [r3, #0]

  // 1mA = Current_LSB * bits = 200uA * 5bit (5 bit/mA)
  ina219_currentDivider_mA = 5;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <INA219_SetCalibration_16V_8A+0x48>)
 80006c4:	2205      	movs	r2, #5
 80006c6:	801a      	strh	r2, [r3, #0]
  // 1mW = Power_LSB * bits = 4mW * 0.25bit (0.25f bit/mW)
  ina219_powerMultiplier_mW = 0.25f;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <INA219_SetCalibration_16V_8A+0x4c>)
 80006ca:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80006ce:	601a      	str	r2, [r3, #0]

  INA219_SetCalibration(ina219, ina219_calibrationValue);
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <INA219_SetCalibration_16V_8A+0x44>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ffc7 	bl	800066a <INA219_SetCalibration>
  INA219_SetConfig(ina219, configInfo);
 80006dc:	89fb      	ldrh	r3, [r7, #14]
 80006de:	4619      	mov	r1, r3
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ffd2 	bl	800068a <INA219_SetConfig>
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028
 80006f4:	2000002a 	.word	0x2000002a
 80006f8:	2000002c 	.word	0x2000002c

080006fc <INA219_Init>:
 * @param  Address  Configuration data.
 * @return status.
 */
uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
//uint8_t INA219_Init(INA219_t *ina219, uint8_t Address)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	71fb      	strb	r3, [r7, #7]
  ina219->ina219_i2c = i2c;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	601a      	str	r2, [r3, #0]
  ina219->Address = Address;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	711a      	strb	r2, [r3, #4]

  ina219_currentDivider_mA = 0;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <INA219_Init+0x60>)
 8000718:	2200      	movs	r2, #0
 800071a:	801a      	strh	r2, [r3, #0]
  ina219_powerMultiplier_mW = 0;
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <INA219_Init+0x64>)
 800071e:	f04f 0200 	mov.w	r2, #0
 8000722:	601a      	str	r2, [r3, #0]

  uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	b29b      	uxth	r3, r3
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	b299      	uxth	r1, r3
 800072c:	2302      	movs	r3, #2
 800072e:	2203      	movs	r2, #3
 8000730:	68b8      	ldr	r0, [r7, #8]
 8000732:	f002 f863 	bl	80027fc <HAL_I2C_IsDeviceReady>
 8000736:	4603      	mov	r3, r0
 8000738:	75fb      	strb	r3, [r7, #23]

  if(ina219_isReady == HAL_OK)
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d107      	bne.n	8000750 <INA219_Init+0x54>
  {

    INA219_Reset(ina219);
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff ff81 	bl	8000648 <INA219_Reset>
    INA219_SetCalibration_16V_8A(ina219);
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f7ff ffb0 	bl	80006ac <INA219_SetCalibration_16V_8A>

    return 1;
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <INA219_Init+0x56>
  }

  else
  {
    return 0;
 8000750:	2300      	movs	r3, #0
  }
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000002a 	.word	0x2000002a
 8000760:	2000002c 	.word	0x2000002c

08000764 <LCD_DrawPoint>:
      入口数据：x,y 画点坐标
                color 点的颜色
      返回值：  无
******************************************************************************/
void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
 800076e:	460b      	mov	r3, r1
 8000770:	80bb      	strh	r3, [r7, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	807b      	strh	r3, [r7, #2]
	LCD_Address_Set(x,y,x,y);//设置光标位置
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	88fa      	ldrh	r2, [r7, #6]
 800077a:	88b9      	ldrh	r1, [r7, #4]
 800077c:	88f8      	ldrh	r0, [r7, #6]
 800077e:	f000 fac9 	bl	8000d14 <LCD_Address_Set>
	LCD_WR_DATA(color);
 8000782:	887b      	ldrh	r3, [r7, #2]
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fa79 	bl	8000c7c <LCD_WR_DATA>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <LCD_ShowChar>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b087      	sub	sp, #28
 8000798:	af00      	add	r7, sp, #0
 800079a:	4604      	mov	r4, r0
 800079c:	4608      	mov	r0, r1
 800079e:	4611      	mov	r1, r2
 80007a0:	461a      	mov	r2, r3
 80007a2:	4623      	mov	r3, r4
 80007a4:	80fb      	strh	r3, [r7, #6]
 80007a6:	4603      	mov	r3, r0
 80007a8:	80bb      	strh	r3, [r7, #4]
 80007aa:	460b      	mov	r3, r1
 80007ac:	70fb      	strb	r3, [r7, #3]
 80007ae:	4613      	mov	r3, r2
 80007b0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//一个字符所占字节大小
	uint16_t x0=x;
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80007ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80007be:	085b      	lsrs	r3, r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	f003 0307 	and.w	r3, r3, #7
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf14      	ite	ne
 80007d6:	2301      	movne	r3, #1
 80007d8:	2300      	moveq	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80007e4:	b292      	uxth	r2, r2
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //得到偏移后的值
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	3b20      	subs	r3, #32
 80007f0:	70fb      	strb	r3, [r7, #3]
	LCD_Address_Set(x,y,x+sizex-1,y+sizey-1);  //设置光标位置
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	4413      	add	r3, r2
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	3b01      	subs	r3, #1
 80007fe:	b29c      	uxth	r4, r3
 8000800:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000804:	b29a      	uxth	r2, r3
 8000806:	88bb      	ldrh	r3, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	b29b      	uxth	r3, r3
 800080c:	3b01      	subs	r3, #1
 800080e:	b29b      	uxth	r3, r3
 8000810:	88b9      	ldrh	r1, [r7, #4]
 8000812:	88f8      	ldrh	r0, [r7, #6]
 8000814:	4622      	mov	r2, r4
 8000816:	f000 fa7d 	bl	8000d14 <LCD_Address_Set>
	for(i=0;i<TypefaceNum;i++)
 800081a:	2300      	movs	r3, #0
 800081c:	827b      	strh	r3, [r7, #18]
 800081e:	e086      	b.n	800092e <LCD_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[num][i];		       //调用6x12字体
 8000820:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000824:	2b0c      	cmp	r3, #12
 8000826:	d10b      	bne.n	8000840 <LCD_ShowChar+0xac>
 8000828:	78fa      	ldrb	r2, [r7, #3]
 800082a:	8a79      	ldrh	r1, [r7, #18]
 800082c:	4845      	ldr	r0, [pc, #276]	@ (8000944 <LCD_ShowChar+0x1b0>)
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4403      	add	r3, r0
 8000838:	440b      	add	r3, r1
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	75fb      	strb	r3, [r7, #23]
 800083e:	e028      	b.n	8000892 <LCD_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[num][i];		 //调用8x16字体
 8000840:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000844:	2b10      	cmp	r3, #16
 8000846:	d108      	bne.n	800085a <LCD_ShowChar+0xc6>
 8000848:	78fa      	ldrb	r2, [r7, #3]
 800084a:	8a7b      	ldrh	r3, [r7, #18]
 800084c:	493e      	ldr	r1, [pc, #248]	@ (8000948 <LCD_ShowChar+0x1b4>)
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	440a      	add	r2, r1
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	75fb      	strb	r3, [r7, #23]
 8000858:	e01b      	b.n	8000892 <LCD_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[num][i];		 //调用12x24字体
 800085a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800085e:	2b18      	cmp	r3, #24
 8000860:	d10b      	bne.n	800087a <LCD_ShowChar+0xe6>
 8000862:	78fa      	ldrb	r2, [r7, #3]
 8000864:	8a79      	ldrh	r1, [r7, #18]
 8000866:	4839      	ldr	r0, [pc, #228]	@ (800094c <LCD_ShowChar+0x1b8>)
 8000868:	4613      	mov	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	4413      	add	r3, r2
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	4403      	add	r3, r0
 8000872:	440b      	add	r3, r1
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	75fb      	strb	r3, [r7, #23]
 8000878:	e00b      	b.n	8000892 <LCD_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[num][i];		 //调用16x32字体
 800087a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800087e:	2b20      	cmp	r3, #32
 8000880:	d15b      	bne.n	800093a <LCD_ShowChar+0x1a6>
 8000882:	78fa      	ldrb	r2, [r7, #3]
 8000884:	8a7b      	ldrh	r3, [r7, #18]
 8000886:	4932      	ldr	r1, [pc, #200]	@ (8000950 <LCD_ShowChar+0x1bc>)
 8000888:	0192      	lsls	r2, r2, #6
 800088a:	440a      	add	r2, r1
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000892:	2300      	movs	r3, #0
 8000894:	75bb      	strb	r3, [r7, #22]
 8000896:	e044      	b.n	8000922 <LCD_ShowChar+0x18e>
		{
			if(!mode)//非叠加模式
 8000898:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800089c:	2b00      	cmp	r3, #0
 800089e:	d120      	bne.n	80008e2 <LCD_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80008a0:	7dfa      	ldrb	r2, [r7, #23]
 80008a2:	7dbb      	ldrb	r3, [r7, #22]
 80008a4:	fa42 f303 	asr.w	r3, r2, r3
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d004      	beq.n	80008ba <LCD_ShowChar+0x126>
 80008b0:	883b      	ldrh	r3, [r7, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f9e2 	bl	8000c7c <LCD_WR_DATA>
 80008b8:	e003      	b.n	80008c2 <LCD_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 80008ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f9dd 	bl	8000c7c <LCD_WR_DATA>
				m++;
 80008c2:	7d7b      	ldrb	r3, [r7, #21]
 80008c4:	3301      	adds	r3, #1
 80008c6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80008c8:	7d7b      	ldrb	r3, [r7, #21]
 80008ca:	7bfa      	ldrb	r2, [r7, #15]
 80008cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80008d0:	fb01 f202 	mul.w	r2, r1, r2
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d11f      	bne.n	800091c <LCD_ShowChar+0x188>
				{
					m=0;
 80008dc:	2300      	movs	r3, #0
 80008de:	757b      	strb	r3, [r7, #21]
					break;
 80008e0:	e022      	b.n	8000928 <LCD_ShowChar+0x194>
				}
			}
			else//叠加模式
			{
				if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);//画一个点
 80008e2:	7dfa      	ldrb	r2, [r7, #23]
 80008e4:	7dbb      	ldrb	r3, [r7, #22]
 80008e6:	fa42 f303 	asr.w	r3, r2, r3
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d005      	beq.n	80008fe <LCD_ShowChar+0x16a>
 80008f2:	883a      	ldrh	r2, [r7, #0]
 80008f4:	88b9      	ldrh	r1, [r7, #4]
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff33 	bl	8000764 <LCD_DrawPoint>
				x++;
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	3301      	adds	r3, #1
 8000902:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000904:	88fa      	ldrh	r2, [r7, #6]
 8000906:	8a3b      	ldrh	r3, [r7, #16]
 8000908:	1ad2      	subs	r2, r2, r3
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	429a      	cmp	r2, r3
 800090e:	d105      	bne.n	800091c <LCD_ShowChar+0x188>
				{
					x=x0;
 8000910:	8a3b      	ldrh	r3, [r7, #16]
 8000912:	80fb      	strh	r3, [r7, #6]
					y++;
 8000914:	88bb      	ldrh	r3, [r7, #4]
 8000916:	3301      	adds	r3, #1
 8000918:	80bb      	strh	r3, [r7, #4]
					break;
 800091a:	e005      	b.n	8000928 <LCD_ShowChar+0x194>
		for(t=0;t<8;t++)
 800091c:	7dbb      	ldrb	r3, [r7, #22]
 800091e:	3301      	adds	r3, #1
 8000920:	75bb      	strb	r3, [r7, #22]
 8000922:	7dbb      	ldrb	r3, [r7, #22]
 8000924:	2b07      	cmp	r3, #7
 8000926:	d9b7      	bls.n	8000898 <LCD_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8000928:	8a7b      	ldrh	r3, [r7, #18]
 800092a:	3301      	adds	r3, #1
 800092c:	827b      	strh	r3, [r7, #18]
 800092e:	8a7a      	ldrh	r2, [r7, #18]
 8000930:	89bb      	ldrh	r3, [r7, #12]
 8000932:	429a      	cmp	r2, r3
 8000934:	f4ff af74 	bcc.w	8000820 <LCD_ShowChar+0x8c>
 8000938:	e000      	b.n	800093c <LCD_ShowChar+0x1a8>
		else return;
 800093a:	bf00      	nop
				}
			}
		}
	}
}
 800093c:	371c      	adds	r7, #28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	bf00      	nop
 8000944:	08004614 	.word	0x08004614
 8000948:	08004a88 	.word	0x08004a88
 800094c:	08005078 	.word	0x08005078
 8000950:	08006248 	.word	0x08006248

08000954 <LCD_ShowString>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowString(uint16_t x,uint16_t y,const uint8_t *p,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b089      	sub	sp, #36	@ 0x24
 8000958:	af04      	add	r7, sp, #16
 800095a:	60ba      	str	r2, [r7, #8]
 800095c:	461a      	mov	r2, r3
 800095e:	4603      	mov	r3, r0
 8000960:	81fb      	strh	r3, [r7, #14]
 8000962:	460b      	mov	r3, r1
 8000964:	81bb      	strh	r3, [r7, #12]
 8000966:	4613      	mov	r3, r2
 8000968:	80fb      	strh	r3, [r7, #6]
	while(*p!='\0')
 800096a:	e01a      	b.n	80009a2 <LCD_ShowString+0x4e>
	{
		LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	88fc      	ldrh	r4, [r7, #6]
 8000972:	89b9      	ldrh	r1, [r7, #12]
 8000974:	89f8      	ldrh	r0, [r7, #14]
 8000976:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800097a:	9302      	str	r3, [sp, #8]
 800097c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	8c3b      	ldrh	r3, [r7, #32]
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4623      	mov	r3, r4
 8000988:	f7ff ff04 	bl	8000794 <LCD_ShowChar>
		x+=sizey/2;
 800098c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	4413      	add	r3, r2
 800099a:	81fb      	strh	r3, [r7, #14]
		p++;
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	3301      	adds	r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
	while(*p!='\0')
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e0      	bne.n	800096c <LCD_ShowString+0x18>
	}
}
 80009aa:	bf00      	nop
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd90      	pop	{r4, r7, pc}

080009b4 <mypow>:
      函数说明：显示数字
      入口数据：m底数，n指数
      返回值：  无
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	460a      	mov	r2, r1
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	4613      	mov	r3, r2
 80009c2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80009c8:	e004      	b.n	80009d4 <mypow+0x20>
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	1e5a      	subs	r2, r3, #1
 80009d8:	71ba      	strb	r2, [r7, #6]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f5      	bne.n	80009ca <mypow+0x16>
	return result;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <LCD_ShowFloatNum1>:
                bc 字的背景色
                sizey 字号
      返回值：  无
******************************************************************************/
void LCD_ShowFloatNum1(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b08b      	sub	sp, #44	@ 0x2c
 80009f0:	af04      	add	r7, sp, #16
 80009f2:	60ba      	str	r2, [r7, #8]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4603      	mov	r3, r0
 80009f8:	81fb      	strh	r3, [r7, #14]
 80009fa:	460b      	mov	r3, r1
 80009fc:	81bb      	strh	r3, [r7, #12]
 80009fe:	4613      	mov	r3, r2
 8000a00:	71fb      	strb	r3, [r7, #7]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8000a02:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a06:	085b      	lsrs	r3, r3, #1
 8000a08:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8000a0a:	4937      	ldr	r1, [pc, #220]	@ (8000ae8 <LCD_ShowFloatNum1+0xfc>)
 8000a0c:	68b8      	ldr	r0, [r7, #8]
 8000a0e:	f7ff fb9d 	bl	800014c <__aeabi_fmul>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fd5b 	bl	80004d0 <__aeabi_f2uiz>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	75fb      	strb	r3, [r7, #23]
 8000a22:	e057      	b.n	8000ad4 <LCD_ShowFloatNum1+0xe8>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8000a24:	8abc      	ldrh	r4, [r7, #20]
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	200a      	movs	r0, #10
 8000a36:	f7ff ffbd 	bl	80009b4 <mypow>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	fbb4 f1f3 	udiv	r1, r4, r3
 8000a40:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <LCD_ShowFloatNum1+0x100>)
 8000a42:	fba3 2301 	umull	r2, r3, r3, r1
 8000a46:	08da      	lsrs	r2, r3, #3
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	1aca      	subs	r2, r1, r3
 8000a52:	4613      	mov	r3, r2
 8000a54:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8000a56:	7dfa      	ldrb	r2, [r7, #23]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	3b02      	subs	r3, #2
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d11d      	bne.n	8000a9c <LCD_ShowFloatNum1+0xb0>
		{
			LCD_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	3b02      	subs	r3, #2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	7dba      	ldrb	r2, [r7, #22]
 8000a68:	b292      	uxth	r2, r2
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	4413      	add	r3, r2
 8000a74:	b298      	uxth	r0, r3
 8000a76:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000a78:	89b9      	ldrh	r1, [r7, #12]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9302      	str	r3, [sp, #8]
 8000a7e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	222e      	movs	r2, #46	@ 0x2e
 8000a8c:	f7ff fe82 	bl	8000794 <LCD_ShowChar>
			t++;
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
 8000a92:	3301      	adds	r3, #1
 8000a94:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	71fb      	strb	r3, [r7, #7]
		}
	 	LCD_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	7dba      	ldrb	r2, [r7, #22]
 8000aa2:	b292      	uxth	r2, r2
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	4413      	add	r3, r2
 8000aae:	b298      	uxth	r0, r3
 8000ab0:	7cfb      	ldrb	r3, [r7, #19]
 8000ab2:	3330      	adds	r3, #48	@ 0x30
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000ab8:	89b9      	ldrh	r1, [r7, #12]
 8000aba:	2300      	movs	r3, #0
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	4623      	mov	r3, r4
 8000aca:	f7ff fe63 	bl	8000794 <LCD_ShowChar>
	for(t=0;t<len;t++)
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	75fb      	strb	r3, [r7, #23]
 8000ad4:	7dfa      	ldrb	r2, [r7, #23]
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d3a3      	bcc.n	8000a24 <LCD_ShowFloatNum1+0x38>
	}
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	371c      	adds	r7, #28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	42c80000 	.word	0x42c80000
 8000aec:	cccccccd 	.word	0xcccccccd

08000af0 <LCD_ShowPicture>:
                width  图片宽度
                pic[]  图片数组
      返回值：  无
******************************************************************************/
void LCD_ShowPicture(const uint8_t *address, uint16_t startX, uint16_t startY)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
 8000afc:	4613      	mov	r3, r2
 8000afe:	803b      	strh	r3, [r7, #0]
	uint16_t scan = address[0];//扫描模式  Bit7：0：自左至右扫描，1：自右至左扫描。Bit6：0：自顶至底扫描，1：自底至顶扫描。Bit5：0：字节内象素数据从高位到低位排列，1：字节内象素数据从低位到高位排列。Bit4：0：WORD类型高低位字节顺序与PC相同，1：WORD类型高低位字节顺序与PC相反。Bit32： 保留。Bit10：[00]水平扫描，[01]垂直扫描，[10]数据水平，字节垂直，[11]数据垂直，字节水平。
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	827b      	strh	r3, [r7, #18]
	uint16_t gray = address[1];
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	823b      	strh	r3, [r7, #16]
	uint16_t image_width = address[2];//图片宽
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3302      	adds	r3, #2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	81fb      	strh	r3, [r7, #14]
	uint16_t image_hight = address[4];//图片高
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	81bb      	strh	r3, [r7, #12]
	uint16_t is565 = address[4];   //代表颜色格式
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3304      	adds	r3, #4
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	817b      	strh	r3, [r7, #10]
	uint16_t rgb = address[6];	//RGB颜色分量排列顺序
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3306      	adds	r3, #6
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	813b      	strh	r3, [r7, #8]
	uint16_t x,y = address[7];
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3307      	adds	r3, #7
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	82bb      	strh	r3, [r7, #20]


	LCD_Address_Set(startX, startY, startX+image_width-1, startY+image_hight-1);
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	89fb      	ldrh	r3, [r7, #14]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	b29c      	uxth	r4, r3
 8000b42:	883a      	ldrh	r2, [r7, #0]
 8000b44:	89bb      	ldrh	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	8839      	ldrh	r1, [r7, #0]
 8000b50:	8878      	ldrh	r0, [r7, #2]
 8000b52:	4622      	mov	r2, r4
 8000b54:	f000 f8de 	bl	8000d14 <LCD_Address_Set>
	for(y = 0; y < image_hight; y++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	82bb      	strh	r3, [r7, #20]
 8000b5c:	e028      	b.n	8000bb0 <LCD_ShowPicture+0xc0>
	{
		for(x = 0; x < image_width; x++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	82fb      	strh	r3, [r7, #22]
 8000b62:	e01e      	b.n	8000ba2 <LCD_ShowPicture+0xb2>
		{
			//发送图片数据，每次发送16位,先发高八位
			LCD_WR_DATA8(address[y*2*image_width + 2*x+9]);
 8000b64:	8abb      	ldrh	r3, [r7, #20]
 8000b66:	89fa      	ldrh	r2, [r7, #14]
 8000b68:	fb03 f202 	mul.w	r2, r3, r2
 8000b6c:	8afb      	ldrh	r3, [r7, #22]
 8000b6e:	4413      	add	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	3309      	adds	r3, #9
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f85c 	bl	8000c38 <LCD_WR_DATA8>
			LCD_WR_DATA8(address[y*2*image_width + 2*x+8]);
 8000b80:	8abb      	ldrh	r3, [r7, #20]
 8000b82:	89fa      	ldrh	r2, [r7, #14]
 8000b84:	fb03 f202 	mul.w	r2, r3, r2
 8000b88:	8afb      	ldrh	r3, [r7, #22]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	3308      	adds	r3, #8
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f84e 	bl	8000c38 <LCD_WR_DATA8>
		for(x = 0; x < image_width; x++)
 8000b9c:	8afb      	ldrh	r3, [r7, #22]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	82fb      	strh	r3, [r7, #22]
 8000ba2:	8afa      	ldrh	r2, [r7, #22]
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3dc      	bcc.n	8000b64 <LCD_ShowPicture+0x74>
	for(y = 0; y < image_hight; y++)
 8000baa:	8abb      	ldrh	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	82bb      	strh	r3, [r7, #20]
 8000bb0:	8aba      	ldrh	r2, [r7, #20]
 8000bb2:	89bb      	ldrh	r3, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3d2      	bcc.n	8000b5e <LCD_ShowPicture+0x6e>
		}
	}
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	371c      	adds	r7, #28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd90      	pop	{r4, r7, pc}
	...

08000bc4 <LCD_Writ_Bus>:

#include "SPI/lcd_Init.h"

//LCD写入函数
void LCD_Writ_Bus(uint8_t dat)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i=0;i<8;i++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e022      	b.n	8000c1a <LCD_Writ_Bus+0x56>
	{
		LCD_SCLK_Set();
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bda:	4816      	ldr	r0, [pc, #88]	@ (8000c34 <LCD_Writ_Bus+0x70>)
 8000bdc:	f001 f92b 	bl	8001e36 <HAL_GPIO_WritePin>
		if (dat&0x80){
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da06      	bge.n	8000bf6 <LCD_Writ_Bus+0x32>
			LCD_MOSI_Clr();
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bee:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <LCD_Writ_Bus+0x70>)
 8000bf0:	f001 f921 	bl	8001e36 <HAL_GPIO_WritePin>
 8000bf4:	e005      	b.n	8000c02 <LCD_Writ_Bus+0x3e>
		}else {
			LCD_MOSI_Set();
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bfc:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <LCD_Writ_Bus+0x70>)
 8000bfe:	f001 f91a 	bl	8001e36 <HAL_GPIO_WritePin>
		}
		LCD_SCLK_Clr();
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c08:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <LCD_Writ_Bus+0x70>)
 8000c0a:	f001 f914 	bl	8001e36 <HAL_GPIO_WritePin>
		dat<<=1;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	71fb      	strb	r3, [r7, #7]
	for (i=0;i<8;i++)
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	3301      	adds	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	2b07      	cmp	r3, #7
 8000c1e:	d9d9      	bls.n	8000bd4 <LCD_Writ_Bus+0x10>
	}
	LCD_SCLK_Set();
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c26:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <LCD_Writ_Bus+0x70>)
 8000c28:	f001 f905 	bl	8001e36 <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40010c00 	.word	0x40010c00

08000c38 <LCD_WR_DATA8>:

//LCD写入8位数据
void LCD_WR_DATA8(uint8_t dat)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	LCD_DC_Clr();
 8000c42:	2201      	movs	r2, #1
 8000c44:	2110      	movs	r1, #16
 8000c46:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <LCD_WR_DATA8+0x3c>)
 8000c48:	f001 f8f5 	bl	8001e36 <HAL_GPIO_WritePin>
	LCD_CS_Set();
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c52:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <LCD_WR_DATA8+0x40>)
 8000c54:	f001 f8ef 	bl	8001e36 <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffb2 	bl	8000bc4 <LCD_Writ_Bus>
	LCD_CS_Clr();
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c66:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <LCD_WR_DATA8+0x40>)
 8000c68:	f001 f8e5 	bl	8001e36 <HAL_GPIO_WritePin>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40010c00 	.word	0x40010c00
 8000c78:	40010800 	.word	0x40010800

08000c7c <LCD_WR_DATA>:

//LCD写入16位数据
void LCD_WR_DATA(uint16_t dat)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
	LCD_DC_Clr();
 8000c86:	2201      	movs	r2, #1
 8000c88:	2110      	movs	r1, #16
 8000c8a:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <LCD_WR_DATA+0x4c>)
 8000c8c:	f001 f8d3 	bl	8001e36 <HAL_GPIO_WritePin>
	LCD_CS_Set();
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c96:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <LCD_WR_DATA+0x50>)
 8000c98:	f001 f8cd 	bl	8001e36 <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat>>8);
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff8d 	bl	8000bc4 <LCD_Writ_Bus>
	LCD_Writ_Bus(dat&0xFF);
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff88 	bl	8000bc4 <LCD_Writ_Bus>
	LCD_CS_Clr();
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cba:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <LCD_WR_DATA+0x50>)
 8000cbc:	f001 f8bb 	bl	8001e36 <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010c00 	.word	0x40010c00
 8000ccc:	40010800 	.word	0x40010800

08000cd0 <LCD_WR_REG>:

//LCD写入命令
void LCD_WR_REG(uint8_t dat)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_Set();
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2110      	movs	r1, #16
 8000cde:	480b      	ldr	r0, [pc, #44]	@ (8000d0c <LCD_WR_REG+0x3c>)
 8000ce0:	f001 f8a9 	bl	8001e36 <HAL_GPIO_WritePin>
	LCD_CS_Set();
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cea:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <LCD_WR_REG+0x40>)
 8000cec:	f001 f8a3 	bl	8001e36 <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff66 	bl	8000bc4 <LCD_Writ_Bus>
	LCD_CS_Clr();
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cfe:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <LCD_WR_REG+0x40>)
 8000d00:	f001 f899 	bl	8001e36 <HAL_GPIO_WritePin>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	40010800 	.word	0x40010800

08000d14 <LCD_Address_Set>:

//设置起始和结束地址
//入口数据：x1,x2 设置列的起始和结束地址
//         y1,y2 设置行的起始和结束地址
void LCD_Address_Set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	4611      	mov	r1, r2
 8000d20:	461a      	mov	r2, r3
 8000d22:	4623      	mov	r3, r4
 8000d24:	80fb      	strh	r3, [r7, #6]
 8000d26:	4603      	mov	r3, r0
 8000d28:	80bb      	strh	r3, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	807b      	strh	r3, [r7, #2]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	803b      	strh	r3, [r7, #0]
	if(USE_HORIZONTAL==0)
	{
		LCD_WR_REG(0x2a);//列地址设置
 8000d32:	202a      	movs	r0, #42	@ 0x2a
 8000d34:	f7ff ffcc 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA(x1+52);
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	3334      	adds	r3, #52	@ 0x34
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff9c 	bl	8000c7c <LCD_WR_DATA>
		LCD_WR_DATA(x2+52);
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	3334      	adds	r3, #52	@ 0x34
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff96 	bl	8000c7c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//行地址设置
 8000d50:	202b      	movs	r0, #43	@ 0x2b
 8000d52:	f7ff ffbd 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA(y1+40);
 8000d56:	88bb      	ldrh	r3, [r7, #4]
 8000d58:	3328      	adds	r3, #40	@ 0x28
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff8d 	bl	8000c7c <LCD_WR_DATA>
		LCD_WR_DATA(y2+40);
 8000d62:	883b      	ldrh	r3, [r7, #0]
 8000d64:	3328      	adds	r3, #40	@ 0x28
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff87 	bl	8000c7c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//储存器写
 8000d6e:	202c      	movs	r0, #44	@ 0x2c
 8000d70:	f7ff ffae 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_REG(0x2b);//行地址设置
		LCD_WR_DATA(y1+52);
		LCD_WR_DATA(y2+52);
		LCD_WR_REG(0x2c);//储存器写
	}
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd90      	pop	{r4, r7, pc}

08000d7c <LCD_clear>:

void LCD_clear(void)
  {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
    unsigned int ROW,column;
  LCD_WR_REG(0x2a);     //Column address set
 8000d82:	202a      	movs	r0, #42	@ 0x2a
 8000d84:	f7ff ffa4 	bl	8000cd0 <LCD_WR_REG>
  LCD_WR_DATA8(0x00);    //start column
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ff55 	bl	8000c38 <LCD_WR_DATA8>
  LCD_WR_DATA8(0x34);
 8000d8e:	2034      	movs	r0, #52	@ 0x34
 8000d90:	f7ff ff52 	bl	8000c38 <LCD_WR_DATA8>
//  LCD_WR_DATA8(0x28);
  LCD_WR_DATA8(0x00);    //end column
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff ff4f 	bl	8000c38 <LCD_WR_DATA8>
  LCD_WR_DATA8(0xBA);
 8000d9a:	20ba      	movs	r0, #186	@ 0xba
 8000d9c:	f7ff ff4c 	bl	8000c38 <LCD_WR_DATA8>
//  LCD_WR_DATA8(0x17);

  LCD_WR_REG(0x2b);     //Row address set
 8000da0:	202b      	movs	r0, #43	@ 0x2b
 8000da2:	f7ff ff95 	bl	8000cd0 <LCD_WR_REG>
  LCD_WR_DATA8(0x00);    //start row
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff ff46 	bl	8000c38 <LCD_WR_DATA8>
  LCD_WR_DATA8(0x28);
 8000dac:	2028      	movs	r0, #40	@ 0x28
 8000dae:	f7ff ff43 	bl	8000c38 <LCD_WR_DATA8>
//  LCD_WR_DATA8(0x34);
  LCD_WR_DATA8(0x01);    //end row
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff ff40 	bl	8000c38 <LCD_WR_DATA8>
  LCD_WR_DATA8(0x17);
 8000db8:	2017      	movs	r0, #23
 8000dba:	f7ff ff3d 	bl	8000c38 <LCD_WR_DATA8>
//  LCD_WR_DATA8(0xBA);
    LCD_WR_REG(0x2C);     //Memory write
 8000dbe:	202c      	movs	r0, #44	@ 0x2c
 8000dc0:	f7ff ff86 	bl	8000cd0 <LCD_WR_REG>
    for(ROW=0;ROW<LCD_H;ROW++)             //ROW loop
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	e011      	b.n	8000dee <LCD_clear+0x72>
      {
          for(column=0;column<LCD_W;column++)  //column loop
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	e008      	b.n	8000de2 <LCD_clear+0x66>
            {
				LCD_WR_DATA8(0x00);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff ff31 	bl	8000c38 <LCD_WR_DATA8>
				LCD_WR_DATA8(0x00);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff ff2e 	bl	8000c38 <LCD_WR_DATA8>
          for(column=0;column<LCD_W;column++)  //column loop
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b86      	cmp	r3, #134	@ 0x86
 8000de6:	d9f3      	bls.n	8000dd0 <LCD_clear+0x54>
    for(ROW=0;ROW<LCD_H;ROW++)             //ROW loop
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3301      	adds	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2bef      	cmp	r3, #239	@ 0xef
 8000df2:	d9ea      	bls.n	8000dca <LCD_clear+0x4e>
            }
      }
  }
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <LCD_Init>:
  }


//LCD初始化函数
void LCD_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
		LCD_SCLK_Clr();
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4876      	ldr	r0, [pc, #472]	@ (8000fe4 <LCD_Init+0x1e4>)
 8000e0c:	f001 f813 	bl	8001e36 <HAL_GPIO_WritePin>
		LCD_RES_Set();//复位
 8000e10:	2200      	movs	r2, #0
 8000e12:	2120      	movs	r1, #32
 8000e14:	4873      	ldr	r0, [pc, #460]	@ (8000fe4 <LCD_Init+0x1e4>)
 8000e16:	f001 f80e 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000e1a:	2064      	movs	r0, #100	@ 0x64
 8000e1c:	f000 fd3e 	bl	800189c <HAL_Delay>
		LCD_RES_Clr();
 8000e20:	2201      	movs	r2, #1
 8000e22:	2120      	movs	r1, #32
 8000e24:	486f      	ldr	r0, [pc, #444]	@ (8000fe4 <LCD_Init+0x1e4>)
 8000e26:	f001 f806 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000e2a:	2064      	movs	r0, #100	@ 0x64
 8000e2c:	f000 fd36 	bl	800189c <HAL_Delay>

		LCD_BLK_Set();//打开背光
 8000e30:	2200      	movs	r2, #0
 8000e32:	2108      	movs	r1, #8
 8000e34:	486b      	ldr	r0, [pc, #428]	@ (8000fe4 <LCD_Init+0x1e4>)
 8000e36:	f000 fffe 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000e3a:	2064      	movs	r0, #100	@ 0x64
 8000e3c:	f000 fd2e 	bl	800189c <HAL_Delay>

		LCD_WR_REG(0x11);
 8000e40:	2011      	movs	r0, #17
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_WR_REG>
		HAL_Delay(120);
 8000e46:	2078      	movs	r0, #120	@ 0x78
 8000e48:	f000 fd28 	bl	800189c <HAL_Delay>
		//-----------------------ST7789V Frame rate setting-----------------//
		//************************************************
		LCD_WR_REG(0x3A);        //65k mode
 8000e4c:	203a      	movs	r0, #58	@ 0x3a
 8000e4e:	f7ff ff3f 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x05);
 8000e52:	2005      	movs	r0, #5
 8000e54:	f7ff fef0 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_REG(0xC5); 		//VCOM
 8000e58:	20c5      	movs	r0, #197	@ 0xc5
 8000e5a:	f7ff ff39 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x1A);
 8000e5e:	201a      	movs	r0, #26
 8000e60:	f7ff feea 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_REG(0x36);
 8000e64:	2036      	movs	r0, #54	@ 0x36
 8000e66:	f7ff ff33 	bl	8000cd0 <LCD_WR_REG>
		if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x00);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fee4 	bl	8000c38 <LCD_WR_DATA8>
		else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC0);
		else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x70);
		else LCD_WR_DATA8(0xA0);

		//-------------ST7789V Frame rate setting-----------//
		LCD_WR_REG(0xb2);		//Porch Setting
 8000e70:	20b2      	movs	r0, #178	@ 0xb2
 8000e72:	f7ff ff2d 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x05);
 8000e76:	2005      	movs	r0, #5
 8000e78:	f7ff fede 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x05);
 8000e7c:	2005      	movs	r0, #5
 8000e7e:	f7ff fedb 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x00);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff fed8 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x33);
 8000e88:	2033      	movs	r0, #51	@ 0x33
 8000e8a:	f7ff fed5 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x33);
 8000e8e:	2033      	movs	r0, #51	@ 0x33
 8000e90:	f7ff fed2 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0xb7);			//Gate Control
 8000e94:	20b7      	movs	r0, #183	@ 0xb7
 8000e96:	f7ff ff1b 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x05);			//12.2v   -10.43v
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f7ff fecc 	bl	8000c38 <LCD_WR_DATA8>
		//--------------ST7789V Power setting---------------//
		LCD_WR_REG(0xBB);//VCOM
 8000ea0:	20bb      	movs	r0, #187	@ 0xbb
 8000ea2:	f7ff ff15 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x3F);
 8000ea6:	203f      	movs	r0, #63	@ 0x3f
 8000ea8:	f7ff fec6 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0xC0); //Power control
 8000eac:	20c0      	movs	r0, #192	@ 0xc0
 8000eae:	f7ff ff0f 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x2c);
 8000eb2:	202c      	movs	r0, #44	@ 0x2c
 8000eb4:	f7ff fec0 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0xC2);		//VDV and VRH Command Enable
 8000eb8:	20c2      	movs	r0, #194	@ 0xc2
 8000eba:	f7ff ff09 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x01);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff feba 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0xC3);			//VRH Set
 8000ec4:	20c3      	movs	r0, #195	@ 0xc3
 8000ec6:	f7ff ff03 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x0F);		//4.3+( vcom+vcom offset+vdv)
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f7ff feb4 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0xC4);			//VDV Set
 8000ed0:	20c4      	movs	r0, #196	@ 0xc4
 8000ed2:	f7ff fefd 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x20);				//0v
 8000ed6:	2020      	movs	r0, #32
 8000ed8:	f7ff feae 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0xC6);				//Frame Rate Control in Normal Mode
 8000edc:	20c6      	movs	r0, #198	@ 0xc6
 8000ede:	f7ff fef7 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0X01);			//111Hz
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff fea8 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0xd0);				//Power Control 1
 8000ee8:	20d0      	movs	r0, #208	@ 0xd0
 8000eea:	f7ff fef1 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0xa4);
 8000eee:	20a4      	movs	r0, #164	@ 0xa4
 8000ef0:	f7ff fea2 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0xa1);
 8000ef4:	20a1      	movs	r0, #161	@ 0xa1
 8000ef6:	f7ff fe9f 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0xE8);				//Power Control 1
 8000efa:	20e8      	movs	r0, #232	@ 0xe8
 8000efc:	f7ff fee8 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x03);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f7ff fe99 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0xE9);				//Equalize time control
 8000f06:	20e9      	movs	r0, #233	@ 0xe9
 8000f08:	f7ff fee2 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0x09);
 8000f0c:	2009      	movs	r0, #9
 8000f0e:	f7ff fe93 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 8000f12:	2009      	movs	r0, #9
 8000f14:	f7ff fe90 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x08);
 8000f18:	2008      	movs	r0, #8
 8000f1a:	f7ff fe8d 	bl	8000c38 <LCD_WR_DATA8>
		//---------------ST7789V gamma setting-------------//
		LCD_WR_REG(0xE0); //Set Gamma
 8000f1e:	20e0      	movs	r0, #224	@ 0xe0
 8000f20:	f7ff fed6 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0xD0);
 8000f24:	20d0      	movs	r0, #208	@ 0xd0
 8000f26:	f7ff fe87 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x05);
 8000f2a:	2005      	movs	r0, #5
 8000f2c:	f7ff fe84 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 8000f30:	2009      	movs	r0, #9
 8000f32:	f7ff fe81 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 8000f36:	2009      	movs	r0, #9
 8000f38:	f7ff fe7e 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x08);
 8000f3c:	2008      	movs	r0, #8
 8000f3e:	f7ff fe7b 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x14);
 8000f42:	2014      	movs	r0, #20
 8000f44:	f7ff fe78 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x28);
 8000f48:	2028      	movs	r0, #40	@ 0x28
 8000f4a:	f7ff fe75 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x33);
 8000f4e:	2033      	movs	r0, #51	@ 0x33
 8000f50:	f7ff fe72 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x3F);
 8000f54:	203f      	movs	r0, #63	@ 0x3f
 8000f56:	f7ff fe6f 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x07);
 8000f5a:	2007      	movs	r0, #7
 8000f5c:	f7ff fe6c 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x13);
 8000f60:	2013      	movs	r0, #19
 8000f62:	f7ff fe69 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x14);
 8000f66:	2014      	movs	r0, #20
 8000f68:	f7ff fe66 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x28);
 8000f6c:	2028      	movs	r0, #40	@ 0x28
 8000f6e:	f7ff fe63 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x30);
 8000f72:	2030      	movs	r0, #48	@ 0x30
 8000f74:	f7ff fe60 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0XE1); //Set Gamma
 8000f78:	20e1      	movs	r0, #225	@ 0xe1
 8000f7a:	f7ff fea9 	bl	8000cd0 <LCD_WR_REG>
		LCD_WR_DATA8(0xD0);
 8000f7e:	20d0      	movs	r0, #208	@ 0xd0
 8000f80:	f7ff fe5a 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x05);
 8000f84:	2005      	movs	r0, #5
 8000f86:	f7ff fe57 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 8000f8a:	2009      	movs	r0, #9
 8000f8c:	f7ff fe54 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 8000f90:	2009      	movs	r0, #9
 8000f92:	f7ff fe51 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x08);
 8000f96:	2008      	movs	r0, #8
 8000f98:	f7ff fe4e 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x03);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f7ff fe4b 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x24);
 8000fa2:	2024      	movs	r0, #36	@ 0x24
 8000fa4:	f7ff fe48 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x32);
 8000fa8:	2032      	movs	r0, #50	@ 0x32
 8000faa:	f7ff fe45 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x32);
 8000fae:	2032      	movs	r0, #50	@ 0x32
 8000fb0:	f7ff fe42 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x3B);
 8000fb4:	203b      	movs	r0, #59	@ 0x3b
 8000fb6:	f7ff fe3f 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x14);
 8000fba:	2014      	movs	r0, #20
 8000fbc:	f7ff fe3c 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x13);
 8000fc0:	2013      	movs	r0, #19
 8000fc2:	f7ff fe39 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x28);
 8000fc6:	2028      	movs	r0, #40	@ 0x28
 8000fc8:	f7ff fe36 	bl	8000c38 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x2F);
 8000fcc:	202f      	movs	r0, #47	@ 0x2f
 8000fce:	f7ff fe33 	bl	8000c38 <LCD_WR_DATA8>

		LCD_WR_REG(0x21); 		//反显
 8000fd2:	2021      	movs	r0, #33	@ 0x21
 8000fd4:	f7ff fe7c 	bl	8000cd0 <LCD_WR_REG>

		LCD_WR_REG(0x29);         //开启显示
 8000fd8:	2029      	movs	r0, #41	@ 0x29
 8000fda:	f7ff fe79 	bl	8000cd0 <LCD_WR_REG>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010c00 	.word	0x40010c00

08000fe8 <Fan_Init>:

int16_t CCR2 = 0;
TIM_HandleTypeDef htim;

void Fan_Init(TIM_HandleTypeDef* htim2)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	htim = *htim2;
 8000ff0:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <Fan_Init+0x28>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2348      	movs	r3, #72	@ 0x48
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f003 faea 	bl	80045d4 <memcpy>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8001000:	2104      	movs	r1, #4
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f002 fd80 	bl	8003b08 <HAL_TIM_PWM_Start>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000034 	.word	0x20000034

08001014 <Fan_Fast>:

void Fan_Fast(TIM_HandleTypeDef* htim2, uint16_t Fan_Pin)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
	while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin))
 8001020:	e020      	b.n	8001064 <Fan_Fast+0x50>
	{
		HAL_Delay(50);
 8001022:	2032      	movs	r0, #50	@ 0x32
 8001024:	f000 fc3a 	bl	800189c <HAL_Delay>
//		while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin));
		CCR2 = __HAL_TIM_GET_COMPARE(htim2, TIM_CHANNEL_2);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <Fan_Fast+0x6c>)
 8001032:	801a      	strh	r2, [r3, #0]
		CCR2 += 100;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <Fan_Fast+0x6c>)
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	b29b      	uxth	r3, r3
 800103c:	3364      	adds	r3, #100	@ 0x64
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <Fan_Fast+0x6c>)
 8001044:	801a      	strh	r2, [r3, #0]
		if (CCR2 <= 500)
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <Fan_Fast+0x6c>)
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001050:	dc05      	bgt.n	800105e <Fan_Fast+0x4a>
		{

			__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, CCR2);
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <Fan_Fast+0x6c>)
 8001054:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		HAL_Delay(50);
 800105e:	2032      	movs	r0, #50	@ 0x32
 8001060:	f000 fc1c 	bl	800189c <HAL_Delay>
	while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin))
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	4619      	mov	r1, r3
 8001068:	4806      	ldr	r0, [pc, #24]	@ (8001084 <Fan_Fast+0x70>)
 800106a:	f000 fecd 	bl	8001e08 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0d6      	beq.n	8001022 <Fan_Fast+0xe>
	}
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000030 	.word	0x20000030
 8001084:	40010800 	.word	0x40010800

08001088 <Fan_Slow>:

void Fan_Slow(TIM_HandleTypeDef* htim2, uint16_t Fan_Pin)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
	while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin))
 8001094:	e01f      	b.n	80010d6 <Fan_Slow+0x4e>
	{
		HAL_Delay(50);
 8001096:	2032      	movs	r0, #50	@ 0x32
 8001098:	f000 fc00 	bl	800189c <HAL_Delay>
//		while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin));
		CCR2 = __HAL_TIM_GET_COMPARE(htim2, TIM_CHANNEL_2);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <Fan_Slow+0x68>)
 80010a6:	801a      	strh	r2, [r3, #0]
		CCR2 -= 100;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <Fan_Slow+0x68>)
 80010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	3b64      	subs	r3, #100	@ 0x64
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <Fan_Slow+0x68>)
 80010b8:	801a      	strh	r2, [r3, #0]
		if (CCR2 >= 0)
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <Fan_Slow+0x68>)
 80010bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db05      	blt.n	80010d0 <Fan_Slow+0x48>
		{

			__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, CCR2);
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <Fan_Slow+0x68>)
 80010c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		HAL_Delay(50);
 80010d0:	2032      	movs	r0, #50	@ 0x32
 80010d2:	f000 fbe3 	bl	800189c <HAL_Delay>
	while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin))
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	@ (80010f4 <Fan_Slow+0x6c>)
 80010dc:	f000 fe94 	bl	8001e08 <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0d7      	beq.n	8001096 <Fan_Slow+0xe>
	}
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000030 	.word	0x20000030
 80010f4:	40010800 	.word	0x40010800

080010f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110c:	4b33      	ldr	r3, [pc, #204]	@ (80011dc <MX_GPIO_Init+0xe4>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a32      	ldr	r2, [pc, #200]	@ (80011dc <MX_GPIO_Init+0xe4>)
 8001112:	f043 0320 	orr.w	r3, r3, #32
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <MX_GPIO_Init+0xe4>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <MX_GPIO_Init+0xe4>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a2c      	ldr	r2, [pc, #176]	@ (80011dc <MX_GPIO_Init+0xe4>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <MX_GPIO_Init+0xe4>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <MX_GPIO_Init+0xe4>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a26      	ldr	r2, [pc, #152]	@ (80011dc <MX_GPIO_Init+0xe4>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <MX_GPIO_Init+0xe4>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_SCL_Pin|LCD_SDA_Pin|LCD_BL_Pin|LCD_DC_Pin
 8001154:	2201      	movs	r2, #1
 8001156:	f24a 0138 	movw	r1, #41016	@ 0xa038
 800115a:	4821      	ldr	r0, [pc, #132]	@ (80011e0 <MX_GPIO_Init+0xe8>)
 800115c:	f000 fe6b 	bl	8001e36 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001166:	481f      	ldr	r0, [pc, #124]	@ (80011e4 <MX_GPIO_Init+0xec>)
 8001168:	f000 fe65 	bl	8001e36 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin|LCD_BL_Pin|LCD_DC_Pin
 800116c:	f24a 0338 	movw	r3, #41016	@ 0xa038
 8001170:	613b      	str	r3, [r7, #16]
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4619      	mov	r1, r3
 8001184:	4816      	ldr	r0, [pc, #88]	@ (80011e0 <MX_GPIO_Init+0xe8>)
 8001186:	f000 fcbb 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800118a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	4810      	ldr	r0, [pc, #64]	@ (80011e4 <MX_GPIO_Init+0xec>)
 80011a4:	f000 fcac 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin|SW1_Pin;
 80011a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_GPIO_Init+0xf0>)
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	4809      	ldr	r0, [pc, #36]	@ (80011e4 <MX_GPIO_Init+0xec>)
 80011be:	f000 fc9f 	bl	8001b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	210f      	movs	r1, #15
 80011c6:	2028      	movs	r0, #40	@ 0x28
 80011c8:	f000 fc63 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011cc:	2028      	movs	r0, #40	@ 0x28
 80011ce:	f000 fc7c 	bl	8001aca <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	40010800 	.word	0x40010800
 80011e8:	10210000 	.word	0x10210000

080011ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_I2C1_Init+0x50>)
 80011f2:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <MX_I2C1_Init+0x54>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_I2C1_Init+0x50>)
 80011f8:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <MX_I2C1_Init+0x58>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_I2C1_Init+0x50>)
 800120a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_I2C1_Init+0x50>)
 800122a:	f000 fe35 	bl	8001e98 <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f000 f96d 	bl	8001512 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000007c 	.word	0x2000007c
 8001240:	40005400 	.word	0x40005400
 8001244:	000186a0 	.word	0x000186a0

08001248 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a15      	ldr	r2, [pc, #84]	@ (80012b8 <HAL_I2C_MspInit+0x70>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d123      	bne.n	80012b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <HAL_I2C_MspInit+0x74>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <HAL_I2C_MspInit+0x74>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <HAL_I2C_MspInit+0x74>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001280:	23c0      	movs	r3, #192	@ 0xc0
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001284:	2312      	movs	r3, #18
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <HAL_I2C_MspInit+0x78>)
 8001294:	f000 fc34 	bl	8001b00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <HAL_I2C_MspInit+0x74>)
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <HAL_I2C_MspInit+0x74>)
 800129e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a2:	61d3      	str	r3, [r2, #28]
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <HAL_I2C_MspInit+0x74>)
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40005400 	.word	0x40005400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010c00 	.word	0x40010c00

080012c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
	if (SW1_Pin == GPIO_Pin)
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012d4:	d105      	bne.n	80012e2 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		Fan_Fast(&htim2, SW1_Pin);
 80012d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012da:	4808      	ldr	r0, [pc, #32]	@ (80012fc <HAL_GPIO_EXTI_Callback+0x38>)
 80012dc:	f7ff fe9a 	bl	8001014 <Fan_Fast>
	}
	else if (SW2_Pin == GPIO_Pin)
	{
		Fan_Slow(&htim2, SW2_Pin);
	}
}
 80012e0:	e008      	b.n	80012f4 <HAL_GPIO_EXTI_Callback+0x30>
	else if (SW2_Pin == GPIO_Pin)
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012e8:	d104      	bne.n	80012f4 <HAL_GPIO_EXTI_Callback+0x30>
		Fan_Slow(&htim2, SW2_Pin);
 80012ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012ee:	4803      	ldr	r0, [pc, #12]	@ (80012fc <HAL_GPIO_EXTI_Callback+0x38>)
 80012f0:	f7ff feca 	bl	8001088 <Fan_Slow>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200000d0 	.word	0x200000d0

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	@ 0x30
 8001304:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001306:	f000 fa67 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130a:	f000 f8bd 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130e:	f7ff fef3 	bl	80010f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001312:	f000 f979 	bl	8001608 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001316:	f7ff ff69 	bl	80011ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Fan_Init(&htim2);
 800131a:	4853      	ldr	r0, [pc, #332]	@ (8001468 <main+0x168>)
 800131c:	f7ff fe64 	bl	8000fe8 <Fan_Init>
  LCD_BLK_Set();
 8001320:	2200      	movs	r2, #0
 8001322:	2108      	movs	r1, #8
 8001324:	4851      	ldr	r0, [pc, #324]	@ (800146c <main+0x16c>)
 8001326:	f000 fd86 	bl	8001e36 <HAL_GPIO_WritePin>
  LCD_SCLK_Set();
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001330:	484e      	ldr	r0, [pc, #312]	@ (800146c <main+0x16c>)
 8001332:	f000 fd80 	bl	8001e36 <HAL_GPIO_WritePin>
  LCD_DC_Set();
 8001336:	2200      	movs	r2, #0
 8001338:	2110      	movs	r1, #16
 800133a:	484c      	ldr	r0, [pc, #304]	@ (800146c <main+0x16c>)
 800133c:	f000 fd7b 	bl	8001e36 <HAL_GPIO_WritePin>
  LCD_Init();
 8001340:	f7ff fd5e 	bl	8000e00 <LCD_Init>
  LCD_clear();
 8001344:	f7ff fd1a 	bl	8000d7c <LCD_clear>
  HAL_Delay(50);
 8001348:	2032      	movs	r0, #50	@ 0x32
 800134a:	f000 faa7 	bl	800189c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD_ShowPicture(gImage_Fan1, 25, 2);
 800134e:	2202      	movs	r2, #2
 8001350:	2119      	movs	r1, #25
 8001352:	4847      	ldr	r0, [pc, #284]	@ (8001470 <main+0x170>)
 8001354:	f7ff fbcc 	bl	8000af0 <LCD_ShowPicture>
	  HAL_Delay(1);
 8001358:	2001      	movs	r0, #1
 800135a:	f000 fa9f 	bl	800189c <HAL_Delay>
	  LCD_ShowPicture(gImage_Fan2, 25, 2);
 800135e:	2202      	movs	r2, #2
 8001360:	2119      	movs	r1, #25
 8001362:	4844      	ldr	r0, [pc, #272]	@ (8001474 <main+0x174>)
 8001364:	f7ff fbc4 	bl	8000af0 <LCD_ShowPicture>
	  HAL_Delay(1);
 8001368:	2001      	movs	r0, #1
 800136a:	f000 fa97 	bl	800189c <HAL_Delay>
//	  LCD_ShowPicture(gImage_Fan3, 25, 2);
//	  HAL_Delay(1);

	  INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2240      	movs	r2, #64	@ 0x40
 8001372:	4941      	ldr	r1, [pc, #260]	@ (8001478 <main+0x178>)
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f9c1 	bl	80006fc <INA219_Init>
//	  INA219_Init(&ina219, INA219_ADDRESS);
	  vbus = INA219_ReadBusVoltage(&ina219);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f90d 	bl	800059c <INA219_ReadBusVoltage>
 8001382:	4603      	mov	r3, r0
 8001384:	83fb      	strh	r3, [r7, #30]
	  vshunt = INA219_ReadShuntVoltage_mV(&ina219);
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f93f 	bl	800060c <INA219_ReadShuntVoltage_mV>
 800138e:	4603      	mov	r3, r0
 8001390:	83bb      	strh	r3, [r7, #28]
	  current = INA219_ReadCurrent_mA(&ina219);
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f923 	bl	80005e0 <INA219_ReadCurrent_mA>
 800139a:	4603      	mov	r3, r0
 800139c:	837b      	strh	r3, [r7, #26]

	  uint8_t *v = "V:";
 800139e:	4b37      	ldr	r3, [pc, #220]	@ (800147c <main+0x17c>)
 80013a0:	617b      	str	r3, [r7, #20]
	  LCD_ShowString(2, 90, v, WHITE, BLACK, 24, 0);
 80013a2:	2300      	movs	r3, #0
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2318      	movs	r3, #24
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	2300      	movs	r3, #0
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	215a      	movs	r1, #90	@ 0x5a
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff facc 	bl	8000954 <LCD_ShowString>
	  LCD_ShowFloatNum1(30, 90, vbus, 4,WHITE, BLACK, 24);
 80013bc:	8bfb      	ldrh	r3, [r7, #30]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f82e 	bl	8000420 <__aeabi_ui2f>
 80013c4:	4602      	mov	r2, r0
 80013c6:	2318      	movs	r3, #24
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2304      	movs	r3, #4
 80013d6:	215a      	movs	r1, #90	@ 0x5a
 80013d8:	201e      	movs	r0, #30
 80013da:	f7ff fb07 	bl	80009ec <LCD_ShowFloatNum1>
	  uint8_t *mv = "mV:";
 80013de:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <main+0x180>)
 80013e0:	613b      	str	r3, [r7, #16]
	  LCD_ShowString(2, 120, mv, WHITE, BLACK, 24, 0);
 80013e2:	2300      	movs	r3, #0
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2318      	movs	r3, #24
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	2300      	movs	r3, #0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	2178      	movs	r1, #120	@ 0x78
 80013f6:	2002      	movs	r0, #2
 80013f8:	f7ff faac 	bl	8000954 <LCD_ShowString>
	  LCD_ShowFloatNum1(30, 120, vshunt, 5,WHITE, BLACK, 24);
 80013fc:	8bbb      	ldrh	r3, [r7, #28]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f80e 	bl	8000420 <__aeabi_ui2f>
 8001404:	4602      	mov	r2, r0
 8001406:	2318      	movs	r3, #24
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2300      	movs	r3, #0
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2305      	movs	r3, #5
 8001416:	2178      	movs	r1, #120	@ 0x78
 8001418:	201e      	movs	r0, #30
 800141a:	f7ff fae7 	bl	80009ec <LCD_ShowFloatNum1>
	  uint8_t *a = "mA:";
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <main+0x184>)
 8001420:	60fb      	str	r3, [r7, #12]
	  LCD_ShowString(2, 150, a, WHITE, BLACK, 24, 0);
 8001422:	2300      	movs	r3, #0
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2318      	movs	r3, #24
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	2300      	movs	r3, #0
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	2196      	movs	r1, #150	@ 0x96
 8001436:	2002      	movs	r0, #2
 8001438:	f7ff fa8c 	bl	8000954 <LCD_ShowString>
	  LCD_ShowFloatNum1(30, 150, current, 5,WHITE, BLACK, 24);
 800143c:	8b7b      	ldrh	r3, [r7, #26]
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ffee 	bl	8000420 <__aeabi_ui2f>
 8001444:	4602      	mov	r2, r0
 8001446:	2318      	movs	r3, #24
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	2300      	movs	r3, #0
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2305      	movs	r3, #5
 8001456:	2196      	movs	r1, #150	@ 0x96
 8001458:	201e      	movs	r0, #30
 800145a:	f7ff fac7 	bl	80009ec <LCD_ShowFloatNum1>
	  HAL_Delay(20);
 800145e:	2014      	movs	r0, #20
 8001460:	f000 fa1c 	bl	800189c <HAL_Delay>
  {
 8001464:	bf00      	nop
 8001466:	e772      	b.n	800134e <main+0x4e>
 8001468:	200000d0 	.word	0x200000d0
 800146c:	40010c00 	.word	0x40010c00
 8001470:	08007a20 	.word	0x08007a20
 8001474:	0800ac28 	.word	0x0800ac28
 8001478:	2000007c 	.word	0x2000007c
 800147c:	08004608 	.word	0x08004608
 8001480:	0800460c 	.word	0x0800460c
 8001484:	08004610 	.word	0x08004610

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b090      	sub	sp, #64	@ 0x40
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	2228      	movs	r2, #40	@ 0x28
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f003 f870 	bl	800457c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014bc:	2302      	movs	r3, #2
 80014be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014c6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fe75 	bl	80031c0 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014dc:	f000 f819 	bl	8001512 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2102      	movs	r1, #2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 f8e2 	bl	80036c4 <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001506:	f000 f804 	bl	8001512 <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3740      	adds	r7, #64	@ 0x40
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001516:	b672      	cpsid	i
}
 8001518:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151a:	bf00      	nop
 800151c:	e7fd      	b.n	800151a <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_MspInit+0x5c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a14      	ldr	r2, [pc, #80]	@ (800157c <HAL_MspInit+0x5c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_MspInit+0x5c>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <HAL_MspInit+0x5c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a0e      	ldr	r2, [pc, #56]	@ (800157c <HAL_MspInit+0x5c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_MspInit+0x5c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_MspInit+0x60>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <HAL_MspInit+0x60>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <NMI_Handler+0x4>

0800158c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <MemManage_Handler+0x4>

0800159c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <UsageFault_Handler+0x4>

080015ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f946 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 80015e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80015e4:	f000 fc40 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 80015e8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80015ec:	f000 fc3c 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 80015f0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80015f4:	f000 fc38 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	@ 0x38
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001638:	4b2d      	ldr	r3, [pc, #180]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 800163a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800163e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001640:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 8001642:	2247      	movs	r2, #71	@ 0x47
 8001644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800164c:	4b28      	ldr	r3, [pc, #160]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 800164e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001652:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001654:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800165a:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001660:	4823      	ldr	r0, [pc, #140]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 8001662:	f002 f9a9 	bl	80039b8 <HAL_TIM_Base_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800166c:	f7ff ff51 	bl	8001512 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167a:	4619      	mov	r1, r3
 800167c:	481c      	ldr	r0, [pc, #112]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 800167e:	f002 fba7 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001688:	f7ff ff43 	bl	8001512 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800168c:	4818      	ldr	r0, [pc, #96]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 800168e:	f002 f9e2 	bl	8003a56 <HAL_TIM_PWM_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001698:	f7ff ff3b 	bl	8001512 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a4:	f107 0320 	add.w	r3, r7, #32
 80016a8:	4619      	mov	r1, r3
 80016aa:	4811      	ldr	r0, [pc, #68]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 80016ac:	f002 ff08 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016b6:	f7ff ff2c 	bl	8001512 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ba:	2360      	movs	r3, #96	@ 0x60
 80016bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2204      	movs	r2, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4807      	ldr	r0, [pc, #28]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 80016d2:	f002 fabb 	bl	8003c4c <HAL_TIM_PWM_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80016dc:	f7ff ff19 	bl	8001512 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016e0:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <MX_TIM2_Init+0xe8>)
 80016e2:	f000 f823 	bl	800172c <HAL_TIM_MspPostInit>

}
 80016e6:	bf00      	nop
 80016e8:	3738      	adds	r7, #56	@ 0x38
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000d0 	.word	0x200000d0

080016f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001704:	d10b      	bne.n	800171e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_TIM_Base_MspInit+0x34>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a07      	ldr	r2, [pc, #28]	@ (8001728 <HAL_TIM_Base_MspInit+0x34>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_TIM_Base_MspInit+0x34>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800174a:	d117      	bne.n	800177c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <HAL_TIM_MspPostInit+0x58>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a0c      	ldr	r2, [pc, #48]	@ (8001784 <HAL_TIM_MspPostInit+0x58>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_TIM_MspPostInit+0x58>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001764:	2302      	movs	r3, #2
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2302      	movs	r3, #2
 800176e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	4804      	ldr	r0, [pc, #16]	@ (8001788 <HAL_TIM_MspPostInit+0x5c>)
 8001778:	f000 f9c2 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	40010800 	.word	0x40010800

0800178c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800178c:	f7ff ff36 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001792:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001794:	4a0c      	ldr	r2, [pc, #48]	@ (80017c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a8:	4c09      	ldr	r4, [pc, #36]	@ (80017d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b6:	f002 fee9 	bl	800458c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff fda1 	bl	8001300 <main>
  bx lr
 80017be:	4770      	bx	lr
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017c8:	0800de4c 	.word	0x0800de4c
  ldr r2, =_sbss
 80017cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017d0:	2000011c 	.word	0x2000011c

080017d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_Init+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_Init+0x28>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f947 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	200d      	movs	r0, #13
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fe94 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f95f 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f927 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000000 	.word	0x20000000
 800185c:	20000008 	.word	0x20000008
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a03      	ldr	r2, [pc, #12]	@ (8001884 <HAL_IncTick+0x20>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000008 	.word	0x20000008
 8001884:	20000118 	.word	0x20000118

08001888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	@ (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	20000118 	.word	0x20000118

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fff0 	bl	8001888 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffe0 	bl	8001888 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4906      	ldr	r1, [pc, #24]	@ (800197c <__NVIC_EnableIRQ+0x34>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	@ (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	@ 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	@ 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff90 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff2d 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff42 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff90 	bl	80019d4 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5f 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff35 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	@ 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e169      	b.n	8001de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b14:	2201      	movs	r2, #1
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8158 	bne.w	8001de2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a9a      	ldr	r2, [pc, #616]	@ (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d05e      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b3c:	4a98      	ldr	r2, [pc, #608]	@ (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d875      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b42:	4a98      	ldr	r2, [pc, #608]	@ (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d058      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b48:	4a96      	ldr	r2, [pc, #600]	@ (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d86f      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b4e:	4a96      	ldr	r2, [pc, #600]	@ (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d052      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b54:	4a94      	ldr	r2, [pc, #592]	@ (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d869      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b5a:	4a94      	ldr	r2, [pc, #592]	@ (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04c      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b60:	4a92      	ldr	r2, [pc, #584]	@ (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d863      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b66:	4a92      	ldr	r2, [pc, #584]	@ (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d046      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b6c:	4a90      	ldr	r2, [pc, #576]	@ (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d85d      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d82a      	bhi.n	8001bcc <HAL_GPIO_Init+0xcc>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d859      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b80 <HAL_GPIO_Init+0x80>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001be7 	.word	0x08001be7
 8001b8c:	08001c29 	.word	0x08001c29
 8001b90:	08001c2f 	.word	0x08001c2f
 8001b94:	08001c2f 	.word	0x08001c2f
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c2f 	.word	0x08001c2f
 8001ba0:	08001c2f 	.word	0x08001c2f
 8001ba4:	08001c2f 	.word	0x08001c2f
 8001ba8:	08001c2f 	.word	0x08001c2f
 8001bac:	08001c2f 	.word	0x08001c2f
 8001bb0:	08001c2f 	.word	0x08001c2f
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c2f 	.word	0x08001c2f
 8001bbc:	08001c2f 	.word	0x08001c2f
 8001bc0:	08001c2f 	.word	0x08001c2f
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001bf1 	.word	0x08001bf1
 8001bcc:	4a79      	ldr	r2, [pc, #484]	@ (8001db4 <HAL_GPIO_Init+0x2b4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd2:	e02c      	b.n	8001c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e029      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e024      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	3308      	adds	r3, #8
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e01f      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e01a      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c02:	2304      	movs	r3, #4
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e013      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c10:	2308      	movs	r3, #8
 8001c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	611a      	str	r2, [r3, #16]
          break;
 8001c1a:	e009      	b.n	8001c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	615a      	str	r2, [r3, #20]
          break;
 8001c26:	e003      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          break;
 8001c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	@ 0xff
 8001c34:	d801      	bhi.n	8001c3a <HAL_GPIO_Init+0x13a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_Init+0x13e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	@ 0xff
 8001c44:	d802      	bhi.n	8001c4c <HAL_GPIO_Init+0x14c>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x152>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	3b08      	subs	r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	210f      	movs	r1, #15
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80b1 	beq.w	8001de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	4b4d      	ldr	r3, [pc, #308]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c98:	4a48      	ldr	r2, [pc, #288]	@ (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a40      	ldr	r2, [pc, #256]	@ (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_GPIO_Init+0x1ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001dc4 <HAL_GPIO_Init+0x2c4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00d      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc8 <HAL_GPIO_Init+0x2c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001dcc <HAL_GPIO_Init+0x2cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_GPIO_Init+0x1e0>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cec:	2300      	movs	r3, #0
 8001cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cfe:	492f      	ldr	r1, [pc, #188]	@ (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	492c      	ldr	r1, [pc, #176]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4928      	ldr	r1, [pc, #160]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d40:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	4922      	ldr	r1, [pc, #136]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	491e      	ldr	r1, [pc, #120]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4918      	ldr	r1, [pc, #96]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d76:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4914      	ldr	r1, [pc, #80]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	490e      	ldr	r1, [pc, #56]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
 8001d9c:	e021      	b.n	8001de2 <HAL_GPIO_Init+0x2e2>
 8001d9e:	bf00      	nop
 8001da0:	10320000 	.word	0x10320000
 8001da4:	10310000 	.word	0x10310000
 8001da8:	10220000 	.word	0x10220000
 8001dac:	10210000 	.word	0x10210000
 8001db0:	10120000 	.word	0x10120000
 8001db4:	10110000 	.word	0x10110000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	4909      	ldr	r1, [pc, #36]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f ae8e 	bne.w	8001b14 <HAL_GPIO_Init+0x14>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	@ 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e001      	b.n	8001e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	807b      	strh	r3, [r7, #2]
 8001e42:	4613      	mov	r3, r2
 8001e44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e46:	787b      	ldrb	r3, [r7, #1]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e52:	e003      	b.n	8001e5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	041a      	lsls	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	611a      	str	r2, [r3, #16]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e72:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fa1c 	bl	80012c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40010400 	.word	0x40010400

08001e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e12b      	b.n	8002102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff f9c2 	bl	8001248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	@ 0x24
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001efc:	f001 fd2a 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8001f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a81      	ldr	r2, [pc, #516]	@ (800210c <HAL_I2C_Init+0x274>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d807      	bhi.n	8001f1c <HAL_I2C_Init+0x84>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a80      	ldr	r2, [pc, #512]	@ (8002110 <HAL_I2C_Init+0x278>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	bf94      	ite	ls
 8001f14:	2301      	movls	r3, #1
 8001f16:	2300      	movhi	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e006      	b.n	8001f2a <HAL_I2C_Init+0x92>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a7d      	ldr	r2, [pc, #500]	@ (8002114 <HAL_I2C_Init+0x27c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0e7      	b.n	8002102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4a78      	ldr	r2, [pc, #480]	@ (8002118 <HAL_I2C_Init+0x280>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0c9b      	lsrs	r3, r3, #18
 8001f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a6a      	ldr	r2, [pc, #424]	@ (800210c <HAL_I2C_Init+0x274>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d802      	bhi.n	8001f6c <HAL_I2C_Init+0xd4>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	e009      	b.n	8001f80 <HAL_I2C_Init+0xe8>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a69      	ldr	r2, [pc, #420]	@ (800211c <HAL_I2C_Init+0x284>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	3301      	adds	r3, #1
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	495c      	ldr	r1, [pc, #368]	@ (800210c <HAL_I2C_Init+0x274>)
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	d819      	bhi.n	8001fd4 <HAL_I2C_Init+0x13c>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e59      	subs	r1, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fae:	1c59      	adds	r1, r3, #1
 8001fb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_I2C_Init+0x138>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1e59      	subs	r1, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fce:	e051      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e04f      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d111      	bne.n	8002000 <HAL_I2C_Init+0x168>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1e58      	subs	r0, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	440b      	add	r3, r1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e012      	b.n	8002026 <HAL_I2C_Init+0x18e>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	0099      	lsls	r1, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	fbb0 f3f3 	udiv	r3, r0, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Init+0x196>
 800202a:	2301      	movs	r3, #1
 800202c:	e022      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10e      	bne.n	8002054 <HAL_I2C_Init+0x1bc>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1e58      	subs	r0, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	440b      	add	r3, r1
 8002044:	fbb0 f3f3 	udiv	r3, r0, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002052:	e00f      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	0099      	lsls	r1, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	6809      	ldr	r1, [r1, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6911      	ldr	r1, [r2, #16]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68d2      	ldr	r2, [r2, #12]
 80020ae:	4311      	orrs	r1, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	430b      	orrs	r3, r1
 80020b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	000186a0 	.word	0x000186a0
 8002110:	001e847f 	.word	0x001e847f
 8002114:	003d08ff 	.word	0x003d08ff
 8002118:	431bde83 	.word	0x431bde83
 800211c:	10624dd3 	.word	0x10624dd3

08002120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	817b      	strh	r3, [r7, #10]
 8002132:	460b      	mov	r3, r1
 8002134:	813b      	strh	r3, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213a:	f7ff fba5 	bl	8001888 <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b20      	cmp	r3, #32
 800214a:	f040 80d9 	bne.w	8002300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2319      	movs	r3, #25
 8002154:	2201      	movs	r2, #1
 8002156:	496d      	ldr	r1, [pc, #436]	@ (800230c <HAL_I2C_Mem_Write+0x1ec>)
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fdfb 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
 8002166:	e0cc      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Mem_Write+0x56>
 8002172:	2302      	movs	r3, #2
 8002174:	e0c5      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d007      	beq.n	800219c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2221      	movs	r2, #33	@ 0x21
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2240      	movs	r2, #64	@ 0x40
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a4d      	ldr	r2, [pc, #308]	@ (8002310 <HAL_I2C_Mem_Write+0x1f0>)
 80021dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021de:	88f8      	ldrh	r0, [r7, #6]
 80021e0:	893a      	ldrh	r2, [r7, #8]
 80021e2:	8979      	ldrh	r1, [r7, #10]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4603      	mov	r3, r0
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fc32 	bl	8002a58 <I2C_RequestMemoryWrite>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d052      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e081      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fec0 	bl	8002f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d107      	bne.n	8002226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06b      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b04      	cmp	r3, #4
 8002266:	d11b      	bne.n	80022a0 <HAL_I2C_Mem_Write+0x180>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	d017      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1aa      	bne.n	80021fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 feb3 	bl	8003018 <I2C_WaitOnBTFFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d107      	bne.n	80022d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e016      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e000      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002300:	2302      	movs	r3, #2
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	00100002 	.word	0x00100002
 8002310:	ffff0000 	.word	0xffff0000

08002314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	@ 0x30
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	4608      	mov	r0, r1
 800231e:	4611      	mov	r1, r2
 8002320:	461a      	mov	r2, r3
 8002322:	4603      	mov	r3, r0
 8002324:	817b      	strh	r3, [r7, #10]
 8002326:	460b      	mov	r3, r1
 8002328:	813b      	strh	r3, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002332:	f7ff faa9 	bl	8001888 <HAL_GetTick>
 8002336:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b20      	cmp	r3, #32
 8002342:	f040 8250 	bne.w	80027e6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2319      	movs	r3, #25
 800234c:	2201      	movs	r2, #1
 800234e:	4982      	ldr	r1, [pc, #520]	@ (8002558 <HAL_I2C_Mem_Read+0x244>)
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fcff 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
 800235e:	e243      	b.n	80027e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_I2C_Mem_Read+0x5a>
 800236a:	2302      	movs	r3, #2
 800236c:	e23c      	b.n	80027e8 <HAL_I2C_Mem_Read+0x4d4>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d007      	beq.n	8002394 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2222      	movs	r2, #34	@ 0x22
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2240      	movs	r2, #64	@ 0x40
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80023c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a62      	ldr	r2, [pc, #392]	@ (800255c <HAL_I2C_Mem_Read+0x248>)
 80023d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023d6:	88f8      	ldrh	r0, [r7, #6]
 80023d8:	893a      	ldrh	r2, [r7, #8]
 80023da:	8979      	ldrh	r1, [r7, #10]
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4603      	mov	r3, r0
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fbcc 	bl	8002b84 <I2C_RequestMemoryRead>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1f8      	b.n	80027e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e1cc      	b.n	80027c0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242a:	2b01      	cmp	r3, #1
 800242c:	d11e      	bne.n	800246c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800243e:	b672      	cpsid	i
}
 8002440:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002466:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002468:	b662      	cpsie	i
}
 800246a:	e035      	b.n	80024d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	2b02      	cmp	r3, #2
 8002472:	d11e      	bne.n	80024b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002482:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002484:	b672      	cpsid	i
}
 8002486:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024ae:	b662      	cpsie	i
}
 80024b0:	e012      	b.n	80024d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80024c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80024d8:	e172      	b.n	80027c0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024de:	2b03      	cmp	r3, #3
 80024e0:	f200 811f 	bhi.w	8002722 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d123      	bne.n	8002534 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fdd9 	bl	80030a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e173      	b.n	80027e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002532:	e145      	b.n	80027c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002538:	2b02      	cmp	r3, #2
 800253a:	d152      	bne.n	80025e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002542:	2200      	movs	r2, #0
 8002544:	4906      	ldr	r1, [pc, #24]	@ (8002560 <HAL_I2C_Mem_Read+0x24c>)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fc04 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e148      	b.n	80027e8 <HAL_I2C_Mem_Read+0x4d4>
 8002556:	bf00      	nop
 8002558:	00100002 	.word	0x00100002
 800255c:	ffff0000 	.word	0xffff0000
 8002560:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025aa:	b662      	cpsie	i
}
 80025ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025e0:	e0ee      	b.n	80027c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e8:	2200      	movs	r2, #0
 80025ea:	4981      	ldr	r1, [pc, #516]	@ (80027f0 <HAL_I2C_Mem_Read+0x4dc>)
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fbb1 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0f5      	b.n	80027e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800260c:	b672      	cpsid	i
}
 800260e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002642:	4b6c      	ldr	r3, [pc, #432]	@ (80027f4 <HAL_I2C_Mem_Read+0x4e0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	08db      	lsrs	r3, r3, #3
 8002648:	4a6b      	ldr	r2, [pc, #428]	@ (80027f8 <HAL_I2C_Mem_Read+0x4e4>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0a1a      	lsrs	r2, r3, #8
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00da      	lsls	r2, r3, #3
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	3b01      	subs	r3, #1
 8002660:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d118      	bne.n	800269a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800268a:	b662      	cpsie	i
}
 800268c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0a6      	b.n	80027e8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d1d9      	bne.n	800265c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026ea:	b662      	cpsie	i
}
 80026ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002720:	e04e      	b.n	80027c0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002724:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fcbe 	bl	80030a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e058      	b.n	80027e8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b04      	cmp	r3, #4
 8002774:	d124      	bne.n	80027c0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277a:	2b03      	cmp	r3, #3
 800277c:	d107      	bne.n	800278e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f47f ae88 	bne.w	80024da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
  }
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3728      	adds	r7, #40	@ 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	00010004 	.word	0x00010004
 80027f4:	20000000 	.word	0x20000000
 80027f8:	14f8b589 	.word	0x14f8b589

080027fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	@ 0x28
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff f83c 	bl	8001888 <HAL_GetTick>
 8002810:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	f040 8111 	bne.w	8002a46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2319      	movs	r3, #25
 800282a:	2201      	movs	r2, #1
 800282c:	4988      	ldr	r1, [pc, #544]	@ (8002a50 <HAL_I2C_IsDeviceReady+0x254>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fa90 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	e104      	b.n	8002a48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2C_IsDeviceReady+0x50>
 8002848:	2302      	movs	r3, #2
 800284a:	e0fd      	b.n	8002a48 <HAL_I2C_IsDeviceReady+0x24c>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d007      	beq.n	8002872 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002880:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2224      	movs	r2, #36	@ 0x24
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a70      	ldr	r2, [pc, #448]	@ (8002a54 <HAL_I2C_IsDeviceReady+0x258>)
 8002894:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fa4e 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00d      	beq.n	80028da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028cc:	d103      	bne.n	80028d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0b6      	b.n	8002a48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028da:	897b      	ldrh	r3, [r7, #10]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe ffcd 	bl	8001888 <HAL_GetTick>
 80028ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	bf0c      	ite	eq
 80028fe:	2301      	moveq	r3, #1
 8002900:	2300      	movne	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800291e:	e025      	b.n	800296c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002920:	f7fe ffb2 	bl	8001888 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d302      	bcc.n	8002936 <HAL_I2C_IsDeviceReady+0x13a>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	22a0      	movs	r2, #160	@ 0xa0
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2ba0      	cmp	r3, #160	@ 0xa0
 8002976:	d005      	beq.n	8002984 <HAL_I2C_IsDeviceReady+0x188>
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_I2C_IsDeviceReady+0x188>
 800297e:	7dbb      	ldrb	r3, [r7, #22]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0cd      	beq.n	8002920 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d129      	bne.n	80029ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2319      	movs	r3, #25
 80029c6:	2201      	movs	r2, #1
 80029c8:	4921      	ldr	r1, [pc, #132]	@ (8002a50 <HAL_I2C_IsDeviceReady+0x254>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f9c2 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e036      	b.n	8002a48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e02c      	b.n	8002a48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2319      	movs	r3, #25
 8002a0e:	2201      	movs	r2, #1
 8002a10:	490f      	ldr	r1, [pc, #60]	@ (8002a50 <HAL_I2C_IsDeviceReady+0x254>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f99e 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e012      	b.n	8002a48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	f4ff af32 	bcc.w	8002896 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	00100002 	.word	0x00100002
 8002a54:	ffff0000 	.word	0xffff0000

08002a58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	817b      	strh	r3, [r7, #10]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	813b      	strh	r3, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f960 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa8:	d103      	bne.n	8002ab2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e05f      	b.n	8002b76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ac4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	492d      	ldr	r1, [pc, #180]	@ (8002b80 <I2C_RequestMemoryWrite+0x128>)
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f9bb 	bl	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e04c      	b.n	8002b76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af4:	6a39      	ldr	r1, [r7, #32]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa46 	bl	8002f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d107      	bne.n	8002b1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e02b      	b.n	8002b76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b24:	893b      	ldrh	r3, [r7, #8]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	e021      	b.n	8002b74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b30:	893b      	ldrh	r3, [r7, #8]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b40:	6a39      	ldr	r1, [r7, #32]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fa20 	bl	8002f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d107      	bne.n	8002b66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e005      	b.n	8002b76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6a:	893b      	ldrh	r3, [r7, #8]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	00010002 	.word	0x00010002

08002b84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	817b      	strh	r3, [r7, #10]
 8002b96:	460b      	mov	r3, r1
 8002b98:	813b      	strh	r3, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f8c2 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00d      	beq.n	8002bf2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be4:	d103      	bne.n	8002bee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0aa      	b.n	8002d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf2:	897b      	ldrh	r3, [r7, #10]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	4952      	ldr	r1, [pc, #328]	@ (8002d50 <I2C_RequestMemoryRead+0x1cc>)
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f91d 	bl	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e097      	b.n	8002d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f9a8 	bl	8002f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e076      	b.n	8002d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c60:	893b      	ldrh	r3, [r7, #8]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	611a      	str	r2, [r3, #16]
 8002c6a:	e021      	b.n	8002cb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c6c:	893b      	ldrh	r3, [r7, #8]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	6a39      	ldr	r1, [r7, #32]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f982 	bl	8002f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d107      	bne.n	8002ca2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e050      	b.n	8002d48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca6:	893b      	ldrh	r3, [r7, #8]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb2:	6a39      	ldr	r1, [r7, #32]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f967 	bl	8002f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00d      	beq.n	8002cdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d107      	bne.n	8002cd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e035      	b.n	8002d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f82b 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d12:	d103      	bne.n	8002d1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e013      	b.n	8002d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d20:	897b      	ldrh	r3, [r7, #10]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	6a3a      	ldr	r2, [r7, #32]
 8002d34:	4906      	ldr	r1, [pc, #24]	@ (8002d50 <I2C_RequestMemoryRead+0x1cc>)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f886 	bl	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	00010002 	.word	0x00010002

08002d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d64:	e048      	b.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d044      	beq.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7fe fd8b 	bl	8001888 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d139      	bne.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d10d      	bne.n	8002daa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	43da      	mvns	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	e00c      	b.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d116      	bne.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e023      	b.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	0c1b      	lsrs	r3, r3, #16
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10d      	bne.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	e00c      	b.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	43da      	mvns	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d093      	beq.n	8002d66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e56:	e071      	b.n	8002f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e66:	d123      	bne.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e067      	b.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d041      	beq.n	8002f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb8:	f7fe fce6 	bl	8001888 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d302      	bcc.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d136      	bne.n	8002f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10c      	bne.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e00b      	b.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e021      	b.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10c      	bne.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4013      	ands	r3, r2
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf14      	ite	ne
 8002f58:	2301      	movne	r3, #1
 8002f5a:	2300      	moveq	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	e00b      	b.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f47f af6d 	bne.w	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f94:	e034      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f8e3 	bl	8003162 <I2C_IsAcknowledgeFailed>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e034      	b.n	8003010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d028      	beq.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe fc6b 	bl	8001888 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11d      	bne.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fce:	2b80      	cmp	r3, #128	@ 0x80
 8002fd0:	d016      	beq.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b80      	cmp	r3, #128	@ 0x80
 800300c:	d1c3      	bne.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003024:	e034      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f89b 	bl	8003162 <I2C_IsAcknowledgeFailed>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e034      	b.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d028      	beq.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7fe fc23 	bl	8001888 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d11d      	bne.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d016      	beq.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e007      	b.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b04      	cmp	r3, #4
 800309c:	d1c3      	bne.n	8003026 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030b4:	e049      	b.n	800314a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d119      	bne.n	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0210 	mvn.w	r2, #16
 80030cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e030      	b.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f8:	f7fe fbc6 	bl	8001888 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11d      	bne.n	800314a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003118:	2b40      	cmp	r3, #64	@ 0x40
 800311a:	d016      	beq.n	800314a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f043 0220 	orr.w	r2, r3, #32
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e007      	b.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003154:	2b40      	cmp	r3, #64	@ 0x40
 8003156:	d1ae      	bne.n	80030b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003178:	d11b      	bne.n	80031b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003182:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	f043 0204 	orr.w	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e272      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8087 	beq.w	80032ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e0:	4b92      	ldr	r3, [pc, #584]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d00c      	beq.n	8003206 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031ec:	4b8f      	ldr	r3, [pc, #572]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d112      	bne.n	800321e <HAL_RCC_OscConfig+0x5e>
 80031f8:	4b8c      	ldr	r3, [pc, #560]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003204:	d10b      	bne.n	800321e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003206:	4b89      	ldr	r3, [pc, #548]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d06c      	beq.n	80032ec <HAL_RCC_OscConfig+0x12c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d168      	bne.n	80032ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e24c      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x76>
 8003228:	4b80      	ldr	r3, [pc, #512]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a7f      	ldr	r2, [pc, #508]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800322e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e02e      	b.n	8003294 <HAL_RCC_OscConfig+0xd4>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x98>
 800323e:	4b7b      	ldr	r3, [pc, #492]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7a      	ldr	r2, [pc, #488]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b78      	ldr	r3, [pc, #480]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a77      	ldr	r2, [pc, #476]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e01d      	b.n	8003294 <HAL_RCC_OscConfig+0xd4>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0xbc>
 8003262:	4b72      	ldr	r3, [pc, #456]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a71      	ldr	r2, [pc, #452]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b6f      	ldr	r3, [pc, #444]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a6e      	ldr	r2, [pc, #440]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0xd4>
 800327c:	4b6b      	ldr	r3, [pc, #428]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6a      	ldr	r2, [pc, #424]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b68      	ldr	r3, [pc, #416]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a67      	ldr	r2, [pc, #412]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003292:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe faf4 	bl	8001888 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe faf0 	bl	8001888 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e200      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b5d      	ldr	r3, [pc, #372]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0xe4>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe fae0 	bl	8001888 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fadc 	bl	8001888 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e1ec      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032de:	4b53      	ldr	r3, [pc, #332]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x10c>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d063      	beq.n	80033c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fa:	4b4c      	ldr	r3, [pc, #304]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003306:	4b49      	ldr	r3, [pc, #292]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b08      	cmp	r3, #8
 8003310:	d11c      	bne.n	800334c <HAL_RCC_OscConfig+0x18c>
 8003312:	4b46      	ldr	r3, [pc, #280]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d116      	bne.n	800334c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331e:	4b43      	ldr	r3, [pc, #268]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_RCC_OscConfig+0x176>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d001      	beq.n	8003336 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e1c0      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003336:	4b3d      	ldr	r3, [pc, #244]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4939      	ldr	r1, [pc, #228]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	e03a      	b.n	80033c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003354:	4b36      	ldr	r3, [pc, #216]	@ (8003430 <HAL_RCC_OscConfig+0x270>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe fa95 	bl	8001888 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003362:	f7fe fa91 	bl	8001888 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1a1      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003374:	4b2d      	ldr	r3, [pc, #180]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b2a      	ldr	r3, [pc, #168]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4927      	ldr	r1, [pc, #156]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]
 8003394:	e015      	b.n	80033c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003396:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <HAL_RCC_OscConfig+0x270>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe fa74 	bl	8001888 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7fe fa70 	bl	8001888 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e180      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d03a      	beq.n	8003444 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4b17      	ldr	r3, [pc, #92]	@ (8003434 <HAL_RCC_OscConfig+0x274>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fe fa54 	bl	8001888 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fe fa50 	bl	8001888 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e160      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003402:	2001      	movs	r0, #1
 8003404:	f000 faba 	bl	800397c <RCC_Delay>
 8003408:	e01c      	b.n	8003444 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <HAL_RCC_OscConfig+0x274>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7fe fa3a 	bl	8001888 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003416:	e00f      	b.n	8003438 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003418:	f7fe fa36 	bl	8001888 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d908      	bls.n	8003438 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e146      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	42420000 	.word	0x42420000
 8003434:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	4b92      	ldr	r3, [pc, #584]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e9      	bne.n	8003418 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a6 	beq.w	800359e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003456:	4b8b      	ldr	r3, [pc, #556]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4b88      	ldr	r3, [pc, #544]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a87      	ldr	r2, [pc, #540]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346c:	61d3      	str	r3, [r2, #28]
 800346e:	4b85      	ldr	r3, [pc, #532]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	4b82      	ldr	r3, [pc, #520]	@ (8003688 <HAL_RCC_OscConfig+0x4c8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d118      	bne.n	80034bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348a:	4b7f      	ldr	r3, [pc, #508]	@ (8003688 <HAL_RCC_OscConfig+0x4c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7e      	ldr	r2, [pc, #504]	@ (8003688 <HAL_RCC_OscConfig+0x4c8>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003496:	f7fe f9f7 	bl	8001888 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349e:	f7fe f9f3 	bl	8001888 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b64      	cmp	r3, #100	@ 0x64
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e103      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	4b75      	ldr	r3, [pc, #468]	@ (8003688 <HAL_RCC_OscConfig+0x4c8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x312>
 80034c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	e02d      	b.n	800352e <HAL_RCC_OscConfig+0x36e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x334>
 80034da:	4b6a      	ldr	r3, [pc, #424]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a69      	ldr	r2, [pc, #420]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6213      	str	r3, [r2, #32]
 80034e6:	4b67      	ldr	r3, [pc, #412]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a66      	ldr	r2, [pc, #408]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	e01c      	b.n	800352e <HAL_RCC_OscConfig+0x36e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0x356>
 80034fc:	4b61      	ldr	r3, [pc, #388]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a60      	ldr	r2, [pc, #384]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6213      	str	r3, [r2, #32]
 8003508:	4b5e      	ldr	r3, [pc, #376]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a5d      	ldr	r2, [pc, #372]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	e00b      	b.n	800352e <HAL_RCC_OscConfig+0x36e>
 8003516:	4b5b      	ldr	r3, [pc, #364]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a5a      	ldr	r2, [pc, #360]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6213      	str	r3, [r2, #32]
 8003522:	4b58      	ldr	r3, [pc, #352]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a57      	ldr	r2, [pc, #348]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d015      	beq.n	8003562 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fe f9a7 	bl	8001888 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fe f9a3 	bl	8001888 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0b1      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	4b4b      	ldr	r3, [pc, #300]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ee      	beq.n	800353e <HAL_RCC_OscConfig+0x37e>
 8003560:	e014      	b.n	800358c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fe f991 	bl	8001888 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fe f98d 	bl	8001888 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e09b      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	4b40      	ldr	r3, [pc, #256]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ee      	bne.n	800356a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b3c      	ldr	r3, [pc, #240]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	4a3b      	ldr	r2, [pc, #236]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800359c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8087 	beq.w	80036b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a8:	4b36      	ldr	r3, [pc, #216]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d061      	beq.n	8003678 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d146      	bne.n	800364a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035bc:	4b33      	ldr	r3, [pc, #204]	@ (800368c <HAL_RCC_OscConfig+0x4cc>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe f961 	bl	8001888 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fe f95d 	bl	8001888 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e06d      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035dc:	4b29      	ldr	r3, [pc, #164]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f0:	d108      	bne.n	8003604 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035f2:	4b24      	ldr	r3, [pc, #144]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4921      	ldr	r1, [pc, #132]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003604:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a19      	ldr	r1, [r3, #32]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	430b      	orrs	r3, r1
 8003616:	491b      	ldr	r1, [pc, #108]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <HAL_RCC_OscConfig+0x4cc>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe f931 	bl	8001888 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362a:	f7fe f92d 	bl	8001888 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e03d      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800363c:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x46a>
 8003648:	e035      	b.n	80036b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b10      	ldr	r3, [pc, #64]	@ (800368c <HAL_RCC_OscConfig+0x4cc>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe f91a 	bl	8001888 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe f916 	bl	8001888 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e026      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x498>
 8003676:	e01e      	b.n	80036b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e019      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
 8003684:	40021000 	.word	0x40021000
 8003688:	40007000 	.word	0x40007000
 800368c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003690:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <HAL_RCC_OscConfig+0x500>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000

080036c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0d0      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d910      	bls.n	8003708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b67      	ldr	r3, [pc, #412]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0207 	bic.w	r2, r3, #7
 80036ee:	4965      	ldr	r1, [pc, #404]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b63      	ldr	r3, [pc, #396]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0b8      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d020      	beq.n	8003756 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003720:	4b59      	ldr	r3, [pc, #356]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a58      	ldr	r2, [pc, #352]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800372a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003738:	4b53      	ldr	r3, [pc, #332]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a52      	ldr	r2, [pc, #328]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003742:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003744:	4b50      	ldr	r3, [pc, #320]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	494d      	ldr	r1, [pc, #308]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d040      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b47      	ldr	r3, [pc, #284]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d115      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e07f      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003782:	4b41      	ldr	r3, [pc, #260]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e073      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003792:	4b3d      	ldr	r3, [pc, #244]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e06b      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f023 0203 	bic.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4936      	ldr	r1, [pc, #216]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b4:	f7fe f868 	bl	8001888 <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037bc:	f7fe f864 	bl	8001888 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e053      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 020c 	and.w	r2, r3, #12
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1eb      	bne.n	80037bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e4:	4b27      	ldr	r3, [pc, #156]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d210      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 0207 	bic.w	r2, r3, #7
 80037fa:	4922      	ldr	r1, [pc, #136]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e032      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003820:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4916      	ldr	r1, [pc, #88]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800383e:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	490e      	ldr	r1, [pc, #56]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003852:	f000 f821 	bl	8003898 <HAL_RCC_GetSysClockFreq>
 8003856:	4602      	mov	r2, r0
 8003858:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	490a      	ldr	r1, [pc, #40]	@ (800388c <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	5ccb      	ldrb	r3, [r1, r3]
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	4a09      	ldr	r2, [pc, #36]	@ (8003890 <HAL_RCC_ClockConfig+0x1cc>)
 800386c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800386e:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <HAL_RCC_ClockConfig+0x1d0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd ffc6 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40022000 	.word	0x40022000
 8003888:	40021000 	.word	0x40021000
 800388c:	08007a08 	.word	0x08007a08
 8003890:	20000000 	.word	0x20000000
 8003894:	20000004 	.word	0x20000004

08003898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038b2:	4b1e      	ldr	r3, [pc, #120]	@ (800392c <HAL_RCC_GetSysClockFreq+0x94>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d002      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x30>
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0x36>
 80038c6:	e027      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c8:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ca:	613b      	str	r3, [r7, #16]
      break;
 80038cc:	e027      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	0c9b      	lsrs	r3, r3, #18
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038d8:	5cd3      	ldrb	r3, [r2, r3]
 80038da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d010      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038e6:	4b11      	ldr	r3, [pc, #68]	@ (800392c <HAL_RCC_GetSysClockFreq+0x94>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0c5b      	lsrs	r3, r3, #17
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	4a11      	ldr	r2, [pc, #68]	@ (8003938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 80038fa:	fb03 f202 	mul.w	r2, r3, r2
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e004      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a0c      	ldr	r2, [pc, #48]	@ (800393c <HAL_RCC_GetSysClockFreq+0xa4>)
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	613b      	str	r3, [r7, #16]
      break;
 8003916:	e002      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 800391a:	613b      	str	r3, [r7, #16]
      break;
 800391c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391e:	693b      	ldr	r3, [r7, #16]
}
 8003920:	4618      	mov	r0, r3
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	007a1200 	.word	0x007a1200
 8003934:	0800de30 	.word	0x0800de30
 8003938:	0800de40 	.word	0x0800de40
 800393c:	003d0900 	.word	0x003d0900

08003940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b02      	ldr	r3, [pc, #8]	@ (8003950 <HAL_RCC_GetHCLKFreq+0x10>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	20000000 	.word	0x20000000

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003958:	f7ff fff2 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	@ (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	08007a18 	.word	0x08007a18

0800397c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003984:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <RCC_Delay+0x34>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <RCC_Delay+0x38>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0a5b      	lsrs	r3, r3, #9
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003998:	bf00      	nop
  }
  while (Delay --);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1e5a      	subs	r2, r3, #1
 800399e:	60fa      	str	r2, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f9      	bne.n	8003998 <RCC_Delay+0x1c>
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	20000000 	.word	0x20000000
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e041      	b.n	8003a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd fe88 	bl	80016f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 fab2 	bl	8003f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e041      	b.n	8003aec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f839 	bl	8003af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f000 fa63 	bl	8003f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_TIM_PWM_Start+0x24>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e022      	b.n	8003b72 <HAL_TIM_PWM_Start+0x6a>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d109      	bne.n	8003b46 <HAL_TIM_PWM_Start+0x3e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e015      	b.n	8003b72 <HAL_TIM_PWM_Start+0x6a>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d109      	bne.n	8003b60 <HAL_TIM_PWM_Start+0x58>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e008      	b.n	8003b72 <HAL_TIM_PWM_Start+0x6a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e05e      	b.n	8003c38 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x82>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b88:	e013      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xaa>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_PWM_Start+0x92>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b98:	e00b      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xaa>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d104      	bne.n	8003baa <HAL_TIM_PWM_Start+0xa2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba8:	e003      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xaa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fc5c 	bl	8004478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c40 <HAL_TIM_PWM_Start+0x138>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a18      	ldr	r2, [pc, #96]	@ (8003c40 <HAL_TIM_PWM_Start+0x138>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_TIM_PWM_Start+0xfa>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d009      	beq.n	8003c02 <HAL_TIM_PWM_Start+0xfa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a14      	ldr	r2, [pc, #80]	@ (8003c44 <HAL_TIM_PWM_Start+0x13c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_TIM_PWM_Start+0xfa>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a12      	ldr	r2, [pc, #72]	@ (8003c48 <HAL_TIM_PWM_Start+0x140>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d111      	bne.n	8003c26 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d010      	beq.n	8003c36 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c24:	e007      	b.n	8003c36 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800

08003c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e0ae      	b.n	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	f200 809f 	bhi.w	8003db8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003cb5 	.word	0x08003cb5
 8003c84:	08003db9 	.word	0x08003db9
 8003c88:	08003db9 	.word	0x08003db9
 8003c8c:	08003db9 	.word	0x08003db9
 8003c90:	08003cf5 	.word	0x08003cf5
 8003c94:	08003db9 	.word	0x08003db9
 8003c98:	08003db9 	.word	0x08003db9
 8003c9c:	08003db9 	.word	0x08003db9
 8003ca0:	08003d37 	.word	0x08003d37
 8003ca4:	08003db9 	.word	0x08003db9
 8003ca8:	08003db9 	.word	0x08003db9
 8003cac:	08003db9 	.word	0x08003db9
 8003cb0:	08003d77 	.word	0x08003d77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f9be 	bl	800403c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0208 	orr.w	r2, r2, #8
 8003cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0204 	bic.w	r2, r2, #4
 8003cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6999      	ldr	r1, [r3, #24]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	619a      	str	r2, [r3, #24]
      break;
 8003cf2:	e064      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fa04 	bl	8004108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	619a      	str	r2, [r3, #24]
      break;
 8003d34:	e043      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fa4d 	bl	80041dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0208 	orr.w	r2, r2, #8
 8003d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0204 	bic.w	r2, r2, #4
 8003d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69d9      	ldr	r1, [r3, #28]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	61da      	str	r2, [r3, #28]
      break;
 8003d74:	e023      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fa97 	bl	80042b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	021a      	lsls	r2, r3, #8
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	61da      	str	r2, [r3, #28]
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	75fb      	strb	r3, [r7, #23]
      break;
 8003dbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_TIM_ConfigClockSource+0x1c>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e0b4      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x186>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e24:	d03e      	beq.n	8003ea4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2a:	f200 8087 	bhi.w	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e32:	f000 8086 	beq.w	8003f42 <HAL_TIM_ConfigClockSource+0x172>
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3a:	d87f      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b70      	cmp	r3, #112	@ 0x70
 8003e3e:	d01a      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0xa6>
 8003e40:	2b70      	cmp	r3, #112	@ 0x70
 8003e42:	d87b      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b60      	cmp	r3, #96	@ 0x60
 8003e46:	d050      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x11a>
 8003e48:	2b60      	cmp	r3, #96	@ 0x60
 8003e4a:	d877      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b50      	cmp	r3, #80	@ 0x50
 8003e4e:	d03c      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0xfa>
 8003e50:	2b50      	cmp	r3, #80	@ 0x50
 8003e52:	d873      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b40      	cmp	r3, #64	@ 0x40
 8003e56:	d058      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x13a>
 8003e58:	2b40      	cmp	r3, #64	@ 0x40
 8003e5a:	d86f      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b30      	cmp	r3, #48	@ 0x30
 8003e5e:	d064      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e60:	2b30      	cmp	r3, #48	@ 0x30
 8003e62:	d86b      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d060      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d867      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d05c      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d05a      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e74:	e062      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e86:	f000 fad8 	bl	800443a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	609a      	str	r2, [r3, #8]
      break;
 8003ea2:	e04f      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eb4:	f000 fac1 	bl	800443a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ec6:	609a      	str	r2, [r3, #8]
      break;
 8003ec8:	e03c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f000 fa38 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2150      	movs	r1, #80	@ 0x50
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fa8f 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 8003ee8:	e02c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 fa56 	bl	80043a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2160      	movs	r1, #96	@ 0x60
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fa7f 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 8003f08:	e01c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 fa18 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2140      	movs	r1, #64	@ 0x40
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fa6f 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 8003f28:	e00c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f000 fa66 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 8003f3a:	e003      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f40:	e000      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a2f      	ldr	r2, [pc, #188]	@ (8004030 <TIM_Base_SetConfig+0xd0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x30>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x30>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a2c      	ldr	r2, [pc, #176]	@ (8004034 <TIM_Base_SetConfig+0xd4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x30>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8004038 <TIM_Base_SetConfig+0xd8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	@ (8004030 <TIM_Base_SetConfig+0xd0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb0:	d007      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004034 <TIM_Base_SetConfig+0xd4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8004038 <TIM_Base_SetConfig+0xd8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8004030 <TIM_Base_SetConfig+0xd0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d103      	bne.n	8004008 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	611a      	str	r2, [r3, #16]
  }
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40000400 	.word	0x40000400
 8004038:	40000800 	.word	0x40000800

0800403c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f023 0201 	bic.w	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800406a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0302 	bic.w	r3, r3, #2
 8004084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a1c      	ldr	r2, [pc, #112]	@ (8004104 <TIM_OC1_SetConfig+0xc8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10c      	bne.n	80040b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0308 	bic.w	r3, r3, #8
 800409e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f023 0304 	bic.w	r3, r3, #4
 80040b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a13      	ldr	r2, [pc, #76]	@ (8004104 <TIM_OC1_SetConfig+0xc8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d111      	bne.n	80040de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00

08004108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f023 0210 	bic.w	r2, r3, #16
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f023 0320 	bic.w	r3, r3, #32
 8004152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a1d      	ldr	r2, [pc, #116]	@ (80041d8 <TIM_OC2_SetConfig+0xd0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d10d      	bne.n	8004184 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800416e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004182:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a14      	ldr	r2, [pc, #80]	@ (80041d8 <TIM_OC2_SetConfig+0xd0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d113      	bne.n	80041b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	621a      	str	r2, [r3, #32]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr
 80041d8:	40012c00 	.word	0x40012c00

080041dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1d      	ldr	r2, [pc, #116]	@ (80042ac <TIM_OC3_SetConfig+0xd0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a14      	ldr	r2, [pc, #80]	@ (80042ac <TIM_OC3_SetConfig+0xd0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d113      	bne.n	8004286 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	621a      	str	r2, [r3, #32]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40012c00 	.word	0x40012c00

080042b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0f      	ldr	r2, [pc, #60]	@ (8004348 <TIM_OC4_SetConfig+0x98>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d109      	bne.n	8004324 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	40012c00 	.word	0x40012c00

0800434c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0201 	bic.w	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 030a 	bic.w	r3, r3, #10
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0210 	bic.w	r2, r3, #16
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	031b      	lsls	r3, r3, #12
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	621a      	str	r2, [r3, #32]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr

08004406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	f043 0307 	orr.w	r3, r3, #7
 8004428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800443a:	b480      	push	{r7}
 800443c:	b087      	sub	sp, #28
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004454:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	431a      	orrs	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4313      	orrs	r3, r2
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	609a      	str	r2, [r3, #8]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2201      	movs	r2, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a1a      	ldr	r2, [r3, #32]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	43db      	mvns	r3, r3
 800449a:	401a      	ands	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e046      	b.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a16      	ldr	r2, [pc, #88]	@ (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00e      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004524:	d009      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a12      	ldr	r2, [pc, #72]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a10      	ldr	r2, [pc, #64]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10c      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	4313      	orrs	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800

0800457c <memset>:
 800457c:	4603      	mov	r3, r0
 800457e:	4402      	add	r2, r0
 8004580:	4293      	cmp	r3, r2
 8004582:	d100      	bne.n	8004586 <memset+0xa>
 8004584:	4770      	bx	lr
 8004586:	f803 1b01 	strb.w	r1, [r3], #1
 800458a:	e7f9      	b.n	8004580 <memset+0x4>

0800458c <__libc_init_array>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	2600      	movs	r6, #0
 8004590:	4d0c      	ldr	r5, [pc, #48]	@ (80045c4 <__libc_init_array+0x38>)
 8004592:	4c0d      	ldr	r4, [pc, #52]	@ (80045c8 <__libc_init_array+0x3c>)
 8004594:	1b64      	subs	r4, r4, r5
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	42a6      	cmp	r6, r4
 800459a:	d109      	bne.n	80045b0 <__libc_init_array+0x24>
 800459c:	f000 f828 	bl	80045f0 <_init>
 80045a0:	2600      	movs	r6, #0
 80045a2:	4d0a      	ldr	r5, [pc, #40]	@ (80045cc <__libc_init_array+0x40>)
 80045a4:	4c0a      	ldr	r4, [pc, #40]	@ (80045d0 <__libc_init_array+0x44>)
 80045a6:	1b64      	subs	r4, r4, r5
 80045a8:	10a4      	asrs	r4, r4, #2
 80045aa:	42a6      	cmp	r6, r4
 80045ac:	d105      	bne.n	80045ba <__libc_init_array+0x2e>
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b4:	4798      	blx	r3
 80045b6:	3601      	adds	r6, #1
 80045b8:	e7ee      	b.n	8004598 <__libc_init_array+0xc>
 80045ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80045be:	4798      	blx	r3
 80045c0:	3601      	adds	r6, #1
 80045c2:	e7f2      	b.n	80045aa <__libc_init_array+0x1e>
 80045c4:	0800de44 	.word	0x0800de44
 80045c8:	0800de44 	.word	0x0800de44
 80045cc:	0800de44 	.word	0x0800de44
 80045d0:	0800de48 	.word	0x0800de48

080045d4 <memcpy>:
 80045d4:	440a      	add	r2, r1
 80045d6:	4291      	cmp	r1, r2
 80045d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045dc:	d100      	bne.n	80045e0 <memcpy+0xc>
 80045de:	4770      	bx	lr
 80045e0:	b510      	push	{r4, lr}
 80045e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045e6:	4291      	cmp	r1, r2
 80045e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ec:	d1f9      	bne.n	80045e2 <memcpy+0xe>
 80045ee:	bd10      	pop	{r4, pc}

080045f0 <_init>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	bf00      	nop
 80045f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f6:	bc08      	pop	{r3}
 80045f8:	469e      	mov	lr, r3
 80045fa:	4770      	bx	lr

080045fc <_fini>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr
