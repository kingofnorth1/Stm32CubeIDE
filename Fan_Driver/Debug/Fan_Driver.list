
Fan_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ca38  080029c0  080029c0  000039c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3f8  0800f3f8  0001100c  2**0
                  CONTENTS
  4 .ARM          00000000  0800f3f8  0800f3f8  0001100c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f3f8  0800f3f8  0001100c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3f8  0800f3f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f3fc  0800f3fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800f400  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  0800f40c  0001100c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  0800f40c  000110c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001100c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094c5  00000000  00000000  00011035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da0  00000000  00000000  0001a4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0001c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081d  00000000  00000000  0001cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001bef  00000000  00000000  0001d59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c733  00000000  00000000  0001f18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084d22  00000000  00000000  0002b8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b05e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac0  00000000  00000000  000b0624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000b30e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080029a8 	.word	0x080029a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080029a8 	.word	0x080029a8

0800014c <LCD_DrawPoint>:
      入口数据：x,y 画点坐标
                color 点的颜色
      返回值：  无
******************************************************************************/
void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
 8000156:	460b      	mov	r3, r1
 8000158:	80bb      	strh	r3, [r7, #4]
 800015a:	4613      	mov	r3, r2
 800015c:	807b      	strh	r3, [r7, #2]
	LCD_Address_Set(x,y,x,y);//设置光标位置
 800015e:	88bb      	ldrh	r3, [r7, #4]
 8000160:	88fa      	ldrh	r2, [r7, #6]
 8000162:	88b9      	ldrh	r1, [r7, #4]
 8000164:	88f8      	ldrh	r0, [r7, #6]
 8000166:	f000 fa2b 	bl	80005c0 <LCD_Address_Set>
	LCD_WR_DATA(color);
 800016a:	887b      	ldrh	r3, [r7, #2]
 800016c:	4618      	mov	r0, r3
 800016e:	f000 f9db 	bl	8000528 <LCD_WR_DATA>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
	...

0800017c <LCD_ShowChar>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800017c:	b590      	push	{r4, r7, lr}
 800017e:	b087      	sub	sp, #28
 8000180:	af00      	add	r7, sp, #0
 8000182:	4604      	mov	r4, r0
 8000184:	4608      	mov	r0, r1
 8000186:	4611      	mov	r1, r2
 8000188:	461a      	mov	r2, r3
 800018a:	4623      	mov	r3, r4
 800018c:	80fb      	strh	r3, [r7, #6]
 800018e:	4603      	mov	r3, r0
 8000190:	80bb      	strh	r3, [r7, #4]
 8000192:	460b      	mov	r3, r1
 8000194:	70fb      	strb	r3, [r7, #3]
 8000196:	4613      	mov	r3, r2
 8000198:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800019a:	2300      	movs	r3, #0
 800019c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//一个字符所占字节大小
	uint16_t x0=x;
 800019e:	88fb      	ldrh	r3, [r7, #6]
 80001a0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80001a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80001a6:	085b      	lsrs	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80001aa:	7bfb      	ldrb	r3, [r7, #15]
 80001ac:	08db      	lsrs	r3, r3, #3
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	461a      	mov	r2, r3
 80001b2:	7bfb      	ldrb	r3, [r7, #15]
 80001b4:	f003 0307 	and.w	r3, r3, #7
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	bf14      	ite	ne
 80001be:	2301      	movne	r3, #1
 80001c0:	2300      	moveq	r3, #0
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	4413      	add	r3, r2
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80001cc:	b292      	uxth	r2, r2
 80001ce:	fb02 f303 	mul.w	r3, r2, r3
 80001d2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //得到偏移后的值
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	3b20      	subs	r3, #32
 80001d8:	70fb      	strb	r3, [r7, #3]
	LCD_Address_Set(x,y,x+sizex-1,y+sizey-1);  //设置光标位置
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	b29a      	uxth	r2, r3
 80001de:	88fb      	ldrh	r3, [r7, #6]
 80001e0:	4413      	add	r3, r2
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	3b01      	subs	r3, #1
 80001e6:	b29c      	uxth	r4, r3
 80001e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	88bb      	ldrh	r3, [r7, #4]
 80001f0:	4413      	add	r3, r2
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	3b01      	subs	r3, #1
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	88b9      	ldrh	r1, [r7, #4]
 80001fa:	88f8      	ldrh	r0, [r7, #6]
 80001fc:	4622      	mov	r2, r4
 80001fe:	f000 f9df 	bl	80005c0 <LCD_Address_Set>
	for(i=0;i<TypefaceNum;i++)
 8000202:	2300      	movs	r3, #0
 8000204:	827b      	strh	r3, [r7, #18]
 8000206:	e086      	b.n	8000316 <LCD_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[num][i];		       //调用6x12字体
 8000208:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800020c:	2b0c      	cmp	r3, #12
 800020e:	d10b      	bne.n	8000228 <LCD_ShowChar+0xac>
 8000210:	78fa      	ldrb	r2, [r7, #3]
 8000212:	8a79      	ldrh	r1, [r7, #18]
 8000214:	4845      	ldr	r0, [pc, #276]	@ (800032c <LCD_ShowChar+0x1b0>)
 8000216:	4613      	mov	r3, r2
 8000218:	005b      	lsls	r3, r3, #1
 800021a:	4413      	add	r3, r2
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	4403      	add	r3, r0
 8000220:	440b      	add	r3, r1
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	75fb      	strb	r3, [r7, #23]
 8000226:	e028      	b.n	800027a <LCD_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[num][i];		 //调用8x16字体
 8000228:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800022c:	2b10      	cmp	r3, #16
 800022e:	d108      	bne.n	8000242 <LCD_ShowChar+0xc6>
 8000230:	78fa      	ldrb	r2, [r7, #3]
 8000232:	8a7b      	ldrh	r3, [r7, #18]
 8000234:	493e      	ldr	r1, [pc, #248]	@ (8000330 <LCD_ShowChar+0x1b4>)
 8000236:	0112      	lsls	r2, r2, #4
 8000238:	440a      	add	r2, r1
 800023a:	4413      	add	r3, r2
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	75fb      	strb	r3, [r7, #23]
 8000240:	e01b      	b.n	800027a <LCD_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[num][i];		 //调用12x24字体
 8000242:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000246:	2b18      	cmp	r3, #24
 8000248:	d10b      	bne.n	8000262 <LCD_ShowChar+0xe6>
 800024a:	78fa      	ldrb	r2, [r7, #3]
 800024c:	8a79      	ldrh	r1, [r7, #18]
 800024e:	4839      	ldr	r0, [pc, #228]	@ (8000334 <LCD_ShowChar+0x1b8>)
 8000250:	4613      	mov	r3, r2
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	4413      	add	r3, r2
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4403      	add	r3, r0
 800025a:	440b      	add	r3, r1
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	75fb      	strb	r3, [r7, #23]
 8000260:	e00b      	b.n	800027a <LCD_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[num][i];		 //调用16x32字体
 8000262:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000266:	2b20      	cmp	r3, #32
 8000268:	d15b      	bne.n	8000322 <LCD_ShowChar+0x1a6>
 800026a:	78fa      	ldrb	r2, [r7, #3]
 800026c:	8a7b      	ldrh	r3, [r7, #18]
 800026e:	4932      	ldr	r1, [pc, #200]	@ (8000338 <LCD_ShowChar+0x1bc>)
 8000270:	0192      	lsls	r2, r2, #6
 8000272:	440a      	add	r2, r1
 8000274:	4413      	add	r3, r2
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800027a:	2300      	movs	r3, #0
 800027c:	75bb      	strb	r3, [r7, #22]
 800027e:	e044      	b.n	800030a <LCD_ShowChar+0x18e>
		{
			if(!mode)//非叠加模式
 8000280:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000284:	2b00      	cmp	r3, #0
 8000286:	d120      	bne.n	80002ca <LCD_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000288:	7dfa      	ldrb	r2, [r7, #23]
 800028a:	7dbb      	ldrb	r3, [r7, #22]
 800028c:	fa42 f303 	asr.w	r3, r2, r3
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d004      	beq.n	80002a2 <LCD_ShowChar+0x126>
 8000298:	883b      	ldrh	r3, [r7, #0]
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f944 	bl	8000528 <LCD_WR_DATA>
 80002a0:	e003      	b.n	80002aa <LCD_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 80002a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f93f 	bl	8000528 <LCD_WR_DATA>
				m++;
 80002aa:	7d7b      	ldrb	r3, [r7, #21]
 80002ac:	3301      	adds	r3, #1
 80002ae:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80002b0:	7d7b      	ldrb	r3, [r7, #21]
 80002b2:	7bfa      	ldrb	r2, [r7, #15]
 80002b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80002b8:	fb01 f202 	mul.w	r2, r1, r2
 80002bc:	1a9b      	subs	r3, r3, r2
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d11f      	bne.n	8000304 <LCD_ShowChar+0x188>
				{
					m=0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	757b      	strb	r3, [r7, #21]
					break;
 80002c8:	e022      	b.n	8000310 <LCD_ShowChar+0x194>
				}
			}
			else//叠加模式
			{
				if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);//画一个点
 80002ca:	7dfa      	ldrb	r2, [r7, #23]
 80002cc:	7dbb      	ldrb	r3, [r7, #22]
 80002ce:	fa42 f303 	asr.w	r3, r2, r3
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d005      	beq.n	80002e6 <LCD_ShowChar+0x16a>
 80002da:	883a      	ldrh	r2, [r7, #0]
 80002dc:	88b9      	ldrh	r1, [r7, #4]
 80002de:	88fb      	ldrh	r3, [r7, #6]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff33 	bl	800014c <LCD_DrawPoint>
				x++;
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	3301      	adds	r3, #1
 80002ea:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80002ec:	88fa      	ldrh	r2, [r7, #6]
 80002ee:	8a3b      	ldrh	r3, [r7, #16]
 80002f0:	1ad2      	subs	r2, r2, r3
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d105      	bne.n	8000304 <LCD_ShowChar+0x188>
				{
					x=x0;
 80002f8:	8a3b      	ldrh	r3, [r7, #16]
 80002fa:	80fb      	strh	r3, [r7, #6]
					y++;
 80002fc:	88bb      	ldrh	r3, [r7, #4]
 80002fe:	3301      	adds	r3, #1
 8000300:	80bb      	strh	r3, [r7, #4]
					break;
 8000302:	e005      	b.n	8000310 <LCD_ShowChar+0x194>
		for(t=0;t<8;t++)
 8000304:	7dbb      	ldrb	r3, [r7, #22]
 8000306:	3301      	adds	r3, #1
 8000308:	75bb      	strb	r3, [r7, #22]
 800030a:	7dbb      	ldrb	r3, [r7, #22]
 800030c:	2b07      	cmp	r3, #7
 800030e:	d9b7      	bls.n	8000280 <LCD_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8000310:	8a7b      	ldrh	r3, [r7, #18]
 8000312:	3301      	adds	r3, #1
 8000314:	827b      	strh	r3, [r7, #18]
 8000316:	8a7a      	ldrh	r2, [r7, #18]
 8000318:	89bb      	ldrh	r3, [r7, #12]
 800031a:	429a      	cmp	r2, r3
 800031c:	f4ff af74 	bcc.w	8000208 <LCD_ShowChar+0x8c>
 8000320:	e000      	b.n	8000324 <LCD_ShowChar+0x1a8>
		else return;
 8000322:	bf00      	nop
				}
			}
		}
	}
}
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	bd90      	pop	{r4, r7, pc}
 800032a:	bf00      	nop
 800032c:	080029c8 	.word	0x080029c8
 8000330:	08002e3c 	.word	0x08002e3c
 8000334:	0800342c 	.word	0x0800342c
 8000338:	080045fc 	.word	0x080045fc

0800033c <LCD_ShowString>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowString(uint16_t x,uint16_t y,const uint8_t *p,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b089      	sub	sp, #36	@ 0x24
 8000340:	af04      	add	r7, sp, #16
 8000342:	60ba      	str	r2, [r7, #8]
 8000344:	461a      	mov	r2, r3
 8000346:	4603      	mov	r3, r0
 8000348:	81fb      	strh	r3, [r7, #14]
 800034a:	460b      	mov	r3, r1
 800034c:	81bb      	strh	r3, [r7, #12]
 800034e:	4613      	mov	r3, r2
 8000350:	80fb      	strh	r3, [r7, #6]
	while(*p!='\0')
 8000352:	e01a      	b.n	800038a <LCD_ShowString+0x4e>
	{
		LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	88fc      	ldrh	r4, [r7, #6]
 800035a:	89b9      	ldrh	r1, [r7, #12]
 800035c:	89f8      	ldrh	r0, [r7, #14]
 800035e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000362:	9302      	str	r3, [sp, #8]
 8000364:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	8c3b      	ldrh	r3, [r7, #32]
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	4623      	mov	r3, r4
 8000370:	f7ff ff04 	bl	800017c <LCD_ShowChar>
		x+=sizey/2;
 8000374:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000378:	085b      	lsrs	r3, r3, #1
 800037a:	b2db      	uxtb	r3, r3
 800037c:	461a      	mov	r2, r3
 800037e:	89fb      	ldrh	r3, [r7, #14]
 8000380:	4413      	add	r3, r2
 8000382:	81fb      	strh	r3, [r7, #14]
		p++;
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	3301      	adds	r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
	while(*p!='\0')
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d1e0      	bne.n	8000354 <LCD_ShowString+0x18>
	}
}
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	bd90      	pop	{r4, r7, pc}

0800039c <LCD_ShowPicture>:
                width  图片宽度
                pic[]  图片数组
      返回值：  无
******************************************************************************/
void LCD_ShowPicture(const uint8_t *address, uint16_t startX, uint16_t startY)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b087      	sub	sp, #28
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	807b      	strh	r3, [r7, #2]
 80003a8:	4613      	mov	r3, r2
 80003aa:	803b      	strh	r3, [r7, #0]
	uint16_t scan = address[0];//扫描模式  Bit7：0：自左至右扫描，1：自右至左扫描。Bit6：0：自顶至底扫描，1：自底至顶扫描。Bit5：0：字节内象素数据从高位到低位排列，1：字节内象素数据从低位到高位排列。Bit4：0：WORD类型高低位字节顺序与PC相同，1：WORD类型高低位字节顺序与PC相反。Bit32： 保留。Bit10：[00]水平扫描，[01]垂直扫描，[10]数据水平，字节垂直，[11]数据垂直，字节水平。
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	827b      	strh	r3, [r7, #18]
	uint16_t gray = address[1];
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3301      	adds	r3, #1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	823b      	strh	r3, [r7, #16]
	uint16_t image_width = address[2];//图片宽
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3302      	adds	r3, #2
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	81fb      	strh	r3, [r7, #14]
	uint16_t image_hight = address[4];//图片高
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3304      	adds	r3, #4
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	81bb      	strh	r3, [r7, #12]
	uint16_t is565 = address[4];   //代表颜色格式
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3304      	adds	r3, #4
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	817b      	strh	r3, [r7, #10]
	uint16_t rgb = address[6];	//RGB颜色分量排列顺序
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3306      	adds	r3, #6
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	813b      	strh	r3, [r7, #8]
	uint16_t x,y = address[7];
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3307      	adds	r3, #7
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	82bb      	strh	r3, [r7, #20]


	LCD_Address_Set(startX, startY, startX+image_width-1, startY+image_hight-1);
 80003e2:	887a      	ldrh	r2, [r7, #2]
 80003e4:	89fb      	ldrh	r3, [r7, #14]
 80003e6:	4413      	add	r3, r2
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	3b01      	subs	r3, #1
 80003ec:	b29c      	uxth	r4, r3
 80003ee:	883a      	ldrh	r2, [r7, #0]
 80003f0:	89bb      	ldrh	r3, [r7, #12]
 80003f2:	4413      	add	r3, r2
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	3b01      	subs	r3, #1
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	8839      	ldrh	r1, [r7, #0]
 80003fc:	8878      	ldrh	r0, [r7, #2]
 80003fe:	4622      	mov	r2, r4
 8000400:	f000 f8de 	bl	80005c0 <LCD_Address_Set>
	for(y = 0; y < image_hight; y++)
 8000404:	2300      	movs	r3, #0
 8000406:	82bb      	strh	r3, [r7, #20]
 8000408:	e028      	b.n	800045c <LCD_ShowPicture+0xc0>
	{
		for(x = 0; x < image_width; x++)
 800040a:	2300      	movs	r3, #0
 800040c:	82fb      	strh	r3, [r7, #22]
 800040e:	e01e      	b.n	800044e <LCD_ShowPicture+0xb2>
		{
			//发送图片数据，每次发送16位,先发高八位
			LCD_WR_DATA8(address[y*2*image_width + 2*x+9]);
 8000410:	8abb      	ldrh	r3, [r7, #20]
 8000412:	89fa      	ldrh	r2, [r7, #14]
 8000414:	fb03 f202 	mul.w	r2, r3, r2
 8000418:	8afb      	ldrh	r3, [r7, #22]
 800041a:	4413      	add	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	3309      	adds	r3, #9
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4413      	add	r3, r2
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f85c 	bl	80004e4 <LCD_WR_DATA8>
			LCD_WR_DATA8(address[y*2*image_width + 2*x+8]);
 800042c:	8abb      	ldrh	r3, [r7, #20]
 800042e:	89fa      	ldrh	r2, [r7, #14]
 8000430:	fb03 f202 	mul.w	r2, r3, r2
 8000434:	8afb      	ldrh	r3, [r7, #22]
 8000436:	4413      	add	r3, r2
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	3308      	adds	r3, #8
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	4413      	add	r3, r2
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f000 f84e 	bl	80004e4 <LCD_WR_DATA8>
		for(x = 0; x < image_width; x++)
 8000448:	8afb      	ldrh	r3, [r7, #22]
 800044a:	3301      	adds	r3, #1
 800044c:	82fb      	strh	r3, [r7, #22]
 800044e:	8afa      	ldrh	r2, [r7, #22]
 8000450:	89fb      	ldrh	r3, [r7, #14]
 8000452:	429a      	cmp	r2, r3
 8000454:	d3dc      	bcc.n	8000410 <LCD_ShowPicture+0x74>
	for(y = 0; y < image_hight; y++)
 8000456:	8abb      	ldrh	r3, [r7, #20]
 8000458:	3301      	adds	r3, #1
 800045a:	82bb      	strh	r3, [r7, #20]
 800045c:	8aba      	ldrh	r2, [r7, #20]
 800045e:	89bb      	ldrh	r3, [r7, #12]
 8000460:	429a      	cmp	r2, r3
 8000462:	d3d2      	bcc.n	800040a <LCD_ShowPicture+0x6e>
		}
	}
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	371c      	adds	r7, #28
 800046a:	46bd      	mov	sp, r7
 800046c:	bd90      	pop	{r4, r7, pc}
	...

08000470 <LCD_Writ_Bus>:

#include "SPI/lcd_Init.h"

//LCD写入函数
void LCD_Writ_Bus(uint8_t dat)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i=0;i<8;i++)
 800047a:	2300      	movs	r3, #0
 800047c:	73fb      	strb	r3, [r7, #15]
 800047e:	e022      	b.n	80004c6 <LCD_Writ_Bus+0x56>
	{
		LCD_SCLK_Set();
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000486:	4816      	ldr	r0, [pc, #88]	@ (80004e0 <LCD_Writ_Bus+0x70>)
 8000488:	f001 f863 	bl	8001552 <HAL_GPIO_WritePin>
		if (dat&0x80){
 800048c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000490:	2b00      	cmp	r3, #0
 8000492:	da06      	bge.n	80004a2 <LCD_Writ_Bus+0x32>
			LCD_MOSI_Clr();
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800049a:	4811      	ldr	r0, [pc, #68]	@ (80004e0 <LCD_Writ_Bus+0x70>)
 800049c:	f001 f859 	bl	8001552 <HAL_GPIO_WritePin>
 80004a0:	e005      	b.n	80004ae <LCD_Writ_Bus+0x3e>
		}else {
			LCD_MOSI_Set();
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004a8:	480d      	ldr	r0, [pc, #52]	@ (80004e0 <LCD_Writ_Bus+0x70>)
 80004aa:	f001 f852 	bl	8001552 <HAL_GPIO_WritePin>
		}
		LCD_SCLK_Clr();
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004b4:	480a      	ldr	r0, [pc, #40]	@ (80004e0 <LCD_Writ_Bus+0x70>)
 80004b6:	f001 f84c 	bl	8001552 <HAL_GPIO_WritePin>
		dat<<=1;
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	71fb      	strb	r3, [r7, #7]
	for (i=0;i<8;i++)
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	3301      	adds	r3, #1
 80004c4:	73fb      	strb	r3, [r7, #15]
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	2b07      	cmp	r3, #7
 80004ca:	d9d9      	bls.n	8000480 <LCD_Writ_Bus+0x10>
	}
	LCD_SCLK_Set();
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d2:	4803      	ldr	r0, [pc, #12]	@ (80004e0 <LCD_Writ_Bus+0x70>)
 80004d4:	f001 f83d 	bl	8001552 <HAL_GPIO_WritePin>
}
 80004d8:	bf00      	nop
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010c00 	.word	0x40010c00

080004e4 <LCD_WR_DATA8>:

//LCD写入8位数据
void LCD_WR_DATA8(uint8_t dat)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	LCD_DC_Clr();
 80004ee:	2201      	movs	r2, #1
 80004f0:	2110      	movs	r1, #16
 80004f2:	480b      	ldr	r0, [pc, #44]	@ (8000520 <LCD_WR_DATA8+0x3c>)
 80004f4:	f001 f82d 	bl	8001552 <HAL_GPIO_WritePin>
	LCD_CS_Set();
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004fe:	4809      	ldr	r0, [pc, #36]	@ (8000524 <LCD_WR_DATA8+0x40>)
 8000500:	f001 f827 	bl	8001552 <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ffb2 	bl	8000470 <LCD_Writ_Bus>
	LCD_CS_Clr();
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000512:	4804      	ldr	r0, [pc, #16]	@ (8000524 <LCD_WR_DATA8+0x40>)
 8000514:	f001 f81d 	bl	8001552 <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40010c00 	.word	0x40010c00
 8000524:	40010800 	.word	0x40010800

08000528 <LCD_WR_DATA>:

//LCD写入16位数据
void LCD_WR_DATA(uint16_t dat)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	LCD_DC_Clr();
 8000532:	2201      	movs	r2, #1
 8000534:	2110      	movs	r1, #16
 8000536:	480f      	ldr	r0, [pc, #60]	@ (8000574 <LCD_WR_DATA+0x4c>)
 8000538:	f001 f80b 	bl	8001552 <HAL_GPIO_WritePin>
	LCD_CS_Set();
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000542:	480d      	ldr	r0, [pc, #52]	@ (8000578 <LCD_WR_DATA+0x50>)
 8000544:	f001 f805 	bl	8001552 <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat>>8);
 8000548:	88fb      	ldrh	r3, [r7, #6]
 800054a:	0a1b      	lsrs	r3, r3, #8
 800054c:	b29b      	uxth	r3, r3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff8d 	bl	8000470 <LCD_Writ_Bus>
	LCD_Writ_Bus(dat&0xFF);
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff88 	bl	8000470 <LCD_Writ_Bus>
	LCD_CS_Clr();
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000566:	4804      	ldr	r0, [pc, #16]	@ (8000578 <LCD_WR_DATA+0x50>)
 8000568:	f000 fff3 	bl	8001552 <HAL_GPIO_WritePin>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010c00 	.word	0x40010c00
 8000578:	40010800 	.word	0x40010800

0800057c <LCD_WR_REG>:

//LCD写入命令
void LCD_WR_REG(uint8_t dat)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	LCD_DC_Set();
 8000586:	2200      	movs	r2, #0
 8000588:	2110      	movs	r1, #16
 800058a:	480b      	ldr	r0, [pc, #44]	@ (80005b8 <LCD_WR_REG+0x3c>)
 800058c:	f000 ffe1 	bl	8001552 <HAL_GPIO_WritePin>
	LCD_CS_Set();
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000596:	4809      	ldr	r0, [pc, #36]	@ (80005bc <LCD_WR_REG+0x40>)
 8000598:	f000 ffdb 	bl	8001552 <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ff66 	bl	8000470 <LCD_Writ_Bus>
	LCD_CS_Clr();
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005aa:	4804      	ldr	r0, [pc, #16]	@ (80005bc <LCD_WR_REG+0x40>)
 80005ac:	f000 ffd1 	bl	8001552 <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	40010800 	.word	0x40010800

080005c0 <LCD_Address_Set>:

//设置起始和结束地址
//入口数据：x1,x2 设置列的起始和结束地址
//         y1,y2 设置行的起始和结束地址
void LCD_Address_Set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	4603      	mov	r3, r0
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
 80005da:	4613      	mov	r3, r2
 80005dc:	803b      	strh	r3, [r7, #0]
	if(USE_HORIZONTAL==0)
	{
		LCD_WR_REG(0x2a);//列地址设置
 80005de:	202a      	movs	r0, #42	@ 0x2a
 80005e0:	f7ff ffcc 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA(x1+52);
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	3334      	adds	r3, #52	@ 0x34
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff9c 	bl	8000528 <LCD_WR_DATA>
		LCD_WR_DATA(x2+52);
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	3334      	adds	r3, #52	@ 0x34
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff96 	bl	8000528 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//行地址设置
 80005fc:	202b      	movs	r0, #43	@ 0x2b
 80005fe:	f7ff ffbd 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA(y1+40);
 8000602:	88bb      	ldrh	r3, [r7, #4]
 8000604:	3328      	adds	r3, #40	@ 0x28
 8000606:	b29b      	uxth	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff8d 	bl	8000528 <LCD_WR_DATA>
		LCD_WR_DATA(y2+40);
 800060e:	883b      	ldrh	r3, [r7, #0]
 8000610:	3328      	adds	r3, #40	@ 0x28
 8000612:	b29b      	uxth	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff87 	bl	8000528 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//储存器写
 800061a:	202c      	movs	r0, #44	@ 0x2c
 800061c:	f7ff ffae 	bl	800057c <LCD_WR_REG>
		LCD_WR_REG(0x2b);//行地址设置
		LCD_WR_DATA(y1+52);
		LCD_WR_DATA(y2+52);
		LCD_WR_REG(0x2c);//储存器写
	}
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}

08000628 <LCD_clear>:

void LCD_clear(void)
  {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
    unsigned int ROW,column;
  LCD_WR_REG(0x2a);     //Column address set
 800062e:	202a      	movs	r0, #42	@ 0x2a
 8000630:	f7ff ffa4 	bl	800057c <LCD_WR_REG>
  LCD_WR_DATA8(0x00);    //start column
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ff55 	bl	80004e4 <LCD_WR_DATA8>
  LCD_WR_DATA8(0x34);
 800063a:	2034      	movs	r0, #52	@ 0x34
 800063c:	f7ff ff52 	bl	80004e4 <LCD_WR_DATA8>
//  LCD_WR_DATA8(0x28);
  LCD_WR_DATA8(0x00);    //end column
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ff4f 	bl	80004e4 <LCD_WR_DATA8>
  LCD_WR_DATA8(0xBA);
 8000646:	20ba      	movs	r0, #186	@ 0xba
 8000648:	f7ff ff4c 	bl	80004e4 <LCD_WR_DATA8>
//  LCD_WR_DATA8(0x17);

  LCD_WR_REG(0x2b);     //Row address set
 800064c:	202b      	movs	r0, #43	@ 0x2b
 800064e:	f7ff ff95 	bl	800057c <LCD_WR_REG>
  LCD_WR_DATA8(0x00);    //start row
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff ff46 	bl	80004e4 <LCD_WR_DATA8>
  LCD_WR_DATA8(0x28);
 8000658:	2028      	movs	r0, #40	@ 0x28
 800065a:	f7ff ff43 	bl	80004e4 <LCD_WR_DATA8>
//  LCD_WR_DATA8(0x34);
  LCD_WR_DATA8(0x01);    //end row
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff ff40 	bl	80004e4 <LCD_WR_DATA8>
  LCD_WR_DATA8(0x17);
 8000664:	2017      	movs	r0, #23
 8000666:	f7ff ff3d 	bl	80004e4 <LCD_WR_DATA8>
//  LCD_WR_DATA8(0xBA);
    LCD_WR_REG(0x2C);     //Memory write
 800066a:	202c      	movs	r0, #44	@ 0x2c
 800066c:	f7ff ff86 	bl	800057c <LCD_WR_REG>
    for(ROW=0;ROW<LCD_H;ROW++)             //ROW loop
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	e011      	b.n	800069a <LCD_clear+0x72>
      {
          for(column=0;column<LCD_W;column++)  //column loop
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	e008      	b.n	800068e <LCD_clear+0x66>
            {
				LCD_WR_DATA8(0x00);
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ff31 	bl	80004e4 <LCD_WR_DATA8>
				LCD_WR_DATA8(0x00);
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ff2e 	bl	80004e4 <LCD_WR_DATA8>
          for(column=0;column<LCD_W;column++)  //column loop
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2b86      	cmp	r3, #134	@ 0x86
 8000692:	d9f3      	bls.n	800067c <LCD_clear+0x54>
    for(ROW=0;ROW<LCD_H;ROW++)             //ROW loop
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2bef      	cmp	r3, #239	@ 0xef
 800069e:	d9ea      	bls.n	8000676 <LCD_clear+0x4e>
            }
      }
  }
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <LCD_Init>:
  }


//LCD初始化函数
void LCD_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
		LCD_SCLK_Clr();
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b6:	4876      	ldr	r0, [pc, #472]	@ (8000890 <LCD_Init+0x1e4>)
 80006b8:	f000 ff4b 	bl	8001552 <HAL_GPIO_WritePin>
		LCD_RES_Set();//复位
 80006bc:	2200      	movs	r2, #0
 80006be:	2120      	movs	r1, #32
 80006c0:	4873      	ldr	r0, [pc, #460]	@ (8000890 <LCD_Init+0x1e4>)
 80006c2:	f000 ff46 	bl	8001552 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80006c6:	2064      	movs	r0, #100	@ 0x64
 80006c8:	f000 fc76 	bl	8000fb8 <HAL_Delay>
		LCD_RES_Clr();
 80006cc:	2201      	movs	r2, #1
 80006ce:	2120      	movs	r1, #32
 80006d0:	486f      	ldr	r0, [pc, #444]	@ (8000890 <LCD_Init+0x1e4>)
 80006d2:	f000 ff3e 	bl	8001552 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80006d6:	2064      	movs	r0, #100	@ 0x64
 80006d8:	f000 fc6e 	bl	8000fb8 <HAL_Delay>

		LCD_BLK_Set();//打开背光
 80006dc:	2200      	movs	r2, #0
 80006de:	2108      	movs	r1, #8
 80006e0:	486b      	ldr	r0, [pc, #428]	@ (8000890 <LCD_Init+0x1e4>)
 80006e2:	f000 ff36 	bl	8001552 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80006e6:	2064      	movs	r0, #100	@ 0x64
 80006e8:	f000 fc66 	bl	8000fb8 <HAL_Delay>

		LCD_WR_REG(0x11);
 80006ec:	2011      	movs	r0, #17
 80006ee:	f7ff ff45 	bl	800057c <LCD_WR_REG>
		HAL_Delay(120);
 80006f2:	2078      	movs	r0, #120	@ 0x78
 80006f4:	f000 fc60 	bl	8000fb8 <HAL_Delay>
		//-----------------------ST7789V Frame rate setting-----------------//
		//************************************************
		LCD_WR_REG(0x3A);        //65k mode
 80006f8:	203a      	movs	r0, #58	@ 0x3a
 80006fa:	f7ff ff3f 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x05);
 80006fe:	2005      	movs	r0, #5
 8000700:	f7ff fef0 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_REG(0xC5); 		//VCOM
 8000704:	20c5      	movs	r0, #197	@ 0xc5
 8000706:	f7ff ff39 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x1A);
 800070a:	201a      	movs	r0, #26
 800070c:	f7ff feea 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_REG(0x36);
 8000710:	2036      	movs	r0, #54	@ 0x36
 8000712:	f7ff ff33 	bl	800057c <LCD_WR_REG>
		if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x00);
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff fee4 	bl	80004e4 <LCD_WR_DATA8>
		else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC0);
		else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x70);
		else LCD_WR_DATA8(0xA0);

		//-------------ST7789V Frame rate setting-----------//
		LCD_WR_REG(0xb2);		//Porch Setting
 800071c:	20b2      	movs	r0, #178	@ 0xb2
 800071e:	f7ff ff2d 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x05);
 8000722:	2005      	movs	r0, #5
 8000724:	f7ff fede 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x05);
 8000728:	2005      	movs	r0, #5
 800072a:	f7ff fedb 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x00);
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff fed8 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x33);
 8000734:	2033      	movs	r0, #51	@ 0x33
 8000736:	f7ff fed5 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x33);
 800073a:	2033      	movs	r0, #51	@ 0x33
 800073c:	f7ff fed2 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0xb7);			//Gate Control
 8000740:	20b7      	movs	r0, #183	@ 0xb7
 8000742:	f7ff ff1b 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x05);			//12.2v   -10.43v
 8000746:	2005      	movs	r0, #5
 8000748:	f7ff fecc 	bl	80004e4 <LCD_WR_DATA8>
		//--------------ST7789V Power setting---------------//
		LCD_WR_REG(0xBB);//VCOM
 800074c:	20bb      	movs	r0, #187	@ 0xbb
 800074e:	f7ff ff15 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x3F);
 8000752:	203f      	movs	r0, #63	@ 0x3f
 8000754:	f7ff fec6 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0xC0); //Power control
 8000758:	20c0      	movs	r0, #192	@ 0xc0
 800075a:	f7ff ff0f 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x2c);
 800075e:	202c      	movs	r0, #44	@ 0x2c
 8000760:	f7ff fec0 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0xC2);		//VDV and VRH Command Enable
 8000764:	20c2      	movs	r0, #194	@ 0xc2
 8000766:	f7ff ff09 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x01);
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff feba 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0xC3);			//VRH Set
 8000770:	20c3      	movs	r0, #195	@ 0xc3
 8000772:	f7ff ff03 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x0F);		//4.3+( vcom+vcom offset+vdv)
 8000776:	200f      	movs	r0, #15
 8000778:	f7ff feb4 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0xC4);			//VDV Set
 800077c:	20c4      	movs	r0, #196	@ 0xc4
 800077e:	f7ff fefd 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x20);				//0v
 8000782:	2020      	movs	r0, #32
 8000784:	f7ff feae 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0xC6);				//Frame Rate Control in Normal Mode
 8000788:	20c6      	movs	r0, #198	@ 0xc6
 800078a:	f7ff fef7 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0X01);			//111Hz
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fea8 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0xd0);				//Power Control 1
 8000794:	20d0      	movs	r0, #208	@ 0xd0
 8000796:	f7ff fef1 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0xa4);
 800079a:	20a4      	movs	r0, #164	@ 0xa4
 800079c:	f7ff fea2 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0xa1);
 80007a0:	20a1      	movs	r0, #161	@ 0xa1
 80007a2:	f7ff fe9f 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0xE8);				//Power Control 1
 80007a6:	20e8      	movs	r0, #232	@ 0xe8
 80007a8:	f7ff fee8 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x03);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f7ff fe99 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0xE9);				//Equalize time control
 80007b2:	20e9      	movs	r0, #233	@ 0xe9
 80007b4:	f7ff fee2 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0x09);
 80007b8:	2009      	movs	r0, #9
 80007ba:	f7ff fe93 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 80007be:	2009      	movs	r0, #9
 80007c0:	f7ff fe90 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x08);
 80007c4:	2008      	movs	r0, #8
 80007c6:	f7ff fe8d 	bl	80004e4 <LCD_WR_DATA8>
		//---------------ST7789V gamma setting-------------//
		LCD_WR_REG(0xE0); //Set Gamma
 80007ca:	20e0      	movs	r0, #224	@ 0xe0
 80007cc:	f7ff fed6 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0xD0);
 80007d0:	20d0      	movs	r0, #208	@ 0xd0
 80007d2:	f7ff fe87 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x05);
 80007d6:	2005      	movs	r0, #5
 80007d8:	f7ff fe84 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 80007dc:	2009      	movs	r0, #9
 80007de:	f7ff fe81 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 80007e2:	2009      	movs	r0, #9
 80007e4:	f7ff fe7e 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x08);
 80007e8:	2008      	movs	r0, #8
 80007ea:	f7ff fe7b 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x14);
 80007ee:	2014      	movs	r0, #20
 80007f0:	f7ff fe78 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x28);
 80007f4:	2028      	movs	r0, #40	@ 0x28
 80007f6:	f7ff fe75 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x33);
 80007fa:	2033      	movs	r0, #51	@ 0x33
 80007fc:	f7ff fe72 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x3F);
 8000800:	203f      	movs	r0, #63	@ 0x3f
 8000802:	f7ff fe6f 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x07);
 8000806:	2007      	movs	r0, #7
 8000808:	f7ff fe6c 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x13);
 800080c:	2013      	movs	r0, #19
 800080e:	f7ff fe69 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x14);
 8000812:	2014      	movs	r0, #20
 8000814:	f7ff fe66 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x28);
 8000818:	2028      	movs	r0, #40	@ 0x28
 800081a:	f7ff fe63 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x30);
 800081e:	2030      	movs	r0, #48	@ 0x30
 8000820:	f7ff fe60 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0XE1); //Set Gamma
 8000824:	20e1      	movs	r0, #225	@ 0xe1
 8000826:	f7ff fea9 	bl	800057c <LCD_WR_REG>
		LCD_WR_DATA8(0xD0);
 800082a:	20d0      	movs	r0, #208	@ 0xd0
 800082c:	f7ff fe5a 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x05);
 8000830:	2005      	movs	r0, #5
 8000832:	f7ff fe57 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 8000836:	2009      	movs	r0, #9
 8000838:	f7ff fe54 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x09);
 800083c:	2009      	movs	r0, #9
 800083e:	f7ff fe51 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x08);
 8000842:	2008      	movs	r0, #8
 8000844:	f7ff fe4e 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x03);
 8000848:	2003      	movs	r0, #3
 800084a:	f7ff fe4b 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x24);
 800084e:	2024      	movs	r0, #36	@ 0x24
 8000850:	f7ff fe48 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x32);
 8000854:	2032      	movs	r0, #50	@ 0x32
 8000856:	f7ff fe45 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x32);
 800085a:	2032      	movs	r0, #50	@ 0x32
 800085c:	f7ff fe42 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x3B);
 8000860:	203b      	movs	r0, #59	@ 0x3b
 8000862:	f7ff fe3f 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x14);
 8000866:	2014      	movs	r0, #20
 8000868:	f7ff fe3c 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x13);
 800086c:	2013      	movs	r0, #19
 800086e:	f7ff fe39 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x28);
 8000872:	2028      	movs	r0, #40	@ 0x28
 8000874:	f7ff fe36 	bl	80004e4 <LCD_WR_DATA8>
		LCD_WR_DATA8(0x2F);
 8000878:	202f      	movs	r0, #47	@ 0x2f
 800087a:	f7ff fe33 	bl	80004e4 <LCD_WR_DATA8>

		LCD_WR_REG(0x21); 		//反显
 800087e:	2021      	movs	r0, #33	@ 0x21
 8000880:	f7ff fe7c 	bl	800057c <LCD_WR_REG>

		LCD_WR_REG(0x29);         //开启显示
 8000884:	2029      	movs	r0, #41	@ 0x29
 8000886:	f7ff fe79 	bl	800057c <LCD_WR_REG>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40010c00 	.word	0x40010c00

08000894 <Fan_Init>:

int16_t CCR2 = 0;
TIM_HandleTypeDef htim;

void Fan_Init(TIM_HandleTypeDef* htim2)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	htim = *htim2;
 800089c:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <Fan_Init+0x28>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4610      	mov	r0, r2
 80008a2:	4619      	mov	r1, r3
 80008a4:	2348      	movs	r3, #72	@ 0x48
 80008a6:	461a      	mov	r2, r3
 80008a8:	f002 f870 	bl	800298c <memcpy>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 80008ac:	2104      	movs	r1, #4
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f001 fb06 	bl	8001ec0 <HAL_TIM_PWM_Start>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000002c 	.word	0x2000002c

080008c0 <Fan_Fast>:

void Fan_Fast(TIM_HandleTypeDef* htim2, uint16_t Fan_Pin)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	807b      	strh	r3, [r7, #2]
	while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin))
 80008cc:	e020      	b.n	8000910 <Fan_Fast+0x50>
	{
		HAL_Delay(50);
 80008ce:	2032      	movs	r0, #50	@ 0x32
 80008d0:	f000 fb72 	bl	8000fb8 <HAL_Delay>
//		while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin));
		CCR2 = __HAL_TIM_GET_COMPARE(htim2, TIM_CHANNEL_2);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008da:	b21a      	sxth	r2, r3
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <Fan_Fast+0x6c>)
 80008de:	801a      	strh	r2, [r3, #0]
		CCR2 += 100;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <Fan_Fast+0x6c>)
 80008e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	3364      	adds	r3, #100	@ 0x64
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b21a      	sxth	r2, r3
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <Fan_Fast+0x6c>)
 80008f0:	801a      	strh	r2, [r3, #0]
		if (CCR2 <= 500)
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <Fan_Fast+0x6c>)
 80008f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008fc:	dc05      	bgt.n	800090a <Fan_Fast+0x4a>
		{

			__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, CCR2);
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <Fan_Fast+0x6c>)
 8000900:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		HAL_Delay(50);
 800090a:	2032      	movs	r0, #50	@ 0x32
 800090c:	f000 fb54 	bl	8000fb8 <HAL_Delay>
	while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin))
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	4619      	mov	r1, r3
 8000914:	4806      	ldr	r0, [pc, #24]	@ (8000930 <Fan_Fast+0x70>)
 8000916:	f000 fe05 	bl	8001524 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0d6      	beq.n	80008ce <Fan_Fast+0xe>
	}
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000028 	.word	0x20000028
 8000930:	40010800 	.word	0x40010800

08000934 <Fan_Slow>:

void Fan_Slow(TIM_HandleTypeDef* htim2, uint16_t Fan_Pin)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	807b      	strh	r3, [r7, #2]
	while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin))
 8000940:	e01f      	b.n	8000982 <Fan_Slow+0x4e>
	{
		HAL_Delay(50);
 8000942:	2032      	movs	r0, #50	@ 0x32
 8000944:	f000 fb38 	bl	8000fb8 <HAL_Delay>
//		while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin));
		CCR2 = __HAL_TIM_GET_COMPARE(htim2, TIM_CHANNEL_2);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800094e:	b21a      	sxth	r2, r3
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <Fan_Slow+0x68>)
 8000952:	801a      	strh	r2, [r3, #0]
		CCR2 -= 100;
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <Fan_Slow+0x68>)
 8000956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095a:	b29b      	uxth	r3, r3
 800095c:	3b64      	subs	r3, #100	@ 0x64
 800095e:	b29b      	uxth	r3, r3
 8000960:	b21a      	sxth	r2, r3
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <Fan_Slow+0x68>)
 8000964:	801a      	strh	r2, [r3, #0]
		if (CCR2 >= 0)
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <Fan_Slow+0x68>)
 8000968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db05      	blt.n	800097c <Fan_Slow+0x48>
		{

			__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, CCR2);
 8000970:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <Fan_Slow+0x68>)
 8000972:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		HAL_Delay(50);
 800097c:	2032      	movs	r0, #50	@ 0x32
 800097e:	f000 fb1b 	bl	8000fb8 <HAL_Delay>
	while (!HAL_GPIO_ReadPin(GPIOA, Fan_Pin))
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <Fan_Slow+0x6c>)
 8000988:	f000 fdcc 	bl	8001524 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0d7      	beq.n	8000942 <Fan_Slow+0xe>
	}
}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000028 	.word	0x20000028
 80009a0:	40010800 	.word	0x40010800

080009a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b8:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa4 <MX_GPIO_Init+0x100>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a39      	ldr	r2, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x100>)
 80009be:	f043 0320 	orr.w	r3, r3, #32
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b37      	ldr	r3, [pc, #220]	@ (8000aa4 <MX_GPIO_Init+0x100>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0320 	and.w	r3, r3, #32
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b34      	ldr	r3, [pc, #208]	@ (8000aa4 <MX_GPIO_Init+0x100>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a33      	ldr	r2, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x100>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b31      	ldr	r3, [pc, #196]	@ (8000aa4 <MX_GPIO_Init+0x100>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa4 <MX_GPIO_Init+0x100>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x100>)
 80009ee:	f043 0308 	orr.w	r3, r3, #8
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa4 <MX_GPIO_Init+0x100>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0308 	and.w	r3, r3, #8
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_SCL_Pin|LCD_SDA_Pin|LCD_BL_Pin|LCD_DC_Pin
 8000a00:	2201      	movs	r2, #1
 8000a02:	f24a 01f8 	movw	r1, #41208	@ 0xa0f8
 8000a06:	4828      	ldr	r0, [pc, #160]	@ (8000aa8 <MX_GPIO_Init+0x104>)
 8000a08:	f000 fda3 	bl	8001552 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin|SCL_Pin|SDA_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a12:	4826      	ldr	r0, [pc, #152]	@ (8000aac <MX_GPIO_Init+0x108>)
 8000a14:	f000 fd9d 	bl	8001552 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin|LCD_BL_Pin|LCD_DC_Pin
 8000a18:	f24a 0338 	movw	r3, #41016	@ 0xa038
 8000a1c:	613b      	str	r3, [r7, #16]
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481d      	ldr	r0, [pc, #116]	@ (8000aa8 <MX_GPIO_Init+0x104>)
 8000a32:	f000 fbf3 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000a36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4817      	ldr	r0, [pc, #92]	@ (8000aac <MX_GPIO_Init+0x108>)
 8000a50:	f000 fbe4 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin|SW1_Pin;
 8000a54:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_GPIO_Init+0x10c>)
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	4619      	mov	r1, r3
 8000a68:	4810      	ldr	r0, [pc, #64]	@ (8000aac <MX_GPIO_Init+0x108>)
 8000a6a:	f000 fbd7 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000a6e:	23c0      	movs	r3, #192	@ 0xc0
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a72:	2311      	movs	r3, #17
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <MX_GPIO_Init+0x104>)
 8000a86:	f000 fbc9 	bl	800121c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	2028      	movs	r0, #40	@ 0x28
 8000a90:	f000 fb8d 	bl	80011ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	@ 0x28
 8000a96:	f000 fba6 	bl	80011e6 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010c00 	.word	0x40010c00
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	10210000 	.word	0x10210000

08000ab4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	80fb      	strh	r3, [r7, #6]
	if (SW1_Pin == GPIO_Pin)
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ac4:	d105      	bne.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		Fan_Fast(&htim2, SW1_Pin);
 8000ac6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aca:	4808      	ldr	r0, [pc, #32]	@ (8000aec <HAL_GPIO_EXTI_Callback+0x38>)
 8000acc:	f7ff fef8 	bl	80008c0 <Fan_Fast>
	}
	else if (SW2_Pin == GPIO_Pin)
	{
		Fan_Slow(&htim2, SW2_Pin);
	}
}
 8000ad0:	e008      	b.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x30>
	else if (SW2_Pin == GPIO_Pin)
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ad8:	d104      	bne.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x30>
		Fan_Slow(&htim2, SW2_Pin);
 8000ada:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ade:	4803      	ldr	r0, [pc, #12]	@ (8000aec <HAL_GPIO_EXTI_Callback+0x38>)
 8000ae0:	f7ff ff28 	bl	8000934 <Fan_Slow>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000074 	.word	0x20000074

08000af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af6:	f000 f9fd 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afa:	f000 f853 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afe:	f7ff ff51 	bl	80009a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b02:	f000 f90f 	bl	8000d24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Fan_Init(&htim2);
 8000b06:	4821      	ldr	r0, [pc, #132]	@ (8000b8c <main+0x9c>)
 8000b08:	f7ff fec4 	bl	8000894 <Fan_Init>
  LCD_BLK_Set();
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2108      	movs	r1, #8
 8000b10:	481f      	ldr	r0, [pc, #124]	@ (8000b90 <main+0xa0>)
 8000b12:	f000 fd1e 	bl	8001552 <HAL_GPIO_WritePin>
  LCD_SCLK_Set();
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b1c:	481c      	ldr	r0, [pc, #112]	@ (8000b90 <main+0xa0>)
 8000b1e:	f000 fd18 	bl	8001552 <HAL_GPIO_WritePin>
  LCD_DC_Set();
 8000b22:	2200      	movs	r2, #0
 8000b24:	2110      	movs	r1, #16
 8000b26:	481a      	ldr	r0, [pc, #104]	@ (8000b90 <main+0xa0>)
 8000b28:	f000 fd13 	bl	8001552 <HAL_GPIO_WritePin>
  LCD_Init();
 8000b2c:	f7ff fdbe 	bl	80006ac <LCD_Init>
  LCD_clear();
 8000b30:	f7ff fd7a 	bl	8000628 <LCD_clear>
  HAL_Delay(50);
 8000b34:	2032      	movs	r0, #50	@ 0x32
 8000b36:	f000 fa3f 	bl	8000fb8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD_ShowPicture(gImage_Fan1, 25, 2);
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	2119      	movs	r1, #25
 8000b3e:	4815      	ldr	r0, [pc, #84]	@ (8000b94 <main+0xa4>)
 8000b40:	f7ff fc2c 	bl	800039c <LCD_ShowPicture>
	  HAL_Delay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fa37 	bl	8000fb8 <HAL_Delay>
	  LCD_ShowPicture(gImage_Fan2, 25, 2);
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	2119      	movs	r1, #25
 8000b4e:	4812      	ldr	r0, [pc, #72]	@ (8000b98 <main+0xa8>)
 8000b50:	f7ff fc24 	bl	800039c <LCD_ShowPicture>
	  HAL_Delay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 fa2f 	bl	8000fb8 <HAL_Delay>
	  LCD_ShowPicture(gImage_Fan3, 25, 2);
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	2119      	movs	r1, #25
 8000b5e:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <main+0xac>)
 8000b60:	f7ff fc1c 	bl	800039c <LCD_ShowPicture>
	  HAL_Delay(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fa27 	bl	8000fb8 <HAL_Delay>

	  uint8_t *s = "bitch";
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <main+0xb0>)
 8000b6c:	607b      	str	r3, [r7, #4]
	  LCD_ShowString(2, 90, s, WHITE, BLACK, 24, 0);
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	2318      	movs	r3, #24
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	2300      	movs	r3, #0
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	215a      	movs	r1, #90	@ 0x5a
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fbda 	bl	800033c <LCD_ShowString>
  {
 8000b88:	bf00      	nop
 8000b8a:	e7d6      	b.n	8000b3a <main+0x4a>
 8000b8c:	20000074 	.word	0x20000074
 8000b90:	40010c00 	.word	0x40010c00
 8000b94:	08005dcc 	.word	0x08005dcc
 8000b98:	08008fd4 	.word	0x08008fd4
 8000b9c:	0800c1dc 	.word	0x0800c1dc
 8000ba0:	080029c0 	.word	0x080029c0

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b090      	sub	sp, #64	@ 0x40
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	2228      	movs	r2, #40	@ 0x28
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 febe 	bl	8002934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fce1 	bl	80015b4 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bf8:	f000 f819 	bl	8000c2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2302      	movs	r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2102      	movs	r1, #2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 ff4e 	bl	8001ab8 <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c22:	f000 f804 	bl	8000c2e <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3740      	adds	r7, #64	@ 0x40
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c32:	b672      	cpsid	i
}
 8000c34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c36:	bf00      	nop
 8000c38:	e7fd      	b.n	8000c36 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <HAL_MspInit+0x5c>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	4a14      	ldr	r2, [pc, #80]	@ (8000c98 <HAL_MspInit+0x5c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6193      	str	r3, [r2, #24]
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_MspInit+0x5c>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <HAL_MspInit+0x5c>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c98 <HAL_MspInit+0x5c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <HAL_MspInit+0x5c>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <HAL_MspInit+0x60>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <HAL_MspInit+0x60>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 f946 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8000cfc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000d00:	f000 fc40 	bl	8001584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8000d04:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000d08:	f000 fc3c 	bl	8001584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8000d0c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000d10:	f000 fc38 	bl	8001584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	@ 0x38
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	f107 0320 	add.w	r3, r7, #32
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	615a      	str	r2, [r3, #20]
 8000d52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d54:	4b2d      	ldr	r3, [pc, #180]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000d56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000d5e:	2247      	movs	r2, #71	@ 0x47
 8000d60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000d68:	4b28      	ldr	r3, [pc, #160]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000d6a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000d6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b26      	ldr	r3, [pc, #152]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d76:	4b25      	ldr	r3, [pc, #148]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000d78:	2280      	movs	r2, #128	@ 0x80
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d7c:	4823      	ldr	r0, [pc, #140]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000d7e:	f000 fff7 	bl	8001d70 <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d88:	f7ff ff51 	bl	8000c2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d96:	4619      	mov	r1, r3
 8000d98:	481c      	ldr	r0, [pc, #112]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000d9a:	f001 f9f5 	bl	8002188 <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000da4:	f7ff ff43 	bl	8000c2e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000da8:	4818      	ldr	r0, [pc, #96]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000daa:	f001 f830 	bl	8001e0e <HAL_TIM_PWM_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000db4:	f7ff ff3b 	bl	8000c2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000dc8:	f001 fd56 	bl	8002878 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dd2:	f7ff ff2c 	bl	8000c2e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd6:	2360      	movs	r3, #96	@ 0x60
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2204      	movs	r2, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000dee:	f001 f909 	bl	8002004 <HAL_TIM_PWM_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000df8:	f7ff ff19 	bl	8000c2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <MX_TIM2_Init+0xe8>)
 8000dfe:	f000 f823 	bl	8000e48 <HAL_TIM_MspPostInit>

}
 8000e02:	bf00      	nop
 8000e04:	3738      	adds	r7, #56	@ 0x38
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000074 	.word	0x20000074

08000e10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e20:	d10b      	bne.n	8000e3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e22:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <HAL_TIM_Base_MspInit+0x34>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a07      	ldr	r2, [pc, #28]	@ (8000e44 <HAL_TIM_Base_MspInit+0x34>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_TIM_Base_MspInit+0x34>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e66:	d117      	bne.n	8000e98 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <HAL_TIM_MspPostInit+0x58>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea0 <HAL_TIM_MspPostInit+0x58>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_TIM_MspPostInit+0x58>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <HAL_TIM_MspPostInit+0x5c>)
 8000e94:	f000 f9c2 	bl	800121c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010800 	.word	0x40010800

08000ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea8:	f7ff ff36 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480b      	ldr	r0, [pc, #44]	@ (8000edc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eae:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ec4:	4c09      	ldr	r4, [pc, #36]	@ (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f001 fd37 	bl	8002944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff fe0b 	bl	8000af0 <main>
  bx lr
 8000eda:	4770      	bx	lr
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ee4:	0800f400 	.word	0x0800f400
  ldr r2, =_sbss
 8000ee8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eec:	200000c0 	.word	0x200000c0

08000ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_2_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_Init+0x28>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_Init+0x28>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f947 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200d      	movs	r0, #13
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fe94 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f95f 	bl	8001202 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f927 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_IncTick+0x1c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_IncTick+0x20>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a03      	ldr	r2, [pc, #12]	@ (8000fa0 <HAL_IncTick+0x20>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	200000bc 	.word	0x200000bc

08000fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	@ (8000fb4 <HAL_GetTick+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	200000bc 	.word	0x200000bc

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff fff0 	bl	8000fa4 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffe0 	bl	8000fa4 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4906      	ldr	r1, [pc, #24]	@ (8001098 <__NVIC_EnableIRQ+0x34>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	@ (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	@ (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	@ 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff90 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff2d 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff42 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff90 	bl	80010f0 <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5f 	bl	800109c <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff35 	bl	8001064 <__NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffa2 	bl	8001154 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b08b      	sub	sp, #44	@ 0x2c
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122e:	e169      	b.n	8001504 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001230:	2201      	movs	r2, #1
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	429a      	cmp	r2, r3
 800124a:	f040 8158 	bne.w	80014fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a9a      	ldr	r2, [pc, #616]	@ (80014bc <HAL_GPIO_Init+0x2a0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d05e      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001258:	4a98      	ldr	r2, [pc, #608]	@ (80014bc <HAL_GPIO_Init+0x2a0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d875      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800125e:	4a98      	ldr	r2, [pc, #608]	@ (80014c0 <HAL_GPIO_Init+0x2a4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d058      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001264:	4a96      	ldr	r2, [pc, #600]	@ (80014c0 <HAL_GPIO_Init+0x2a4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d86f      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800126a:	4a96      	ldr	r2, [pc, #600]	@ (80014c4 <HAL_GPIO_Init+0x2a8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d052      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001270:	4a94      	ldr	r2, [pc, #592]	@ (80014c4 <HAL_GPIO_Init+0x2a8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d869      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001276:	4a94      	ldr	r2, [pc, #592]	@ (80014c8 <HAL_GPIO_Init+0x2ac>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d04c      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 800127c:	4a92      	ldr	r2, [pc, #584]	@ (80014c8 <HAL_GPIO_Init+0x2ac>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d863      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001282:	4a92      	ldr	r2, [pc, #584]	@ (80014cc <HAL_GPIO_Init+0x2b0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d046      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001288:	4a90      	ldr	r2, [pc, #576]	@ (80014cc <HAL_GPIO_Init+0x2b0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d85d      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d82a      	bhi.n	80012e8 <HAL_GPIO_Init+0xcc>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d859      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001296:	a201      	add	r2, pc, #4	@ (adr r2, 800129c <HAL_GPIO_Init+0x80>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	08001317 	.word	0x08001317
 80012a0:	080012f1 	.word	0x080012f1
 80012a4:	08001303 	.word	0x08001303
 80012a8:	08001345 	.word	0x08001345
 80012ac:	0800134b 	.word	0x0800134b
 80012b0:	0800134b 	.word	0x0800134b
 80012b4:	0800134b 	.word	0x0800134b
 80012b8:	0800134b 	.word	0x0800134b
 80012bc:	0800134b 	.word	0x0800134b
 80012c0:	0800134b 	.word	0x0800134b
 80012c4:	0800134b 	.word	0x0800134b
 80012c8:	0800134b 	.word	0x0800134b
 80012cc:	0800134b 	.word	0x0800134b
 80012d0:	0800134b 	.word	0x0800134b
 80012d4:	0800134b 	.word	0x0800134b
 80012d8:	0800134b 	.word	0x0800134b
 80012dc:	0800134b 	.word	0x0800134b
 80012e0:	080012f9 	.word	0x080012f9
 80012e4:	0800130d 	.word	0x0800130d
 80012e8:	4a79      	ldr	r2, [pc, #484]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ee:	e02c      	b.n	800134a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	623b      	str	r3, [r7, #32]
          break;
 80012f6:	e029      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	3304      	adds	r3, #4
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e024      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	3308      	adds	r3, #8
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e01f      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	330c      	adds	r3, #12
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e01a      	b.n	800134c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131e:	2304      	movs	r3, #4
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e013      	b.n	800134c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800132c:	2308      	movs	r3, #8
 800132e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	611a      	str	r2, [r3, #16]
          break;
 8001336:	e009      	b.n	800134c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001338:	2308      	movs	r3, #8
 800133a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	615a      	str	r2, [r3, #20]
          break;
 8001342:	e003      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x130>
          break;
 800134a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2bff      	cmp	r3, #255	@ 0xff
 8001350:	d801      	bhi.n	8001356 <HAL_GPIO_Init+0x13a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	e001      	b.n	800135a <HAL_GPIO_Init+0x13e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3304      	adds	r3, #4
 800135a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2bff      	cmp	r3, #255	@ 0xff
 8001360:	d802      	bhi.n	8001368 <HAL_GPIO_Init+0x14c>
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x152>
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	3b08      	subs	r3, #8
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	210f      	movs	r1, #15
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	401a      	ands	r2, r3
 8001380:	6a39      	ldr	r1, [r7, #32]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	431a      	orrs	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80b1 	beq.w	80014fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800139c:	4b4d      	ldr	r3, [pc, #308]	@ (80014d4 <HAL_GPIO_Init+0x2b8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a4c      	ldr	r2, [pc, #304]	@ (80014d4 <HAL_GPIO_Init+0x2b8>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b4a      	ldr	r3, [pc, #296]	@ (80014d4 <HAL_GPIO_Init+0x2b8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b4:	4a48      	ldr	r2, [pc, #288]	@ (80014d8 <HAL_GPIO_Init+0x2bc>)
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a40      	ldr	r2, [pc, #256]	@ (80014dc <HAL_GPIO_Init+0x2c0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d013      	beq.n	8001408 <HAL_GPIO_Init+0x1ec>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a3f      	ldr	r2, [pc, #252]	@ (80014e0 <HAL_GPIO_Init+0x2c4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d00d      	beq.n	8001404 <HAL_GPIO_Init+0x1e8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a3e      	ldr	r2, [pc, #248]	@ (80014e4 <HAL_GPIO_Init+0x2c8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d007      	beq.n	8001400 <HAL_GPIO_Init+0x1e4>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a3d      	ldr	r2, [pc, #244]	@ (80014e8 <HAL_GPIO_Init+0x2cc>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d101      	bne.n	80013fc <HAL_GPIO_Init+0x1e0>
 80013f8:	2303      	movs	r3, #3
 80013fa:	e006      	b.n	800140a <HAL_GPIO_Init+0x1ee>
 80013fc:	2304      	movs	r3, #4
 80013fe:	e004      	b.n	800140a <HAL_GPIO_Init+0x1ee>
 8001400:	2302      	movs	r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x1ee>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_GPIO_Init+0x1ee>
 8001408:	2300      	movs	r3, #0
 800140a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141a:	492f      	ldr	r1, [pc, #188]	@ (80014d8 <HAL_GPIO_Init+0x2bc>)
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d006      	beq.n	8001442 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	492c      	ldr	r1, [pc, #176]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001442:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	43db      	mvns	r3, r3
 800144a:	4928      	ldr	r1, [pc, #160]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 800144c:	4013      	ands	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	4922      	ldr	r1, [pc, #136]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	491e      	ldr	r1, [pc, #120]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 8001474:	4013      	ands	r3, r2
 8001476:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4918      	ldr	r1, [pc, #96]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	4914      	ldr	r1, [pc, #80]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 800149c:	4013      	ands	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d021      	beq.n	80014f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	490e      	ldr	r1, [pc, #56]	@ (80014ec <HAL_GPIO_Init+0x2d0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
 80014b8:	e021      	b.n	80014fe <HAL_GPIO_Init+0x2e2>
 80014ba:	bf00      	nop
 80014bc:	10320000 	.word	0x10320000
 80014c0:	10310000 	.word	0x10310000
 80014c4:	10220000 	.word	0x10220000
 80014c8:	10210000 	.word	0x10210000
 80014cc:	10120000 	.word	0x10120000
 80014d0:	10110000 	.word	0x10110000
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	40010800 	.word	0x40010800
 80014e0:	40010c00 	.word	0x40010c00
 80014e4:	40011000 	.word	0x40011000
 80014e8:	40011400 	.word	0x40011400
 80014ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <HAL_GPIO_Init+0x304>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	4909      	ldr	r1, [pc, #36]	@ (8001520 <HAL_GPIO_Init+0x304>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	3301      	adds	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	f47f ae8e 	bne.w	8001230 <HAL_GPIO_Init+0x14>
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	372c      	adds	r7, #44	@ 0x2c
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40010400 	.word	0x40010400

08001524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e001      	b.n	8001546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	807b      	strh	r3, [r7, #2]
 800155e:	4613      	mov	r3, r2
 8001560:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001562:	787b      	ldrb	r3, [r7, #1]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001568:	887a      	ldrh	r2, [r7, #2]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800156e:	e003      	b.n	8001578 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	041a      	lsls	r2, r3, #16
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
	...

08001584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fa86 	bl	8000ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40010400 	.word	0x40010400

080015b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e272      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8087 	beq.w	80016e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d4:	4b92      	ldr	r3, [pc, #584]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d00c      	beq.n	80015fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d112      	bne.n	8001612 <HAL_RCC_OscConfig+0x5e>
 80015ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f8:	d10b      	bne.n	8001612 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fa:	4b89      	ldr	r3, [pc, #548]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d06c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x12c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d168      	bne.n	80016e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e24c      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x76>
 800161c:	4b80      	ldr	r3, [pc, #512]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a7f      	ldr	r2, [pc, #508]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e02e      	b.n	8001688 <HAL_RCC_OscConfig+0xd4>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x98>
 8001632:	4b7b      	ldr	r3, [pc, #492]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a7a      	ldr	r2, [pc, #488]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b78      	ldr	r3, [pc, #480]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a77      	ldr	r2, [pc, #476]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001644:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xd4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0xbc>
 8001656:	4b72      	ldr	r3, [pc, #456]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a71      	ldr	r2, [pc, #452]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b6f      	ldr	r3, [pc, #444]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6e      	ldr	r2, [pc, #440]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xd4>
 8001670:	4b6b      	ldr	r3, [pc, #428]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a6a      	ldr	r2, [pc, #424]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b68      	ldr	r3, [pc, #416]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a67      	ldr	r2, [pc, #412]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001686:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fc88 	bl	8000fa4 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fc84 	bl	8000fa4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	@ 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e200      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xe4>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc74 	bl	8000fa4 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fc70 	bl	8000fa4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	@ 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1ec      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b53      	ldr	r3, [pc, #332]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x10c>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d063      	beq.n	80017b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016fa:	4b49      	ldr	r3, [pc, #292]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x18c>
 8001706:	4b46      	ldr	r3, [pc, #280]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b43      	ldr	r3, [pc, #268]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x176>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1c0      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b3d      	ldr	r3, [pc, #244]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4939      	ldr	r1, [pc, #228]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <HAL_RCC_OscConfig+0x270>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fc29 	bl	8000fa4 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fc25 	bl	8000fa4 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1a1      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4927      	ldr	r1, [pc, #156]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <HAL_RCC_OscConfig+0x270>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fc08 	bl	8000fa4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff fc04 	bl	8000fa4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e180      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d03a      	beq.n	8001838 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d019      	beq.n	80017fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <HAL_RCC_OscConfig+0x274>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff fbe8 	bl	8000fa4 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fbe4 	bl	8000fa4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e160      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f000 fa9c 	bl	8001d34 <RCC_Delay>
 80017fc:	e01c      	b.n	8001838 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_RCC_OscConfig+0x274>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fbce 	bl	8000fa4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180a:	e00f      	b.n	800182c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fbca 	bl	8000fa4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d908      	bls.n	800182c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e146      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	42420000 	.word	0x42420000
 8001828:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b92      	ldr	r3, [pc, #584]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1e9      	bne.n	800180c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a6 	beq.w	8001992 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10d      	bne.n	8001872 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b88      	ldr	r3, [pc, #544]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a87      	ldr	r2, [pc, #540]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b85      	ldr	r3, [pc, #532]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b82      	ldr	r3, [pc, #520]	@ (8001a7c <HAL_RCC_OscConfig+0x4c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d118      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a7c <HAL_RCC_OscConfig+0x4c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7e      	ldr	r2, [pc, #504]	@ (8001a7c <HAL_RCC_OscConfig+0x4c8>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7ff fb8b 	bl	8000fa4 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff fb87 	bl	8000fa4 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b64      	cmp	r3, #100	@ 0x64
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e103      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	4b75      	ldr	r3, [pc, #468]	@ (8001a7c <HAL_RCC_OscConfig+0x4c8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x312>
 80018b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	e02d      	b.n	8001922 <HAL_RCC_OscConfig+0x36e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x334>
 80018ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a69      	ldr	r2, [pc, #420]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	4b67      	ldr	r3, [pc, #412]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a66      	ldr	r2, [pc, #408]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	f023 0304 	bic.w	r3, r3, #4
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	e01c      	b.n	8001922 <HAL_RCC_OscConfig+0x36e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d10c      	bne.n	800190a <HAL_RCC_OscConfig+0x356>
 80018f0:	4b61      	ldr	r3, [pc, #388]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a60      	ldr	r2, [pc, #384]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a5d      	ldr	r2, [pc, #372]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	e00b      	b.n	8001922 <HAL_RCC_OscConfig+0x36e>
 800190a:	4b5b      	ldr	r3, [pc, #364]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a5a      	ldr	r2, [pc, #360]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	4b58      	ldr	r3, [pc, #352]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a57      	ldr	r2, [pc, #348]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d015      	beq.n	8001956 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fb3b 	bl	8000fa4 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff fb37 	bl	8000fa4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0b1      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001948:	4b4b      	ldr	r3, [pc, #300]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0ee      	beq.n	8001932 <HAL_RCC_OscConfig+0x37e>
 8001954:	e014      	b.n	8001980 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff fb25 	bl	8000fa4 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7ff fb21 	bl	8000fa4 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e09b      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001974:	4b40      	ldr	r3, [pc, #256]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ee      	bne.n	800195e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d105      	bne.n	8001992 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001986:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8087 	beq.w	8001aaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800199c:	4b36      	ldr	r3, [pc, #216]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d061      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d146      	bne.n	8001a3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b33      	ldr	r3, [pc, #204]	@ (8001a80 <HAL_RCC_OscConfig+0x4cc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff faf5 	bl	8000fa4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff faf1 	bl	8000fa4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e06d      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e4:	d108      	bne.n	80019f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4921      	ldr	r1, [pc, #132]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a19      	ldr	r1, [r3, #32]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	491b      	ldr	r1, [pc, #108]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a10:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <HAL_RCC_OscConfig+0x4cc>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fac5 	bl	8000fa4 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7ff fac1 	bl	8000fa4 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e03d      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x46a>
 8001a3c:	e035      	b.n	8001aaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <HAL_RCC_OscConfig+0x4cc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff faae 	bl	8000fa4 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff faaa 	bl	8000fa4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e026      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x498>
 8001a6a:	e01e      	b.n	8001aaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e019      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_RCC_OscConfig+0x500>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0d0      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b6a      	ldr	r3, [pc, #424]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d910      	bls.n	8001afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b67      	ldr	r3, [pc, #412]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 0207 	bic.w	r2, r3, #7
 8001ae2:	4965      	ldr	r1, [pc, #404]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b63      	ldr	r3, [pc, #396]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0b8      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d020      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b14:	4b59      	ldr	r3, [pc, #356]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a58      	ldr	r2, [pc, #352]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b2c:	4b53      	ldr	r3, [pc, #332]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a52      	ldr	r2, [pc, #328]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b38:	4b50      	ldr	r3, [pc, #320]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	494d      	ldr	r1, [pc, #308]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d040      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b47      	ldr	r3, [pc, #284]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d115      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e07f      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b76:	4b41      	ldr	r3, [pc, #260]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e073      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	4b3d      	ldr	r3, [pc, #244]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06b      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b96:	4b39      	ldr	r3, [pc, #228]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f023 0203 	bic.w	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4936      	ldr	r1, [pc, #216]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7ff f9fc 	bl	8000fa4 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7ff f9f8 	bl	8000fa4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e053      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 020c 	and.w	r2, r3, #12
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1eb      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b27      	ldr	r3, [pc, #156]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d210      	bcs.n	8001c08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b24      	ldr	r3, [pc, #144]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 0207 	bic.w	r2, r3, #7
 8001bee:	4922      	ldr	r1, [pc, #136]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e032      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c14:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4916      	ldr	r1, [pc, #88]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	490e      	ldr	r1, [pc, #56]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c46:	f000 f821 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	490a      	ldr	r1, [pc, #40]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	5ccb      	ldrb	r3, [r1, r3]
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	4a09      	ldr	r2, [pc, #36]	@ (8001c84 <HAL_RCC_ClockConfig+0x1cc>)
 8001c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <HAL_RCC_ClockConfig+0x1d0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f95a 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08005dbc 	.word	0x08005dbc
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x30>
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001cba:	e027      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cbe:	613b      	str	r3, [r7, #16]
      break;
 8001cc0:	e027      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	0c9b      	lsrs	r3, r3, #18
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4a17      	ldr	r2, [pc, #92]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d010      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cda:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0c5b      	lsrs	r3, r3, #17
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	4a11      	ldr	r2, [pc, #68]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ce6:	5cd3      	ldrb	r3, [r2, r3]
 8001ce8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cee:	fb03 f202 	mul.w	r2, r3, r2
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e004      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	613b      	str	r3, [r7, #16]
      break;
 8001d0a:	e002      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d0e:	613b      	str	r3, [r7, #16]
      break;
 8001d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d12:	693b      	ldr	r3, [r7, #16]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	007a1200 	.word	0x007a1200
 8001d28:	0800f3e4 	.word	0x0800f3e4
 8001d2c:	0800f3f4 	.word	0x0800f3f4
 8001d30:	003d0900 	.word	0x003d0900

08001d34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <RCC_Delay+0x34>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <RCC_Delay+0x38>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0a5b      	lsrs	r3, r3, #9
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d50:	bf00      	nop
  }
  while (Delay --);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1e5a      	subs	r2, r3, #1
 8001d56:	60fa      	str	r2, [r7, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f9      	bne.n	8001d50 <RCC_Delay+0x1c>
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	10624dd3 	.word	0x10624dd3

08001d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e041      	b.n	8001e06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff f83a 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 fab2 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e041      	b.n	8001ea4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f839 	bl	8001eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f000 fa63 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_TIM_PWM_Start+0x24>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	bf14      	ite	ne
 8001edc:	2301      	movne	r3, #1
 8001ede:	2300      	moveq	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e022      	b.n	8001f2a <HAL_TIM_PWM_Start+0x6a>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d109      	bne.n	8001efe <HAL_TIM_PWM_Start+0x3e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	bf14      	ite	ne
 8001ef6:	2301      	movne	r3, #1
 8001ef8:	2300      	moveq	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	e015      	b.n	8001f2a <HAL_TIM_PWM_Start+0x6a>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d109      	bne.n	8001f18 <HAL_TIM_PWM_Start+0x58>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	bf14      	ite	ne
 8001f10:	2301      	movne	r3, #1
 8001f12:	2300      	moveq	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e008      	b.n	8001f2a <HAL_TIM_PWM_Start+0x6a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e05e      	b.n	8001ff0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d104      	bne.n	8001f42 <HAL_TIM_PWM_Start+0x82>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f40:	e013      	b.n	8001f6a <HAL_TIM_PWM_Start+0xaa>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d104      	bne.n	8001f52 <HAL_TIM_PWM_Start+0x92>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f50:	e00b      	b.n	8001f6a <HAL_TIM_PWM_Start+0xaa>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d104      	bne.n	8001f62 <HAL_TIM_PWM_Start+0xa2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f60:	e003      	b.n	8001f6a <HAL_TIM_PWM_Start+0xaa>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	6839      	ldr	r1, [r7, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fc5c 	bl	8002830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff8 <HAL_TIM_PWM_Start+0x138>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d107      	bne.n	8001f92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a18      	ldr	r2, [pc, #96]	@ (8001ff8 <HAL_TIM_PWM_Start+0x138>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_TIM_PWM_Start+0xfa>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa4:	d009      	beq.n	8001fba <HAL_TIM_PWM_Start+0xfa>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <HAL_TIM_PWM_Start+0x13c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d004      	beq.n	8001fba <HAL_TIM_PWM_Start+0xfa>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <HAL_TIM_PWM_Start+0x140>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d111      	bne.n	8001fde <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d010      	beq.n	8001fee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fdc:	e007      	b.n	8001fee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800

08002004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800201e:	2302      	movs	r3, #2
 8002020:	e0ae      	b.n	8002180 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	f200 809f 	bhi.w	8002170 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002032:	a201      	add	r2, pc, #4	@ (adr r2, 8002038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	0800206d 	.word	0x0800206d
 800203c:	08002171 	.word	0x08002171
 8002040:	08002171 	.word	0x08002171
 8002044:	08002171 	.word	0x08002171
 8002048:	080020ad 	.word	0x080020ad
 800204c:	08002171 	.word	0x08002171
 8002050:	08002171 	.word	0x08002171
 8002054:	08002171 	.word	0x08002171
 8002058:	080020ef 	.word	0x080020ef
 800205c:	08002171 	.word	0x08002171
 8002060:	08002171 	.word	0x08002171
 8002064:	08002171 	.word	0x08002171
 8002068:	0800212f 	.word	0x0800212f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f9be 	bl	80023f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0208 	orr.w	r2, r2, #8
 8002086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6999      	ldr	r1, [r3, #24]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	619a      	str	r2, [r3, #24]
      break;
 80020aa:	e064      	b.n	8002176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fa04 	bl	80024c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6999      	ldr	r1, [r3, #24]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	021a      	lsls	r2, r3, #8
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	619a      	str	r2, [r3, #24]
      break;
 80020ec:	e043      	b.n	8002176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fa4d 	bl	8002594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0208 	orr.w	r2, r2, #8
 8002108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0204 	bic.w	r2, r2, #4
 8002118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69d9      	ldr	r1, [r3, #28]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	61da      	str	r2, [r3, #28]
      break;
 800212c:	e023      	b.n	8002176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fa97 	bl	8002668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69d9      	ldr	r1, [r3, #28]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	021a      	lsls	r2, r3, #8
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	61da      	str	r2, [r3, #28]
      break;
 800216e:	e002      	b.n	8002176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	75fb      	strb	r3, [r7, #23]
      break;
 8002174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800217e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_ConfigClockSource+0x1c>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0b4      	b.n	800230e <HAL_TIM_ConfigClockSource+0x186>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021dc:	d03e      	beq.n	800225c <HAL_TIM_ConfigClockSource+0xd4>
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e2:	f200 8087 	bhi.w	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ea:	f000 8086 	beq.w	80022fa <HAL_TIM_ConfigClockSource+0x172>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021f2:	d87f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 80021f4:	2b70      	cmp	r3, #112	@ 0x70
 80021f6:	d01a      	beq.n	800222e <HAL_TIM_ConfigClockSource+0xa6>
 80021f8:	2b70      	cmp	r3, #112	@ 0x70
 80021fa:	d87b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b60      	cmp	r3, #96	@ 0x60
 80021fe:	d050      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002200:	2b60      	cmp	r3, #96	@ 0x60
 8002202:	d877      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b50      	cmp	r3, #80	@ 0x50
 8002206:	d03c      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0xfa>
 8002208:	2b50      	cmp	r3, #80	@ 0x50
 800220a:	d873      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b40      	cmp	r3, #64	@ 0x40
 800220e:	d058      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002210:	2b40      	cmp	r3, #64	@ 0x40
 8002212:	d86f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b30      	cmp	r3, #48	@ 0x30
 8002216:	d064      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002218:	2b30      	cmp	r3, #48	@ 0x30
 800221a:	d86b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d060      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d867      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05c      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d05a      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 800222c:	e062      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800223e:	f000 fad8 	bl	80027f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	609a      	str	r2, [r3, #8]
      break;
 800225a:	e04f      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800226c:	f000 fac1 	bl	80027f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800227e:	609a      	str	r2, [r3, #8]
      break;
 8002280:	e03c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	461a      	mov	r2, r3
 8002290:	f000 fa38 	bl	8002704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2150      	movs	r1, #80	@ 0x50
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fa8f 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 80022a0:	e02c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 fa56 	bl	8002760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2160      	movs	r1, #96	@ 0x60
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fa7f 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 80022c0:	e01c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 fa18 	bl	8002704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2140      	movs	r1, #64	@ 0x40
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fa6f 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 80022e0:	e00c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f000 fa66 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 80022f2:	e003      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      break;
 80022f8:	e000      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a2f      	ldr	r2, [pc, #188]	@ (80023e8 <TIM_Base_SetConfig+0xd0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00b      	beq.n	8002348 <TIM_Base_SetConfig+0x30>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002336:	d007      	beq.n	8002348 <TIM_Base_SetConfig+0x30>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a2c      	ldr	r2, [pc, #176]	@ (80023ec <TIM_Base_SetConfig+0xd4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <TIM_Base_SetConfig+0x30>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a2b      	ldr	r2, [pc, #172]	@ (80023f0 <TIM_Base_SetConfig+0xd8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d108      	bne.n	800235a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800234e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a22      	ldr	r2, [pc, #136]	@ (80023e8 <TIM_Base_SetConfig+0xd0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00b      	beq.n	800237a <TIM_Base_SetConfig+0x62>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002368:	d007      	beq.n	800237a <TIM_Base_SetConfig+0x62>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1f      	ldr	r2, [pc, #124]	@ (80023ec <TIM_Base_SetConfig+0xd4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d003      	beq.n	800237a <TIM_Base_SetConfig+0x62>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1e      	ldr	r2, [pc, #120]	@ (80023f0 <TIM_Base_SetConfig+0xd8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d108      	bne.n	800238c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a0d      	ldr	r2, [pc, #52]	@ (80023e8 <TIM_Base_SetConfig+0xd0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d103      	bne.n	80023c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f023 0201 	bic.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]
  }
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	40000400 	.word	0x40000400
 80023f0:	40000800 	.word	0x40000800

080023f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f023 0201 	bic.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f023 0302 	bic.w	r3, r3, #2
 800243c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a1c      	ldr	r2, [pc, #112]	@ (80024bc <TIM_OC1_SetConfig+0xc8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d10c      	bne.n	800246a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f023 0308 	bic.w	r3, r3, #8
 8002456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a13      	ldr	r2, [pc, #76]	@ (80024bc <TIM_OC1_SetConfig+0xc8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d111      	bne.n	8002496 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	621a      	str	r2, [r3, #32]
}
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00

080024c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f023 0210 	bic.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0320 	bic.w	r3, r3, #32
 800250a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <TIM_OC2_SetConfig+0xd0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d10d      	bne.n	800253c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800253a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a14      	ldr	r2, [pc, #80]	@ (8002590 <TIM_OC2_SetConfig+0xd0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d113      	bne.n	800256c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800254a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	621a      	str	r2, [r3, #32]
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40012c00 	.word	0x40012c00

08002594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002664 <TIM_OC3_SetConfig+0xd0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10d      	bne.n	800260e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800260c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <TIM_OC3_SetConfig+0xd0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d113      	bne.n	800263e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800261c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	621a      	str	r2, [r3, #32]
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40012c00 	.word	0x40012c00

08002668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800269e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	031b      	lsls	r3, r3, #12
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002700 <TIM_OC4_SetConfig+0x98>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d109      	bne.n	80026dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	40012c00 	.word	0x40012c00

08002704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0201 	bic.w	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800272e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 030a 	bic.w	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]
}
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f023 0210 	bic.w	r2, r3, #16
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800278a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	031b      	lsls	r3, r3, #12
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800279c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	621a      	str	r2, [r3, #32]
}
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	f043 0307 	orr.w	r3, r3, #7
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800280c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	431a      	orrs	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	609a      	str	r2, [r3, #8]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2201      	movs	r2, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1a      	ldr	r2, [r3, #32]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800288c:	2302      	movs	r3, #2
 800288e:	e046      	b.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a16      	ldr	r2, [pc, #88]	@ (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028dc:	d009      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a12      	ldr	r2, [pc, #72]	@ (800292c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a10      	ldr	r2, [pc, #64]	@ (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10c      	bne.n	800290c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	4313      	orrs	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800

08002934 <memset>:
 8002934:	4603      	mov	r3, r0
 8002936:	4402      	add	r2, r0
 8002938:	4293      	cmp	r3, r2
 800293a:	d100      	bne.n	800293e <memset+0xa>
 800293c:	4770      	bx	lr
 800293e:	f803 1b01 	strb.w	r1, [r3], #1
 8002942:	e7f9      	b.n	8002938 <memset+0x4>

08002944 <__libc_init_array>:
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	2600      	movs	r6, #0
 8002948:	4d0c      	ldr	r5, [pc, #48]	@ (800297c <__libc_init_array+0x38>)
 800294a:	4c0d      	ldr	r4, [pc, #52]	@ (8002980 <__libc_init_array+0x3c>)
 800294c:	1b64      	subs	r4, r4, r5
 800294e:	10a4      	asrs	r4, r4, #2
 8002950:	42a6      	cmp	r6, r4
 8002952:	d109      	bne.n	8002968 <__libc_init_array+0x24>
 8002954:	f000 f828 	bl	80029a8 <_init>
 8002958:	2600      	movs	r6, #0
 800295a:	4d0a      	ldr	r5, [pc, #40]	@ (8002984 <__libc_init_array+0x40>)
 800295c:	4c0a      	ldr	r4, [pc, #40]	@ (8002988 <__libc_init_array+0x44>)
 800295e:	1b64      	subs	r4, r4, r5
 8002960:	10a4      	asrs	r4, r4, #2
 8002962:	42a6      	cmp	r6, r4
 8002964:	d105      	bne.n	8002972 <__libc_init_array+0x2e>
 8002966:	bd70      	pop	{r4, r5, r6, pc}
 8002968:	f855 3b04 	ldr.w	r3, [r5], #4
 800296c:	4798      	blx	r3
 800296e:	3601      	adds	r6, #1
 8002970:	e7ee      	b.n	8002950 <__libc_init_array+0xc>
 8002972:	f855 3b04 	ldr.w	r3, [r5], #4
 8002976:	4798      	blx	r3
 8002978:	3601      	adds	r6, #1
 800297a:	e7f2      	b.n	8002962 <__libc_init_array+0x1e>
 800297c:	0800f3f8 	.word	0x0800f3f8
 8002980:	0800f3f8 	.word	0x0800f3f8
 8002984:	0800f3f8 	.word	0x0800f3f8
 8002988:	0800f3fc 	.word	0x0800f3fc

0800298c <memcpy>:
 800298c:	440a      	add	r2, r1
 800298e:	4291      	cmp	r1, r2
 8002990:	f100 33ff 	add.w	r3, r0, #4294967295
 8002994:	d100      	bne.n	8002998 <memcpy+0xc>
 8002996:	4770      	bx	lr
 8002998:	b510      	push	{r4, lr}
 800299a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800299e:	4291      	cmp	r1, r2
 80029a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029a4:	d1f9      	bne.n	800299a <memcpy+0xe>
 80029a6:	bd10      	pop	{r4, pc}

080029a8 <_init>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr

080029b4 <_fini>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	bf00      	nop
 80029b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ba:	bc08      	pop	{r3}
 80029bc:	469e      	mov	lr, r3
 80029be:	4770      	bx	lr
