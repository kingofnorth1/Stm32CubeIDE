
F407TIM_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007454  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  080075e8  080075e8  000085e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd0  08007fd0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd0  08007fd0  00008fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd8  08007fd8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd8  08007fd8  00008fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fdc  08007fdc  00008fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007fe0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000006a0  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000874  20000874  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de72  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000236b  00000000  00000000  00017076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  000193e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002276c  00000000  00000000  0001a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a77  00000000  00000000  0003c984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd7e0  00000000  00000000  0004f3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cbdb  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000b06  00000000  00000000  0011cc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ca0  00000000  00000000  0011d724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001223c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075cc 	.word	0x080075cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080075cc 	.word	0x080075cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a26      	ldr	r2, [pc, #152]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a11      	ldr	r2, [pc, #68]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_GPIO_Init+0xb8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <MX_GPIO_Init+0xbc>)
 8000fc6:	f001 fa73 	bl	80024b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <MX_GPIO_Init+0xbc>)
 8000fe4:	f001 f8c8 	bl	8002178 <HAL_GPIO_Init>

}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	@ 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_I2C1_Init+0x50>)
 8000ffe:	4a13      	ldr	r2, [pc, #76]	@ (800104c <MX_I2C1_Init+0x54>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001004:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <MX_I2C1_Init+0x58>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001016:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800101a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_I2C1_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <MX_I2C1_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001036:	f001 fa55 	bl	80024e4 <HAL_I2C_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001040:	f000 f966 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200001f0 	.word	0x200001f0
 800104c:	40005400 	.word	0x40005400
 8001050:	000186a0 	.word	0x000186a0

08001054 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <HAL_I2C_MspInit+0x84>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d12b      	bne.n	80010ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001092:	23c0      	movs	r3, #192	@ 0xc0
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001096:	2312      	movs	r3, #18
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a2:	2304      	movs	r3, #4
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <HAL_I2C_MspInit+0x8c>)
 80010ae:	f001 f863 	bl	8002178 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	@ 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40005400 	.word	0x40005400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020400 	.word	0x40020400
 80010e4:	00000000 	.word	0x00000000

080010e8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 0 */
int upEdge = 0;
int downEdge = 0;
float distance = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if (htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x88>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d133      	bne.n	8001160 <HAL_TIM_IC_CaptureCallback+0x78>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7f1b      	ldrb	r3, [r3, #28]
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d12f      	bne.n	8001160 <HAL_TIM_IC_CaptureCallback+0x78>
		upEdge = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);
 8001100:	2108      	movs	r1, #8
 8001102:	481b      	ldr	r0, [pc, #108]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001104:	f003 f87a 	bl	80041fc <HAL_TIM_ReadCapturedValue>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800110e:	601a      	str	r2, [r3, #0]
		downEdge = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);
 8001110:	210c      	movs	r1, #12
 8001112:	4817      	ldr	r0, [pc, #92]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001114:	f003 f872 	bl	80041fc <HAL_TIM_ReadCapturedValue>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <HAL_TIM_IC_CaptureCallback+0x90>)
 800111e:	601a      	str	r2, [r3, #0]
		distance = ((downEdge - upEdge) * 0.034) / 2;
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f9fa 	bl	8000524 <__aeabi_i2d>
 8001130:	a30d      	add	r3, pc, #52	@ (adr r3, 8001168 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800114a:	f7ff fb7f 	bl	800084c <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fd27 	bl	8000ba8 <__aeabi_d2f>
 800115a:	4603      	mov	r3, r0
 800115c:	4a07      	ldr	r2, [pc, #28]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x94>)
 800115e:	6013      	str	r3, [r2, #0]
	}
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	b020c49c 	.word	0xb020c49c
 800116c:	3fa16872 	.word	0x3fa16872
 8001170:	200006dc 	.word	0x200006dc
 8001174:	20000244 	.word	0x20000244
 8001178:	20000248 	.word	0x20000248
 800117c:	2000024c 	.word	0x2000024c

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001186:	f000 fe4f 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118a:	f000 f859 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f7ff fed3 	bl	8000f38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001192:	f7ff ff31 	bl	8000ff8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001196:	f000 fd4b 	bl	8001c30 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800119a:	f000 f8e7 	bl	800136c <OLED_Init>
  HAL_TIM_Base_Start(&htim1);
 800119e:	4823      	ldr	r0, [pc, #140]	@ (800122c <main+0xac>)
 80011a0:	f002 fb12 	bl	80037c8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_3);
 80011a4:	2108      	movs	r1, #8
 80011a6:	4821      	ldr	r0, [pc, #132]	@ (800122c <main+0xac>)
 80011a8:	f002 fbd0 	bl	800394c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 80011ac:	210c      	movs	r1, #12
 80011ae:	481f      	ldr	r0, [pc, #124]	@ (800122c <main+0xac>)
 80011b0:	f002 fca8 	bl	8003b04 <HAL_TIM_IC_Start_IT>

  char message[20] = "";
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011cc:	4818      	ldr	r0, [pc, #96]	@ (8001230 <main+0xb0>)
 80011ce:	f001 f96f 	bl	80024b0 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 fe9a 	bl	8001f0c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011de:	4814      	ldr	r0, [pc, #80]	@ (8001230 <main+0xb0>)
 80011e0:	f001 f966 	bl	80024b0 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <main+0xac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_Delay(20);
 80011ec:	2014      	movs	r0, #20
 80011ee:	f000 fe8d 	bl	8001f0c <HAL_Delay>
	  OLED_NewFrame();
 80011f2:	f000 f917 	bl	8001424 <OLED_NewFrame>

	  sprintf(message, "距离: %.2fcm", distance);
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <main+0xb4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9a4 	bl	8000548 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	1d38      	adds	r0, r7, #4
 8001206:	490c      	ldr	r1, [pc, #48]	@ (8001238 <main+0xb8>)
 8001208:	f004 f8a4 	bl	8005354 <siprintf>
	  OLED_PrintString(0, 0, message, &font16x16, OLED_COLOR_NORMAL);
 800120c:	1d3a      	adds	r2, r7, #4
 800120e:	2300      	movs	r3, #0
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <main+0xbc>)
 8001214:	2100      	movs	r1, #0
 8001216:	2000      	movs	r0, #0
 8001218:	f000 fb2a 	bl	8001870 <OLED_PrintString>

	  OLED_ShowFrame();
 800121c:	f000 f90e 	bl	800143c <OLED_ShowFrame>
	  HAL_Delay(500);
 8001220:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001224:	f000 fe72 	bl	8001f0c <HAL_Delay>
  {
 8001228:	bf00      	nop
 800122a:	e7cc      	b.n	80011c6 <main+0x46>
 800122c:	200006dc 	.word	0x200006dc
 8001230:	40021000 	.word	0x40021000
 8001234:	2000024c 	.word	0x2000024c
 8001238:	080075e8 	.word	0x080075e8
 800123c:	08007c38 	.word	0x08007c38

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	@ 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	2230      	movs	r2, #48	@ 0x30
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f004 f8f3 	bl	800543a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <SystemClock_Config+0xc8>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	4a26      	ldr	r2, [pc, #152]	@ (8001308 <SystemClock_Config+0xc8>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001272:	6413      	str	r3, [r2, #64]	@ 0x40
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <SystemClock_Config+0xc8>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	4b21      	ldr	r3, [pc, #132]	@ (800130c <SystemClock_Config+0xcc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a20      	ldr	r2, [pc, #128]	@ (800130c <SystemClock_Config+0xcc>)
 800128a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <SystemClock_Config+0xcc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129c:	2301      	movs	r3, #1
 800129e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a6:	2302      	movs	r3, #2
 80012a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012b4:	2348      	movs	r3, #72	@ 0x48
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012bc:	2304      	movs	r3, #4
 80012be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fdab 	bl	8002e20 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d0:	f000 f81e 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d8:	2302      	movs	r3, #2
 80012da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2102      	movs	r1, #2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 f80d 	bl	8003310 <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012fc:	f000 f808 	bl	8001310 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	@ 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <Error_Handler+0x8>

0800131c <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	b29b      	uxth	r3, r3
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	2178      	movs	r1, #120	@ 0x78
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <OLED_Send+0x28>)
 8001338:	f001 fa18 	bl	800276c <HAL_I2C_Master_Transmit>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001f0 	.word	0x200001f0

08001348 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <OLED_SendCmd+0x20>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001358:	2102      	movs	r1, #2
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <OLED_SendCmd+0x20>)
 800135c:	f7ff ffde 	bl	800131c <OLED_Send>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000650 	.word	0x20000650

0800136c <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001370:	20ae      	movs	r0, #174	@ 0xae
 8001372:	f7ff ffe9 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8001376:	2020      	movs	r0, #32
 8001378:	f7ff ffe6 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 800137c:	2010      	movs	r0, #16
 800137e:	f7ff ffe3 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8001382:	20b0      	movs	r0, #176	@ 0xb0
 8001384:	f7ff ffe0 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8001388:	20c8      	movs	r0, #200	@ 0xc8
 800138a:	f7ff ffdd 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff ffda 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001394:	2010      	movs	r0, #16
 8001396:	f7ff ffd7 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 800139a:	2040      	movs	r0, #64	@ 0x40
 800139c:	f7ff ffd4 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80013a0:	2081      	movs	r0, #129	@ 0x81
 80013a2:	f7ff ffd1 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80013a6:	20df      	movs	r0, #223	@ 0xdf
 80013a8:	f7ff ffce 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 80013ac:	20a1      	movs	r0, #161	@ 0xa1
 80013ae:	f7ff ffcb 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 80013b2:	20a6      	movs	r0, #166	@ 0xa6
 80013b4:	f7ff ffc8 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 80013b8:	20a8      	movs	r0, #168	@ 0xa8
 80013ba:	f7ff ffc5 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 80013be:	203f      	movs	r0, #63	@ 0x3f
 80013c0:	f7ff ffc2 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 80013c4:	20a4      	movs	r0, #164	@ 0xa4
 80013c6:	f7ff ffbf 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 80013ca:	20d3      	movs	r0, #211	@ 0xd3
 80013cc:	f7ff ffbc 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ffb9 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 80013d6:	20d5      	movs	r0, #213	@ 0xd5
 80013d8:	f7ff ffb6 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 80013dc:	20f0      	movs	r0, #240	@ 0xf0
 80013de:	f7ff ffb3 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 80013e2:	20d9      	movs	r0, #217	@ 0xd9
 80013e4:	f7ff ffb0 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 80013e8:	2022      	movs	r0, #34	@ 0x22
 80013ea:	f7ff ffad 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 80013ee:	20da      	movs	r0, #218	@ 0xda
 80013f0:	f7ff ffaa 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80013f4:	2012      	movs	r0, #18
 80013f6:	f7ff ffa7 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 80013fa:	20db      	movs	r0, #219	@ 0xdb
 80013fc:	f7ff ffa4 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8001400:	2020      	movs	r0, #32
 8001402:	f7ff ffa1 	bl	8001348 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001406:	208d      	movs	r0, #141	@ 0x8d
 8001408:	f7ff ff9e 	bl	8001348 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 800140c:	2014      	movs	r0, #20
 800140e:	f7ff ff9b 	bl	8001348 <OLED_SendCmd>

  OLED_NewFrame();
 8001412:	f000 f807 	bl	8001424 <OLED_NewFrame>
  OLED_ShowFrame();
 8001416:	f000 f811 	bl	800143c <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 800141a:	20af      	movs	r0, #175	@ 0xaf
 800141c:	f7ff ff94 	bl	8001348 <OLED_SendCmd>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001428:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800142c:	2100      	movs	r1, #0
 800142e:	4802      	ldr	r0, [pc, #8]	@ (8001438 <OLED_NewFrame+0x14>)
 8001430:	f004 f803 	bl	800543a <memset>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000250 	.word	0x20000250

0800143c <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <OLED_ShowFrame+0x5c>)
 8001444:	2240      	movs	r2, #64	@ 0x40
 8001446:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	e01b      	b.n	8001486 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	3b50      	subs	r3, #80	@ 0x50
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff77 	bl	8001348 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff ff74 	bl	8001348 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001460:	2010      	movs	r0, #16
 8001462:	f7ff ff71 	bl	8001348 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8001466:	480d      	ldr	r0, [pc, #52]	@ (800149c <OLED_ShowFrame+0x60>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	01db      	lsls	r3, r3, #7
 800146c:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <OLED_ShowFrame+0x64>)
 800146e:	4413      	add	r3, r2
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	4619      	mov	r1, r3
 8001474:	f004 f861 	bl	800553a <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001478:	2181      	movs	r1, #129	@ 0x81
 800147a:	4807      	ldr	r0, [pc, #28]	@ (8001498 <OLED_ShowFrame+0x5c>)
 800147c:	f7ff ff4e 	bl	800131c <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	3301      	adds	r3, #1
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b07      	cmp	r3, #7
 800148a:	d9e0      	bls.n	800144e <OLED_ShowFrame+0x12>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000654 	.word	0x20000654
 800149c:	20000655 	.word	0x20000655
 80014a0:	20000250 	.word	0x20000250

080014a4 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 80014a4:	b490      	push	{r4, r7}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	71fb      	strb	r3, [r7, #7]
 80014b6:	4603      	mov	r3, r0
 80014b8:	71bb      	strb	r3, [r7, #6]
 80014ba:	460b      	mov	r3, r1
 80014bc:	717b      	strb	r3, [r7, #5]
 80014be:	4613      	mov	r3, r2
 80014c0:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b07      	cmp	r3, #7
 80014c6:	d860      	bhi.n	800158a <OLED_SetByte_Fine+0xe6>
 80014c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db5c      	blt.n	800158a <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 80014d0:	7d3b      	ldrb	r3, [r7, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <OLED_SetByte_Fine+0x38>
    data = ~data;
 80014d6:	797b      	ldrb	r3, [r7, #5]
 80014d8:	43db      	mvns	r3, r3
 80014da:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80014dc:	7c3b      	ldrb	r3, [r7, #16]
 80014de:	3301      	adds	r3, #1
 80014e0:	22ff      	movs	r2, #255	@ 0xff
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b25a      	sxtb	r2, r3
 80014f0:	793b      	ldrb	r3, [r7, #4]
 80014f2:	f1c3 0308 	rsb	r3, r3, #8
 80014f6:	21ff      	movs	r1, #255	@ 0xff
 80014f8:	fa41 f303 	asr.w	r3, r1, r3
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b25b      	sxtb	r3, r3
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <OLED_SetByte_Fine+0xf0>)
 8001506:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001508:	79fa      	ldrb	r2, [r7, #7]
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	4922      	ldr	r1, [pc, #136]	@ (8001598 <OLED_SetByte_Fine+0xf4>)
 800150e:	01d2      	lsls	r2, r2, #7
 8001510:	440a      	add	r2, r1
 8001512:	4413      	add	r3, r2
 8001514:	7818      	ldrb	r0, [r3, #0]
 8001516:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <OLED_SetByte_Fine+0xf0>)
 8001518:	7819      	ldrb	r1, [r3, #0]
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	4001      	ands	r1, r0
 8001520:	b2c8      	uxtb	r0, r1
 8001522:	491d      	ldr	r1, [pc, #116]	@ (8001598 <OLED_SetByte_Fine+0xf4>)
 8001524:	01d2      	lsls	r2, r2, #7
 8001526:	440a      	add	r2, r1
 8001528:	4413      	add	r3, r2
 800152a:	4602      	mov	r2, r0
 800152c:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 800152e:	7c3b      	ldrb	r3, [r7, #16]
 8001530:	3301      	adds	r3, #1
 8001532:	22ff      	movs	r2, #255	@ 0xff
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	b25b      	sxtb	r3, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	b25a      	sxtb	r2, r3
 800153e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001542:	4013      	ands	r3, r2
 8001544:	b25a      	sxtb	r2, r3
 8001546:	793b      	ldrb	r3, [r7, #4]
 8001548:	f1c3 0308 	rsb	r3, r3, #8
 800154c:	21ff      	movs	r1, #255	@ 0xff
 800154e:	fa41 f303 	asr.w	r3, r1, r3
 8001552:	b25b      	sxtb	r3, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	b25b      	sxtb	r3, r3
 8001558:	4013      	ands	r3, r2
 800155a:	b25b      	sxtb	r3, r3
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <OLED_SetByte_Fine+0xf0>)
 8001560:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	490c      	ldr	r1, [pc, #48]	@ (8001598 <OLED_SetByte_Fine+0xf4>)
 8001568:	01d2      	lsls	r2, r2, #7
 800156a:	440a      	add	r2, r1
 800156c:	4413      	add	r3, r2
 800156e:	7818      	ldrb	r0, [r3, #0]
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <OLED_SetByte_Fine+0xf0>)
 8001572:	7819      	ldrb	r1, [r3, #0]
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	4301      	orrs	r1, r0
 800157a:	b2c8      	uxtb	r0, r1
 800157c:	4906      	ldr	r1, [pc, #24]	@ (8001598 <OLED_SetByte_Fine+0xf4>)
 800157e:	01d2      	lsls	r2, r2, #7
 8001580:	440a      	add	r2, r1
 8001582:	4413      	add	r3, r2
 8001584:	4602      	mov	r2, r0
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e000      	b.n	800158c <OLED_SetByte_Fine+0xe8>
    return;
 800158a:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bc90      	pop	{r4, r7}
 8001592:	4770      	bx	lr
 8001594:	200006d5 	.word	0x200006d5
 8001598:	20000250 	.word	0x20000250

0800159c <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	4604      	mov	r4, r0
 80015a4:	4608      	mov	r0, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	71fb      	strb	r3, [r7, #7]
 80015ae:	4603      	mov	r3, r0
 80015b0:	71bb      	strb	r3, [r7, #6]
 80015b2:	460b      	mov	r3, r1
 80015b4:	717b      	strb	r3, [r7, #5]
 80015b6:	4613      	mov	r3, r2
 80015b8:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 80015c8:	7bba      	ldrb	r2, [r7, #14]
 80015ca:	793b      	ldrb	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	dd29      	ble.n	8001626 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80015d2:	797a      	ldrb	r2, [r7, #5]
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	7bbc      	ldrb	r4, [r7, #14]
 80015de:	79f9      	ldrb	r1, [r7, #7]
 80015e0:	7bf8      	ldrb	r0, [r7, #15]
 80015e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	2307      	movs	r3, #7
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4623      	mov	r3, r4
 80015ee:	f7ff ff59 	bl	80014a4 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2d8      	uxtb	r0, r3
 80015f8:	797a      	ldrb	r2, [r7, #5]
 80015fa:	7bbb      	ldrb	r3, [r7, #14]
 80015fc:	f1c3 0308 	rsb	r3, r3, #8
 8001600:	fa42 f303 	asr.w	r3, r2, r3
 8001604:	b2dc      	uxtb	r4, r3
 8001606:	793a      	ldrb	r2, [r7, #4]
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	4413      	add	r3, r2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	3b09      	subs	r3, #9
 8001610:	b2db      	uxtb	r3, r3
 8001612:	79f9      	ldrb	r1, [r7, #7]
 8001614:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001618:	9201      	str	r2, [sp, #4]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	4622      	mov	r2, r4
 8001620:	f7ff ff40 	bl	80014a4 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001624:	e015      	b.n	8001652 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001626:	797a      	ldrb	r2, [r7, #5]
 8001628:	7bbb      	ldrb	r3, [r7, #14]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	b2dc      	uxtb	r4, r3
 8001630:	7bba      	ldrb	r2, [r7, #14]
 8001632:	793b      	ldrb	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	b2db      	uxtb	r3, r3
 8001638:	3b01      	subs	r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	7bbd      	ldrb	r5, [r7, #14]
 800163e:	79f9      	ldrb	r1, [r7, #7]
 8001640:	7bf8      	ldrb	r0, [r7, #15]
 8001642:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001646:	9201      	str	r2, [sp, #4]
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	462b      	mov	r3, r5
 800164c:	4622      	mov	r2, r4
 800164e:	f7ff ff29 	bl	80014a4 <OLED_SetByte_Fine>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bdb0      	pop	{r4, r5, r7, pc}

0800165a <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 800165a:	b590      	push	{r4, r7, lr}
 800165c:	b087      	sub	sp, #28
 800165e:	af02      	add	r7, sp, #8
 8001660:	4604      	mov	r4, r0
 8001662:	4608      	mov	r0, r1
 8001664:	4611      	mov	r1, r2
 8001666:	461a      	mov	r2, r3
 8001668:	4623      	mov	r3, r4
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	4603      	mov	r3, r0
 800166e:	71bb      	strb	r3, [r7, #6]
 8001670:	460b      	mov	r3, r1
 8001672:	717b      	strb	r3, [r7, #5]
 8001674:	4613      	mov	r3, r2
 8001676:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001686:	797a      	ldrb	r2, [r7, #5]
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	b2da      	uxtb	r2, r3
 8001690:	7bbc      	ldrb	r4, [r7, #14]
 8001692:	79f9      	ldrb	r1, [r7, #7]
 8001694:	7bf8      	ldrb	r0, [r7, #15]
 8001696:	793b      	ldrb	r3, [r7, #4]
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2307      	movs	r3, #7
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4623      	mov	r3, r4
 80016a0:	f7ff ff00 	bl	80014a4 <OLED_SetByte_Fine>
  if (bit)
 80016a4:	7bbb      	ldrb	r3, [r7, #14]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d014      	beq.n	80016d4 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2d8      	uxtb	r0, r3
 80016b0:	797a      	ldrb	r2, [r7, #5]
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	f1c3 0308 	rsb	r3, r3, #8
 80016b8:	fa42 f303 	asr.w	r3, r2, r3
 80016bc:	b2dc      	uxtb	r4, r3
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	79f9      	ldrb	r1, [r7, #7]
 80016c6:	793a      	ldrb	r2, [r7, #4]
 80016c8:	9201      	str	r2, [sp, #4]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	4622      	mov	r2, r4
 80016d0:	f7ff fee8 	bl	80014a4 <OLED_SetByte_Fine>
  }
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd90      	pop	{r4, r7, pc}

080016dc <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b087      	sub	sp, #28
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	603a      	str	r2, [r7, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	460b      	mov	r3, r1
 80016ec:	71bb      	strb	r3, [r7, #6]
 80016ee:	4613      	mov	r3, r2
 80016f0:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 80016f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 80016fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e025      	b.n	8001756 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 800170a:	2300      	movs	r3, #0
 800170c:	73bb      	strb	r3, [r7, #14]
 800170e:	e01b      	b.n	8001748 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	4413      	add	r3, r2
 8001716:	b2d8      	uxtb	r0, r3
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	b2da      	uxtb	r2, r3
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	4413      	add	r3, r2
 8001722:	b2dc      	uxtb	r4, r3
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	7bbb      	ldrb	r3, [r7, #14]
 8001728:	7979      	ldrb	r1, [r7, #5]
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800173c:	4621      	mov	r1, r4
 800173e:	f7ff ff8c 	bl	800165a <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	3301      	adds	r3, #1
 8001746:	73bb      	strb	r3, [r7, #14]
 8001748:	7bba      	ldrb	r2, [r7, #14]
 800174a:	7b3b      	ldrb	r3, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d3df      	bcc.n	8001710 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	3301      	adds	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	797b      	ldrb	r3, [r7, #5]
 800175a:	429a      	cmp	r2, r3
 800175c:	d3d5      	bcc.n	800170a <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 800175e:	7afb      	ldrb	r3, [r7, #11]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d028      	beq.n	80017b6 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001764:	797b      	ldrb	r3, [r7, #5]
 8001766:	b29a      	uxth	r2, r3
 8001768:	7b3b      	ldrb	r3, [r7, #12]
 800176a:	b29b      	uxth	r3, r3
 800176c:	fb12 f303 	smulbb	r3, r2, r3
 8001770:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	737b      	strb	r3, [r7, #13]
 8001776:	e01a      	b.n	80017ae <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001778:	79fa      	ldrb	r2, [r7, #7]
 800177a:	7b7b      	ldrb	r3, [r7, #13]
 800177c:	4413      	add	r3, r2
 800177e:	b2d8      	uxtb	r0, r3
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	b2da      	uxtb	r2, r3
 8001786:	79bb      	ldrb	r3, [r7, #6]
 8001788:	4413      	add	r3, r2
 800178a:	b2d9      	uxtb	r1, r3
 800178c:	893a      	ldrh	r2, [r7, #8]
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	4413      	add	r3, r2
 8001792:	461a      	mov	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	7afc      	ldrb	r4, [r7, #11]
 800179c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	4623      	mov	r3, r4
 80017a4:	f7ff fefa 	bl	800159c <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 80017a8:	7b7b      	ldrb	r3, [r7, #13]
 80017aa:	3301      	adds	r3, #1
 80017ac:	737b      	strb	r3, [r7, #13]
 80017ae:	7b7a      	ldrb	r2, [r7, #13]
 80017b0:	797b      	ldrb	r3, [r7, #5]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3e0      	bcc.n	8001778 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}

080017be <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 80017be:	b5b0      	push	{r4, r5, r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af02      	add	r7, sp, #8
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	460b      	mov	r3, r1
 80017cc:	71bb      	strb	r3, [r7, #6]
 80017ce:	4613      	mov	r3, r2
 80017d0:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	797b      	ldrb	r3, [r7, #5]
 80017d8:	f1a3 0120 	sub.w	r1, r3, #32
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	3307      	adds	r3, #7
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	da00      	bge.n	80017e8 <OLED_PrintASCIIChar+0x2a>
 80017e6:	3307      	adds	r3, #7
 80017e8:	10db      	asrs	r3, r3, #3
 80017ea:	4618      	mov	r0, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	fb00 f303 	mul.w	r3, r0, r3
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	18d4      	adds	r4, r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	785d      	ldrb	r5, [r3, #1]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	79b9      	ldrb	r1, [r7, #6]
 8001804:	79f8      	ldrb	r0, [r7, #7]
 8001806:	7e3a      	ldrb	r2, [r7, #24]
 8001808:	9201      	str	r2, [sp, #4]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	462b      	mov	r3, r5
 800180e:	4622      	mov	r2, r4
 8001810:	f7ff ff64 	bl	80016dc <OLED_SetBlock>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bdb0      	pop	{r4, r5, r7, pc}

0800181c <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b25b      	sxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	db01      	blt.n	8001832 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 800182e:	2301      	movs	r3, #1
 8001830:	e018      	b.n	8001864 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800183a:	2bc0      	cmp	r3, #192	@ 0xc0
 800183c:	d101      	bne.n	8001842 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 800183e:	2302      	movs	r3, #2
 8001840:	e010      	b.n	8001864 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800184a:	2be0      	cmp	r3, #224	@ 0xe0
 800184c:	d101      	bne.n	8001852 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 800184e:	2303      	movs	r3, #3
 8001850:	e008      	b.n	8001864 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800185a:	2bf0      	cmp	r3, #240	@ 0xf0
 800185c:	d101      	bne.n	8001862 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 800185e:	2304      	movs	r3, #4
 8001860:	e000      	b.n	8001864 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af02      	add	r7, sp, #8
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	460b      	mov	r3, r1
 8001880:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8001882:	2300      	movs	r3, #0
 8001884:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	3307      	adds	r3, #7
 800188c:	2b00      	cmp	r3, #0
 800188e:	da00      	bge.n	8001892 <OLED_PrintString+0x22>
 8001890:	3307      	adds	r3, #7
 8001892:	10db      	asrs	r3, r3, #3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	fb12 f303 	smulbb	r3, r2, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3304      	adds	r3, #4
 80018a2:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 80018a4:	e07d      	b.n	80019a2 <OLED_PrintString+0x132>
  {
    found = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 80018aa:	8bfb      	ldrh	r3, [r7, #30]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	4413      	add	r3, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ffb3 	bl	800181c <_OLED_GetUTF8Len>
 80018b6:	4603      	mov	r3, r0
 80018b8:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 80018ba:	7ebb      	ldrb	r3, [r7, #26]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d078      	beq.n	80019b2 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	773b      	strb	r3, [r7, #28]
 80018c4:	e032      	b.n	800192c <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	7f3a      	ldrb	r2, [r7, #28]
 80018cc:	7ef9      	ldrb	r1, [r7, #27]
 80018ce:	fb01 f202 	mul.w	r2, r1, r2
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 80018d6:	8bfb      	ldrh	r3, [r7, #30]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	4413      	add	r3, r2
 80018dc:	7eba      	ldrb	r2, [r7, #26]
 80018de:	6979      	ldr	r1, [r7, #20]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fd9a 	bl	800541a <memcmp>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d11c      	bne.n	8001926 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1d1c      	adds	r4, r3, #4
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	785d      	ldrb	r5, [r3, #1]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	7bb9      	ldrb	r1, [r7, #14]
 80018fa:	7bf8      	ldrb	r0, [r7, #15]
 80018fc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001900:	9201      	str	r2, [sp, #4]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	462b      	mov	r3, r5
 8001906:	4622      	mov	r2, r4
 8001908:	f7ff fee8 	bl	80016dc <OLED_SetBlock>
        // 移动光标
        x += font->w;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	785a      	ldrb	r2, [r3, #1]
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	4413      	add	r3, r2
 8001914:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001916:	7ebb      	ldrb	r3, [r7, #26]
 8001918:	b29a      	uxth	r2, r3
 800191a:	8bfb      	ldrh	r3, [r7, #30]
 800191c:	4413      	add	r3, r2
 800191e:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8001920:	2301      	movs	r3, #1
 8001922:	777b      	strb	r3, [r7, #29]
        break;
 8001924:	e007      	b.n	8001936 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8001926:	7f3b      	ldrb	r3, [r7, #28]
 8001928:	3301      	adds	r3, #1
 800192a:	773b      	strb	r3, [r7, #28]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7a1b      	ldrb	r3, [r3, #8]
 8001930:	7f3a      	ldrb	r2, [r7, #28]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3c7      	bcc.n	80018c6 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8001936:	7f7b      	ldrb	r3, [r7, #29]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d132      	bne.n	80019a2 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 800193c:	7ebb      	ldrb	r3, [r7, #26]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d119      	bne.n	8001976 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8001942:	8bfb      	ldrh	r3, [r7, #30]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	4413      	add	r3, r2
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68dc      	ldr	r4, [r3, #12]
 800194e:	7bb9      	ldrb	r1, [r7, #14]
 8001950:	7bf8      	ldrb	r0, [r7, #15]
 8001952:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4623      	mov	r3, r4
 800195a:	f7ff ff30 	bl	80017be <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	785a      	ldrb	r2, [r3, #1]
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	4413      	add	r3, r2
 8001968:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800196a:	7ebb      	ldrb	r3, [r7, #26]
 800196c:	b29a      	uxth	r2, r3
 800196e:	8bfb      	ldrh	r3, [r7, #30]
 8001970:	4413      	add	r3, r2
 8001972:	83fb      	strh	r3, [r7, #30]
 8001974:	e015      	b.n	80019a2 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	7bb9      	ldrb	r1, [r7, #14]
 800197c:	7bf8      	ldrb	r0, [r7, #15]
 800197e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	2220      	movs	r2, #32
 8001988:	f7ff ff19 	bl	80017be <OLED_PrintASCIIChar>
        x += font->ascii->w;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	785a      	ldrb	r2, [r3, #1]
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	4413      	add	r3, r2
 8001996:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001998:	7ebb      	ldrb	r3, [r7, #26]
 800199a:	b29a      	uxth	r2, r3
 800199c:	8bfb      	ldrh	r3, [r7, #30]
 800199e:	4413      	add	r3, r2
 80019a0:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 80019a2:	8bfb      	ldrh	r3, [r7, #30]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f47f af7b 	bne.w	80018a6 <OLED_PrintString+0x36>
      }
    }
  }
}
 80019b0:	e000      	b.n	80019b4 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 80019b2:	bf00      	nop
}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bdb0      	pop	{r4, r5, r7, pc}

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001a08 <HAL_MspInit+0x4c>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <HAL_MspInit+0x4c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <NMI_Handler+0x4>

08001a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <MemManage_Handler+0x4>

08001a24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a62:	f000 fa33 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <TIM1_CC_IRQHandler+0x10>)
 8001a72:	f002 f96f 	bl	8003d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200006dc 	.word	0x200006dc

08001a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_kill>:

int _kill(int pid, int sig)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a9a:	f003 fd21 	bl	80054e0 <__errno>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2216      	movs	r2, #22
 8001aa2:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_exit>:

void _exit (int status)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ffe7 	bl	8001a90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ac2:	bf00      	nop
 8001ac4:	e7fd      	b.n	8001ac2 <_exit+0x12>

08001ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e00a      	b.n	8001aee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad8:	f3af 8000 	nop.w
 8001adc:	4601      	mov	r1, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	60ba      	str	r2, [r7, #8]
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	dbf0      	blt.n	8001ad8 <_read+0x12>
  }

  return len;
 8001af6:	687b      	ldr	r3, [r7, #4]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e009      	b.n	8001b26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	60ba      	str	r2, [r7, #8]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dbf1      	blt.n	8001b12 <_write+0x12>
  }
  return len;
 8001b2e:	687b      	ldr	r3, [r7, #4]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_close>:

int _close(int file)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b60:	605a      	str	r2, [r3, #4]
  return 0;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_isatty>:

int _isatty(int file)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b78:	2301      	movs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	@ (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f003 fc86 	bl	80054e0 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20020000 	.word	0x20020000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	200006d8 	.word	0x200006d8
 8001c08:	20000878 	.word	0x20000878

08001c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <SystemInit+0x20>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c16:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <SystemInit+0x20>)
 8001c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c4e:	463b      	mov	r3, r7
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c5a:	4b34      	ldr	r3, [pc, #208]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001c5c:	4a34      	ldr	r2, [pc, #208]	@ (8001d30 <MX_TIM1_Init+0x100>)
 8001c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001c60:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001c62:	2247      	movs	r2, #71	@ 0x47
 8001c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001c6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c86:	4829      	ldr	r0, [pc, #164]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001c88:	f001 fd4e 	bl	8003728 <HAL_TIM_Base_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001c92:	f7ff fb3d 	bl	8001310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c9c:	f107 0318 	add.w	r3, r7, #24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4822      	ldr	r0, [pc, #136]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001ca4:	f002 f9e2 	bl	800406c <HAL_TIM_ConfigClockSource>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001cae:	f7ff fb2f 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001cb2:	481e      	ldr	r0, [pc, #120]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001cb4:	f001 fdf0 	bl	8003898 <HAL_TIM_IC_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001cbe:	f7ff fb27 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cca:	f107 0310 	add.w	r3, r7, #16
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4816      	ldr	r0, [pc, #88]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001cd2:	f002 fd95 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001cdc:	f7ff fb18 	bl	8001310 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480d      	ldr	r0, [pc, #52]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001cf8:	f002 f91c 	bl	8003f34 <HAL_TIM_IC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d02:	f7ff fb05 	bl	8001310 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d06:	2302      	movs	r3, #2
 8001d08:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2204      	movs	r2, #4
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_TIM1_Init+0xfc>)
 8001d16:	f002 f90d 	bl	8003f34 <HAL_TIM_IC_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001d20:	f7ff faf6 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	@ 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200006dc 	.word	0x200006dc
 8001d30:	40010000 	.word	0x40010000

08001d34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc8 <HAL_TIM_Base_MspInit+0x94>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d134      	bne.n	8001dc0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <HAL_TIM_Base_MspInit+0x98>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dcc <HAL_TIM_Base_MspInit+0x98>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_TIM_Base_MspInit+0x98>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_TIM_Base_MspInit+0x98>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <HAL_TIM_Base_MspInit+0x98>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_TIM_Base_MspInit+0x98>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4809      	ldr	r0, [pc, #36]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001dac:	f000 f9e4 	bl	8002178 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	201b      	movs	r0, #27
 8001db6:	f000 f9a8 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001dba:	201b      	movs	r0, #27
 8001dbc:	f000 f9c1 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dd8:	f7ff ff18 	bl	8001c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dde:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f003 fb73 	bl	80054ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff f9bb 	bl	8001180 <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e18:	08007fe0 	.word	0x08007fe0
  ldr r2, =_sbss
 8001e1c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e20:	20000874 	.word	0x20000874

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f94f 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	200f      	movs	r0, #15
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fdae 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f967 	bl	800215e <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f92f 	bl	800210a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	@ (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000724 	.word	0x20000724

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000724 	.word	0x20000724

08001f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff ffee 	bl	8001ef4 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d005      	beq.n	8001f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_Delay+0x44>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f32:	bf00      	nop
 8001f34:	f7ff ffde 	bl	8001ef4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8f7      	bhi.n	8001f34 <HAL_Delay+0x28>
  {
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	@ (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	@ (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	@ (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	@ 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	@ 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f7ff ff8e 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff29 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff3e 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff8e 	bl	8002048 <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5d 	bl	8001ff4 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff31 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa2 	bl	80020b0 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	e16b      	b.n	800246c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f040 815a 	bne.w	8002466 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d005      	beq.n	80021ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d130      	bne.n	800222c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 0201 	and.w	r2, r3, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b03      	cmp	r3, #3
 8002236:	d017      	beq.n	8002268 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d123      	bne.n	80022bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	220f      	movs	r2, #15
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	08da      	lsrs	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3208      	adds	r2, #8
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0203 	and.w	r2, r3, #3
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80b4 	beq.w	8002466 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b60      	ldr	r3, [pc, #384]	@ (8002484 <HAL_GPIO_Init+0x30c>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	4a5f      	ldr	r2, [pc, #380]	@ (8002484 <HAL_GPIO_Init+0x30c>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800230c:	6453      	str	r3, [r2, #68]	@ 0x44
 800230e:	4b5d      	ldr	r3, [pc, #372]	@ (8002484 <HAL_GPIO_Init+0x30c>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231a:	4a5b      	ldr	r2, [pc, #364]	@ (8002488 <HAL_GPIO_Init+0x310>)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a52      	ldr	r2, [pc, #328]	@ (800248c <HAL_GPIO_Init+0x314>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02b      	beq.n	800239e <HAL_GPIO_Init+0x226>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a51      	ldr	r2, [pc, #324]	@ (8002490 <HAL_GPIO_Init+0x318>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d025      	beq.n	800239a <HAL_GPIO_Init+0x222>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a50      	ldr	r2, [pc, #320]	@ (8002494 <HAL_GPIO_Init+0x31c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_Init+0x21e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4f      	ldr	r2, [pc, #316]	@ (8002498 <HAL_GPIO_Init+0x320>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_GPIO_Init+0x21a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4e      	ldr	r2, [pc, #312]	@ (800249c <HAL_GPIO_Init+0x324>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0x216>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4d      	ldr	r2, [pc, #308]	@ (80024a0 <HAL_GPIO_Init+0x328>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_GPIO_Init+0x212>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4c      	ldr	r2, [pc, #304]	@ (80024a4 <HAL_GPIO_Init+0x32c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x20e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4b      	ldr	r2, [pc, #300]	@ (80024a8 <HAL_GPIO_Init+0x330>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_GPIO_Init+0x20a>
 800237e:	2307      	movs	r3, #7
 8002380:	e00e      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 8002382:	2308      	movs	r3, #8
 8002384:	e00c      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 8002386:	2306      	movs	r3, #6
 8002388:	e00a      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 800238a:	2305      	movs	r3, #5
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 800238e:	2304      	movs	r3, #4
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4935      	ldr	r1, [pc, #212]	@ (8002488 <HAL_GPIO_Init+0x310>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023be:	4b3b      	ldr	r3, [pc, #236]	@ (80024ac <HAL_GPIO_Init+0x334>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e2:	4a32      	ldr	r2, [pc, #200]	@ (80024ac <HAL_GPIO_Init+0x334>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e8:	4b30      	ldr	r3, [pc, #192]	@ (80024ac <HAL_GPIO_Init+0x334>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800240c:	4a27      	ldr	r2, [pc, #156]	@ (80024ac <HAL_GPIO_Init+0x334>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002412:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <HAL_GPIO_Init+0x334>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002436:	4a1d      	ldr	r2, [pc, #116]	@ (80024ac <HAL_GPIO_Init+0x334>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <HAL_GPIO_Init+0x334>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002460:	4a12      	ldr	r2, [pc, #72]	@ (80024ac <HAL_GPIO_Init+0x334>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f ae90 	bls.w	8002194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	@ 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40021400 	.word	0x40021400
 80024a4:	40021800 	.word	0x40021800
 80024a8:	40021c00 	.word	0x40021c00
 80024ac:	40013c00 	.word	0x40013c00

080024b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
 80024bc:	4613      	mov	r3, r2
 80024be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c0:	787b      	ldrb	r3, [r7, #1]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024cc:	e003      	b.n	80024d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ce:	887b      	ldrh	r3, [r7, #2]
 80024d0:	041a      	lsls	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	619a      	str	r2, [r3, #24]
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e12b      	b.n	800274e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fda2 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	@ 0x24
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002548:	f001 f8da 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 800254c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a81      	ldr	r2, [pc, #516]	@ (8002758 <HAL_I2C_Init+0x274>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d807      	bhi.n	8002568 <HAL_I2C_Init+0x84>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a80      	ldr	r2, [pc, #512]	@ (800275c <HAL_I2C_Init+0x278>)
 800255c:	4293      	cmp	r3, r2
 800255e:	bf94      	ite	ls
 8002560:	2301      	movls	r3, #1
 8002562:	2300      	movhi	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e006      	b.n	8002576 <HAL_I2C_Init+0x92>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a7d      	ldr	r2, [pc, #500]	@ (8002760 <HAL_I2C_Init+0x27c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	bf94      	ite	ls
 8002570:	2301      	movls	r3, #1
 8002572:	2300      	movhi	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0e7      	b.n	800274e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a78      	ldr	r2, [pc, #480]	@ (8002764 <HAL_I2C_Init+0x280>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0c9b      	lsrs	r3, r3, #18
 8002588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002758 <HAL_I2C_Init+0x274>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d802      	bhi.n	80025b8 <HAL_I2C_Init+0xd4>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	3301      	adds	r3, #1
 80025b6:	e009      	b.n	80025cc <HAL_I2C_Init+0xe8>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	4a69      	ldr	r2, [pc, #420]	@ (8002768 <HAL_I2C_Init+0x284>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	3301      	adds	r3, #1
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	495c      	ldr	r1, [pc, #368]	@ (8002758 <HAL_I2C_Init+0x274>)
 80025e8:	428b      	cmp	r3, r1
 80025ea:	d819      	bhi.n	8002620 <HAL_I2C_Init+0x13c>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e59      	subs	r1, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fa:	1c59      	adds	r1, r3, #1
 80025fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002600:	400b      	ands	r3, r1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_I2C_Init+0x138>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1e59      	subs	r1, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fbb1 f3f3 	udiv	r3, r1, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261a:	e051      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 800261c:	2304      	movs	r3, #4
 800261e:	e04f      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <HAL_I2C_Init+0x168>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e58      	subs	r0, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	440b      	add	r3, r1
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e012      	b.n	8002672 <HAL_I2C_Init+0x18e>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	0099      	lsls	r1, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Init+0x196>
 8002676:	2301      	movs	r3, #1
 8002678:	e022      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10e      	bne.n	80026a0 <HAL_I2C_Init+0x1bc>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e58      	subs	r0, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	440b      	add	r3, r1
 8002690:	fbb0 f3f3 	udiv	r3, r0, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800269e:	e00f      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e58      	subs	r0, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	0099      	lsls	r1, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	6809      	ldr	r1, [r1, #0]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6911      	ldr	r1, [r2, #16]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68d2      	ldr	r2, [r2, #12]
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	430b      	orrs	r3, r1
 8002702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	000186a0 	.word	0x000186a0
 800275c:	001e847f 	.word	0x001e847f
 8002760:	003d08ff 	.word	0x003d08ff
 8002764:	431bde83 	.word	0x431bde83
 8002768:	10624dd3 	.word	0x10624dd3

0800276c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	461a      	mov	r2, r3
 8002778:	460b      	mov	r3, r1
 800277a:	817b      	strh	r3, [r7, #10]
 800277c:	4613      	mov	r3, r2
 800277e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff fbb8 	bl	8001ef4 <HAL_GetTick>
 8002784:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b20      	cmp	r3, #32
 8002790:	f040 80e0 	bne.w	8002954 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2319      	movs	r3, #25
 800279a:	2201      	movs	r2, #1
 800279c:	4970      	ldr	r1, [pc, #448]	@ (8002960 <HAL_I2C_Master_Transmit+0x1f4>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f964 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	e0d3      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_I2C_Master_Transmit+0x50>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e0cc      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d007      	beq.n	80027e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2221      	movs	r2, #33	@ 0x21
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2210      	movs	r2, #16
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	893a      	ldrh	r2, [r7, #8]
 8002812:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a50      	ldr	r2, [pc, #320]	@ (8002964 <HAL_I2C_Master_Transmit+0x1f8>)
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002824:	8979      	ldrh	r1, [r7, #10]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f89c 	bl	8002968 <I2C_MasterRequestWrite>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e08d      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002850:	e066      	b.n	8002920 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	6a39      	ldr	r1, [r7, #32]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fa22 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	2b04      	cmp	r3, #4
 8002868:	d107      	bne.n	800287a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06b      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d11b      	bne.n	80028f4 <HAL_I2C_Master_Transmit+0x188>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6a39      	ldr	r1, [r7, #32]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fa19 	bl	8002d30 <I2C_WaitOnBTFFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2b04      	cmp	r3, #4
 800290a:	d107      	bne.n	800291c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e01a      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d194      	bne.n	8002852 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	00100002 	.word	0x00100002
 8002964:	ffff0000 	.word	0xffff0000

08002968 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	460b      	mov	r3, r1
 8002976:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d006      	beq.n	8002992 <I2C_MasterRequestWrite+0x2a>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d003      	beq.n	8002992 <I2C_MasterRequestWrite+0x2a>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002990:	d108      	bne.n	80029a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e00b      	b.n	80029bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	2b12      	cmp	r3, #18
 80029aa:	d107      	bne.n	80029bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f84f 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e2:	d103      	bne.n	80029ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e035      	b.n	8002a5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029f8:	d108      	bne.n	8002a0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	e01b      	b.n	8002a44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a0c:	897b      	ldrh	r3, [r7, #10]
 8002a0e:	11db      	asrs	r3, r3, #7
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 0306 	and.w	r3, r3, #6
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f063 030f 	orn	r3, r3, #15
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	490e      	ldr	r1, [pc, #56]	@ (8002a64 <I2C_MasterRequestWrite+0xfc>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f898 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e010      	b.n	8002a5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a3a:	897b      	ldrh	r3, [r7, #10]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4907      	ldr	r1, [pc, #28]	@ (8002a68 <I2C_MasterRequestWrite+0x100>)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f888 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	00010008 	.word	0x00010008
 8002a68:	00010002 	.word	0x00010002

08002a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a7c:	e048      	b.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d044      	beq.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7ff fa35 	bl	8001ef4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d139      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10d      	bne.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	e00c      	b.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4013      	ands	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d116      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e023      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10d      	bne.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	43da      	mvns	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	e00c      	b.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4013      	ands	r3, r2
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d093      	beq.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b6e:	e071      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7e:	d123      	bne.n	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e067      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d041      	beq.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7ff f990 	bl	8001ef4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d136      	bne.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d10c      	bne.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e00b      	b.n	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	43da      	mvns	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e021      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10c      	bne.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	43da      	mvns	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e00b      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f af6d 	bne.w	8002b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cac:	e034      	b.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f886 	bl	8002dc0 <I2C_IsAcknowledgeFailed>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e034      	b.n	8002d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d028      	beq.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7ff f915 	bl	8001ef4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11d      	bne.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce6:	2b80      	cmp	r3, #128	@ 0x80
 8002ce8:	d016      	beq.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d22:	2b80      	cmp	r3, #128	@ 0x80
 8002d24:	d1c3      	bne.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f83e 	bl	8002dc0 <I2C_IsAcknowledgeFailed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e034      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d028      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7ff f8cd 	bl	8001ef4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11d      	bne.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d016      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d1c3      	bne.n	8002d3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d11b      	bne.n	8002e10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002de0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f043 0204 	orr.w	r2, r3, #4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e267      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d075      	beq.n	8002f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3e:	4b88      	ldr	r3, [pc, #544]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4a:	4b85      	ldr	r3, [pc, #532]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d112      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e56:	4b82      	ldr	r3, [pc, #520]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	4b7e      	ldr	r3, [pc, #504]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05b      	beq.n	8002f28 <HAL_RCC_OscConfig+0x108>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d157      	bne.n	8002f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e242      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x74>
 8002e86:	4b76      	ldr	r3, [pc, #472]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a75      	ldr	r2, [pc, #468]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e01d      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x98>
 8002e9e:	4b70      	ldr	r3, [pc, #448]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6f      	ldr	r2, [pc, #444]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a6c      	ldr	r2, [pc, #432]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002eb8:	4b69      	ldr	r3, [pc, #420]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a68      	ldr	r2, [pc, #416]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b66      	ldr	r3, [pc, #408]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a65      	ldr	r2, [pc, #404]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff f80c 	bl	8001ef4 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7ff f808 	bl	8001ef4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	@ 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e207      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xc0>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fff8 	bl	8001ef4 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fe fff4 	bl	8001ef4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	@ 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1f3      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	4b51      	ldr	r3, [pc, #324]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0xe8>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f36:	4b4a      	ldr	r3, [pc, #296]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b47      	ldr	r3, [pc, #284]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d11c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4e:	4b44      	ldr	r3, [pc, #272]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d116      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	4b41      	ldr	r3, [pc, #260]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e1c7      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	4b3b      	ldr	r3, [pc, #236]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4937      	ldr	r1, [pc, #220]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	e03a      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f90:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <HAL_RCC_OscConfig+0x244>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe ffad 	bl	8001ef4 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9e:	f7fe ffa9 	bl	8001ef4 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e1a8      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbc:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4925      	ldr	r1, [pc, #148]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
 8002fd0:	e015      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd2:	4b24      	ldr	r3, [pc, #144]	@ (8003064 <HAL_RCC_OscConfig+0x244>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe ff8c 	bl	8001ef4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7fe ff88 	bl	8001ef4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e187      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d036      	beq.n	8003078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003012:	4b15      	ldr	r3, [pc, #84]	@ (8003068 <HAL_RCC_OscConfig+0x248>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe ff6c 	bl	8001ef4 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003020:	f7fe ff68 	bl	8001ef4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e167      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8003034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x200>
 800303e:	e01b      	b.n	8003078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCC_OscConfig+0x248>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7fe ff55 	bl	8001ef4 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	e00e      	b.n	800306c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304e:	f7fe ff51 	bl	8001ef4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d907      	bls.n	800306c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e150      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
 8003060:	40023800 	.word	0x40023800
 8003064:	42470000 	.word	0x42470000
 8003068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	4b88      	ldr	r3, [pc, #544]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ea      	bne.n	800304e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8097 	beq.w	80031b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b81      	ldr	r3, [pc, #516]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	4b7d      	ldr	r3, [pc, #500]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	4a7c      	ldr	r2, [pc, #496]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b77      	ldr	r3, [pc, #476]	@ (8003294 <HAL_RCC_OscConfig+0x474>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c2:	4b74      	ldr	r3, [pc, #464]	@ (8003294 <HAL_RCC_OscConfig+0x474>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a73      	ldr	r2, [pc, #460]	@ (8003294 <HAL_RCC_OscConfig+0x474>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7fe ff11 	bl	8001ef4 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fe ff0d 	bl	8001ef4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e10c      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003294 <HAL_RCC_OscConfig+0x474>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x2ea>
 80030fc:	4b64      	ldr	r3, [pc, #400]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003100:	4a63      	ldr	r2, [pc, #396]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	@ 0x70
 8003108:	e01c      	b.n	8003144 <HAL_RCC_OscConfig+0x324>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b05      	cmp	r3, #5
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x30c>
 8003112:	4b5f      	ldr	r3, [pc, #380]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003116:	4a5e      	ldr	r2, [pc, #376]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6713      	str	r3, [r2, #112]	@ 0x70
 800311e:	4b5c      	ldr	r3, [pc, #368]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	4a5b      	ldr	r2, [pc, #364]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	@ 0x70
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0x324>
 800312c:	4b58      	ldr	r3, [pc, #352]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003130:	4a57      	ldr	r2, [pc, #348]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6713      	str	r3, [r2, #112]	@ 0x70
 8003138:	4b55      	ldr	r3, [pc, #340]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313c:	4a54      	ldr	r2, [pc, #336]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800313e:	f023 0304 	bic.w	r3, r3, #4
 8003142:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe fed2 	bl	8001ef4 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe fece 	bl	8001ef4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0cb      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316a:	4b49      	ldr	r3, [pc, #292]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ee      	beq.n	8003154 <HAL_RCC_OscConfig+0x334>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003178:	f7fe febc 	bl	8001ef4 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fe feb8 	bl	8001ef4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0b5      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003196:	4b3e      	ldr	r3, [pc, #248]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ee      	bne.n	8003180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b39      	ldr	r3, [pc, #228]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	4a38      	ldr	r2, [pc, #224]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a1 	beq.w	8003300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031be:	4b34      	ldr	r3, [pc, #208]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d05c      	beq.n	8003284 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d141      	bne.n	8003256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	4b31      	ldr	r3, [pc, #196]	@ (8003298 <HAL_RCC_OscConfig+0x478>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fe fe8c 	bl	8001ef4 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e0:	f7fe fe88 	bl	8001ef4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e087      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	4b27      	ldr	r3, [pc, #156]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	019b      	lsls	r3, r3, #6
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	3b01      	subs	r3, #1
 8003218:	041b      	lsls	r3, r3, #16
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	491b      	ldr	r1, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_RCC_OscConfig+0x478>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fe fe61 	bl	8001ef4 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003236:	f7fe fe5d 	bl	8001ef4 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e05c      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x416>
 8003254:	e054      	b.n	8003300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <HAL_RCC_OscConfig+0x478>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe fe4a 	bl	8001ef4 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe fe46 	bl	8001ef4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e045      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x444>
 8003282:	e03d      	b.n	8003300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e038      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
 8003290:	40023800 	.word	0x40023800
 8003294:	40007000 	.word	0x40007000
 8003298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800329c:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <HAL_RCC_OscConfig+0x4ec>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d028      	beq.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d121      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d11a      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d111      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	3b01      	subs	r3, #1
 80032e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0cc      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b68      	ldr	r3, [pc, #416]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d90c      	bls.n	800334c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b65      	ldr	r3, [pc, #404]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b63      	ldr	r3, [pc, #396]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0b8      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003364:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a58      	ldr	r2, [pc, #352]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800336e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800337c:	4b53      	ldr	r3, [pc, #332]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a52      	ldr	r2, [pc, #328]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494d      	ldr	r1, [pc, #308]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d044      	beq.n	8003430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d119      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b3f      	ldr	r3, [pc, #252]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e067      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ee:	4b37      	ldr	r3, [pc, #220]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4934      	ldr	r1, [pc, #208]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003400:	f7fe fd78 	bl	8001ef4 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7fe fd74 	bl	8001ef4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 020c 	and.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1eb      	bne.n	8003408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d20c      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b22      	ldr	r3, [pc, #136]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e032      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4916      	ldr	r1, [pc, #88]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	490e      	ldr	r1, [pc, #56]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003496:	f000 f821 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490a      	ldr	r1, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fcd8 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023c00 	.word	0x40023c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08007c48 	.word	0x08007c48
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b094      	sub	sp, #80	@ 0x50
 80034e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034e8:	2300      	movs	r3, #0
 80034ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ec:	2300      	movs	r3, #0
 80034ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f4:	4b79      	ldr	r3, [pc, #484]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d00d      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x40>
 8003500:	2b08      	cmp	r3, #8
 8003502:	f200 80e1 	bhi.w	80036c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x34>
 800350a:	2b04      	cmp	r3, #4
 800350c:	d003      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x3a>
 800350e:	e0db      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b73      	ldr	r3, [pc, #460]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003512:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003514:	e0db      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003516:	4b73      	ldr	r3, [pc, #460]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003518:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800351a:	e0d8      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800351c:	4b6f      	ldr	r3, [pc, #444]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003524:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003526:	4b6d      	ldr	r3, [pc, #436]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d063      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b6a      	ldr	r3, [pc, #424]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	2200      	movs	r2, #0
 800353a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800353c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800353e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003544:	633b      	str	r3, [r7, #48]	@ 0x30
 8003546:	2300      	movs	r3, #0
 8003548:	637b      	str	r3, [r7, #52]	@ 0x34
 800354a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800354e:	4622      	mov	r2, r4
 8003550:	462b      	mov	r3, r5
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	0159      	lsls	r1, r3, #5
 800355c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003560:	0150      	lsls	r0, r2, #5
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4621      	mov	r1, r4
 8003568:	1a51      	subs	r1, r2, r1
 800356a:	6139      	str	r1, [r7, #16]
 800356c:	4629      	mov	r1, r5
 800356e:	eb63 0301 	sbc.w	r3, r3, r1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003580:	4659      	mov	r1, fp
 8003582:	018b      	lsls	r3, r1, #6
 8003584:	4651      	mov	r1, sl
 8003586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358a:	4651      	mov	r1, sl
 800358c:	018a      	lsls	r2, r1, #6
 800358e:	4651      	mov	r1, sl
 8003590:	ebb2 0801 	subs.w	r8, r2, r1
 8003594:	4659      	mov	r1, fp
 8003596:	eb63 0901 	sbc.w	r9, r3, r1
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ae:	4690      	mov	r8, r2
 80035b0:	4699      	mov	r9, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	eb18 0303 	adds.w	r3, r8, r3
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	462b      	mov	r3, r5
 80035bc:	eb49 0303 	adc.w	r3, r9, r3
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ce:	4629      	mov	r1, r5
 80035d0:	024b      	lsls	r3, r1, #9
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d8:	4621      	mov	r1, r4
 80035da:	024a      	lsls	r2, r1, #9
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e2:	2200      	movs	r2, #0
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ec:	f7fd fb2c 	bl	8000c48 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f8:	e058      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fa:	4b38      	ldr	r3, [pc, #224]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	2200      	movs	r2, #0
 8003602:	4618      	mov	r0, r3
 8003604:	4611      	mov	r1, r2
 8003606:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003610:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003614:	4642      	mov	r2, r8
 8003616:	464b      	mov	r3, r9
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003626:	0150      	lsls	r0, r2, #5
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4641      	mov	r1, r8
 800362e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003632:	4649      	mov	r1, r9
 8003634:	eb63 0b01 	sbc.w	fp, r3, r1
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003644:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003648:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800364c:	ebb2 040a 	subs.w	r4, r2, sl
 8003650:	eb63 050b 	sbc.w	r5, r3, fp
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	00eb      	lsls	r3, r5, #3
 800365e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003662:	00e2      	lsls	r2, r4, #3
 8003664:	4614      	mov	r4, r2
 8003666:	461d      	mov	r5, r3
 8003668:	4643      	mov	r3, r8
 800366a:	18e3      	adds	r3, r4, r3
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	464b      	mov	r3, r9
 8003670:	eb45 0303 	adc.w	r3, r5, r3
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003682:	4629      	mov	r1, r5
 8003684:	028b      	lsls	r3, r1, #10
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800368c:	4621      	mov	r1, r4
 800368e:	028a      	lsls	r2, r1, #10
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003696:	2200      	movs	r2, #0
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	61fa      	str	r2, [r7, #28]
 800369c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a0:	f7fd fad2 	bl	8000c48 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	3301      	adds	r3, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80036bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3750      	adds	r7, #80	@ 0x50
 80036d4:	46bd      	mov	sp, r7
 80036d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	007a1200 	.word	0x007a1200

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b03      	ldr	r3, [pc, #12]	@ (80036fc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003704:	f7ff fff0 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a9b      	lsrs	r3, r3, #10
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4903      	ldr	r1, [pc, #12]	@ (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	08007c58 	.word	0x08007c58

08003728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e041      	b.n	80037be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe faf0 	bl	8001d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f000 fdb4 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e046      	b.n	800386e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a23      	ldr	r2, [pc, #140]	@ (800387c <HAL_TIM_Base_Start+0xb4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fa:	d01d      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1f      	ldr	r2, [pc, #124]	@ (8003880 <HAL_TIM_Base_Start+0xb8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <HAL_TIM_Base_Start+0xbc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1c      	ldr	r2, [pc, #112]	@ (8003888 <HAL_TIM_Base_Start+0xc0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <HAL_TIM_Base_Start+0xc4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a19      	ldr	r2, [pc, #100]	@ (8003890 <HAL_TIM_Base_Start+0xc8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <HAL_TIM_Base_Start+0xcc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d111      	bne.n	800385c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d010      	beq.n	800386c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	e007      	b.n	800386c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40010400 	.word	0x40010400
 8003890:	40014000 	.word	0x40014000
 8003894:	40001800 	.word	0x40001800

08003898 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e041      	b.n	800392e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f839 	bl	8003936 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f000 fcfc 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <HAL_TIM_IC_Start+0x1a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003962:	b2db      	uxtb	r3, r3
 8003964:	e013      	b.n	800398e <HAL_TIM_IC_Start+0x42>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d104      	bne.n	8003976 <HAL_TIM_IC_Start+0x2a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003972:	b2db      	uxtb	r3, r3
 8003974:	e00b      	b.n	800398e <HAL_TIM_IC_Start+0x42>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d104      	bne.n	8003986 <HAL_TIM_IC_Start+0x3a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e003      	b.n	800398e <HAL_TIM_IC_Start+0x42>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800398c:	b2db      	uxtb	r3, r3
 800398e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <HAL_TIM_IC_Start+0x54>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e013      	b.n	80039c8 <HAL_TIM_IC_Start+0x7c>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d104      	bne.n	80039b0 <HAL_TIM_IC_Start+0x64>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e00b      	b.n	80039c8 <HAL_TIM_IC_Start+0x7c>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d104      	bne.n	80039c0 <HAL_TIM_IC_Start+0x74>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e003      	b.n	80039c8 <HAL_TIM_IC_Start+0x7c>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d102      	bne.n	80039d6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d001      	beq.n	80039da <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e081      	b.n	8003ade <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <HAL_TIM_IC_Start+0x9e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039e8:	e013      	b.n	8003a12 <HAL_TIM_IC_Start+0xc6>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_IC_Start+0xae>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039f8:	e00b      	b.n	8003a12 <HAL_TIM_IC_Start+0xc6>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_IC_Start+0xbe>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a08:	e003      	b.n	8003a12 <HAL_TIM_IC_Start+0xc6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_IC_Start+0xd6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a20:	e013      	b.n	8003a4a <HAL_TIM_IC_Start+0xfe>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_IC_Start+0xe6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a30:	e00b      	b.n	8003a4a <HAL_TIM_IC_Start+0xfe>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d104      	bne.n	8003a42 <HAL_TIM_IC_Start+0xf6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a40:	e003      	b.n	8003a4a <HAL_TIM_IC_Start+0xfe>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 feae 	bl	80047b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ae8 <HAL_TIM_IC_Start+0x19c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <HAL_TIM_IC_Start+0x15c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6a:	d01d      	beq.n	8003aa8 <HAL_TIM_IC_Start+0x15c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	@ (8003aec <HAL_TIM_IC_Start+0x1a0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d018      	beq.n	8003aa8 <HAL_TIM_IC_Start+0x15c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003af0 <HAL_TIM_IC_Start+0x1a4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <HAL_TIM_IC_Start+0x15c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1b      	ldr	r2, [pc, #108]	@ (8003af4 <HAL_TIM_IC_Start+0x1a8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_TIM_IC_Start+0x15c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003af8 <HAL_TIM_IC_Start+0x1ac>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <HAL_TIM_IC_Start+0x15c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <HAL_TIM_IC_Start+0x1b0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_TIM_IC_Start+0x15c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a17      	ldr	r2, [pc, #92]	@ (8003b00 <HAL_TIM_IC_Start+0x1b4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d111      	bne.n	8003acc <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d010      	beq.n	8003adc <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aca:	e007      	b.n	8003adc <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40010000 	.word	0x40010000
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800
 8003af4:	40000c00 	.word	0x40000c00
 8003af8:	40010400 	.word	0x40010400
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40001800 	.word	0x40001800

08003b04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_IC_Start_IT+0x1e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e013      	b.n	8003b4a <HAL_TIM_IC_Start_IT+0x46>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_IC_Start_IT+0x2e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e00b      	b.n	8003b4a <HAL_TIM_IC_Start_IT+0x46>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_IC_Start_IT+0x3e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	e003      	b.n	8003b4a <HAL_TIM_IC_Start_IT+0x46>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <HAL_TIM_IC_Start_IT+0x58>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e013      	b.n	8003b84 <HAL_TIM_IC_Start_IT+0x80>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d104      	bne.n	8003b6c <HAL_TIM_IC_Start_IT+0x68>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e00b      	b.n	8003b84 <HAL_TIM_IC_Start_IT+0x80>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d104      	bne.n	8003b7c <HAL_TIM_IC_Start_IT+0x78>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e003      	b.n	8003b84 <HAL_TIM_IC_Start_IT+0x80>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b86:	7bbb      	ldrb	r3, [r7, #14]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b8c:	7b7b      	ldrb	r3, [r7, #13]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0cc      	b.n	8003d30 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_IC_Start_IT+0xa2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ba4:	e013      	b.n	8003bce <HAL_TIM_IC_Start_IT+0xca>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_IC_Start_IT+0xb2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bb4:	e00b      	b.n	8003bce <HAL_TIM_IC_Start_IT+0xca>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d104      	bne.n	8003bc6 <HAL_TIM_IC_Start_IT+0xc2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bc4:	e003      	b.n	8003bce <HAL_TIM_IC_Start_IT+0xca>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_IC_Start_IT+0xda>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bdc:	e013      	b.n	8003c06 <HAL_TIM_IC_Start_IT+0x102>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_IC_Start_IT+0xea>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bec:	e00b      	b.n	8003c06 <HAL_TIM_IC_Start_IT+0x102>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_IC_Start_IT+0xfa>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bfc:	e003      	b.n	8003c06 <HAL_TIM_IC_Start_IT+0x102>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	d841      	bhi.n	8003c90 <HAL_TIM_IC_Start_IT+0x18c>
 8003c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <HAL_TIM_IC_Start_IT+0x110>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003c91 	.word	0x08003c91
 8003c1c:	08003c91 	.word	0x08003c91
 8003c20:	08003c91 	.word	0x08003c91
 8003c24:	08003c5b 	.word	0x08003c5b
 8003c28:	08003c91 	.word	0x08003c91
 8003c2c:	08003c91 	.word	0x08003c91
 8003c30:	08003c91 	.word	0x08003c91
 8003c34:	08003c6d 	.word	0x08003c6d
 8003c38:	08003c91 	.word	0x08003c91
 8003c3c:	08003c91 	.word	0x08003c91
 8003c40:	08003c91 	.word	0x08003c91
 8003c44:	08003c7f 	.word	0x08003c7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0202 	orr.w	r2, r2, #2
 8003c56:	60da      	str	r2, [r3, #12]
      break;
 8003c58:	e01d      	b.n	8003c96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0204 	orr.w	r2, r2, #4
 8003c68:	60da      	str	r2, [r3, #12]
      break;
 8003c6a:	e014      	b.n	8003c96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0208 	orr.w	r2, r2, #8
 8003c7a:	60da      	str	r2, [r3, #12]
      break;
 8003c7c:	e00b      	b.n	8003c96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0210 	orr.w	r2, r2, #16
 8003c8c:	60da      	str	r2, [r3, #12]
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
      break;
 8003c94:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d148      	bne.n	8003d2e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	6839      	ldr	r1, [r7, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fd85 	bl	80047b4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <HAL_TIM_IC_Start_IT+0x234>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_TIM_IC_Start_IT+0x1f6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbc:	d01d      	beq.n	8003cfa <HAL_TIM_IC_Start_IT+0x1f6>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d3c <HAL_TIM_IC_Start_IT+0x238>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_TIM_IC_Start_IT+0x1f6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <HAL_TIM_IC_Start_IT+0x23c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_TIM_IC_Start_IT+0x1f6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d44 <HAL_TIM_IC_Start_IT+0x240>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_TIM_IC_Start_IT+0x1f6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	@ (8003d48 <HAL_TIM_IC_Start_IT+0x244>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_TIM_IC_Start_IT+0x1f6>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a18      	ldr	r2, [pc, #96]	@ (8003d4c <HAL_TIM_IC_Start_IT+0x248>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_TIM_IC_Start_IT+0x1f6>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a16      	ldr	r2, [pc, #88]	@ (8003d50 <HAL_TIM_IC_Start_IT+0x24c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d111      	bne.n	8003d1e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b06      	cmp	r3, #6
 8003d0a:	d010      	beq.n	8003d2e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1c:	e007      	b.n	8003d2e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40010400 	.word	0x40010400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40001800 	.word	0x40001800

08003d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d020      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01b      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0202 	mvn.w	r2, #2
 8003d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd f9a2 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa76 	bl	8004298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fa7d 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d020      	beq.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01b      	beq.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0204 	mvn.w	r2, #4
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd f97c 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa50 	bl	8004298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa57 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d020      	beq.n	8003e50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01b      	beq.n	8003e50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0208 	mvn.w	r2, #8
 8003e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2204      	movs	r2, #4
 8003e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd f956 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa2a 	bl	8004298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fa31 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d020      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01b      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0210 	mvn.w	r2, #16
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2208      	movs	r2, #8
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd f930 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa04 	bl	8004298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fa0b 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00c      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0201 	mvn.w	r2, #1
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9e2 	bl	8004284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fd14 	bl	800490c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f9dc 	bl	80042c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00c      	beq.n	8003f2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0220 	mvn.w	r2, #32
 8003f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fce6 	bl	80048f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e088      	b.n	8004064 <HAL_TIM_IC_ConfigChannel+0x130>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d11b      	bne.n	8003f98 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003f70:	f000 fa5c 	bl	800442c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 020c 	bic.w	r2, r2, #12
 8003f82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6999      	ldr	r1, [r3, #24]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	619a      	str	r2, [r3, #24]
 8003f96:	e060      	b.n	800405a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d11c      	bne.n	8003fd8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003fae:	f000 fae0 	bl	8004572 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003fc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6999      	ldr	r1, [r3, #24]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	021a      	lsls	r2, r3, #8
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	619a      	str	r2, [r3, #24]
 8003fd6:	e040      	b.n	800405a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d11b      	bne.n	8004016 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003fee:	f000 fb2d 	bl	800464c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 020c 	bic.w	r2, r2, #12
 8004000:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69d9      	ldr	r1, [r3, #28]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	61da      	str	r2, [r3, #28]
 8004014:	e021      	b.n	800405a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b0c      	cmp	r3, #12
 800401a:	d11c      	bne.n	8004056 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800402c:	f000 fb4a 	bl	80046c4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800403e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69d9      	ldr	r1, [r3, #28]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	021a      	lsls	r2, r3, #8
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	61da      	str	r2, [r3, #28]
 8004054:	e001      	b.n	800405a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_TIM_ConfigClockSource+0x1c>
 8004084:	2302      	movs	r3, #2
 8004086:	e0b4      	b.n	80041f2 <HAL_TIM_ConfigClockSource+0x186>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c0:	d03e      	beq.n	8004140 <HAL_TIM_ConfigClockSource+0xd4>
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c6:	f200 8087 	bhi.w	80041d8 <HAL_TIM_ConfigClockSource+0x16c>
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ce:	f000 8086 	beq.w	80041de <HAL_TIM_ConfigClockSource+0x172>
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d6:	d87f      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x16c>
 80040d8:	2b70      	cmp	r3, #112	@ 0x70
 80040da:	d01a      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0xa6>
 80040dc:	2b70      	cmp	r3, #112	@ 0x70
 80040de:	d87b      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b60      	cmp	r3, #96	@ 0x60
 80040e2:	d050      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x11a>
 80040e4:	2b60      	cmp	r3, #96	@ 0x60
 80040e6:	d877      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x16c>
 80040e8:	2b50      	cmp	r3, #80	@ 0x50
 80040ea:	d03c      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0xfa>
 80040ec:	2b50      	cmp	r3, #80	@ 0x50
 80040ee:	d873      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b40      	cmp	r3, #64	@ 0x40
 80040f2:	d058      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x13a>
 80040f4:	2b40      	cmp	r3, #64	@ 0x40
 80040f6:	d86f      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b30      	cmp	r3, #48	@ 0x30
 80040fa:	d064      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x15a>
 80040fc:	2b30      	cmp	r3, #48	@ 0x30
 80040fe:	d86b      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b20      	cmp	r3, #32
 8004102:	d060      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d867      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d05c      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x15a>
 800410c:	2b10      	cmp	r3, #16
 800410e:	d05a      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004110:	e062      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004122:	f000 fb27 	bl	8004774 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	609a      	str	r2, [r3, #8]
      break;
 800413e:	e04f      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004150:	f000 fb10 	bl	8004774 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004162:	609a      	str	r2, [r3, #8]
      break;
 8004164:	e03c      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004172:	461a      	mov	r2, r3
 8004174:	f000 f9ce 	bl	8004514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2150      	movs	r1, #80	@ 0x50
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fadd 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004184:	e02c      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004192:	461a      	mov	r2, r3
 8004194:	f000 fa2a 	bl	80045ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2160      	movs	r1, #96	@ 0x60
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 facd 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 80041a4:	e01c      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b2:	461a      	mov	r2, r3
 80041b4:	f000 f9ae 	bl	8004514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2140      	movs	r1, #64	@ 0x40
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fabd 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 80041c4:	e00c      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f000 fab4 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 80041d6:	e003      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
      break;
 80041dc:	e000      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	d831      	bhi.n	8004274 <HAL_TIM_ReadCapturedValue+0x78>
 8004210:	a201      	add	r2, pc, #4	@ (adr r2, 8004218 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	0800424d 	.word	0x0800424d
 800421c:	08004275 	.word	0x08004275
 8004220:	08004275 	.word	0x08004275
 8004224:	08004275 	.word	0x08004275
 8004228:	08004257 	.word	0x08004257
 800422c:	08004275 	.word	0x08004275
 8004230:	08004275 	.word	0x08004275
 8004234:	08004275 	.word	0x08004275
 8004238:	08004261 	.word	0x08004261
 800423c:	08004275 	.word	0x08004275
 8004240:	08004275 	.word	0x08004275
 8004244:	08004275 	.word	0x08004275
 8004248:	0800426b 	.word	0x0800426b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004252:	60fb      	str	r3, [r7, #12]

      break;
 8004254:	e00f      	b.n	8004276 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	60fb      	str	r3, [r7, #12]

      break;
 800425e:	e00a      	b.n	8004276 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004266:	60fb      	str	r3, [r7, #12]

      break;
 8004268:	e005      	b.n	8004276 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	60fb      	str	r3, [r7, #12]

      break;
 8004272:	e000      	b.n	8004276 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004274:	bf00      	nop
  }

  return tmpreg;
 8004276:	68fb      	ldr	r3, [r7, #12]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a46      	ldr	r2, [pc, #280]	@ (8004400 <TIM_Base_SetConfig+0x12c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d013      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f2:	d00f      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a43      	ldr	r2, [pc, #268]	@ (8004404 <TIM_Base_SetConfig+0x130>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00b      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a42      	ldr	r2, [pc, #264]	@ (8004408 <TIM_Base_SetConfig+0x134>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a41      	ldr	r2, [pc, #260]	@ (800440c <TIM_Base_SetConfig+0x138>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a40      	ldr	r2, [pc, #256]	@ (8004410 <TIM_Base_SetConfig+0x13c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d108      	bne.n	8004326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a35      	ldr	r2, [pc, #212]	@ (8004400 <TIM_Base_SetConfig+0x12c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02b      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004334:	d027      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a32      	ldr	r2, [pc, #200]	@ (8004404 <TIM_Base_SetConfig+0x130>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d023      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a31      	ldr	r2, [pc, #196]	@ (8004408 <TIM_Base_SetConfig+0x134>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01f      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a30      	ldr	r2, [pc, #192]	@ (800440c <TIM_Base_SetConfig+0x138>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01b      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2f      	ldr	r2, [pc, #188]	@ (8004410 <TIM_Base_SetConfig+0x13c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d017      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2e      	ldr	r2, [pc, #184]	@ (8004414 <TIM_Base_SetConfig+0x140>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2d      	ldr	r2, [pc, #180]	@ (8004418 <TIM_Base_SetConfig+0x144>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00f      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2c      	ldr	r2, [pc, #176]	@ (800441c <TIM_Base_SetConfig+0x148>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00b      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2b      	ldr	r2, [pc, #172]	@ (8004420 <TIM_Base_SetConfig+0x14c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a2a      	ldr	r2, [pc, #168]	@ (8004424 <TIM_Base_SetConfig+0x150>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a29      	ldr	r2, [pc, #164]	@ (8004428 <TIM_Base_SetConfig+0x154>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800438c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a10      	ldr	r2, [pc, #64]	@ (8004400 <TIM_Base_SetConfig+0x12c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0xf8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a12      	ldr	r2, [pc, #72]	@ (8004410 <TIM_Base_SetConfig+0x13c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d103      	bne.n	80043d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d105      	bne.n	80043f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	611a      	str	r2, [r3, #16]
  }
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40010400 	.word	0x40010400
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800
 8004420:	40001800 	.word	0x40001800
 8004424:	40001c00 	.word	0x40001c00
 8004428:	40002000 	.word	0x40002000

0800442c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f023 0201 	bic.w	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <TIM_TI1_SetConfig+0xcc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01b      	beq.n	8004492 <TIM_TI1_SetConfig+0x66>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004460:	d017      	beq.n	8004492 <TIM_TI1_SetConfig+0x66>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a25      	ldr	r2, [pc, #148]	@ (80044fc <TIM_TI1_SetConfig+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <TIM_TI1_SetConfig+0x66>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a24      	ldr	r2, [pc, #144]	@ (8004500 <TIM_TI1_SetConfig+0xd4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00f      	beq.n	8004492 <TIM_TI1_SetConfig+0x66>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a23      	ldr	r2, [pc, #140]	@ (8004504 <TIM_TI1_SetConfig+0xd8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00b      	beq.n	8004492 <TIM_TI1_SetConfig+0x66>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a22      	ldr	r2, [pc, #136]	@ (8004508 <TIM_TI1_SetConfig+0xdc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d007      	beq.n	8004492 <TIM_TI1_SetConfig+0x66>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a21      	ldr	r2, [pc, #132]	@ (800450c <TIM_TI1_SetConfig+0xe0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_TI1_SetConfig+0x66>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a20      	ldr	r2, [pc, #128]	@ (8004510 <TIM_TI1_SetConfig+0xe4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d101      	bne.n	8004496 <TIM_TI1_SetConfig+0x6a>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <TIM_TI1_SetConfig+0x6c>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e003      	b.n	80044b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f023 030a 	bic.w	r3, r3, #10
 80044d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f003 030a 	and.w	r3, r3, #10
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40010000 	.word	0x40010000
 80044fc:	40000400 	.word	0x40000400
 8004500:	40000800 	.word	0x40000800
 8004504:	40000c00 	.word	0x40000c00
 8004508:	40010400 	.word	0x40010400
 800450c:	40014000 	.word	0x40014000
 8004510:	40001800 	.word	0x40001800

08004514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800453e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 030a 	bic.w	r3, r3, #10
 8004550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004572:	b480      	push	{r7}
 8004574:	b087      	sub	sp, #28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0210 	bic.w	r2, r3, #16
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800459e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045c4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0210 	bic.w	r2, r3, #16
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	031b      	lsls	r3, r3, #12
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004628:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	621a      	str	r2, [r3, #32]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f023 0303 	bic.w	r3, r3, #3
 8004678:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004688:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	b2db      	uxtb	r3, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800469c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	621a      	str	r2, [r3, #32]
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004702:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	031b      	lsls	r3, r3, #12
 8004708:	b29b      	uxth	r3, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004716:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	031b      	lsls	r3, r3, #12
 800471c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	f043 0307 	orr.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800478e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	021a      	lsls	r2, r3, #8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	431a      	orrs	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2201      	movs	r2, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	401a      	ands	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e05a      	b.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d022      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004864:	d01d      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10c      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40001800 	.word	0x40001800

080048f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <__cvt>:
 8004920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	ec57 6b10 	vmov	r6, r7, d0
 8004928:	2f00      	cmp	r7, #0
 800492a:	460c      	mov	r4, r1
 800492c:	4619      	mov	r1, r3
 800492e:	463b      	mov	r3, r7
 8004930:	bfbb      	ittet	lt
 8004932:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004936:	461f      	movlt	r7, r3
 8004938:	2300      	movge	r3, #0
 800493a:	232d      	movlt	r3, #45	@ 0x2d
 800493c:	700b      	strb	r3, [r1, #0]
 800493e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004940:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004944:	4691      	mov	r9, r2
 8004946:	f023 0820 	bic.w	r8, r3, #32
 800494a:	bfbc      	itt	lt
 800494c:	4632      	movlt	r2, r6
 800494e:	4616      	movlt	r6, r2
 8004950:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004954:	d005      	beq.n	8004962 <__cvt+0x42>
 8004956:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800495a:	d100      	bne.n	800495e <__cvt+0x3e>
 800495c:	3401      	adds	r4, #1
 800495e:	2102      	movs	r1, #2
 8004960:	e000      	b.n	8004964 <__cvt+0x44>
 8004962:	2103      	movs	r1, #3
 8004964:	ab03      	add	r3, sp, #12
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	ab02      	add	r3, sp, #8
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	ec47 6b10 	vmov	d0, r6, r7
 8004970:	4653      	mov	r3, sl
 8004972:	4622      	mov	r2, r4
 8004974:	f000 fe78 	bl	8005668 <_dtoa_r>
 8004978:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800497c:	4605      	mov	r5, r0
 800497e:	d119      	bne.n	80049b4 <__cvt+0x94>
 8004980:	f019 0f01 	tst.w	r9, #1
 8004984:	d00e      	beq.n	80049a4 <__cvt+0x84>
 8004986:	eb00 0904 	add.w	r9, r0, r4
 800498a:	2200      	movs	r2, #0
 800498c:	2300      	movs	r3, #0
 800498e:	4630      	mov	r0, r6
 8004990:	4639      	mov	r1, r7
 8004992:	f7fc f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8004996:	b108      	cbz	r0, 800499c <__cvt+0x7c>
 8004998:	f8cd 900c 	str.w	r9, [sp, #12]
 800499c:	2230      	movs	r2, #48	@ 0x30
 800499e:	9b03      	ldr	r3, [sp, #12]
 80049a0:	454b      	cmp	r3, r9
 80049a2:	d31e      	bcc.n	80049e2 <__cvt+0xc2>
 80049a4:	9b03      	ldr	r3, [sp, #12]
 80049a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049a8:	1b5b      	subs	r3, r3, r5
 80049aa:	4628      	mov	r0, r5
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	b004      	add	sp, #16
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049b8:	eb00 0904 	add.w	r9, r0, r4
 80049bc:	d1e5      	bne.n	800498a <__cvt+0x6a>
 80049be:	7803      	ldrb	r3, [r0, #0]
 80049c0:	2b30      	cmp	r3, #48	@ 0x30
 80049c2:	d10a      	bne.n	80049da <__cvt+0xba>
 80049c4:	2200      	movs	r2, #0
 80049c6:	2300      	movs	r3, #0
 80049c8:	4630      	mov	r0, r6
 80049ca:	4639      	mov	r1, r7
 80049cc:	f7fc f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 80049d0:	b918      	cbnz	r0, 80049da <__cvt+0xba>
 80049d2:	f1c4 0401 	rsb	r4, r4, #1
 80049d6:	f8ca 4000 	str.w	r4, [sl]
 80049da:	f8da 3000 	ldr.w	r3, [sl]
 80049de:	4499      	add	r9, r3
 80049e0:	e7d3      	b.n	800498a <__cvt+0x6a>
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	9103      	str	r1, [sp, #12]
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e7d9      	b.n	800499e <__cvt+0x7e>

080049ea <__exponent>:
 80049ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ec:	2900      	cmp	r1, #0
 80049ee:	bfba      	itte	lt
 80049f0:	4249      	neglt	r1, r1
 80049f2:	232d      	movlt	r3, #45	@ 0x2d
 80049f4:	232b      	movge	r3, #43	@ 0x2b
 80049f6:	2909      	cmp	r1, #9
 80049f8:	7002      	strb	r2, [r0, #0]
 80049fa:	7043      	strb	r3, [r0, #1]
 80049fc:	dd29      	ble.n	8004a52 <__exponent+0x68>
 80049fe:	f10d 0307 	add.w	r3, sp, #7
 8004a02:	461d      	mov	r5, r3
 8004a04:	270a      	movs	r7, #10
 8004a06:	461a      	mov	r2, r3
 8004a08:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a0c:	fb07 1416 	mls	r4, r7, r6, r1
 8004a10:	3430      	adds	r4, #48	@ 0x30
 8004a12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a16:	460c      	mov	r4, r1
 8004a18:	2c63      	cmp	r4, #99	@ 0x63
 8004a1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a1e:	4631      	mov	r1, r6
 8004a20:	dcf1      	bgt.n	8004a06 <__exponent+0x1c>
 8004a22:	3130      	adds	r1, #48	@ 0x30
 8004a24:	1e94      	subs	r4, r2, #2
 8004a26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a2a:	1c41      	adds	r1, r0, #1
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	42ab      	cmp	r3, r5
 8004a30:	d30a      	bcc.n	8004a48 <__exponent+0x5e>
 8004a32:	f10d 0309 	add.w	r3, sp, #9
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	42ac      	cmp	r4, r5
 8004a3a:	bf88      	it	hi
 8004a3c:	2300      	movhi	r3, #0
 8004a3e:	3302      	adds	r3, #2
 8004a40:	4403      	add	r3, r0
 8004a42:	1a18      	subs	r0, r3, r0
 8004a44:	b003      	add	sp, #12
 8004a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a50:	e7ed      	b.n	8004a2e <__exponent+0x44>
 8004a52:	2330      	movs	r3, #48	@ 0x30
 8004a54:	3130      	adds	r1, #48	@ 0x30
 8004a56:	7083      	strb	r3, [r0, #2]
 8004a58:	70c1      	strb	r1, [r0, #3]
 8004a5a:	1d03      	adds	r3, r0, #4
 8004a5c:	e7f1      	b.n	8004a42 <__exponent+0x58>
	...

08004a60 <_printf_float>:
 8004a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	b08d      	sub	sp, #52	@ 0x34
 8004a66:	460c      	mov	r4, r1
 8004a68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	461f      	mov	r7, r3
 8004a70:	4605      	mov	r5, r0
 8004a72:	f000 fceb 	bl	800544c <_localeconv_r>
 8004a76:	6803      	ldr	r3, [r0, #0]
 8004a78:	9304      	str	r3, [sp, #16]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fb fbf8 	bl	8000270 <strlen>
 8004a80:	2300      	movs	r3, #0
 8004a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a84:	f8d8 3000 	ldr.w	r3, [r8]
 8004a88:	9005      	str	r0, [sp, #20]
 8004a8a:	3307      	adds	r3, #7
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	f103 0208 	add.w	r2, r3, #8
 8004a94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a98:	f8d4 b000 	ldr.w	fp, [r4]
 8004a9c:	f8c8 2000 	str.w	r2, [r8]
 8004aa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004aa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004aa8:	9307      	str	r3, [sp, #28]
 8004aaa:	f8cd 8018 	str.w	r8, [sp, #24]
 8004aae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8004d28 <_printf_float+0x2c8>)
 8004ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8004abc:	f7fc f836 	bl	8000b2c <__aeabi_dcmpun>
 8004ac0:	bb70      	cbnz	r0, 8004b20 <_printf_float+0xc0>
 8004ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ac6:	4b98      	ldr	r3, [pc, #608]	@ (8004d28 <_printf_float+0x2c8>)
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	f7fc f810 	bl	8000af0 <__aeabi_dcmple>
 8004ad0:	bb30      	cbnz	r0, 8004b20 <_printf_float+0xc0>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	4649      	mov	r1, r9
 8004ada:	f7fb ffff 	bl	8000adc <__aeabi_dcmplt>
 8004ade:	b110      	cbz	r0, 8004ae6 <_printf_float+0x86>
 8004ae0:	232d      	movs	r3, #45	@ 0x2d
 8004ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ae6:	4a91      	ldr	r2, [pc, #580]	@ (8004d2c <_printf_float+0x2cc>)
 8004ae8:	4b91      	ldr	r3, [pc, #580]	@ (8004d30 <_printf_float+0x2d0>)
 8004aea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004aee:	bf94      	ite	ls
 8004af0:	4690      	movls	r8, r2
 8004af2:	4698      	movhi	r8, r3
 8004af4:	2303      	movs	r3, #3
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	f02b 0304 	bic.w	r3, fp, #4
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	f04f 0900 	mov.w	r9, #0
 8004b02:	9700      	str	r7, [sp, #0]
 8004b04:	4633      	mov	r3, r6
 8004b06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 f9d2 	bl	8004eb4 <_printf_common>
 8004b10:	3001      	adds	r0, #1
 8004b12:	f040 808d 	bne.w	8004c30 <_printf_float+0x1d0>
 8004b16:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1a:	b00d      	add	sp, #52	@ 0x34
 8004b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	4640      	mov	r0, r8
 8004b26:	4649      	mov	r1, r9
 8004b28:	f7fc f800 	bl	8000b2c <__aeabi_dcmpun>
 8004b2c:	b140      	cbz	r0, 8004b40 <_printf_float+0xe0>
 8004b2e:	464b      	mov	r3, r9
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bfbc      	itt	lt
 8004b34:	232d      	movlt	r3, #45	@ 0x2d
 8004b36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d34 <_printf_float+0x2d4>)
 8004b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d38 <_printf_float+0x2d8>)
 8004b3e:	e7d4      	b.n	8004aea <_printf_float+0x8a>
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004b46:	9206      	str	r2, [sp, #24]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	d13b      	bne.n	8004bc4 <_printf_float+0x164>
 8004b4c:	2306      	movs	r3, #6
 8004b4e:	6063      	str	r3, [r4, #4]
 8004b50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004b54:	2300      	movs	r3, #0
 8004b56:	6022      	str	r2, [r4, #0]
 8004b58:	9303      	str	r3, [sp, #12]
 8004b5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004b60:	ab09      	add	r3, sp, #36	@ 0x24
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	6861      	ldr	r1, [r4, #4]
 8004b66:	ec49 8b10 	vmov	d0, r8, r9
 8004b6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f7ff fed6 	bl	8004920 <__cvt>
 8004b74:	9b06      	ldr	r3, [sp, #24]
 8004b76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b78:	2b47      	cmp	r3, #71	@ 0x47
 8004b7a:	4680      	mov	r8, r0
 8004b7c:	d129      	bne.n	8004bd2 <_printf_float+0x172>
 8004b7e:	1cc8      	adds	r0, r1, #3
 8004b80:	db02      	blt.n	8004b88 <_printf_float+0x128>
 8004b82:	6863      	ldr	r3, [r4, #4]
 8004b84:	4299      	cmp	r1, r3
 8004b86:	dd41      	ble.n	8004c0c <_printf_float+0x1ac>
 8004b88:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8004b90:	3901      	subs	r1, #1
 8004b92:	4652      	mov	r2, sl
 8004b94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b98:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b9a:	f7ff ff26 	bl	80049ea <__exponent>
 8004b9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ba0:	1813      	adds	r3, r2, r0
 8004ba2:	2a01      	cmp	r2, #1
 8004ba4:	4681      	mov	r9, r0
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	dc02      	bgt.n	8004bb0 <_printf_float+0x150>
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	07d2      	lsls	r2, r2, #31
 8004bae:	d501      	bpl.n	8004bb4 <_printf_float+0x154>
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	6123      	str	r3, [r4, #16]
 8004bb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0a2      	beq.n	8004b02 <_printf_float+0xa2>
 8004bbc:	232d      	movs	r3, #45	@ 0x2d
 8004bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bc2:	e79e      	b.n	8004b02 <_printf_float+0xa2>
 8004bc4:	9a06      	ldr	r2, [sp, #24]
 8004bc6:	2a47      	cmp	r2, #71	@ 0x47
 8004bc8:	d1c2      	bne.n	8004b50 <_printf_float+0xf0>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1c0      	bne.n	8004b50 <_printf_float+0xf0>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e7bd      	b.n	8004b4e <_printf_float+0xee>
 8004bd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bd6:	d9db      	bls.n	8004b90 <_printf_float+0x130>
 8004bd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004bdc:	d118      	bne.n	8004c10 <_printf_float+0x1b0>
 8004bde:	2900      	cmp	r1, #0
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	dd0b      	ble.n	8004bfc <_printf_float+0x19c>
 8004be4:	6121      	str	r1, [r4, #16]
 8004be6:	b913      	cbnz	r3, 8004bee <_printf_float+0x18e>
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	07d0      	lsls	r0, r2, #31
 8004bec:	d502      	bpl.n	8004bf4 <_printf_float+0x194>
 8004bee:	3301      	adds	r3, #1
 8004bf0:	440b      	add	r3, r1
 8004bf2:	6123      	str	r3, [r4, #16]
 8004bf4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004bf6:	f04f 0900 	mov.w	r9, #0
 8004bfa:	e7db      	b.n	8004bb4 <_printf_float+0x154>
 8004bfc:	b913      	cbnz	r3, 8004c04 <_printf_float+0x1a4>
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	07d2      	lsls	r2, r2, #31
 8004c02:	d501      	bpl.n	8004c08 <_printf_float+0x1a8>
 8004c04:	3302      	adds	r3, #2
 8004c06:	e7f4      	b.n	8004bf2 <_printf_float+0x192>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e7f2      	b.n	8004bf2 <_printf_float+0x192>
 8004c0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c12:	4299      	cmp	r1, r3
 8004c14:	db05      	blt.n	8004c22 <_printf_float+0x1c2>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	6121      	str	r1, [r4, #16]
 8004c1a:	07d8      	lsls	r0, r3, #31
 8004c1c:	d5ea      	bpl.n	8004bf4 <_printf_float+0x194>
 8004c1e:	1c4b      	adds	r3, r1, #1
 8004c20:	e7e7      	b.n	8004bf2 <_printf_float+0x192>
 8004c22:	2900      	cmp	r1, #0
 8004c24:	bfd4      	ite	le
 8004c26:	f1c1 0202 	rsble	r2, r1, #2
 8004c2a:	2201      	movgt	r2, #1
 8004c2c:	4413      	add	r3, r2
 8004c2e:	e7e0      	b.n	8004bf2 <_printf_float+0x192>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	055a      	lsls	r2, r3, #21
 8004c34:	d407      	bmi.n	8004c46 <_printf_float+0x1e6>
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	4642      	mov	r2, r8
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	47b8      	blx	r7
 8004c40:	3001      	adds	r0, #1
 8004c42:	d12b      	bne.n	8004c9c <_printf_float+0x23c>
 8004c44:	e767      	b.n	8004b16 <_printf_float+0xb6>
 8004c46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c4a:	f240 80dd 	bls.w	8004e08 <_printf_float+0x3a8>
 8004c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c52:	2200      	movs	r2, #0
 8004c54:	2300      	movs	r3, #0
 8004c56:	f7fb ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d033      	beq.n	8004cc6 <_printf_float+0x266>
 8004c5e:	4a37      	ldr	r2, [pc, #220]	@ (8004d3c <_printf_float+0x2dc>)
 8004c60:	2301      	movs	r3, #1
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f af54 	beq.w	8004b16 <_printf_float+0xb6>
 8004c6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c72:	4543      	cmp	r3, r8
 8004c74:	db02      	blt.n	8004c7c <_printf_float+0x21c>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	07d8      	lsls	r0, r3, #31
 8004c7a:	d50f      	bpl.n	8004c9c <_printf_float+0x23c>
 8004c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c80:	4631      	mov	r1, r6
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	f43f af45 	beq.w	8004b16 <_printf_float+0xb6>
 8004c8c:	f04f 0900 	mov.w	r9, #0
 8004c90:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c94:	f104 0a1a 	add.w	sl, r4, #26
 8004c98:	45c8      	cmp	r8, r9
 8004c9a:	dc09      	bgt.n	8004cb0 <_printf_float+0x250>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	079b      	lsls	r3, r3, #30
 8004ca0:	f100 8103 	bmi.w	8004eaa <_printf_float+0x44a>
 8004ca4:	68e0      	ldr	r0, [r4, #12]
 8004ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ca8:	4298      	cmp	r0, r3
 8004caa:	bfb8      	it	lt
 8004cac:	4618      	movlt	r0, r3
 8004cae:	e734      	b.n	8004b1a <_printf_float+0xba>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4652      	mov	r2, sl
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af2b 	beq.w	8004b16 <_printf_float+0xb6>
 8004cc0:	f109 0901 	add.w	r9, r9, #1
 8004cc4:	e7e8      	b.n	8004c98 <_printf_float+0x238>
 8004cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dc39      	bgt.n	8004d40 <_printf_float+0x2e0>
 8004ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d3c <_printf_float+0x2dc>)
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	f43f af1d 	beq.w	8004b16 <_printf_float+0xb6>
 8004cdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004ce0:	ea59 0303 	orrs.w	r3, r9, r3
 8004ce4:	d102      	bne.n	8004cec <_printf_float+0x28c>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	07d9      	lsls	r1, r3, #31
 8004cea:	d5d7      	bpl.n	8004c9c <_printf_float+0x23c>
 8004cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f43f af0d 	beq.w	8004b16 <_printf_float+0xb6>
 8004cfc:	f04f 0a00 	mov.w	sl, #0
 8004d00:	f104 0b1a 	add.w	fp, r4, #26
 8004d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d06:	425b      	negs	r3, r3
 8004d08:	4553      	cmp	r3, sl
 8004d0a:	dc01      	bgt.n	8004d10 <_printf_float+0x2b0>
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	e793      	b.n	8004c38 <_printf_float+0x1d8>
 8004d10:	2301      	movs	r3, #1
 8004d12:	465a      	mov	r2, fp
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f43f aefb 	beq.w	8004b16 <_printf_float+0xb6>
 8004d20:	f10a 0a01 	add.w	sl, sl, #1
 8004d24:	e7ee      	b.n	8004d04 <_printf_float+0x2a4>
 8004d26:	bf00      	nop
 8004d28:	7fefffff 	.word	0x7fefffff
 8004d2c:	08007c60 	.word	0x08007c60
 8004d30:	08007c64 	.word	0x08007c64
 8004d34:	08007c68 	.word	0x08007c68
 8004d38:	08007c6c 	.word	0x08007c6c
 8004d3c:	08007c70 	.word	0x08007c70
 8004d40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d46:	4553      	cmp	r3, sl
 8004d48:	bfa8      	it	ge
 8004d4a:	4653      	movge	r3, sl
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	4699      	mov	r9, r3
 8004d50:	dc36      	bgt.n	8004dc0 <_printf_float+0x360>
 8004d52:	f04f 0b00 	mov.w	fp, #0
 8004d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d5a:	f104 021a 	add.w	r2, r4, #26
 8004d5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d60:	9306      	str	r3, [sp, #24]
 8004d62:	eba3 0309 	sub.w	r3, r3, r9
 8004d66:	455b      	cmp	r3, fp
 8004d68:	dc31      	bgt.n	8004dce <_printf_float+0x36e>
 8004d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d6c:	459a      	cmp	sl, r3
 8004d6e:	dc3a      	bgt.n	8004de6 <_printf_float+0x386>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	07da      	lsls	r2, r3, #31
 8004d74:	d437      	bmi.n	8004de6 <_printf_float+0x386>
 8004d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d78:	ebaa 0903 	sub.w	r9, sl, r3
 8004d7c:	9b06      	ldr	r3, [sp, #24]
 8004d7e:	ebaa 0303 	sub.w	r3, sl, r3
 8004d82:	4599      	cmp	r9, r3
 8004d84:	bfa8      	it	ge
 8004d86:	4699      	movge	r9, r3
 8004d88:	f1b9 0f00 	cmp.w	r9, #0
 8004d8c:	dc33      	bgt.n	8004df6 <_printf_float+0x396>
 8004d8e:	f04f 0800 	mov.w	r8, #0
 8004d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d96:	f104 0b1a 	add.w	fp, r4, #26
 8004d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8004da0:	eba3 0309 	sub.w	r3, r3, r9
 8004da4:	4543      	cmp	r3, r8
 8004da6:	f77f af79 	ble.w	8004c9c <_printf_float+0x23c>
 8004daa:	2301      	movs	r3, #1
 8004dac:	465a      	mov	r2, fp
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f aeae 	beq.w	8004b16 <_printf_float+0xb6>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	e7ec      	b.n	8004d9a <_printf_float+0x33a>
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	47b8      	blx	r7
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d1c2      	bne.n	8004d52 <_printf_float+0x2f2>
 8004dcc:	e6a3      	b.n	8004b16 <_printf_float+0xb6>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	9206      	str	r2, [sp, #24]
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	f43f ae9c 	beq.w	8004b16 <_printf_float+0xb6>
 8004dde:	9a06      	ldr	r2, [sp, #24]
 8004de0:	f10b 0b01 	add.w	fp, fp, #1
 8004de4:	e7bb      	b.n	8004d5e <_printf_float+0x2fe>
 8004de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	d1c0      	bne.n	8004d76 <_printf_float+0x316>
 8004df4:	e68f      	b.n	8004b16 <_printf_float+0xb6>
 8004df6:	9a06      	ldr	r2, [sp, #24]
 8004df8:	464b      	mov	r3, r9
 8004dfa:	4442      	add	r2, r8
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4628      	mov	r0, r5
 8004e00:	47b8      	blx	r7
 8004e02:	3001      	adds	r0, #1
 8004e04:	d1c3      	bne.n	8004d8e <_printf_float+0x32e>
 8004e06:	e686      	b.n	8004b16 <_printf_float+0xb6>
 8004e08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e0c:	f1ba 0f01 	cmp.w	sl, #1
 8004e10:	dc01      	bgt.n	8004e16 <_printf_float+0x3b6>
 8004e12:	07db      	lsls	r3, r3, #31
 8004e14:	d536      	bpl.n	8004e84 <_printf_float+0x424>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4642      	mov	r2, r8
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae78 	beq.w	8004b16 <_printf_float+0xb6>
 8004e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f ae70 	beq.w	8004b16 <_printf_float+0xb6>
 8004e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e42:	f7fb fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e46:	b9c0      	cbnz	r0, 8004e7a <_printf_float+0x41a>
 8004e48:	4653      	mov	r3, sl
 8004e4a:	f108 0201 	add.w	r2, r8, #1
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	d10c      	bne.n	8004e72 <_printf_float+0x412>
 8004e58:	e65d      	b.n	8004b16 <_printf_float+0xb6>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	465a      	mov	r2, fp
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	f43f ae56 	beq.w	8004b16 <_printf_float+0xb6>
 8004e6a:	f108 0801 	add.w	r8, r8, #1
 8004e6e:	45d0      	cmp	r8, sl
 8004e70:	dbf3      	blt.n	8004e5a <_printf_float+0x3fa>
 8004e72:	464b      	mov	r3, r9
 8004e74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e78:	e6df      	b.n	8004c3a <_printf_float+0x1da>
 8004e7a:	f04f 0800 	mov.w	r8, #0
 8004e7e:	f104 0b1a 	add.w	fp, r4, #26
 8004e82:	e7f4      	b.n	8004e6e <_printf_float+0x40e>
 8004e84:	2301      	movs	r3, #1
 8004e86:	4642      	mov	r2, r8
 8004e88:	e7e1      	b.n	8004e4e <_printf_float+0x3ee>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	464a      	mov	r2, r9
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4628      	mov	r0, r5
 8004e92:	47b8      	blx	r7
 8004e94:	3001      	adds	r0, #1
 8004e96:	f43f ae3e 	beq.w	8004b16 <_printf_float+0xb6>
 8004e9a:	f108 0801 	add.w	r8, r8, #1
 8004e9e:	68e3      	ldr	r3, [r4, #12]
 8004ea0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ea2:	1a5b      	subs	r3, r3, r1
 8004ea4:	4543      	cmp	r3, r8
 8004ea6:	dcf0      	bgt.n	8004e8a <_printf_float+0x42a>
 8004ea8:	e6fc      	b.n	8004ca4 <_printf_float+0x244>
 8004eaa:	f04f 0800 	mov.w	r8, #0
 8004eae:	f104 0919 	add.w	r9, r4, #25
 8004eb2:	e7f4      	b.n	8004e9e <_printf_float+0x43e>

08004eb4 <_printf_common>:
 8004eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	4616      	mov	r6, r2
 8004eba:	4698      	mov	r8, r3
 8004ebc:	688a      	ldr	r2, [r1, #8]
 8004ebe:	690b      	ldr	r3, [r1, #16]
 8004ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bfb8      	it	lt
 8004ec8:	4613      	movlt	r3, r2
 8004eca:	6033      	str	r3, [r6, #0]
 8004ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	b10a      	cbz	r2, 8004eda <_printf_common+0x26>
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	0699      	lsls	r1, r3, #26
 8004ede:	bf42      	ittt	mi
 8004ee0:	6833      	ldrmi	r3, [r6, #0]
 8004ee2:	3302      	addmi	r3, #2
 8004ee4:	6033      	strmi	r3, [r6, #0]
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	f015 0506 	ands.w	r5, r5, #6
 8004eec:	d106      	bne.n	8004efc <_printf_common+0x48>
 8004eee:	f104 0a19 	add.w	sl, r4, #25
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	42ab      	cmp	r3, r5
 8004efa:	dc26      	bgt.n	8004f4a <_printf_common+0x96>
 8004efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	3b00      	subs	r3, #0
 8004f04:	bf18      	it	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	0692      	lsls	r2, r2, #26
 8004f0a:	d42b      	bmi.n	8004f64 <_printf_common+0xb0>
 8004f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f10:	4641      	mov	r1, r8
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c8      	blx	r9
 8004f16:	3001      	adds	r0, #1
 8004f18:	d01e      	beq.n	8004f58 <_printf_common+0xa4>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	6922      	ldr	r2, [r4, #16]
 8004f1e:	f003 0306 	and.w	r3, r3, #6
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	bf02      	ittt	eq
 8004f26:	68e5      	ldreq	r5, [r4, #12]
 8004f28:	6833      	ldreq	r3, [r6, #0]
 8004f2a:	1aed      	subeq	r5, r5, r3
 8004f2c:	68a3      	ldr	r3, [r4, #8]
 8004f2e:	bf0c      	ite	eq
 8004f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f34:	2500      	movne	r5, #0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	bfc4      	itt	gt
 8004f3a:	1a9b      	subgt	r3, r3, r2
 8004f3c:	18ed      	addgt	r5, r5, r3
 8004f3e:	2600      	movs	r6, #0
 8004f40:	341a      	adds	r4, #26
 8004f42:	42b5      	cmp	r5, r6
 8004f44:	d11a      	bne.n	8004f7c <_printf_common+0xc8>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e008      	b.n	8004f5c <_printf_common+0xa8>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	4641      	mov	r1, r8
 8004f50:	4638      	mov	r0, r7
 8004f52:	47c8      	blx	r9
 8004f54:	3001      	adds	r0, #1
 8004f56:	d103      	bne.n	8004f60 <_printf_common+0xac>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f60:	3501      	adds	r5, #1
 8004f62:	e7c6      	b.n	8004ef2 <_printf_common+0x3e>
 8004f64:	18e1      	adds	r1, r4, r3
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	2030      	movs	r0, #48	@ 0x30
 8004f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f6e:	4422      	add	r2, r4
 8004f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f78:	3302      	adds	r3, #2
 8004f7a:	e7c7      	b.n	8004f0c <_printf_common+0x58>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4641      	mov	r1, r8
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c8      	blx	r9
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0e6      	beq.n	8004f58 <_printf_common+0xa4>
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7d9      	b.n	8004f42 <_printf_common+0x8e>
	...

08004f90 <_printf_i>:
 8004f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	7e0f      	ldrb	r7, [r1, #24]
 8004f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f98:	2f78      	cmp	r7, #120	@ 0x78
 8004f9a:	4691      	mov	r9, r2
 8004f9c:	4680      	mov	r8, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fa6:	d807      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fa8:	2f62      	cmp	r7, #98	@ 0x62
 8004faa:	d80a      	bhi.n	8004fc2 <_printf_i+0x32>
 8004fac:	2f00      	cmp	r7, #0
 8004fae:	f000 80d2 	beq.w	8005156 <_printf_i+0x1c6>
 8004fb2:	2f58      	cmp	r7, #88	@ 0x58
 8004fb4:	f000 80b9 	beq.w	800512a <_printf_i+0x19a>
 8004fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fc0:	e03a      	b.n	8005038 <_printf_i+0xa8>
 8004fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fc6:	2b15      	cmp	r3, #21
 8004fc8:	d8f6      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fca:	a101      	add	r1, pc, #4	@ (adr r1, 8004fd0 <_printf_i+0x40>)
 8004fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	08004fb9 	.word	0x08004fb9
 8004fdc:	08004fb9 	.word	0x08004fb9
 8004fe0:	08004fb9 	.word	0x08004fb9
 8004fe4:	08004fb9 	.word	0x08004fb9
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004fb9 	.word	0x08004fb9
 8004ff0:	08004fb9 	.word	0x08004fb9
 8004ff4:	08004fb9 	.word	0x08004fb9
 8004ff8:	08004fb9 	.word	0x08004fb9
 8004ffc:	0800513d 	.word	0x0800513d
 8005000:	08005067 	.word	0x08005067
 8005004:	080050f7 	.word	0x080050f7
 8005008:	08004fb9 	.word	0x08004fb9
 800500c:	08004fb9 	.word	0x08004fb9
 8005010:	0800515f 	.word	0x0800515f
 8005014:	08004fb9 	.word	0x08004fb9
 8005018:	08005067 	.word	0x08005067
 800501c:	08004fb9 	.word	0x08004fb9
 8005020:	08004fb9 	.word	0x08004fb9
 8005024:	080050ff 	.word	0x080050ff
 8005028:	6833      	ldr	r3, [r6, #0]
 800502a:	1d1a      	adds	r2, r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6032      	str	r2, [r6, #0]
 8005030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005038:	2301      	movs	r3, #1
 800503a:	e09d      	b.n	8005178 <_printf_i+0x1e8>
 800503c:	6833      	ldr	r3, [r6, #0]
 800503e:	6820      	ldr	r0, [r4, #0]
 8005040:	1d19      	adds	r1, r3, #4
 8005042:	6031      	str	r1, [r6, #0]
 8005044:	0606      	lsls	r6, r0, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xbc>
 8005048:	681d      	ldr	r5, [r3, #0]
 800504a:	e003      	b.n	8005054 <_printf_i+0xc4>
 800504c:	0645      	lsls	r5, r0, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xb8>
 8005050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005054:	2d00      	cmp	r5, #0
 8005056:	da03      	bge.n	8005060 <_printf_i+0xd0>
 8005058:	232d      	movs	r3, #45	@ 0x2d
 800505a:	426d      	negs	r5, r5
 800505c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005060:	4859      	ldr	r0, [pc, #356]	@ (80051c8 <_printf_i+0x238>)
 8005062:	230a      	movs	r3, #10
 8005064:	e011      	b.n	800508a <_printf_i+0xfa>
 8005066:	6821      	ldr	r1, [r4, #0]
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	0608      	lsls	r0, r1, #24
 800506c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005070:	d402      	bmi.n	8005078 <_printf_i+0xe8>
 8005072:	0649      	lsls	r1, r1, #25
 8005074:	bf48      	it	mi
 8005076:	b2ad      	uxthmi	r5, r5
 8005078:	2f6f      	cmp	r7, #111	@ 0x6f
 800507a:	4853      	ldr	r0, [pc, #332]	@ (80051c8 <_printf_i+0x238>)
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	bf14      	ite	ne
 8005080:	230a      	movne	r3, #10
 8005082:	2308      	moveq	r3, #8
 8005084:	2100      	movs	r1, #0
 8005086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800508a:	6866      	ldr	r6, [r4, #4]
 800508c:	60a6      	str	r6, [r4, #8]
 800508e:	2e00      	cmp	r6, #0
 8005090:	bfa2      	ittt	ge
 8005092:	6821      	ldrge	r1, [r4, #0]
 8005094:	f021 0104 	bicge.w	r1, r1, #4
 8005098:	6021      	strge	r1, [r4, #0]
 800509a:	b90d      	cbnz	r5, 80050a0 <_printf_i+0x110>
 800509c:	2e00      	cmp	r6, #0
 800509e:	d04b      	beq.n	8005138 <_printf_i+0x1a8>
 80050a0:	4616      	mov	r6, r2
 80050a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050a6:	fb03 5711 	mls	r7, r3, r1, r5
 80050aa:	5dc7      	ldrb	r7, [r0, r7]
 80050ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050b0:	462f      	mov	r7, r5
 80050b2:	42bb      	cmp	r3, r7
 80050b4:	460d      	mov	r5, r1
 80050b6:	d9f4      	bls.n	80050a2 <_printf_i+0x112>
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d10b      	bne.n	80050d4 <_printf_i+0x144>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07df      	lsls	r7, r3, #31
 80050c0:	d508      	bpl.n	80050d4 <_printf_i+0x144>
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	6861      	ldr	r1, [r4, #4]
 80050c6:	4299      	cmp	r1, r3
 80050c8:	bfde      	ittt	le
 80050ca:	2330      	movle	r3, #48	@ 0x30
 80050cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050d4:	1b92      	subs	r2, r2, r6
 80050d6:	6122      	str	r2, [r4, #16]
 80050d8:	f8cd a000 	str.w	sl, [sp]
 80050dc:	464b      	mov	r3, r9
 80050de:	aa03      	add	r2, sp, #12
 80050e0:	4621      	mov	r1, r4
 80050e2:	4640      	mov	r0, r8
 80050e4:	f7ff fee6 	bl	8004eb4 <_printf_common>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d14a      	bne.n	8005182 <_printf_i+0x1f2>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	b004      	add	sp, #16
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	4833      	ldr	r0, [pc, #204]	@ (80051cc <_printf_i+0x23c>)
 8005100:	2778      	movs	r7, #120	@ 0x78
 8005102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	6831      	ldr	r1, [r6, #0]
 800510a:	061f      	lsls	r7, r3, #24
 800510c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005110:	d402      	bmi.n	8005118 <_printf_i+0x188>
 8005112:	065f      	lsls	r7, r3, #25
 8005114:	bf48      	it	mi
 8005116:	b2ad      	uxthmi	r5, r5
 8005118:	6031      	str	r1, [r6, #0]
 800511a:	07d9      	lsls	r1, r3, #31
 800511c:	bf44      	itt	mi
 800511e:	f043 0320 	orrmi.w	r3, r3, #32
 8005122:	6023      	strmi	r3, [r4, #0]
 8005124:	b11d      	cbz	r5, 800512e <_printf_i+0x19e>
 8005126:	2310      	movs	r3, #16
 8005128:	e7ac      	b.n	8005084 <_printf_i+0xf4>
 800512a:	4827      	ldr	r0, [pc, #156]	@ (80051c8 <_printf_i+0x238>)
 800512c:	e7e9      	b.n	8005102 <_printf_i+0x172>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f023 0320 	bic.w	r3, r3, #32
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	e7f6      	b.n	8005126 <_printf_i+0x196>
 8005138:	4616      	mov	r6, r2
 800513a:	e7bd      	b.n	80050b8 <_printf_i+0x128>
 800513c:	6833      	ldr	r3, [r6, #0]
 800513e:	6825      	ldr	r5, [r4, #0]
 8005140:	6961      	ldr	r1, [r4, #20]
 8005142:	1d18      	adds	r0, r3, #4
 8005144:	6030      	str	r0, [r6, #0]
 8005146:	062e      	lsls	r6, r5, #24
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	d501      	bpl.n	8005150 <_printf_i+0x1c0>
 800514c:	6019      	str	r1, [r3, #0]
 800514e:	e002      	b.n	8005156 <_printf_i+0x1c6>
 8005150:	0668      	lsls	r0, r5, #25
 8005152:	d5fb      	bpl.n	800514c <_printf_i+0x1bc>
 8005154:	8019      	strh	r1, [r3, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	4616      	mov	r6, r2
 800515c:	e7bc      	b.n	80050d8 <_printf_i+0x148>
 800515e:	6833      	ldr	r3, [r6, #0]
 8005160:	1d1a      	adds	r2, r3, #4
 8005162:	6032      	str	r2, [r6, #0]
 8005164:	681e      	ldr	r6, [r3, #0]
 8005166:	6862      	ldr	r2, [r4, #4]
 8005168:	2100      	movs	r1, #0
 800516a:	4630      	mov	r0, r6
 800516c:	f7fb f830 	bl	80001d0 <memchr>
 8005170:	b108      	cbz	r0, 8005176 <_printf_i+0x1e6>
 8005172:	1b80      	subs	r0, r0, r6
 8005174:	6060      	str	r0, [r4, #4]
 8005176:	6863      	ldr	r3, [r4, #4]
 8005178:	6123      	str	r3, [r4, #16]
 800517a:	2300      	movs	r3, #0
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005180:	e7aa      	b.n	80050d8 <_printf_i+0x148>
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	4632      	mov	r2, r6
 8005186:	4649      	mov	r1, r9
 8005188:	4640      	mov	r0, r8
 800518a:	47d0      	blx	sl
 800518c:	3001      	adds	r0, #1
 800518e:	d0ad      	beq.n	80050ec <_printf_i+0x15c>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	079b      	lsls	r3, r3, #30
 8005194:	d413      	bmi.n	80051be <_printf_i+0x22e>
 8005196:	68e0      	ldr	r0, [r4, #12]
 8005198:	9b03      	ldr	r3, [sp, #12]
 800519a:	4298      	cmp	r0, r3
 800519c:	bfb8      	it	lt
 800519e:	4618      	movlt	r0, r3
 80051a0:	e7a6      	b.n	80050f0 <_printf_i+0x160>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4632      	mov	r2, r6
 80051a6:	4649      	mov	r1, r9
 80051a8:	4640      	mov	r0, r8
 80051aa:	47d0      	blx	sl
 80051ac:	3001      	adds	r0, #1
 80051ae:	d09d      	beq.n	80050ec <_printf_i+0x15c>
 80051b0:	3501      	adds	r5, #1
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	9903      	ldr	r1, [sp, #12]
 80051b6:	1a5b      	subs	r3, r3, r1
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dcf2      	bgt.n	80051a2 <_printf_i+0x212>
 80051bc:	e7eb      	b.n	8005196 <_printf_i+0x206>
 80051be:	2500      	movs	r5, #0
 80051c0:	f104 0619 	add.w	r6, r4, #25
 80051c4:	e7f5      	b.n	80051b2 <_printf_i+0x222>
 80051c6:	bf00      	nop
 80051c8:	08007c72 	.word	0x08007c72
 80051cc:	08007c83 	.word	0x08007c83

080051d0 <std>:
 80051d0:	2300      	movs	r3, #0
 80051d2:	b510      	push	{r4, lr}
 80051d4:	4604      	mov	r4, r0
 80051d6:	e9c0 3300 	strd	r3, r3, [r0]
 80051da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051de:	6083      	str	r3, [r0, #8]
 80051e0:	8181      	strh	r1, [r0, #12]
 80051e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80051e4:	81c2      	strh	r2, [r0, #14]
 80051e6:	6183      	str	r3, [r0, #24]
 80051e8:	4619      	mov	r1, r3
 80051ea:	2208      	movs	r2, #8
 80051ec:	305c      	adds	r0, #92	@ 0x5c
 80051ee:	f000 f924 	bl	800543a <memset>
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <std+0x58>)
 80051f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80051f6:	4b0d      	ldr	r3, [pc, #52]	@ (800522c <std+0x5c>)
 80051f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005230 <std+0x60>)
 80051fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005234 <std+0x64>)
 8005200:	6323      	str	r3, [r4, #48]	@ 0x30
 8005202:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <std+0x68>)
 8005204:	6224      	str	r4, [r4, #32]
 8005206:	429c      	cmp	r4, r3
 8005208:	d006      	beq.n	8005218 <std+0x48>
 800520a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800520e:	4294      	cmp	r4, r2
 8005210:	d002      	beq.n	8005218 <std+0x48>
 8005212:	33d0      	adds	r3, #208	@ 0xd0
 8005214:	429c      	cmp	r4, r3
 8005216:	d105      	bne.n	8005224 <std+0x54>
 8005218:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005220:	f000 b988 	b.w	8005534 <__retarget_lock_init_recursive>
 8005224:	bd10      	pop	{r4, pc}
 8005226:	bf00      	nop
 8005228:	08005395 	.word	0x08005395
 800522c:	080053b7 	.word	0x080053b7
 8005230:	080053ef 	.word	0x080053ef
 8005234:	08005413 	.word	0x08005413
 8005238:	20000728 	.word	0x20000728

0800523c <stdio_exit_handler>:
 800523c:	4a02      	ldr	r2, [pc, #8]	@ (8005248 <stdio_exit_handler+0xc>)
 800523e:	4903      	ldr	r1, [pc, #12]	@ (800524c <stdio_exit_handler+0x10>)
 8005240:	4803      	ldr	r0, [pc, #12]	@ (8005250 <stdio_exit_handler+0x14>)
 8005242:	f000 b869 	b.w	8005318 <_fwalk_sglue>
 8005246:	bf00      	nop
 8005248:	2000000c 	.word	0x2000000c
 800524c:	08006ead 	.word	0x08006ead
 8005250:	2000001c 	.word	0x2000001c

08005254 <cleanup_stdio>:
 8005254:	6841      	ldr	r1, [r0, #4]
 8005256:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <cleanup_stdio+0x34>)
 8005258:	4299      	cmp	r1, r3
 800525a:	b510      	push	{r4, lr}
 800525c:	4604      	mov	r4, r0
 800525e:	d001      	beq.n	8005264 <cleanup_stdio+0x10>
 8005260:	f001 fe24 	bl	8006eac <_fflush_r>
 8005264:	68a1      	ldr	r1, [r4, #8]
 8005266:	4b09      	ldr	r3, [pc, #36]	@ (800528c <cleanup_stdio+0x38>)
 8005268:	4299      	cmp	r1, r3
 800526a:	d002      	beq.n	8005272 <cleanup_stdio+0x1e>
 800526c:	4620      	mov	r0, r4
 800526e:	f001 fe1d 	bl	8006eac <_fflush_r>
 8005272:	68e1      	ldr	r1, [r4, #12]
 8005274:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <cleanup_stdio+0x3c>)
 8005276:	4299      	cmp	r1, r3
 8005278:	d004      	beq.n	8005284 <cleanup_stdio+0x30>
 800527a:	4620      	mov	r0, r4
 800527c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005280:	f001 be14 	b.w	8006eac <_fflush_r>
 8005284:	bd10      	pop	{r4, pc}
 8005286:	bf00      	nop
 8005288:	20000728 	.word	0x20000728
 800528c:	20000790 	.word	0x20000790
 8005290:	200007f8 	.word	0x200007f8

08005294 <global_stdio_init.part.0>:
 8005294:	b510      	push	{r4, lr}
 8005296:	4b0b      	ldr	r3, [pc, #44]	@ (80052c4 <global_stdio_init.part.0+0x30>)
 8005298:	4c0b      	ldr	r4, [pc, #44]	@ (80052c8 <global_stdio_init.part.0+0x34>)
 800529a:	4a0c      	ldr	r2, [pc, #48]	@ (80052cc <global_stdio_init.part.0+0x38>)
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	4620      	mov	r0, r4
 80052a0:	2200      	movs	r2, #0
 80052a2:	2104      	movs	r1, #4
 80052a4:	f7ff ff94 	bl	80051d0 <std>
 80052a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052ac:	2201      	movs	r2, #1
 80052ae:	2109      	movs	r1, #9
 80052b0:	f7ff ff8e 	bl	80051d0 <std>
 80052b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052b8:	2202      	movs	r2, #2
 80052ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052be:	2112      	movs	r1, #18
 80052c0:	f7ff bf86 	b.w	80051d0 <std>
 80052c4:	20000860 	.word	0x20000860
 80052c8:	20000728 	.word	0x20000728
 80052cc:	0800523d 	.word	0x0800523d

080052d0 <__sfp_lock_acquire>:
 80052d0:	4801      	ldr	r0, [pc, #4]	@ (80052d8 <__sfp_lock_acquire+0x8>)
 80052d2:	f000 b930 	b.w	8005536 <__retarget_lock_acquire_recursive>
 80052d6:	bf00      	nop
 80052d8:	20000869 	.word	0x20000869

080052dc <__sfp_lock_release>:
 80052dc:	4801      	ldr	r0, [pc, #4]	@ (80052e4 <__sfp_lock_release+0x8>)
 80052de:	f000 b92b 	b.w	8005538 <__retarget_lock_release_recursive>
 80052e2:	bf00      	nop
 80052e4:	20000869 	.word	0x20000869

080052e8 <__sinit>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	4604      	mov	r4, r0
 80052ec:	f7ff fff0 	bl	80052d0 <__sfp_lock_acquire>
 80052f0:	6a23      	ldr	r3, [r4, #32]
 80052f2:	b11b      	cbz	r3, 80052fc <__sinit+0x14>
 80052f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f8:	f7ff bff0 	b.w	80052dc <__sfp_lock_release>
 80052fc:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <__sinit+0x28>)
 80052fe:	6223      	str	r3, [r4, #32]
 8005300:	4b04      	ldr	r3, [pc, #16]	@ (8005314 <__sinit+0x2c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f5      	bne.n	80052f4 <__sinit+0xc>
 8005308:	f7ff ffc4 	bl	8005294 <global_stdio_init.part.0>
 800530c:	e7f2      	b.n	80052f4 <__sinit+0xc>
 800530e:	bf00      	nop
 8005310:	08005255 	.word	0x08005255
 8005314:	20000860 	.word	0x20000860

08005318 <_fwalk_sglue>:
 8005318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800531c:	4607      	mov	r7, r0
 800531e:	4688      	mov	r8, r1
 8005320:	4614      	mov	r4, r2
 8005322:	2600      	movs	r6, #0
 8005324:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005328:	f1b9 0901 	subs.w	r9, r9, #1
 800532c:	d505      	bpl.n	800533a <_fwalk_sglue+0x22>
 800532e:	6824      	ldr	r4, [r4, #0]
 8005330:	2c00      	cmp	r4, #0
 8005332:	d1f7      	bne.n	8005324 <_fwalk_sglue+0xc>
 8005334:	4630      	mov	r0, r6
 8005336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800533a:	89ab      	ldrh	r3, [r5, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d907      	bls.n	8005350 <_fwalk_sglue+0x38>
 8005340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005344:	3301      	adds	r3, #1
 8005346:	d003      	beq.n	8005350 <_fwalk_sglue+0x38>
 8005348:	4629      	mov	r1, r5
 800534a:	4638      	mov	r0, r7
 800534c:	47c0      	blx	r8
 800534e:	4306      	orrs	r6, r0
 8005350:	3568      	adds	r5, #104	@ 0x68
 8005352:	e7e9      	b.n	8005328 <_fwalk_sglue+0x10>

08005354 <siprintf>:
 8005354:	b40e      	push	{r1, r2, r3}
 8005356:	b500      	push	{lr}
 8005358:	b09c      	sub	sp, #112	@ 0x70
 800535a:	ab1d      	add	r3, sp, #116	@ 0x74
 800535c:	9002      	str	r0, [sp, #8]
 800535e:	9006      	str	r0, [sp, #24]
 8005360:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005364:	4809      	ldr	r0, [pc, #36]	@ (800538c <siprintf+0x38>)
 8005366:	9107      	str	r1, [sp, #28]
 8005368:	9104      	str	r1, [sp, #16]
 800536a:	4909      	ldr	r1, [pc, #36]	@ (8005390 <siprintf+0x3c>)
 800536c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005370:	9105      	str	r1, [sp, #20]
 8005372:	6800      	ldr	r0, [r0, #0]
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	a902      	add	r1, sp, #8
 8005378:	f001 fc18 	bl	8006bac <_svfiprintf_r>
 800537c:	9b02      	ldr	r3, [sp, #8]
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	b01c      	add	sp, #112	@ 0x70
 8005384:	f85d eb04 	ldr.w	lr, [sp], #4
 8005388:	b003      	add	sp, #12
 800538a:	4770      	bx	lr
 800538c:	20000018 	.word	0x20000018
 8005390:	ffff0208 	.word	0xffff0208

08005394 <__sread>:
 8005394:	b510      	push	{r4, lr}
 8005396:	460c      	mov	r4, r1
 8005398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539c:	f000 f87c 	bl	8005498 <_read_r>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	bfab      	itete	ge
 80053a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053a6:	89a3      	ldrhlt	r3, [r4, #12]
 80053a8:	181b      	addge	r3, r3, r0
 80053aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053ae:	bfac      	ite	ge
 80053b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053b2:	81a3      	strhlt	r3, [r4, #12]
 80053b4:	bd10      	pop	{r4, pc}

080053b6 <__swrite>:
 80053b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ba:	461f      	mov	r7, r3
 80053bc:	898b      	ldrh	r3, [r1, #12]
 80053be:	05db      	lsls	r3, r3, #23
 80053c0:	4605      	mov	r5, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	4616      	mov	r6, r2
 80053c6:	d505      	bpl.n	80053d4 <__swrite+0x1e>
 80053c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053cc:	2302      	movs	r3, #2
 80053ce:	2200      	movs	r2, #0
 80053d0:	f000 f850 	bl	8005474 <_lseek_r>
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053de:	81a3      	strh	r3, [r4, #12]
 80053e0:	4632      	mov	r2, r6
 80053e2:	463b      	mov	r3, r7
 80053e4:	4628      	mov	r0, r5
 80053e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ea:	f000 b867 	b.w	80054bc <_write_r>

080053ee <__sseek>:
 80053ee:	b510      	push	{r4, lr}
 80053f0:	460c      	mov	r4, r1
 80053f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f6:	f000 f83d 	bl	8005474 <_lseek_r>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	bf15      	itete	ne
 8005400:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800540a:	81a3      	strheq	r3, [r4, #12]
 800540c:	bf18      	it	ne
 800540e:	81a3      	strhne	r3, [r4, #12]
 8005410:	bd10      	pop	{r4, pc}

08005412 <__sclose>:
 8005412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005416:	f000 b81d 	b.w	8005454 <_close_r>

0800541a <memcmp>:
 800541a:	b510      	push	{r4, lr}
 800541c:	3901      	subs	r1, #1
 800541e:	4402      	add	r2, r0
 8005420:	4290      	cmp	r0, r2
 8005422:	d101      	bne.n	8005428 <memcmp+0xe>
 8005424:	2000      	movs	r0, #0
 8005426:	e005      	b.n	8005434 <memcmp+0x1a>
 8005428:	7803      	ldrb	r3, [r0, #0]
 800542a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800542e:	42a3      	cmp	r3, r4
 8005430:	d001      	beq.n	8005436 <memcmp+0x1c>
 8005432:	1b18      	subs	r0, r3, r4
 8005434:	bd10      	pop	{r4, pc}
 8005436:	3001      	adds	r0, #1
 8005438:	e7f2      	b.n	8005420 <memcmp+0x6>

0800543a <memset>:
 800543a:	4402      	add	r2, r0
 800543c:	4603      	mov	r3, r0
 800543e:	4293      	cmp	r3, r2
 8005440:	d100      	bne.n	8005444 <memset+0xa>
 8005442:	4770      	bx	lr
 8005444:	f803 1b01 	strb.w	r1, [r3], #1
 8005448:	e7f9      	b.n	800543e <memset+0x4>
	...

0800544c <_localeconv_r>:
 800544c:	4800      	ldr	r0, [pc, #0]	@ (8005450 <_localeconv_r+0x4>)
 800544e:	4770      	bx	lr
 8005450:	20000158 	.word	0x20000158

08005454 <_close_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d06      	ldr	r5, [pc, #24]	@ (8005470 <_close_r+0x1c>)
 8005458:	2300      	movs	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	602b      	str	r3, [r5, #0]
 8005460:	f7fc fb6a 	bl	8001b38 <_close>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d102      	bne.n	800546e <_close_r+0x1a>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	b103      	cbz	r3, 800546e <_close_r+0x1a>
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	20000864 	.word	0x20000864

08005474 <_lseek_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4d07      	ldr	r5, [pc, #28]	@ (8005494 <_lseek_r+0x20>)
 8005478:	4604      	mov	r4, r0
 800547a:	4608      	mov	r0, r1
 800547c:	4611      	mov	r1, r2
 800547e:	2200      	movs	r2, #0
 8005480:	602a      	str	r2, [r5, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	f7fc fb7f 	bl	8001b86 <_lseek>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_lseek_r+0x1e>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_lseek_r+0x1e>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	20000864 	.word	0x20000864

08005498 <_read_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4d07      	ldr	r5, [pc, #28]	@ (80054b8 <_read_r+0x20>)
 800549c:	4604      	mov	r4, r0
 800549e:	4608      	mov	r0, r1
 80054a0:	4611      	mov	r1, r2
 80054a2:	2200      	movs	r2, #0
 80054a4:	602a      	str	r2, [r5, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	f7fc fb0d 	bl	8001ac6 <_read>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_read_r+0x1e>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_read_r+0x1e>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	20000864 	.word	0x20000864

080054bc <_write_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d07      	ldr	r5, [pc, #28]	@ (80054dc <_write_r+0x20>)
 80054c0:	4604      	mov	r4, r0
 80054c2:	4608      	mov	r0, r1
 80054c4:	4611      	mov	r1, r2
 80054c6:	2200      	movs	r2, #0
 80054c8:	602a      	str	r2, [r5, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f7fc fb18 	bl	8001b00 <_write>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_write_r+0x1e>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_write_r+0x1e>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	20000864 	.word	0x20000864

080054e0 <__errno>:
 80054e0:	4b01      	ldr	r3, [pc, #4]	@ (80054e8 <__errno+0x8>)
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000018 	.word	0x20000018

080054ec <__libc_init_array>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005524 <__libc_init_array+0x38>)
 80054f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005528 <__libc_init_array+0x3c>)
 80054f2:	1b64      	subs	r4, r4, r5
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	2600      	movs	r6, #0
 80054f8:	42a6      	cmp	r6, r4
 80054fa:	d109      	bne.n	8005510 <__libc_init_array+0x24>
 80054fc:	4d0b      	ldr	r5, [pc, #44]	@ (800552c <__libc_init_array+0x40>)
 80054fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005530 <__libc_init_array+0x44>)
 8005500:	f002 f864 	bl	80075cc <_init>
 8005504:	1b64      	subs	r4, r4, r5
 8005506:	10a4      	asrs	r4, r4, #2
 8005508:	2600      	movs	r6, #0
 800550a:	42a6      	cmp	r6, r4
 800550c:	d105      	bne.n	800551a <__libc_init_array+0x2e>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	f855 3b04 	ldr.w	r3, [r5], #4
 8005514:	4798      	blx	r3
 8005516:	3601      	adds	r6, #1
 8005518:	e7ee      	b.n	80054f8 <__libc_init_array+0xc>
 800551a:	f855 3b04 	ldr.w	r3, [r5], #4
 800551e:	4798      	blx	r3
 8005520:	3601      	adds	r6, #1
 8005522:	e7f2      	b.n	800550a <__libc_init_array+0x1e>
 8005524:	08007fd8 	.word	0x08007fd8
 8005528:	08007fd8 	.word	0x08007fd8
 800552c:	08007fd8 	.word	0x08007fd8
 8005530:	08007fdc 	.word	0x08007fdc

08005534 <__retarget_lock_init_recursive>:
 8005534:	4770      	bx	lr

08005536 <__retarget_lock_acquire_recursive>:
 8005536:	4770      	bx	lr

08005538 <__retarget_lock_release_recursive>:
 8005538:	4770      	bx	lr

0800553a <memcpy>:
 800553a:	440a      	add	r2, r1
 800553c:	4291      	cmp	r1, r2
 800553e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005542:	d100      	bne.n	8005546 <memcpy+0xc>
 8005544:	4770      	bx	lr
 8005546:	b510      	push	{r4, lr}
 8005548:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005550:	4291      	cmp	r1, r2
 8005552:	d1f9      	bne.n	8005548 <memcpy+0xe>
 8005554:	bd10      	pop	{r4, pc}

08005556 <quorem>:
 8005556:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555a:	6903      	ldr	r3, [r0, #16]
 800555c:	690c      	ldr	r4, [r1, #16]
 800555e:	42a3      	cmp	r3, r4
 8005560:	4607      	mov	r7, r0
 8005562:	db7e      	blt.n	8005662 <quorem+0x10c>
 8005564:	3c01      	subs	r4, #1
 8005566:	f101 0814 	add.w	r8, r1, #20
 800556a:	00a3      	lsls	r3, r4, #2
 800556c:	f100 0514 	add.w	r5, r0, #20
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800557c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005580:	3301      	adds	r3, #1
 8005582:	429a      	cmp	r2, r3
 8005584:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005588:	fbb2 f6f3 	udiv	r6, r2, r3
 800558c:	d32e      	bcc.n	80055ec <quorem+0x96>
 800558e:	f04f 0a00 	mov.w	sl, #0
 8005592:	46c4      	mov	ip, r8
 8005594:	46ae      	mov	lr, r5
 8005596:	46d3      	mov	fp, sl
 8005598:	f85c 3b04 	ldr.w	r3, [ip], #4
 800559c:	b298      	uxth	r0, r3
 800559e:	fb06 a000 	mla	r0, r6, r0, sl
 80055a2:	0c02      	lsrs	r2, r0, #16
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	fb06 2303 	mla	r3, r6, r3, r2
 80055aa:	f8de 2000 	ldr.w	r2, [lr]
 80055ae:	b280      	uxth	r0, r0
 80055b0:	b292      	uxth	r2, r2
 80055b2:	1a12      	subs	r2, r2, r0
 80055b4:	445a      	add	r2, fp
 80055b6:	f8de 0000 	ldr.w	r0, [lr]
 80055ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055be:	b29b      	uxth	r3, r3
 80055c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055c8:	b292      	uxth	r2, r2
 80055ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055ce:	45e1      	cmp	r9, ip
 80055d0:	f84e 2b04 	str.w	r2, [lr], #4
 80055d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055d8:	d2de      	bcs.n	8005598 <quorem+0x42>
 80055da:	9b00      	ldr	r3, [sp, #0]
 80055dc:	58eb      	ldr	r3, [r5, r3]
 80055de:	b92b      	cbnz	r3, 80055ec <quorem+0x96>
 80055e0:	9b01      	ldr	r3, [sp, #4]
 80055e2:	3b04      	subs	r3, #4
 80055e4:	429d      	cmp	r5, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	d32f      	bcc.n	800564a <quorem+0xf4>
 80055ea:	613c      	str	r4, [r7, #16]
 80055ec:	4638      	mov	r0, r7
 80055ee:	f001 f979 	bl	80068e4 <__mcmp>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	db25      	blt.n	8005642 <quorem+0xec>
 80055f6:	4629      	mov	r1, r5
 80055f8:	2000      	movs	r0, #0
 80055fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80055fe:	f8d1 c000 	ldr.w	ip, [r1]
 8005602:	fa1f fe82 	uxth.w	lr, r2
 8005606:	fa1f f38c 	uxth.w	r3, ip
 800560a:	eba3 030e 	sub.w	r3, r3, lr
 800560e:	4403      	add	r3, r0
 8005610:	0c12      	lsrs	r2, r2, #16
 8005612:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005616:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800561a:	b29b      	uxth	r3, r3
 800561c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005620:	45c1      	cmp	r9, r8
 8005622:	f841 3b04 	str.w	r3, [r1], #4
 8005626:	ea4f 4022 	mov.w	r0, r2, asr #16
 800562a:	d2e6      	bcs.n	80055fa <quorem+0xa4>
 800562c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005630:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005634:	b922      	cbnz	r2, 8005640 <quorem+0xea>
 8005636:	3b04      	subs	r3, #4
 8005638:	429d      	cmp	r5, r3
 800563a:	461a      	mov	r2, r3
 800563c:	d30b      	bcc.n	8005656 <quorem+0x100>
 800563e:	613c      	str	r4, [r7, #16]
 8005640:	3601      	adds	r6, #1
 8005642:	4630      	mov	r0, r6
 8005644:	b003      	add	sp, #12
 8005646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	3b04      	subs	r3, #4
 800564e:	2a00      	cmp	r2, #0
 8005650:	d1cb      	bne.n	80055ea <quorem+0x94>
 8005652:	3c01      	subs	r4, #1
 8005654:	e7c6      	b.n	80055e4 <quorem+0x8e>
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	3b04      	subs	r3, #4
 800565a:	2a00      	cmp	r2, #0
 800565c:	d1ef      	bne.n	800563e <quorem+0xe8>
 800565e:	3c01      	subs	r4, #1
 8005660:	e7ea      	b.n	8005638 <quorem+0xe2>
 8005662:	2000      	movs	r0, #0
 8005664:	e7ee      	b.n	8005644 <quorem+0xee>
	...

08005668 <_dtoa_r>:
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	69c7      	ldr	r7, [r0, #28]
 800566e:	b099      	sub	sp, #100	@ 0x64
 8005670:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005674:	ec55 4b10 	vmov	r4, r5, d0
 8005678:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800567a:	9109      	str	r1, [sp, #36]	@ 0x24
 800567c:	4683      	mov	fp, r0
 800567e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005680:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005682:	b97f      	cbnz	r7, 80056a4 <_dtoa_r+0x3c>
 8005684:	2010      	movs	r0, #16
 8005686:	f000 fdfd 	bl	8006284 <malloc>
 800568a:	4602      	mov	r2, r0
 800568c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005690:	b920      	cbnz	r0, 800569c <_dtoa_r+0x34>
 8005692:	4ba7      	ldr	r3, [pc, #668]	@ (8005930 <_dtoa_r+0x2c8>)
 8005694:	21ef      	movs	r1, #239	@ 0xef
 8005696:	48a7      	ldr	r0, [pc, #668]	@ (8005934 <_dtoa_r+0x2cc>)
 8005698:	f001 fc5a 	bl	8006f50 <__assert_func>
 800569c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056a0:	6007      	str	r7, [r0, #0]
 80056a2:	60c7      	str	r7, [r0, #12]
 80056a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	b159      	cbz	r1, 80056c4 <_dtoa_r+0x5c>
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	604a      	str	r2, [r1, #4]
 80056b0:	2301      	movs	r3, #1
 80056b2:	4093      	lsls	r3, r2
 80056b4:	608b      	str	r3, [r1, #8]
 80056b6:	4658      	mov	r0, fp
 80056b8:	f000 feda 	bl	8006470 <_Bfree>
 80056bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	1e2b      	subs	r3, r5, #0
 80056c6:	bfb9      	ittee	lt
 80056c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056cc:	9303      	strlt	r3, [sp, #12]
 80056ce:	2300      	movge	r3, #0
 80056d0:	6033      	strge	r3, [r6, #0]
 80056d2:	9f03      	ldr	r7, [sp, #12]
 80056d4:	4b98      	ldr	r3, [pc, #608]	@ (8005938 <_dtoa_r+0x2d0>)
 80056d6:	bfbc      	itt	lt
 80056d8:	2201      	movlt	r2, #1
 80056da:	6032      	strlt	r2, [r6, #0]
 80056dc:	43bb      	bics	r3, r7
 80056de:	d112      	bne.n	8005706 <_dtoa_r+0x9e>
 80056e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056ec:	4323      	orrs	r3, r4
 80056ee:	f000 854d 	beq.w	800618c <_dtoa_r+0xb24>
 80056f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800594c <_dtoa_r+0x2e4>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 854f 	beq.w	800619c <_dtoa_r+0xb34>
 80056fe:	f10a 0303 	add.w	r3, sl, #3
 8005702:	f000 bd49 	b.w	8006198 <_dtoa_r+0xb30>
 8005706:	ed9d 7b02 	vldr	d7, [sp, #8]
 800570a:	2200      	movs	r2, #0
 800570c:	ec51 0b17 	vmov	r0, r1, d7
 8005710:	2300      	movs	r3, #0
 8005712:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005716:	f7fb f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800571a:	4680      	mov	r8, r0
 800571c:	b158      	cbz	r0, 8005736 <_dtoa_r+0xce>
 800571e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005720:	2301      	movs	r3, #1
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005726:	b113      	cbz	r3, 800572e <_dtoa_r+0xc6>
 8005728:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800572a:	4b84      	ldr	r3, [pc, #528]	@ (800593c <_dtoa_r+0x2d4>)
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005950 <_dtoa_r+0x2e8>
 8005732:	f000 bd33 	b.w	800619c <_dtoa_r+0xb34>
 8005736:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800573a:	aa16      	add	r2, sp, #88	@ 0x58
 800573c:	a917      	add	r1, sp, #92	@ 0x5c
 800573e:	4658      	mov	r0, fp
 8005740:	f001 f980 	bl	8006a44 <__d2b>
 8005744:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005748:	4681      	mov	r9, r0
 800574a:	2e00      	cmp	r6, #0
 800574c:	d077      	beq.n	800583e <_dtoa_r+0x1d6>
 800574e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005750:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800575c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005760:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005764:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005768:	4619      	mov	r1, r3
 800576a:	2200      	movs	r2, #0
 800576c:	4b74      	ldr	r3, [pc, #464]	@ (8005940 <_dtoa_r+0x2d8>)
 800576e:	f7fa fd8b 	bl	8000288 <__aeabi_dsub>
 8005772:	a369      	add	r3, pc, #420	@ (adr r3, 8005918 <_dtoa_r+0x2b0>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa ff3e 	bl	80005f8 <__aeabi_dmul>
 800577c:	a368      	add	r3, pc, #416	@ (adr r3, 8005920 <_dtoa_r+0x2b8>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fd83 	bl	800028c <__adddf3>
 8005786:	4604      	mov	r4, r0
 8005788:	4630      	mov	r0, r6
 800578a:	460d      	mov	r5, r1
 800578c:	f7fa feca 	bl	8000524 <__aeabi_i2d>
 8005790:	a365      	add	r3, pc, #404	@ (adr r3, 8005928 <_dtoa_r+0x2c0>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa ff2f 	bl	80005f8 <__aeabi_dmul>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4620      	mov	r0, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fa fd73 	bl	800028c <__adddf3>
 80057a6:	4604      	mov	r4, r0
 80057a8:	460d      	mov	r5, r1
 80057aa:	f7fb f9d5 	bl	8000b58 <__aeabi_d2iz>
 80057ae:	2200      	movs	r2, #0
 80057b0:	4607      	mov	r7, r0
 80057b2:	2300      	movs	r3, #0
 80057b4:	4620      	mov	r0, r4
 80057b6:	4629      	mov	r1, r5
 80057b8:	f7fb f990 	bl	8000adc <__aeabi_dcmplt>
 80057bc:	b140      	cbz	r0, 80057d0 <_dtoa_r+0x168>
 80057be:	4638      	mov	r0, r7
 80057c0:	f7fa feb0 	bl	8000524 <__aeabi_i2d>
 80057c4:	4622      	mov	r2, r4
 80057c6:	462b      	mov	r3, r5
 80057c8:	f7fb f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80057cc:	b900      	cbnz	r0, 80057d0 <_dtoa_r+0x168>
 80057ce:	3f01      	subs	r7, #1
 80057d0:	2f16      	cmp	r7, #22
 80057d2:	d851      	bhi.n	8005878 <_dtoa_r+0x210>
 80057d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005944 <_dtoa_r+0x2dc>)
 80057d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057e2:	f7fb f97b 	bl	8000adc <__aeabi_dcmplt>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d048      	beq.n	800587c <_dtoa_r+0x214>
 80057ea:	3f01      	subs	r7, #1
 80057ec:	2300      	movs	r3, #0
 80057ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80057f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80057f2:	1b9b      	subs	r3, r3, r6
 80057f4:	1e5a      	subs	r2, r3, #1
 80057f6:	bf44      	itt	mi
 80057f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80057fc:	2300      	movmi	r3, #0
 80057fe:	9208      	str	r2, [sp, #32]
 8005800:	bf54      	ite	pl
 8005802:	f04f 0800 	movpl.w	r8, #0
 8005806:	9308      	strmi	r3, [sp, #32]
 8005808:	2f00      	cmp	r7, #0
 800580a:	db39      	blt.n	8005880 <_dtoa_r+0x218>
 800580c:	9b08      	ldr	r3, [sp, #32]
 800580e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005810:	443b      	add	r3, r7
 8005812:	9308      	str	r3, [sp, #32]
 8005814:	2300      	movs	r3, #0
 8005816:	930a      	str	r3, [sp, #40]	@ 0x28
 8005818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581a:	2b09      	cmp	r3, #9
 800581c:	d864      	bhi.n	80058e8 <_dtoa_r+0x280>
 800581e:	2b05      	cmp	r3, #5
 8005820:	bfc4      	itt	gt
 8005822:	3b04      	subgt	r3, #4
 8005824:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005828:	f1a3 0302 	sub.w	r3, r3, #2
 800582c:	bfcc      	ite	gt
 800582e:	2400      	movgt	r4, #0
 8005830:	2401      	movle	r4, #1
 8005832:	2b03      	cmp	r3, #3
 8005834:	d863      	bhi.n	80058fe <_dtoa_r+0x296>
 8005836:	e8df f003 	tbb	[pc, r3]
 800583a:	372a      	.short	0x372a
 800583c:	5535      	.short	0x5535
 800583e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005842:	441e      	add	r6, r3
 8005844:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005848:	2b20      	cmp	r3, #32
 800584a:	bfc1      	itttt	gt
 800584c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005850:	409f      	lslgt	r7, r3
 8005852:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005856:	fa24 f303 	lsrgt.w	r3, r4, r3
 800585a:	bfd6      	itet	le
 800585c:	f1c3 0320 	rsble	r3, r3, #32
 8005860:	ea47 0003 	orrgt.w	r0, r7, r3
 8005864:	fa04 f003 	lslle.w	r0, r4, r3
 8005868:	f7fa fe4c 	bl	8000504 <__aeabi_ui2d>
 800586c:	2201      	movs	r2, #1
 800586e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005872:	3e01      	subs	r6, #1
 8005874:	9214      	str	r2, [sp, #80]	@ 0x50
 8005876:	e777      	b.n	8005768 <_dtoa_r+0x100>
 8005878:	2301      	movs	r3, #1
 800587a:	e7b8      	b.n	80057ee <_dtoa_r+0x186>
 800587c:	9012      	str	r0, [sp, #72]	@ 0x48
 800587e:	e7b7      	b.n	80057f0 <_dtoa_r+0x188>
 8005880:	427b      	negs	r3, r7
 8005882:	930a      	str	r3, [sp, #40]	@ 0x28
 8005884:	2300      	movs	r3, #0
 8005886:	eba8 0807 	sub.w	r8, r8, r7
 800588a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800588c:	e7c4      	b.n	8005818 <_dtoa_r+0x1b0>
 800588e:	2300      	movs	r3, #0
 8005890:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005894:	2b00      	cmp	r3, #0
 8005896:	dc35      	bgt.n	8005904 <_dtoa_r+0x29c>
 8005898:	2301      	movs	r3, #1
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	9307      	str	r3, [sp, #28]
 800589e:	461a      	mov	r2, r3
 80058a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80058a2:	e00b      	b.n	80058bc <_dtoa_r+0x254>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e7f3      	b.n	8005890 <_dtoa_r+0x228>
 80058a8:	2300      	movs	r3, #0
 80058aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	3301      	adds	r3, #1
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	9307      	str	r3, [sp, #28]
 80058b8:	bfb8      	it	lt
 80058ba:	2301      	movlt	r3, #1
 80058bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058c0:	2100      	movs	r1, #0
 80058c2:	2204      	movs	r2, #4
 80058c4:	f102 0514 	add.w	r5, r2, #20
 80058c8:	429d      	cmp	r5, r3
 80058ca:	d91f      	bls.n	800590c <_dtoa_r+0x2a4>
 80058cc:	6041      	str	r1, [r0, #4]
 80058ce:	4658      	mov	r0, fp
 80058d0:	f000 fd8e 	bl	80063f0 <_Balloc>
 80058d4:	4682      	mov	sl, r0
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d13c      	bne.n	8005954 <_dtoa_r+0x2ec>
 80058da:	4b1b      	ldr	r3, [pc, #108]	@ (8005948 <_dtoa_r+0x2e0>)
 80058dc:	4602      	mov	r2, r0
 80058de:	f240 11af 	movw	r1, #431	@ 0x1af
 80058e2:	e6d8      	b.n	8005696 <_dtoa_r+0x2e>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e7e0      	b.n	80058aa <_dtoa_r+0x242>
 80058e8:	2401      	movs	r4, #1
 80058ea:	2300      	movs	r3, #0
 80058ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	9307      	str	r3, [sp, #28]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2312      	movs	r3, #18
 80058fc:	e7d0      	b.n	80058a0 <_dtoa_r+0x238>
 80058fe:	2301      	movs	r3, #1
 8005900:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005902:	e7f5      	b.n	80058f0 <_dtoa_r+0x288>
 8005904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	9307      	str	r3, [sp, #28]
 800590a:	e7d7      	b.n	80058bc <_dtoa_r+0x254>
 800590c:	3101      	adds	r1, #1
 800590e:	0052      	lsls	r2, r2, #1
 8005910:	e7d8      	b.n	80058c4 <_dtoa_r+0x25c>
 8005912:	bf00      	nop
 8005914:	f3af 8000 	nop.w
 8005918:	636f4361 	.word	0x636f4361
 800591c:	3fd287a7 	.word	0x3fd287a7
 8005920:	8b60c8b3 	.word	0x8b60c8b3
 8005924:	3fc68a28 	.word	0x3fc68a28
 8005928:	509f79fb 	.word	0x509f79fb
 800592c:	3fd34413 	.word	0x3fd34413
 8005930:	08007ca1 	.word	0x08007ca1
 8005934:	08007cb8 	.word	0x08007cb8
 8005938:	7ff00000 	.word	0x7ff00000
 800593c:	08007c71 	.word	0x08007c71
 8005940:	3ff80000 	.word	0x3ff80000
 8005944:	08007db0 	.word	0x08007db0
 8005948:	08007d10 	.word	0x08007d10
 800594c:	08007c9d 	.word	0x08007c9d
 8005950:	08007c70 	.word	0x08007c70
 8005954:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005958:	6018      	str	r0, [r3, #0]
 800595a:	9b07      	ldr	r3, [sp, #28]
 800595c:	2b0e      	cmp	r3, #14
 800595e:	f200 80a4 	bhi.w	8005aaa <_dtoa_r+0x442>
 8005962:	2c00      	cmp	r4, #0
 8005964:	f000 80a1 	beq.w	8005aaa <_dtoa_r+0x442>
 8005968:	2f00      	cmp	r7, #0
 800596a:	dd33      	ble.n	80059d4 <_dtoa_r+0x36c>
 800596c:	4bad      	ldr	r3, [pc, #692]	@ (8005c24 <_dtoa_r+0x5bc>)
 800596e:	f007 020f 	and.w	r2, r7, #15
 8005972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005976:	ed93 7b00 	vldr	d7, [r3]
 800597a:	05f8      	lsls	r0, r7, #23
 800597c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005980:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005984:	d516      	bpl.n	80059b4 <_dtoa_r+0x34c>
 8005986:	4ba8      	ldr	r3, [pc, #672]	@ (8005c28 <_dtoa_r+0x5c0>)
 8005988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800598c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005990:	f7fa ff5c 	bl	800084c <__aeabi_ddiv>
 8005994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005998:	f004 040f 	and.w	r4, r4, #15
 800599c:	2603      	movs	r6, #3
 800599e:	4da2      	ldr	r5, [pc, #648]	@ (8005c28 <_dtoa_r+0x5c0>)
 80059a0:	b954      	cbnz	r4, 80059b8 <_dtoa_r+0x350>
 80059a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059aa:	f7fa ff4f 	bl	800084c <__aeabi_ddiv>
 80059ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b2:	e028      	b.n	8005a06 <_dtoa_r+0x39e>
 80059b4:	2602      	movs	r6, #2
 80059b6:	e7f2      	b.n	800599e <_dtoa_r+0x336>
 80059b8:	07e1      	lsls	r1, r4, #31
 80059ba:	d508      	bpl.n	80059ce <_dtoa_r+0x366>
 80059bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059c4:	f7fa fe18 	bl	80005f8 <__aeabi_dmul>
 80059c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059cc:	3601      	adds	r6, #1
 80059ce:	1064      	asrs	r4, r4, #1
 80059d0:	3508      	adds	r5, #8
 80059d2:	e7e5      	b.n	80059a0 <_dtoa_r+0x338>
 80059d4:	f000 80d2 	beq.w	8005b7c <_dtoa_r+0x514>
 80059d8:	427c      	negs	r4, r7
 80059da:	4b92      	ldr	r3, [pc, #584]	@ (8005c24 <_dtoa_r+0x5bc>)
 80059dc:	4d92      	ldr	r5, [pc, #584]	@ (8005c28 <_dtoa_r+0x5c0>)
 80059de:	f004 020f 	and.w	r2, r4, #15
 80059e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059ee:	f7fa fe03 	bl	80005f8 <__aeabi_dmul>
 80059f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059f6:	1124      	asrs	r4, r4, #4
 80059f8:	2300      	movs	r3, #0
 80059fa:	2602      	movs	r6, #2
 80059fc:	2c00      	cmp	r4, #0
 80059fe:	f040 80b2 	bne.w	8005b66 <_dtoa_r+0x4fe>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1d3      	bne.n	80059ae <_dtoa_r+0x346>
 8005a06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80b7 	beq.w	8005b80 <_dtoa_r+0x518>
 8005a12:	4b86      	ldr	r3, [pc, #536]	@ (8005c2c <_dtoa_r+0x5c4>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fb f85f 	bl	8000adc <__aeabi_dcmplt>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f000 80ae 	beq.w	8005b80 <_dtoa_r+0x518>
 8005a24:	9b07      	ldr	r3, [sp, #28]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80aa 	beq.w	8005b80 <_dtoa_r+0x518>
 8005a2c:	9b00      	ldr	r3, [sp, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	dd37      	ble.n	8005aa2 <_dtoa_r+0x43a>
 8005a32:	1e7b      	subs	r3, r7, #1
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	4620      	mov	r0, r4
 8005a38:	4b7d      	ldr	r3, [pc, #500]	@ (8005c30 <_dtoa_r+0x5c8>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7fa fddb 	bl	80005f8 <__aeabi_dmul>
 8005a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a46:	9c00      	ldr	r4, [sp, #0]
 8005a48:	3601      	adds	r6, #1
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7fa fd6a 	bl	8000524 <__aeabi_i2d>
 8005a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a54:	f7fa fdd0 	bl	80005f8 <__aeabi_dmul>
 8005a58:	4b76      	ldr	r3, [pc, #472]	@ (8005c34 <_dtoa_r+0x5cc>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f7fa fc16 	bl	800028c <__adddf3>
 8005a60:	4605      	mov	r5, r0
 8005a62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a66:	2c00      	cmp	r4, #0
 8005a68:	f040 808d 	bne.w	8005b86 <_dtoa_r+0x51e>
 8005a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a70:	4b71      	ldr	r3, [pc, #452]	@ (8005c38 <_dtoa_r+0x5d0>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	f7fa fc08 	bl	8000288 <__aeabi_dsub>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a80:	462a      	mov	r2, r5
 8005a82:	4633      	mov	r3, r6
 8005a84:	f7fb f848 	bl	8000b18 <__aeabi_dcmpgt>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	f040 828b 	bne.w	8005fa4 <_dtoa_r+0x93c>
 8005a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a92:	462a      	mov	r2, r5
 8005a94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a98:	f7fb f820 	bl	8000adc <__aeabi_dcmplt>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	f040 8128 	bne.w	8005cf2 <_dtoa_r+0x68a>
 8005aa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005aa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005aaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f2c0 815a 	blt.w	8005d66 <_dtoa_r+0x6fe>
 8005ab2:	2f0e      	cmp	r7, #14
 8005ab4:	f300 8157 	bgt.w	8005d66 <_dtoa_r+0x6fe>
 8005ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c24 <_dtoa_r+0x5bc>)
 8005aba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005abe:	ed93 7b00 	vldr	d7, [r3]
 8005ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	ed8d 7b00 	vstr	d7, [sp]
 8005aca:	da03      	bge.n	8005ad4 <_dtoa_r+0x46c>
 8005acc:	9b07      	ldr	r3, [sp, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f340 8101 	ble.w	8005cd6 <_dtoa_r+0x66e>
 8005ad4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ad8:	4656      	mov	r6, sl
 8005ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f7fa feb3 	bl	800084c <__aeabi_ddiv>
 8005ae6:	f7fb f837 	bl	8000b58 <__aeabi_d2iz>
 8005aea:	4680      	mov	r8, r0
 8005aec:	f7fa fd1a 	bl	8000524 <__aeabi_i2d>
 8005af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005af4:	f7fa fd80 	bl	80005f8 <__aeabi_dmul>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4620      	mov	r0, r4
 8005afe:	4629      	mov	r1, r5
 8005b00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b04:	f7fa fbc0 	bl	8000288 <__aeabi_dsub>
 8005b08:	f806 4b01 	strb.w	r4, [r6], #1
 8005b0c:	9d07      	ldr	r5, [sp, #28]
 8005b0e:	eba6 040a 	sub.w	r4, r6, sl
 8005b12:	42a5      	cmp	r5, r4
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	f040 8117 	bne.w	8005d4a <_dtoa_r+0x6e2>
 8005b1c:	f7fa fbb6 	bl	800028c <__adddf3>
 8005b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b24:	4604      	mov	r4, r0
 8005b26:	460d      	mov	r5, r1
 8005b28:	f7fa fff6 	bl	8000b18 <__aeabi_dcmpgt>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f040 80f9 	bne.w	8005d24 <_dtoa_r+0x6bc>
 8005b32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b36:	4620      	mov	r0, r4
 8005b38:	4629      	mov	r1, r5
 8005b3a:	f7fa ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b3e:	b118      	cbz	r0, 8005b48 <_dtoa_r+0x4e0>
 8005b40:	f018 0f01 	tst.w	r8, #1
 8005b44:	f040 80ee 	bne.w	8005d24 <_dtoa_r+0x6bc>
 8005b48:	4649      	mov	r1, r9
 8005b4a:	4658      	mov	r0, fp
 8005b4c:	f000 fc90 	bl	8006470 <_Bfree>
 8005b50:	2300      	movs	r3, #0
 8005b52:	7033      	strb	r3, [r6, #0]
 8005b54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b56:	3701      	adds	r7, #1
 8005b58:	601f      	str	r7, [r3, #0]
 8005b5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 831d 	beq.w	800619c <_dtoa_r+0xb34>
 8005b62:	601e      	str	r6, [r3, #0]
 8005b64:	e31a      	b.n	800619c <_dtoa_r+0xb34>
 8005b66:	07e2      	lsls	r2, r4, #31
 8005b68:	d505      	bpl.n	8005b76 <_dtoa_r+0x50e>
 8005b6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b6e:	f7fa fd43 	bl	80005f8 <__aeabi_dmul>
 8005b72:	3601      	adds	r6, #1
 8005b74:	2301      	movs	r3, #1
 8005b76:	1064      	asrs	r4, r4, #1
 8005b78:	3508      	adds	r5, #8
 8005b7a:	e73f      	b.n	80059fc <_dtoa_r+0x394>
 8005b7c:	2602      	movs	r6, #2
 8005b7e:	e742      	b.n	8005a06 <_dtoa_r+0x39e>
 8005b80:	9c07      	ldr	r4, [sp, #28]
 8005b82:	9704      	str	r7, [sp, #16]
 8005b84:	e761      	b.n	8005a4a <_dtoa_r+0x3e2>
 8005b86:	4b27      	ldr	r3, [pc, #156]	@ (8005c24 <_dtoa_r+0x5bc>)
 8005b88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b92:	4454      	add	r4, sl
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d053      	beq.n	8005c40 <_dtoa_r+0x5d8>
 8005b98:	4928      	ldr	r1, [pc, #160]	@ (8005c3c <_dtoa_r+0x5d4>)
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f7fa fe56 	bl	800084c <__aeabi_ddiv>
 8005ba0:	4633      	mov	r3, r6
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	f7fa fb70 	bl	8000288 <__aeabi_dsub>
 8005ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bac:	4656      	mov	r6, sl
 8005bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bb2:	f7fa ffd1 	bl	8000b58 <__aeabi_d2iz>
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	f7fa fcb4 	bl	8000524 <__aeabi_i2d>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc4:	f7fa fb60 	bl	8000288 <__aeabi_dsub>
 8005bc8:	3530      	adds	r5, #48	@ 0x30
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bd2:	f806 5b01 	strb.w	r5, [r6], #1
 8005bd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bda:	f7fa ff7f 	bl	8000adc <__aeabi_dcmplt>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d171      	bne.n	8005cc6 <_dtoa_r+0x65e>
 8005be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005be6:	4911      	ldr	r1, [pc, #68]	@ (8005c2c <_dtoa_r+0x5c4>)
 8005be8:	2000      	movs	r0, #0
 8005bea:	f7fa fb4d 	bl	8000288 <__aeabi_dsub>
 8005bee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bf2:	f7fa ff73 	bl	8000adc <__aeabi_dcmplt>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	f040 8095 	bne.w	8005d26 <_dtoa_r+0x6be>
 8005bfc:	42a6      	cmp	r6, r4
 8005bfe:	f43f af50 	beq.w	8005aa2 <_dtoa_r+0x43a>
 8005c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c06:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <_dtoa_r+0x5c8>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f7fa fcf5 	bl	80005f8 <__aeabi_dmul>
 8005c0e:	4b08      	ldr	r3, [pc, #32]	@ (8005c30 <_dtoa_r+0x5c8>)
 8005c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c14:	2200      	movs	r2, #0
 8005c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c1a:	f7fa fced 	bl	80005f8 <__aeabi_dmul>
 8005c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c22:	e7c4      	b.n	8005bae <_dtoa_r+0x546>
 8005c24:	08007db0 	.word	0x08007db0
 8005c28:	08007d88 	.word	0x08007d88
 8005c2c:	3ff00000 	.word	0x3ff00000
 8005c30:	40240000 	.word	0x40240000
 8005c34:	401c0000 	.word	0x401c0000
 8005c38:	40140000 	.word	0x40140000
 8005c3c:	3fe00000 	.word	0x3fe00000
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	f7fa fcd8 	bl	80005f8 <__aeabi_dmul>
 8005c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c4e:	4656      	mov	r6, sl
 8005c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c54:	f7fa ff80 	bl	8000b58 <__aeabi_d2iz>
 8005c58:	4605      	mov	r5, r0
 8005c5a:	f7fa fc63 	bl	8000524 <__aeabi_i2d>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c66:	f7fa fb0f 	bl	8000288 <__aeabi_dsub>
 8005c6a:	3530      	adds	r5, #48	@ 0x30
 8005c6c:	f806 5b01 	strb.w	r5, [r6], #1
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	42a6      	cmp	r6, r4
 8005c76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	d124      	bne.n	8005cca <_dtoa_r+0x662>
 8005c80:	4bac      	ldr	r3, [pc, #688]	@ (8005f34 <_dtoa_r+0x8cc>)
 8005c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c86:	f7fa fb01 	bl	800028c <__adddf3>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c92:	f7fa ff41 	bl	8000b18 <__aeabi_dcmpgt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d145      	bne.n	8005d26 <_dtoa_r+0x6be>
 8005c9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c9e:	49a5      	ldr	r1, [pc, #660]	@ (8005f34 <_dtoa_r+0x8cc>)
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f7fa faf1 	bl	8000288 <__aeabi_dsub>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cae:	f7fa ff15 	bl	8000adc <__aeabi_dcmplt>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	f43f aef5 	beq.w	8005aa2 <_dtoa_r+0x43a>
 8005cb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005cba:	1e73      	subs	r3, r6, #1
 8005cbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cc2:	2b30      	cmp	r3, #48	@ 0x30
 8005cc4:	d0f8      	beq.n	8005cb8 <_dtoa_r+0x650>
 8005cc6:	9f04      	ldr	r7, [sp, #16]
 8005cc8:	e73e      	b.n	8005b48 <_dtoa_r+0x4e0>
 8005cca:	4b9b      	ldr	r3, [pc, #620]	@ (8005f38 <_dtoa_r+0x8d0>)
 8005ccc:	f7fa fc94 	bl	80005f8 <__aeabi_dmul>
 8005cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cd4:	e7bc      	b.n	8005c50 <_dtoa_r+0x5e8>
 8005cd6:	d10c      	bne.n	8005cf2 <_dtoa_r+0x68a>
 8005cd8:	4b98      	ldr	r3, [pc, #608]	@ (8005f3c <_dtoa_r+0x8d4>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ce0:	f7fa fc8a 	bl	80005f8 <__aeabi_dmul>
 8005ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ce8:	f7fa ff0c 	bl	8000b04 <__aeabi_dcmpge>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	f000 8157 	beq.w	8005fa0 <_dtoa_r+0x938>
 8005cf2:	2400      	movs	r4, #0
 8005cf4:	4625      	mov	r5, r4
 8005cf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	9304      	str	r3, [sp, #16]
 8005cfc:	4656      	mov	r6, sl
 8005cfe:	2700      	movs	r7, #0
 8005d00:	4621      	mov	r1, r4
 8005d02:	4658      	mov	r0, fp
 8005d04:	f000 fbb4 	bl	8006470 <_Bfree>
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	d0dc      	beq.n	8005cc6 <_dtoa_r+0x65e>
 8005d0c:	b12f      	cbz	r7, 8005d1a <_dtoa_r+0x6b2>
 8005d0e:	42af      	cmp	r7, r5
 8005d10:	d003      	beq.n	8005d1a <_dtoa_r+0x6b2>
 8005d12:	4639      	mov	r1, r7
 8005d14:	4658      	mov	r0, fp
 8005d16:	f000 fbab 	bl	8006470 <_Bfree>
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	4658      	mov	r0, fp
 8005d1e:	f000 fba7 	bl	8006470 <_Bfree>
 8005d22:	e7d0      	b.n	8005cc6 <_dtoa_r+0x65e>
 8005d24:	9704      	str	r7, [sp, #16]
 8005d26:	4633      	mov	r3, r6
 8005d28:	461e      	mov	r6, r3
 8005d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d2e:	2a39      	cmp	r2, #57	@ 0x39
 8005d30:	d107      	bne.n	8005d42 <_dtoa_r+0x6da>
 8005d32:	459a      	cmp	sl, r3
 8005d34:	d1f8      	bne.n	8005d28 <_dtoa_r+0x6c0>
 8005d36:	9a04      	ldr	r2, [sp, #16]
 8005d38:	3201      	adds	r2, #1
 8005d3a:	9204      	str	r2, [sp, #16]
 8005d3c:	2230      	movs	r2, #48	@ 0x30
 8005d3e:	f88a 2000 	strb.w	r2, [sl]
 8005d42:	781a      	ldrb	r2, [r3, #0]
 8005d44:	3201      	adds	r2, #1
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	e7bd      	b.n	8005cc6 <_dtoa_r+0x65e>
 8005d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f38 <_dtoa_r+0x8d0>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f7fa fc53 	bl	80005f8 <__aeabi_dmul>
 8005d52:	2200      	movs	r2, #0
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	460d      	mov	r5, r1
 8005d5a:	f7fa feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f43f aebb 	beq.w	8005ada <_dtoa_r+0x472>
 8005d64:	e6f0      	b.n	8005b48 <_dtoa_r+0x4e0>
 8005d66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d68:	2a00      	cmp	r2, #0
 8005d6a:	f000 80db 	beq.w	8005f24 <_dtoa_r+0x8bc>
 8005d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d70:	2a01      	cmp	r2, #1
 8005d72:	f300 80bf 	bgt.w	8005ef4 <_dtoa_r+0x88c>
 8005d76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	f000 80b7 	beq.w	8005eec <_dtoa_r+0x884>
 8005d7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d84:	4646      	mov	r6, r8
 8005d86:	9a08      	ldr	r2, [sp, #32]
 8005d88:	2101      	movs	r1, #1
 8005d8a:	441a      	add	r2, r3
 8005d8c:	4658      	mov	r0, fp
 8005d8e:	4498      	add	r8, r3
 8005d90:	9208      	str	r2, [sp, #32]
 8005d92:	f000 fc21 	bl	80065d8 <__i2b>
 8005d96:	4605      	mov	r5, r0
 8005d98:	b15e      	cbz	r6, 8005db2 <_dtoa_r+0x74a>
 8005d9a:	9b08      	ldr	r3, [sp, #32]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	dd08      	ble.n	8005db2 <_dtoa_r+0x74a>
 8005da0:	42b3      	cmp	r3, r6
 8005da2:	9a08      	ldr	r2, [sp, #32]
 8005da4:	bfa8      	it	ge
 8005da6:	4633      	movge	r3, r6
 8005da8:	eba8 0803 	sub.w	r8, r8, r3
 8005dac:	1af6      	subs	r6, r6, r3
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	9308      	str	r3, [sp, #32]
 8005db2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005db4:	b1f3      	cbz	r3, 8005df4 <_dtoa_r+0x78c>
 8005db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80b7 	beq.w	8005f2c <_dtoa_r+0x8c4>
 8005dbe:	b18c      	cbz	r4, 8005de4 <_dtoa_r+0x77c>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	4658      	mov	r0, fp
 8005dc6:	f000 fcc7 	bl	8006758 <__pow5mult>
 8005dca:	464a      	mov	r2, r9
 8005dcc:	4601      	mov	r1, r0
 8005dce:	4605      	mov	r5, r0
 8005dd0:	4658      	mov	r0, fp
 8005dd2:	f000 fc17 	bl	8006604 <__multiply>
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	9004      	str	r0, [sp, #16]
 8005dda:	4658      	mov	r0, fp
 8005ddc:	f000 fb48 	bl	8006470 <_Bfree>
 8005de0:	9b04      	ldr	r3, [sp, #16]
 8005de2:	4699      	mov	r9, r3
 8005de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005de6:	1b1a      	subs	r2, r3, r4
 8005de8:	d004      	beq.n	8005df4 <_dtoa_r+0x78c>
 8005dea:	4649      	mov	r1, r9
 8005dec:	4658      	mov	r0, fp
 8005dee:	f000 fcb3 	bl	8006758 <__pow5mult>
 8005df2:	4681      	mov	r9, r0
 8005df4:	2101      	movs	r1, #1
 8005df6:	4658      	mov	r0, fp
 8005df8:	f000 fbee 	bl	80065d8 <__i2b>
 8005dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dfe:	4604      	mov	r4, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 81cf 	beq.w	80061a4 <_dtoa_r+0xb3c>
 8005e06:	461a      	mov	r2, r3
 8005e08:	4601      	mov	r1, r0
 8005e0a:	4658      	mov	r0, fp
 8005e0c:	f000 fca4 	bl	8006758 <__pow5mult>
 8005e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	4604      	mov	r4, r0
 8005e16:	f300 8095 	bgt.w	8005f44 <_dtoa_r+0x8dc>
 8005e1a:	9b02      	ldr	r3, [sp, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f040 8087 	bne.w	8005f30 <_dtoa_r+0x8c8>
 8005e22:	9b03      	ldr	r3, [sp, #12]
 8005e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f040 8089 	bne.w	8005f40 <_dtoa_r+0x8d8>
 8005e2e:	9b03      	ldr	r3, [sp, #12]
 8005e30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e34:	0d1b      	lsrs	r3, r3, #20
 8005e36:	051b      	lsls	r3, r3, #20
 8005e38:	b12b      	cbz	r3, 8005e46 <_dtoa_r+0x7de>
 8005e3a:	9b08      	ldr	r3, [sp, #32]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	9308      	str	r3, [sp, #32]
 8005e40:	f108 0801 	add.w	r8, r8, #1
 8005e44:	2301      	movs	r3, #1
 8005e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 81b0 	beq.w	80061b0 <_dtoa_r+0xb48>
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e56:	6918      	ldr	r0, [r3, #16]
 8005e58:	f000 fb72 	bl	8006540 <__hi0bits>
 8005e5c:	f1c0 0020 	rsb	r0, r0, #32
 8005e60:	9b08      	ldr	r3, [sp, #32]
 8005e62:	4418      	add	r0, r3
 8005e64:	f010 001f 	ands.w	r0, r0, #31
 8005e68:	d077      	beq.n	8005f5a <_dtoa_r+0x8f2>
 8005e6a:	f1c0 0320 	rsb	r3, r0, #32
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	dd6b      	ble.n	8005f4a <_dtoa_r+0x8e2>
 8005e72:	9b08      	ldr	r3, [sp, #32]
 8005e74:	f1c0 001c 	rsb	r0, r0, #28
 8005e78:	4403      	add	r3, r0
 8005e7a:	4480      	add	r8, r0
 8005e7c:	4406      	add	r6, r0
 8005e7e:	9308      	str	r3, [sp, #32]
 8005e80:	f1b8 0f00 	cmp.w	r8, #0
 8005e84:	dd05      	ble.n	8005e92 <_dtoa_r+0x82a>
 8005e86:	4649      	mov	r1, r9
 8005e88:	4642      	mov	r2, r8
 8005e8a:	4658      	mov	r0, fp
 8005e8c:	f000 fcbe 	bl	800680c <__lshift>
 8005e90:	4681      	mov	r9, r0
 8005e92:	9b08      	ldr	r3, [sp, #32]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	dd05      	ble.n	8005ea4 <_dtoa_r+0x83c>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4658      	mov	r0, fp
 8005e9e:	f000 fcb5 	bl	800680c <__lshift>
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d059      	beq.n	8005f5e <_dtoa_r+0x8f6>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4648      	mov	r0, r9
 8005eae:	f000 fd19 	bl	80068e4 <__mcmp>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	da53      	bge.n	8005f5e <_dtoa_r+0x8f6>
 8005eb6:	1e7b      	subs	r3, r7, #1
 8005eb8:	9304      	str	r3, [sp, #16]
 8005eba:	4649      	mov	r1, r9
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	220a      	movs	r2, #10
 8005ec0:	4658      	mov	r0, fp
 8005ec2:	f000 faf7 	bl	80064b4 <__multadd>
 8005ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ec8:	4681      	mov	r9, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8172 	beq.w	80061b4 <_dtoa_r+0xb4c>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	220a      	movs	r2, #10
 8005ed6:	4658      	mov	r0, fp
 8005ed8:	f000 faec 	bl	80064b4 <__multadd>
 8005edc:	9b00      	ldr	r3, [sp, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	dc67      	bgt.n	8005fb4 <_dtoa_r+0x94c>
 8005ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	dc41      	bgt.n	8005f6e <_dtoa_r+0x906>
 8005eea:	e063      	b.n	8005fb4 <_dtoa_r+0x94c>
 8005eec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005eee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005ef2:	e746      	b.n	8005d82 <_dtoa_r+0x71a>
 8005ef4:	9b07      	ldr	r3, [sp, #28]
 8005ef6:	1e5c      	subs	r4, r3, #1
 8005ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	bfbf      	itttt	lt
 8005efe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f04:	1ae3      	sublt	r3, r4, r3
 8005f06:	bfb4      	ite	lt
 8005f08:	18d2      	addlt	r2, r2, r3
 8005f0a:	1b1c      	subge	r4, r3, r4
 8005f0c:	9b07      	ldr	r3, [sp, #28]
 8005f0e:	bfbc      	itt	lt
 8005f10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f12:	2400      	movlt	r4, #0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bfb5      	itete	lt
 8005f18:	eba8 0603 	sublt.w	r6, r8, r3
 8005f1c:	9b07      	ldrge	r3, [sp, #28]
 8005f1e:	2300      	movlt	r3, #0
 8005f20:	4646      	movge	r6, r8
 8005f22:	e730      	b.n	8005d86 <_dtoa_r+0x71e>
 8005f24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f28:	4646      	mov	r6, r8
 8005f2a:	e735      	b.n	8005d98 <_dtoa_r+0x730>
 8005f2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f2e:	e75c      	b.n	8005dea <_dtoa_r+0x782>
 8005f30:	2300      	movs	r3, #0
 8005f32:	e788      	b.n	8005e46 <_dtoa_r+0x7de>
 8005f34:	3fe00000 	.word	0x3fe00000
 8005f38:	40240000 	.word	0x40240000
 8005f3c:	40140000 	.word	0x40140000
 8005f40:	9b02      	ldr	r3, [sp, #8]
 8005f42:	e780      	b.n	8005e46 <_dtoa_r+0x7de>
 8005f44:	2300      	movs	r3, #0
 8005f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f48:	e782      	b.n	8005e50 <_dtoa_r+0x7e8>
 8005f4a:	d099      	beq.n	8005e80 <_dtoa_r+0x818>
 8005f4c:	9a08      	ldr	r2, [sp, #32]
 8005f4e:	331c      	adds	r3, #28
 8005f50:	441a      	add	r2, r3
 8005f52:	4498      	add	r8, r3
 8005f54:	441e      	add	r6, r3
 8005f56:	9208      	str	r2, [sp, #32]
 8005f58:	e792      	b.n	8005e80 <_dtoa_r+0x818>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	e7f6      	b.n	8005f4c <_dtoa_r+0x8e4>
 8005f5e:	9b07      	ldr	r3, [sp, #28]
 8005f60:	9704      	str	r7, [sp, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dc20      	bgt.n	8005fa8 <_dtoa_r+0x940>
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	dd1e      	ble.n	8005fac <_dtoa_r+0x944>
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f47f aec0 	bne.w	8005cf6 <_dtoa_r+0x68e>
 8005f76:	4621      	mov	r1, r4
 8005f78:	2205      	movs	r2, #5
 8005f7a:	4658      	mov	r0, fp
 8005f7c:	f000 fa9a 	bl	80064b4 <__multadd>
 8005f80:	4601      	mov	r1, r0
 8005f82:	4604      	mov	r4, r0
 8005f84:	4648      	mov	r0, r9
 8005f86:	f000 fcad 	bl	80068e4 <__mcmp>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	f77f aeb3 	ble.w	8005cf6 <_dtoa_r+0x68e>
 8005f90:	4656      	mov	r6, sl
 8005f92:	2331      	movs	r3, #49	@ 0x31
 8005f94:	f806 3b01 	strb.w	r3, [r6], #1
 8005f98:	9b04      	ldr	r3, [sp, #16]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	9304      	str	r3, [sp, #16]
 8005f9e:	e6ae      	b.n	8005cfe <_dtoa_r+0x696>
 8005fa0:	9c07      	ldr	r4, [sp, #28]
 8005fa2:	9704      	str	r7, [sp, #16]
 8005fa4:	4625      	mov	r5, r4
 8005fa6:	e7f3      	b.n	8005f90 <_dtoa_r+0x928>
 8005fa8:	9b07      	ldr	r3, [sp, #28]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 8104 	beq.w	80061bc <_dtoa_r+0xb54>
 8005fb4:	2e00      	cmp	r6, #0
 8005fb6:	dd05      	ble.n	8005fc4 <_dtoa_r+0x95c>
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4632      	mov	r2, r6
 8005fbc:	4658      	mov	r0, fp
 8005fbe:	f000 fc25 	bl	800680c <__lshift>
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d05a      	beq.n	8006080 <_dtoa_r+0xa18>
 8005fca:	6869      	ldr	r1, [r5, #4]
 8005fcc:	4658      	mov	r0, fp
 8005fce:	f000 fa0f 	bl	80063f0 <_Balloc>
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	b928      	cbnz	r0, 8005fe2 <_dtoa_r+0x97a>
 8005fd6:	4b84      	ldr	r3, [pc, #528]	@ (80061e8 <_dtoa_r+0xb80>)
 8005fd8:	4602      	mov	r2, r0
 8005fda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fde:	f7ff bb5a 	b.w	8005696 <_dtoa_r+0x2e>
 8005fe2:	692a      	ldr	r2, [r5, #16]
 8005fe4:	3202      	adds	r2, #2
 8005fe6:	0092      	lsls	r2, r2, #2
 8005fe8:	f105 010c 	add.w	r1, r5, #12
 8005fec:	300c      	adds	r0, #12
 8005fee:	f7ff faa4 	bl	800553a <memcpy>
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4658      	mov	r0, fp
 8005ff8:	f000 fc08 	bl	800680c <__lshift>
 8005ffc:	f10a 0301 	add.w	r3, sl, #1
 8006000:	9307      	str	r3, [sp, #28]
 8006002:	9b00      	ldr	r3, [sp, #0]
 8006004:	4453      	add	r3, sl
 8006006:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006008:	9b02      	ldr	r3, [sp, #8]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	462f      	mov	r7, r5
 8006010:	930a      	str	r3, [sp, #40]	@ 0x28
 8006012:	4605      	mov	r5, r0
 8006014:	9b07      	ldr	r3, [sp, #28]
 8006016:	4621      	mov	r1, r4
 8006018:	3b01      	subs	r3, #1
 800601a:	4648      	mov	r0, r9
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	f7ff fa9a 	bl	8005556 <quorem>
 8006022:	4639      	mov	r1, r7
 8006024:	9002      	str	r0, [sp, #8]
 8006026:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800602a:	4648      	mov	r0, r9
 800602c:	f000 fc5a 	bl	80068e4 <__mcmp>
 8006030:	462a      	mov	r2, r5
 8006032:	9008      	str	r0, [sp, #32]
 8006034:	4621      	mov	r1, r4
 8006036:	4658      	mov	r0, fp
 8006038:	f000 fc70 	bl	800691c <__mdiff>
 800603c:	68c2      	ldr	r2, [r0, #12]
 800603e:	4606      	mov	r6, r0
 8006040:	bb02      	cbnz	r2, 8006084 <_dtoa_r+0xa1c>
 8006042:	4601      	mov	r1, r0
 8006044:	4648      	mov	r0, r9
 8006046:	f000 fc4d 	bl	80068e4 <__mcmp>
 800604a:	4602      	mov	r2, r0
 800604c:	4631      	mov	r1, r6
 800604e:	4658      	mov	r0, fp
 8006050:	920e      	str	r2, [sp, #56]	@ 0x38
 8006052:	f000 fa0d 	bl	8006470 <_Bfree>
 8006056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800605a:	9e07      	ldr	r6, [sp, #28]
 800605c:	ea43 0102 	orr.w	r1, r3, r2
 8006060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006062:	4319      	orrs	r1, r3
 8006064:	d110      	bne.n	8006088 <_dtoa_r+0xa20>
 8006066:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800606a:	d029      	beq.n	80060c0 <_dtoa_r+0xa58>
 800606c:	9b08      	ldr	r3, [sp, #32]
 800606e:	2b00      	cmp	r3, #0
 8006070:	dd02      	ble.n	8006078 <_dtoa_r+0xa10>
 8006072:	9b02      	ldr	r3, [sp, #8]
 8006074:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006078:	9b00      	ldr	r3, [sp, #0]
 800607a:	f883 8000 	strb.w	r8, [r3]
 800607e:	e63f      	b.n	8005d00 <_dtoa_r+0x698>
 8006080:	4628      	mov	r0, r5
 8006082:	e7bb      	b.n	8005ffc <_dtoa_r+0x994>
 8006084:	2201      	movs	r2, #1
 8006086:	e7e1      	b.n	800604c <_dtoa_r+0x9e4>
 8006088:	9b08      	ldr	r3, [sp, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	db04      	blt.n	8006098 <_dtoa_r+0xa30>
 800608e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006090:	430b      	orrs	r3, r1
 8006092:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006094:	430b      	orrs	r3, r1
 8006096:	d120      	bne.n	80060da <_dtoa_r+0xa72>
 8006098:	2a00      	cmp	r2, #0
 800609a:	dded      	ble.n	8006078 <_dtoa_r+0xa10>
 800609c:	4649      	mov	r1, r9
 800609e:	2201      	movs	r2, #1
 80060a0:	4658      	mov	r0, fp
 80060a2:	f000 fbb3 	bl	800680c <__lshift>
 80060a6:	4621      	mov	r1, r4
 80060a8:	4681      	mov	r9, r0
 80060aa:	f000 fc1b 	bl	80068e4 <__mcmp>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	dc03      	bgt.n	80060ba <_dtoa_r+0xa52>
 80060b2:	d1e1      	bne.n	8006078 <_dtoa_r+0xa10>
 80060b4:	f018 0f01 	tst.w	r8, #1
 80060b8:	d0de      	beq.n	8006078 <_dtoa_r+0xa10>
 80060ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060be:	d1d8      	bne.n	8006072 <_dtoa_r+0xa0a>
 80060c0:	9a00      	ldr	r2, [sp, #0]
 80060c2:	2339      	movs	r3, #57	@ 0x39
 80060c4:	7013      	strb	r3, [r2, #0]
 80060c6:	4633      	mov	r3, r6
 80060c8:	461e      	mov	r6, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060d0:	2a39      	cmp	r2, #57	@ 0x39
 80060d2:	d052      	beq.n	800617a <_dtoa_r+0xb12>
 80060d4:	3201      	adds	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e612      	b.n	8005d00 <_dtoa_r+0x698>
 80060da:	2a00      	cmp	r2, #0
 80060dc:	dd07      	ble.n	80060ee <_dtoa_r+0xa86>
 80060de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060e2:	d0ed      	beq.n	80060c0 <_dtoa_r+0xa58>
 80060e4:	9a00      	ldr	r2, [sp, #0]
 80060e6:	f108 0301 	add.w	r3, r8, #1
 80060ea:	7013      	strb	r3, [r2, #0]
 80060ec:	e608      	b.n	8005d00 <_dtoa_r+0x698>
 80060ee:	9b07      	ldr	r3, [sp, #28]
 80060f0:	9a07      	ldr	r2, [sp, #28]
 80060f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80060f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d028      	beq.n	800614e <_dtoa_r+0xae6>
 80060fc:	4649      	mov	r1, r9
 80060fe:	2300      	movs	r3, #0
 8006100:	220a      	movs	r2, #10
 8006102:	4658      	mov	r0, fp
 8006104:	f000 f9d6 	bl	80064b4 <__multadd>
 8006108:	42af      	cmp	r7, r5
 800610a:	4681      	mov	r9, r0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	f04f 020a 	mov.w	r2, #10
 8006114:	4639      	mov	r1, r7
 8006116:	4658      	mov	r0, fp
 8006118:	d107      	bne.n	800612a <_dtoa_r+0xac2>
 800611a:	f000 f9cb 	bl	80064b4 <__multadd>
 800611e:	4607      	mov	r7, r0
 8006120:	4605      	mov	r5, r0
 8006122:	9b07      	ldr	r3, [sp, #28]
 8006124:	3301      	adds	r3, #1
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	e774      	b.n	8006014 <_dtoa_r+0x9ac>
 800612a:	f000 f9c3 	bl	80064b4 <__multadd>
 800612e:	4629      	mov	r1, r5
 8006130:	4607      	mov	r7, r0
 8006132:	2300      	movs	r3, #0
 8006134:	220a      	movs	r2, #10
 8006136:	4658      	mov	r0, fp
 8006138:	f000 f9bc 	bl	80064b4 <__multadd>
 800613c:	4605      	mov	r5, r0
 800613e:	e7f0      	b.n	8006122 <_dtoa_r+0xaba>
 8006140:	9b00      	ldr	r3, [sp, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	bfcc      	ite	gt
 8006146:	461e      	movgt	r6, r3
 8006148:	2601      	movle	r6, #1
 800614a:	4456      	add	r6, sl
 800614c:	2700      	movs	r7, #0
 800614e:	4649      	mov	r1, r9
 8006150:	2201      	movs	r2, #1
 8006152:	4658      	mov	r0, fp
 8006154:	f000 fb5a 	bl	800680c <__lshift>
 8006158:	4621      	mov	r1, r4
 800615a:	4681      	mov	r9, r0
 800615c:	f000 fbc2 	bl	80068e4 <__mcmp>
 8006160:	2800      	cmp	r0, #0
 8006162:	dcb0      	bgt.n	80060c6 <_dtoa_r+0xa5e>
 8006164:	d102      	bne.n	800616c <_dtoa_r+0xb04>
 8006166:	f018 0f01 	tst.w	r8, #1
 800616a:	d1ac      	bne.n	80060c6 <_dtoa_r+0xa5e>
 800616c:	4633      	mov	r3, r6
 800616e:	461e      	mov	r6, r3
 8006170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006174:	2a30      	cmp	r2, #48	@ 0x30
 8006176:	d0fa      	beq.n	800616e <_dtoa_r+0xb06>
 8006178:	e5c2      	b.n	8005d00 <_dtoa_r+0x698>
 800617a:	459a      	cmp	sl, r3
 800617c:	d1a4      	bne.n	80060c8 <_dtoa_r+0xa60>
 800617e:	9b04      	ldr	r3, [sp, #16]
 8006180:	3301      	adds	r3, #1
 8006182:	9304      	str	r3, [sp, #16]
 8006184:	2331      	movs	r3, #49	@ 0x31
 8006186:	f88a 3000 	strb.w	r3, [sl]
 800618a:	e5b9      	b.n	8005d00 <_dtoa_r+0x698>
 800618c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800618e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80061ec <_dtoa_r+0xb84>
 8006192:	b11b      	cbz	r3, 800619c <_dtoa_r+0xb34>
 8006194:	f10a 0308 	add.w	r3, sl, #8
 8006198:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	4650      	mov	r0, sl
 800619e:	b019      	add	sp, #100	@ 0x64
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	f77f ae37 	ble.w	8005e1a <_dtoa_r+0x7b2>
 80061ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b0:	2001      	movs	r0, #1
 80061b2:	e655      	b.n	8005e60 <_dtoa_r+0x7f8>
 80061b4:	9b00      	ldr	r3, [sp, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f77f aed6 	ble.w	8005f68 <_dtoa_r+0x900>
 80061bc:	4656      	mov	r6, sl
 80061be:	4621      	mov	r1, r4
 80061c0:	4648      	mov	r0, r9
 80061c2:	f7ff f9c8 	bl	8005556 <quorem>
 80061c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061ca:	f806 8b01 	strb.w	r8, [r6], #1
 80061ce:	9b00      	ldr	r3, [sp, #0]
 80061d0:	eba6 020a 	sub.w	r2, r6, sl
 80061d4:	4293      	cmp	r3, r2
 80061d6:	ddb3      	ble.n	8006140 <_dtoa_r+0xad8>
 80061d8:	4649      	mov	r1, r9
 80061da:	2300      	movs	r3, #0
 80061dc:	220a      	movs	r2, #10
 80061de:	4658      	mov	r0, fp
 80061e0:	f000 f968 	bl	80064b4 <__multadd>
 80061e4:	4681      	mov	r9, r0
 80061e6:	e7ea      	b.n	80061be <_dtoa_r+0xb56>
 80061e8:	08007d10 	.word	0x08007d10
 80061ec:	08007c94 	.word	0x08007c94

080061f0 <_free_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4605      	mov	r5, r0
 80061f4:	2900      	cmp	r1, #0
 80061f6:	d041      	beq.n	800627c <_free_r+0x8c>
 80061f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061fc:	1f0c      	subs	r4, r1, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bfb8      	it	lt
 8006202:	18e4      	addlt	r4, r4, r3
 8006204:	f000 f8e8 	bl	80063d8 <__malloc_lock>
 8006208:	4a1d      	ldr	r2, [pc, #116]	@ (8006280 <_free_r+0x90>)
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	b933      	cbnz	r3, 800621c <_free_r+0x2c>
 800620e:	6063      	str	r3, [r4, #4]
 8006210:	6014      	str	r4, [r2, #0]
 8006212:	4628      	mov	r0, r5
 8006214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006218:	f000 b8e4 	b.w	80063e4 <__malloc_unlock>
 800621c:	42a3      	cmp	r3, r4
 800621e:	d908      	bls.n	8006232 <_free_r+0x42>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	1821      	adds	r1, r4, r0
 8006224:	428b      	cmp	r3, r1
 8006226:	bf01      	itttt	eq
 8006228:	6819      	ldreq	r1, [r3, #0]
 800622a:	685b      	ldreq	r3, [r3, #4]
 800622c:	1809      	addeq	r1, r1, r0
 800622e:	6021      	streq	r1, [r4, #0]
 8006230:	e7ed      	b.n	800620e <_free_r+0x1e>
 8006232:	461a      	mov	r2, r3
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	b10b      	cbz	r3, 800623c <_free_r+0x4c>
 8006238:	42a3      	cmp	r3, r4
 800623a:	d9fa      	bls.n	8006232 <_free_r+0x42>
 800623c:	6811      	ldr	r1, [r2, #0]
 800623e:	1850      	adds	r0, r2, r1
 8006240:	42a0      	cmp	r0, r4
 8006242:	d10b      	bne.n	800625c <_free_r+0x6c>
 8006244:	6820      	ldr	r0, [r4, #0]
 8006246:	4401      	add	r1, r0
 8006248:	1850      	adds	r0, r2, r1
 800624a:	4283      	cmp	r3, r0
 800624c:	6011      	str	r1, [r2, #0]
 800624e:	d1e0      	bne.n	8006212 <_free_r+0x22>
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	6053      	str	r3, [r2, #4]
 8006256:	4408      	add	r0, r1
 8006258:	6010      	str	r0, [r2, #0]
 800625a:	e7da      	b.n	8006212 <_free_r+0x22>
 800625c:	d902      	bls.n	8006264 <_free_r+0x74>
 800625e:	230c      	movs	r3, #12
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	e7d6      	b.n	8006212 <_free_r+0x22>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	1821      	adds	r1, r4, r0
 8006268:	428b      	cmp	r3, r1
 800626a:	bf04      	itt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	6063      	str	r3, [r4, #4]
 8006272:	bf04      	itt	eq
 8006274:	1809      	addeq	r1, r1, r0
 8006276:	6021      	streq	r1, [r4, #0]
 8006278:	6054      	str	r4, [r2, #4]
 800627a:	e7ca      	b.n	8006212 <_free_r+0x22>
 800627c:	bd38      	pop	{r3, r4, r5, pc}
 800627e:	bf00      	nop
 8006280:	20000870 	.word	0x20000870

08006284 <malloc>:
 8006284:	4b02      	ldr	r3, [pc, #8]	@ (8006290 <malloc+0xc>)
 8006286:	4601      	mov	r1, r0
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	f000 b825 	b.w	80062d8 <_malloc_r>
 800628e:	bf00      	nop
 8006290:	20000018 	.word	0x20000018

08006294 <sbrk_aligned>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4e0f      	ldr	r6, [pc, #60]	@ (80062d4 <sbrk_aligned+0x40>)
 8006298:	460c      	mov	r4, r1
 800629a:	6831      	ldr	r1, [r6, #0]
 800629c:	4605      	mov	r5, r0
 800629e:	b911      	cbnz	r1, 80062a6 <sbrk_aligned+0x12>
 80062a0:	f000 fe46 	bl	8006f30 <_sbrk_r>
 80062a4:	6030      	str	r0, [r6, #0]
 80062a6:	4621      	mov	r1, r4
 80062a8:	4628      	mov	r0, r5
 80062aa:	f000 fe41 	bl	8006f30 <_sbrk_r>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	d103      	bne.n	80062ba <sbrk_aligned+0x26>
 80062b2:	f04f 34ff 	mov.w	r4, #4294967295
 80062b6:	4620      	mov	r0, r4
 80062b8:	bd70      	pop	{r4, r5, r6, pc}
 80062ba:	1cc4      	adds	r4, r0, #3
 80062bc:	f024 0403 	bic.w	r4, r4, #3
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d0f8      	beq.n	80062b6 <sbrk_aligned+0x22>
 80062c4:	1a21      	subs	r1, r4, r0
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 fe32 	bl	8006f30 <_sbrk_r>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d1f2      	bne.n	80062b6 <sbrk_aligned+0x22>
 80062d0:	e7ef      	b.n	80062b2 <sbrk_aligned+0x1e>
 80062d2:	bf00      	nop
 80062d4:	2000086c 	.word	0x2000086c

080062d8 <_malloc_r>:
 80062d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062dc:	1ccd      	adds	r5, r1, #3
 80062de:	f025 0503 	bic.w	r5, r5, #3
 80062e2:	3508      	adds	r5, #8
 80062e4:	2d0c      	cmp	r5, #12
 80062e6:	bf38      	it	cc
 80062e8:	250c      	movcc	r5, #12
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	4606      	mov	r6, r0
 80062ee:	db01      	blt.n	80062f4 <_malloc_r+0x1c>
 80062f0:	42a9      	cmp	r1, r5
 80062f2:	d904      	bls.n	80062fe <_malloc_r+0x26>
 80062f4:	230c      	movs	r3, #12
 80062f6:	6033      	str	r3, [r6, #0]
 80062f8:	2000      	movs	r0, #0
 80062fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063d4 <_malloc_r+0xfc>
 8006302:	f000 f869 	bl	80063d8 <__malloc_lock>
 8006306:	f8d8 3000 	ldr.w	r3, [r8]
 800630a:	461c      	mov	r4, r3
 800630c:	bb44      	cbnz	r4, 8006360 <_malloc_r+0x88>
 800630e:	4629      	mov	r1, r5
 8006310:	4630      	mov	r0, r6
 8006312:	f7ff ffbf 	bl	8006294 <sbrk_aligned>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	4604      	mov	r4, r0
 800631a:	d158      	bne.n	80063ce <_malloc_r+0xf6>
 800631c:	f8d8 4000 	ldr.w	r4, [r8]
 8006320:	4627      	mov	r7, r4
 8006322:	2f00      	cmp	r7, #0
 8006324:	d143      	bne.n	80063ae <_malloc_r+0xd6>
 8006326:	2c00      	cmp	r4, #0
 8006328:	d04b      	beq.n	80063c2 <_malloc_r+0xea>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	4639      	mov	r1, r7
 800632e:	4630      	mov	r0, r6
 8006330:	eb04 0903 	add.w	r9, r4, r3
 8006334:	f000 fdfc 	bl	8006f30 <_sbrk_r>
 8006338:	4581      	cmp	r9, r0
 800633a:	d142      	bne.n	80063c2 <_malloc_r+0xea>
 800633c:	6821      	ldr	r1, [r4, #0]
 800633e:	1a6d      	subs	r5, r5, r1
 8006340:	4629      	mov	r1, r5
 8006342:	4630      	mov	r0, r6
 8006344:	f7ff ffa6 	bl	8006294 <sbrk_aligned>
 8006348:	3001      	adds	r0, #1
 800634a:	d03a      	beq.n	80063c2 <_malloc_r+0xea>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	442b      	add	r3, r5
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	f8d8 3000 	ldr.w	r3, [r8]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	bb62      	cbnz	r2, 80063b4 <_malloc_r+0xdc>
 800635a:	f8c8 7000 	str.w	r7, [r8]
 800635e:	e00f      	b.n	8006380 <_malloc_r+0xa8>
 8006360:	6822      	ldr	r2, [r4, #0]
 8006362:	1b52      	subs	r2, r2, r5
 8006364:	d420      	bmi.n	80063a8 <_malloc_r+0xd0>
 8006366:	2a0b      	cmp	r2, #11
 8006368:	d917      	bls.n	800639a <_malloc_r+0xc2>
 800636a:	1961      	adds	r1, r4, r5
 800636c:	42a3      	cmp	r3, r4
 800636e:	6025      	str	r5, [r4, #0]
 8006370:	bf18      	it	ne
 8006372:	6059      	strne	r1, [r3, #4]
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	bf08      	it	eq
 8006378:	f8c8 1000 	streq.w	r1, [r8]
 800637c:	5162      	str	r2, [r4, r5]
 800637e:	604b      	str	r3, [r1, #4]
 8006380:	4630      	mov	r0, r6
 8006382:	f000 f82f 	bl	80063e4 <__malloc_unlock>
 8006386:	f104 000b 	add.w	r0, r4, #11
 800638a:	1d23      	adds	r3, r4, #4
 800638c:	f020 0007 	bic.w	r0, r0, #7
 8006390:	1ac2      	subs	r2, r0, r3
 8006392:	bf1c      	itt	ne
 8006394:	1a1b      	subne	r3, r3, r0
 8006396:	50a3      	strne	r3, [r4, r2]
 8006398:	e7af      	b.n	80062fa <_malloc_r+0x22>
 800639a:	6862      	ldr	r2, [r4, #4]
 800639c:	42a3      	cmp	r3, r4
 800639e:	bf0c      	ite	eq
 80063a0:	f8c8 2000 	streq.w	r2, [r8]
 80063a4:	605a      	strne	r2, [r3, #4]
 80063a6:	e7eb      	b.n	8006380 <_malloc_r+0xa8>
 80063a8:	4623      	mov	r3, r4
 80063aa:	6864      	ldr	r4, [r4, #4]
 80063ac:	e7ae      	b.n	800630c <_malloc_r+0x34>
 80063ae:	463c      	mov	r4, r7
 80063b0:	687f      	ldr	r7, [r7, #4]
 80063b2:	e7b6      	b.n	8006322 <_malloc_r+0x4a>
 80063b4:	461a      	mov	r2, r3
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	d1fb      	bne.n	80063b4 <_malloc_r+0xdc>
 80063bc:	2300      	movs	r3, #0
 80063be:	6053      	str	r3, [r2, #4]
 80063c0:	e7de      	b.n	8006380 <_malloc_r+0xa8>
 80063c2:	230c      	movs	r3, #12
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	4630      	mov	r0, r6
 80063c8:	f000 f80c 	bl	80063e4 <__malloc_unlock>
 80063cc:	e794      	b.n	80062f8 <_malloc_r+0x20>
 80063ce:	6005      	str	r5, [r0, #0]
 80063d0:	e7d6      	b.n	8006380 <_malloc_r+0xa8>
 80063d2:	bf00      	nop
 80063d4:	20000870 	.word	0x20000870

080063d8 <__malloc_lock>:
 80063d8:	4801      	ldr	r0, [pc, #4]	@ (80063e0 <__malloc_lock+0x8>)
 80063da:	f7ff b8ac 	b.w	8005536 <__retarget_lock_acquire_recursive>
 80063de:	bf00      	nop
 80063e0:	20000868 	.word	0x20000868

080063e4 <__malloc_unlock>:
 80063e4:	4801      	ldr	r0, [pc, #4]	@ (80063ec <__malloc_unlock+0x8>)
 80063e6:	f7ff b8a7 	b.w	8005538 <__retarget_lock_release_recursive>
 80063ea:	bf00      	nop
 80063ec:	20000868 	.word	0x20000868

080063f0 <_Balloc>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	69c6      	ldr	r6, [r0, #28]
 80063f4:	4604      	mov	r4, r0
 80063f6:	460d      	mov	r5, r1
 80063f8:	b976      	cbnz	r6, 8006418 <_Balloc+0x28>
 80063fa:	2010      	movs	r0, #16
 80063fc:	f7ff ff42 	bl	8006284 <malloc>
 8006400:	4602      	mov	r2, r0
 8006402:	61e0      	str	r0, [r4, #28]
 8006404:	b920      	cbnz	r0, 8006410 <_Balloc+0x20>
 8006406:	4b18      	ldr	r3, [pc, #96]	@ (8006468 <_Balloc+0x78>)
 8006408:	4818      	ldr	r0, [pc, #96]	@ (800646c <_Balloc+0x7c>)
 800640a:	216b      	movs	r1, #107	@ 0x6b
 800640c:	f000 fda0 	bl	8006f50 <__assert_func>
 8006410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006414:	6006      	str	r6, [r0, #0]
 8006416:	60c6      	str	r6, [r0, #12]
 8006418:	69e6      	ldr	r6, [r4, #28]
 800641a:	68f3      	ldr	r3, [r6, #12]
 800641c:	b183      	cbz	r3, 8006440 <_Balloc+0x50>
 800641e:	69e3      	ldr	r3, [r4, #28]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006426:	b9b8      	cbnz	r0, 8006458 <_Balloc+0x68>
 8006428:	2101      	movs	r1, #1
 800642a:	fa01 f605 	lsl.w	r6, r1, r5
 800642e:	1d72      	adds	r2, r6, #5
 8006430:	0092      	lsls	r2, r2, #2
 8006432:	4620      	mov	r0, r4
 8006434:	f000 fdaa 	bl	8006f8c <_calloc_r>
 8006438:	b160      	cbz	r0, 8006454 <_Balloc+0x64>
 800643a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800643e:	e00e      	b.n	800645e <_Balloc+0x6e>
 8006440:	2221      	movs	r2, #33	@ 0x21
 8006442:	2104      	movs	r1, #4
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fda1 	bl	8006f8c <_calloc_r>
 800644a:	69e3      	ldr	r3, [r4, #28]
 800644c:	60f0      	str	r0, [r6, #12]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e4      	bne.n	800641e <_Balloc+0x2e>
 8006454:	2000      	movs	r0, #0
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	6802      	ldr	r2, [r0, #0]
 800645a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800645e:	2300      	movs	r3, #0
 8006460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006464:	e7f7      	b.n	8006456 <_Balloc+0x66>
 8006466:	bf00      	nop
 8006468:	08007ca1 	.word	0x08007ca1
 800646c:	08007d21 	.word	0x08007d21

08006470 <_Bfree>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	69c6      	ldr	r6, [r0, #28]
 8006474:	4605      	mov	r5, r0
 8006476:	460c      	mov	r4, r1
 8006478:	b976      	cbnz	r6, 8006498 <_Bfree+0x28>
 800647a:	2010      	movs	r0, #16
 800647c:	f7ff ff02 	bl	8006284 <malloc>
 8006480:	4602      	mov	r2, r0
 8006482:	61e8      	str	r0, [r5, #28]
 8006484:	b920      	cbnz	r0, 8006490 <_Bfree+0x20>
 8006486:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <_Bfree+0x3c>)
 8006488:	4809      	ldr	r0, [pc, #36]	@ (80064b0 <_Bfree+0x40>)
 800648a:	218f      	movs	r1, #143	@ 0x8f
 800648c:	f000 fd60 	bl	8006f50 <__assert_func>
 8006490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006494:	6006      	str	r6, [r0, #0]
 8006496:	60c6      	str	r6, [r0, #12]
 8006498:	b13c      	cbz	r4, 80064aa <_Bfree+0x3a>
 800649a:	69eb      	ldr	r3, [r5, #28]
 800649c:	6862      	ldr	r2, [r4, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064a4:	6021      	str	r1, [r4, #0]
 80064a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	08007ca1 	.word	0x08007ca1
 80064b0:	08007d21 	.word	0x08007d21

080064b4 <__multadd>:
 80064b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b8:	690d      	ldr	r5, [r1, #16]
 80064ba:	4607      	mov	r7, r0
 80064bc:	460c      	mov	r4, r1
 80064be:	461e      	mov	r6, r3
 80064c0:	f101 0c14 	add.w	ip, r1, #20
 80064c4:	2000      	movs	r0, #0
 80064c6:	f8dc 3000 	ldr.w	r3, [ip]
 80064ca:	b299      	uxth	r1, r3
 80064cc:	fb02 6101 	mla	r1, r2, r1, r6
 80064d0:	0c1e      	lsrs	r6, r3, #16
 80064d2:	0c0b      	lsrs	r3, r1, #16
 80064d4:	fb02 3306 	mla	r3, r2, r6, r3
 80064d8:	b289      	uxth	r1, r1
 80064da:	3001      	adds	r0, #1
 80064dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064e0:	4285      	cmp	r5, r0
 80064e2:	f84c 1b04 	str.w	r1, [ip], #4
 80064e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064ea:	dcec      	bgt.n	80064c6 <__multadd+0x12>
 80064ec:	b30e      	cbz	r6, 8006532 <__multadd+0x7e>
 80064ee:	68a3      	ldr	r3, [r4, #8]
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	dc19      	bgt.n	8006528 <__multadd+0x74>
 80064f4:	6861      	ldr	r1, [r4, #4]
 80064f6:	4638      	mov	r0, r7
 80064f8:	3101      	adds	r1, #1
 80064fa:	f7ff ff79 	bl	80063f0 <_Balloc>
 80064fe:	4680      	mov	r8, r0
 8006500:	b928      	cbnz	r0, 800650e <__multadd+0x5a>
 8006502:	4602      	mov	r2, r0
 8006504:	4b0c      	ldr	r3, [pc, #48]	@ (8006538 <__multadd+0x84>)
 8006506:	480d      	ldr	r0, [pc, #52]	@ (800653c <__multadd+0x88>)
 8006508:	21ba      	movs	r1, #186	@ 0xba
 800650a:	f000 fd21 	bl	8006f50 <__assert_func>
 800650e:	6922      	ldr	r2, [r4, #16]
 8006510:	3202      	adds	r2, #2
 8006512:	f104 010c 	add.w	r1, r4, #12
 8006516:	0092      	lsls	r2, r2, #2
 8006518:	300c      	adds	r0, #12
 800651a:	f7ff f80e 	bl	800553a <memcpy>
 800651e:	4621      	mov	r1, r4
 8006520:	4638      	mov	r0, r7
 8006522:	f7ff ffa5 	bl	8006470 <_Bfree>
 8006526:	4644      	mov	r4, r8
 8006528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800652c:	3501      	adds	r5, #1
 800652e:	615e      	str	r6, [r3, #20]
 8006530:	6125      	str	r5, [r4, #16]
 8006532:	4620      	mov	r0, r4
 8006534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006538:	08007d10 	.word	0x08007d10
 800653c:	08007d21 	.word	0x08007d21

08006540 <__hi0bits>:
 8006540:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006544:	4603      	mov	r3, r0
 8006546:	bf36      	itet	cc
 8006548:	0403      	lslcc	r3, r0, #16
 800654a:	2000      	movcs	r0, #0
 800654c:	2010      	movcc	r0, #16
 800654e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006552:	bf3c      	itt	cc
 8006554:	021b      	lslcc	r3, r3, #8
 8006556:	3008      	addcc	r0, #8
 8006558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800655c:	bf3c      	itt	cc
 800655e:	011b      	lslcc	r3, r3, #4
 8006560:	3004      	addcc	r0, #4
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006566:	bf3c      	itt	cc
 8006568:	009b      	lslcc	r3, r3, #2
 800656a:	3002      	addcc	r0, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	db05      	blt.n	800657c <__hi0bits+0x3c>
 8006570:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006574:	f100 0001 	add.w	r0, r0, #1
 8006578:	bf08      	it	eq
 800657a:	2020      	moveq	r0, #32
 800657c:	4770      	bx	lr

0800657e <__lo0bits>:
 800657e:	6803      	ldr	r3, [r0, #0]
 8006580:	4602      	mov	r2, r0
 8006582:	f013 0007 	ands.w	r0, r3, #7
 8006586:	d00b      	beq.n	80065a0 <__lo0bits+0x22>
 8006588:	07d9      	lsls	r1, r3, #31
 800658a:	d421      	bmi.n	80065d0 <__lo0bits+0x52>
 800658c:	0798      	lsls	r0, r3, #30
 800658e:	bf49      	itett	mi
 8006590:	085b      	lsrmi	r3, r3, #1
 8006592:	089b      	lsrpl	r3, r3, #2
 8006594:	2001      	movmi	r0, #1
 8006596:	6013      	strmi	r3, [r2, #0]
 8006598:	bf5c      	itt	pl
 800659a:	6013      	strpl	r3, [r2, #0]
 800659c:	2002      	movpl	r0, #2
 800659e:	4770      	bx	lr
 80065a0:	b299      	uxth	r1, r3
 80065a2:	b909      	cbnz	r1, 80065a8 <__lo0bits+0x2a>
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	2010      	movs	r0, #16
 80065a8:	b2d9      	uxtb	r1, r3
 80065aa:	b909      	cbnz	r1, 80065b0 <__lo0bits+0x32>
 80065ac:	3008      	adds	r0, #8
 80065ae:	0a1b      	lsrs	r3, r3, #8
 80065b0:	0719      	lsls	r1, r3, #28
 80065b2:	bf04      	itt	eq
 80065b4:	091b      	lsreq	r3, r3, #4
 80065b6:	3004      	addeq	r0, #4
 80065b8:	0799      	lsls	r1, r3, #30
 80065ba:	bf04      	itt	eq
 80065bc:	089b      	lsreq	r3, r3, #2
 80065be:	3002      	addeq	r0, #2
 80065c0:	07d9      	lsls	r1, r3, #31
 80065c2:	d403      	bmi.n	80065cc <__lo0bits+0x4e>
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	f100 0001 	add.w	r0, r0, #1
 80065ca:	d003      	beq.n	80065d4 <__lo0bits+0x56>
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	4770      	bx	lr
 80065d0:	2000      	movs	r0, #0
 80065d2:	4770      	bx	lr
 80065d4:	2020      	movs	r0, #32
 80065d6:	4770      	bx	lr

080065d8 <__i2b>:
 80065d8:	b510      	push	{r4, lr}
 80065da:	460c      	mov	r4, r1
 80065dc:	2101      	movs	r1, #1
 80065de:	f7ff ff07 	bl	80063f0 <_Balloc>
 80065e2:	4602      	mov	r2, r0
 80065e4:	b928      	cbnz	r0, 80065f2 <__i2b+0x1a>
 80065e6:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <__i2b+0x24>)
 80065e8:	4805      	ldr	r0, [pc, #20]	@ (8006600 <__i2b+0x28>)
 80065ea:	f240 1145 	movw	r1, #325	@ 0x145
 80065ee:	f000 fcaf 	bl	8006f50 <__assert_func>
 80065f2:	2301      	movs	r3, #1
 80065f4:	6144      	str	r4, [r0, #20]
 80065f6:	6103      	str	r3, [r0, #16]
 80065f8:	bd10      	pop	{r4, pc}
 80065fa:	bf00      	nop
 80065fc:	08007d10 	.word	0x08007d10
 8006600:	08007d21 	.word	0x08007d21

08006604 <__multiply>:
 8006604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	4614      	mov	r4, r2
 800660a:	690a      	ldr	r2, [r1, #16]
 800660c:	6923      	ldr	r3, [r4, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	bfa8      	it	ge
 8006612:	4623      	movge	r3, r4
 8006614:	460f      	mov	r7, r1
 8006616:	bfa4      	itt	ge
 8006618:	460c      	movge	r4, r1
 800661a:	461f      	movge	r7, r3
 800661c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006620:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006624:	68a3      	ldr	r3, [r4, #8]
 8006626:	6861      	ldr	r1, [r4, #4]
 8006628:	eb0a 0609 	add.w	r6, sl, r9
 800662c:	42b3      	cmp	r3, r6
 800662e:	b085      	sub	sp, #20
 8006630:	bfb8      	it	lt
 8006632:	3101      	addlt	r1, #1
 8006634:	f7ff fedc 	bl	80063f0 <_Balloc>
 8006638:	b930      	cbnz	r0, 8006648 <__multiply+0x44>
 800663a:	4602      	mov	r2, r0
 800663c:	4b44      	ldr	r3, [pc, #272]	@ (8006750 <__multiply+0x14c>)
 800663e:	4845      	ldr	r0, [pc, #276]	@ (8006754 <__multiply+0x150>)
 8006640:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006644:	f000 fc84 	bl	8006f50 <__assert_func>
 8006648:	f100 0514 	add.w	r5, r0, #20
 800664c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006650:	462b      	mov	r3, r5
 8006652:	2200      	movs	r2, #0
 8006654:	4543      	cmp	r3, r8
 8006656:	d321      	bcc.n	800669c <__multiply+0x98>
 8006658:	f107 0114 	add.w	r1, r7, #20
 800665c:	f104 0214 	add.w	r2, r4, #20
 8006660:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006664:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006668:	9302      	str	r3, [sp, #8]
 800666a:	1b13      	subs	r3, r2, r4
 800666c:	3b15      	subs	r3, #21
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	3304      	adds	r3, #4
 8006674:	f104 0715 	add.w	r7, r4, #21
 8006678:	42ba      	cmp	r2, r7
 800667a:	bf38      	it	cc
 800667c:	2304      	movcc	r3, #4
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	9b02      	ldr	r3, [sp, #8]
 8006682:	9103      	str	r1, [sp, #12]
 8006684:	428b      	cmp	r3, r1
 8006686:	d80c      	bhi.n	80066a2 <__multiply+0x9e>
 8006688:	2e00      	cmp	r6, #0
 800668a:	dd03      	ble.n	8006694 <__multiply+0x90>
 800668c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006690:	2b00      	cmp	r3, #0
 8006692:	d05b      	beq.n	800674c <__multiply+0x148>
 8006694:	6106      	str	r6, [r0, #16]
 8006696:	b005      	add	sp, #20
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	f843 2b04 	str.w	r2, [r3], #4
 80066a0:	e7d8      	b.n	8006654 <__multiply+0x50>
 80066a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80066a6:	f1ba 0f00 	cmp.w	sl, #0
 80066aa:	d024      	beq.n	80066f6 <__multiply+0xf2>
 80066ac:	f104 0e14 	add.w	lr, r4, #20
 80066b0:	46a9      	mov	r9, r5
 80066b2:	f04f 0c00 	mov.w	ip, #0
 80066b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066ba:	f8d9 3000 	ldr.w	r3, [r9]
 80066be:	fa1f fb87 	uxth.w	fp, r7
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80066c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80066cc:	f8d9 7000 	ldr.w	r7, [r9]
 80066d0:	4463      	add	r3, ip
 80066d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80066d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80066da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80066de:	b29b      	uxth	r3, r3
 80066e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80066e4:	4572      	cmp	r2, lr
 80066e6:	f849 3b04 	str.w	r3, [r9], #4
 80066ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80066ee:	d8e2      	bhi.n	80066b6 <__multiply+0xb2>
 80066f0:	9b01      	ldr	r3, [sp, #4]
 80066f2:	f845 c003 	str.w	ip, [r5, r3]
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80066fc:	3104      	adds	r1, #4
 80066fe:	f1b9 0f00 	cmp.w	r9, #0
 8006702:	d021      	beq.n	8006748 <__multiply+0x144>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	f104 0c14 	add.w	ip, r4, #20
 800670a:	46ae      	mov	lr, r5
 800670c:	f04f 0a00 	mov.w	sl, #0
 8006710:	f8bc b000 	ldrh.w	fp, [ip]
 8006714:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006718:	fb09 770b 	mla	r7, r9, fp, r7
 800671c:	4457      	add	r7, sl
 800671e:	b29b      	uxth	r3, r3
 8006720:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006724:	f84e 3b04 	str.w	r3, [lr], #4
 8006728:	f85c 3b04 	ldr.w	r3, [ip], #4
 800672c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006730:	f8be 3000 	ldrh.w	r3, [lr]
 8006734:	fb09 330a 	mla	r3, r9, sl, r3
 8006738:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800673c:	4562      	cmp	r2, ip
 800673e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006742:	d8e5      	bhi.n	8006710 <__multiply+0x10c>
 8006744:	9f01      	ldr	r7, [sp, #4]
 8006746:	51eb      	str	r3, [r5, r7]
 8006748:	3504      	adds	r5, #4
 800674a:	e799      	b.n	8006680 <__multiply+0x7c>
 800674c:	3e01      	subs	r6, #1
 800674e:	e79b      	b.n	8006688 <__multiply+0x84>
 8006750:	08007d10 	.word	0x08007d10
 8006754:	08007d21 	.word	0x08007d21

08006758 <__pow5mult>:
 8006758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800675c:	4615      	mov	r5, r2
 800675e:	f012 0203 	ands.w	r2, r2, #3
 8006762:	4607      	mov	r7, r0
 8006764:	460e      	mov	r6, r1
 8006766:	d007      	beq.n	8006778 <__pow5mult+0x20>
 8006768:	4c25      	ldr	r4, [pc, #148]	@ (8006800 <__pow5mult+0xa8>)
 800676a:	3a01      	subs	r2, #1
 800676c:	2300      	movs	r3, #0
 800676e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006772:	f7ff fe9f 	bl	80064b4 <__multadd>
 8006776:	4606      	mov	r6, r0
 8006778:	10ad      	asrs	r5, r5, #2
 800677a:	d03d      	beq.n	80067f8 <__pow5mult+0xa0>
 800677c:	69fc      	ldr	r4, [r7, #28]
 800677e:	b97c      	cbnz	r4, 80067a0 <__pow5mult+0x48>
 8006780:	2010      	movs	r0, #16
 8006782:	f7ff fd7f 	bl	8006284 <malloc>
 8006786:	4602      	mov	r2, r0
 8006788:	61f8      	str	r0, [r7, #28]
 800678a:	b928      	cbnz	r0, 8006798 <__pow5mult+0x40>
 800678c:	4b1d      	ldr	r3, [pc, #116]	@ (8006804 <__pow5mult+0xac>)
 800678e:	481e      	ldr	r0, [pc, #120]	@ (8006808 <__pow5mult+0xb0>)
 8006790:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006794:	f000 fbdc 	bl	8006f50 <__assert_func>
 8006798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800679c:	6004      	str	r4, [r0, #0]
 800679e:	60c4      	str	r4, [r0, #12]
 80067a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067a8:	b94c      	cbnz	r4, 80067be <__pow5mult+0x66>
 80067aa:	f240 2171 	movw	r1, #625	@ 0x271
 80067ae:	4638      	mov	r0, r7
 80067b0:	f7ff ff12 	bl	80065d8 <__i2b>
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80067ba:	4604      	mov	r4, r0
 80067bc:	6003      	str	r3, [r0, #0]
 80067be:	f04f 0900 	mov.w	r9, #0
 80067c2:	07eb      	lsls	r3, r5, #31
 80067c4:	d50a      	bpl.n	80067dc <__pow5mult+0x84>
 80067c6:	4631      	mov	r1, r6
 80067c8:	4622      	mov	r2, r4
 80067ca:	4638      	mov	r0, r7
 80067cc:	f7ff ff1a 	bl	8006604 <__multiply>
 80067d0:	4631      	mov	r1, r6
 80067d2:	4680      	mov	r8, r0
 80067d4:	4638      	mov	r0, r7
 80067d6:	f7ff fe4b 	bl	8006470 <_Bfree>
 80067da:	4646      	mov	r6, r8
 80067dc:	106d      	asrs	r5, r5, #1
 80067de:	d00b      	beq.n	80067f8 <__pow5mult+0xa0>
 80067e0:	6820      	ldr	r0, [r4, #0]
 80067e2:	b938      	cbnz	r0, 80067f4 <__pow5mult+0x9c>
 80067e4:	4622      	mov	r2, r4
 80067e6:	4621      	mov	r1, r4
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7ff ff0b 	bl	8006604 <__multiply>
 80067ee:	6020      	str	r0, [r4, #0]
 80067f0:	f8c0 9000 	str.w	r9, [r0]
 80067f4:	4604      	mov	r4, r0
 80067f6:	e7e4      	b.n	80067c2 <__pow5mult+0x6a>
 80067f8:	4630      	mov	r0, r6
 80067fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067fe:	bf00      	nop
 8006800:	08007d7c 	.word	0x08007d7c
 8006804:	08007ca1 	.word	0x08007ca1
 8006808:	08007d21 	.word	0x08007d21

0800680c <__lshift>:
 800680c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	460c      	mov	r4, r1
 8006812:	6849      	ldr	r1, [r1, #4]
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800681a:	68a3      	ldr	r3, [r4, #8]
 800681c:	4607      	mov	r7, r0
 800681e:	4691      	mov	r9, r2
 8006820:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006824:	f108 0601 	add.w	r6, r8, #1
 8006828:	42b3      	cmp	r3, r6
 800682a:	db0b      	blt.n	8006844 <__lshift+0x38>
 800682c:	4638      	mov	r0, r7
 800682e:	f7ff fddf 	bl	80063f0 <_Balloc>
 8006832:	4605      	mov	r5, r0
 8006834:	b948      	cbnz	r0, 800684a <__lshift+0x3e>
 8006836:	4602      	mov	r2, r0
 8006838:	4b28      	ldr	r3, [pc, #160]	@ (80068dc <__lshift+0xd0>)
 800683a:	4829      	ldr	r0, [pc, #164]	@ (80068e0 <__lshift+0xd4>)
 800683c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006840:	f000 fb86 	bl	8006f50 <__assert_func>
 8006844:	3101      	adds	r1, #1
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	e7ee      	b.n	8006828 <__lshift+0x1c>
 800684a:	2300      	movs	r3, #0
 800684c:	f100 0114 	add.w	r1, r0, #20
 8006850:	f100 0210 	add.w	r2, r0, #16
 8006854:	4618      	mov	r0, r3
 8006856:	4553      	cmp	r3, sl
 8006858:	db33      	blt.n	80068c2 <__lshift+0xb6>
 800685a:	6920      	ldr	r0, [r4, #16]
 800685c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006860:	f104 0314 	add.w	r3, r4, #20
 8006864:	f019 091f 	ands.w	r9, r9, #31
 8006868:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800686c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006870:	d02b      	beq.n	80068ca <__lshift+0xbe>
 8006872:	f1c9 0e20 	rsb	lr, r9, #32
 8006876:	468a      	mov	sl, r1
 8006878:	2200      	movs	r2, #0
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	fa00 f009 	lsl.w	r0, r0, r9
 8006880:	4310      	orrs	r0, r2
 8006882:	f84a 0b04 	str.w	r0, [sl], #4
 8006886:	f853 2b04 	ldr.w	r2, [r3], #4
 800688a:	459c      	cmp	ip, r3
 800688c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006890:	d8f3      	bhi.n	800687a <__lshift+0x6e>
 8006892:	ebac 0304 	sub.w	r3, ip, r4
 8006896:	3b15      	subs	r3, #21
 8006898:	f023 0303 	bic.w	r3, r3, #3
 800689c:	3304      	adds	r3, #4
 800689e:	f104 0015 	add.w	r0, r4, #21
 80068a2:	4584      	cmp	ip, r0
 80068a4:	bf38      	it	cc
 80068a6:	2304      	movcc	r3, #4
 80068a8:	50ca      	str	r2, [r1, r3]
 80068aa:	b10a      	cbz	r2, 80068b0 <__lshift+0xa4>
 80068ac:	f108 0602 	add.w	r6, r8, #2
 80068b0:	3e01      	subs	r6, #1
 80068b2:	4638      	mov	r0, r7
 80068b4:	612e      	str	r6, [r5, #16]
 80068b6:	4621      	mov	r1, r4
 80068b8:	f7ff fdda 	bl	8006470 <_Bfree>
 80068bc:	4628      	mov	r0, r5
 80068be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80068c6:	3301      	adds	r3, #1
 80068c8:	e7c5      	b.n	8006856 <__lshift+0x4a>
 80068ca:	3904      	subs	r1, #4
 80068cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80068d4:	459c      	cmp	ip, r3
 80068d6:	d8f9      	bhi.n	80068cc <__lshift+0xc0>
 80068d8:	e7ea      	b.n	80068b0 <__lshift+0xa4>
 80068da:	bf00      	nop
 80068dc:	08007d10 	.word	0x08007d10
 80068e0:	08007d21 	.word	0x08007d21

080068e4 <__mcmp>:
 80068e4:	690a      	ldr	r2, [r1, #16]
 80068e6:	4603      	mov	r3, r0
 80068e8:	6900      	ldr	r0, [r0, #16]
 80068ea:	1a80      	subs	r0, r0, r2
 80068ec:	b530      	push	{r4, r5, lr}
 80068ee:	d10e      	bne.n	800690e <__mcmp+0x2a>
 80068f0:	3314      	adds	r3, #20
 80068f2:	3114      	adds	r1, #20
 80068f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006904:	4295      	cmp	r5, r2
 8006906:	d003      	beq.n	8006910 <__mcmp+0x2c>
 8006908:	d205      	bcs.n	8006916 <__mcmp+0x32>
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	bd30      	pop	{r4, r5, pc}
 8006910:	42a3      	cmp	r3, r4
 8006912:	d3f3      	bcc.n	80068fc <__mcmp+0x18>
 8006914:	e7fb      	b.n	800690e <__mcmp+0x2a>
 8006916:	2001      	movs	r0, #1
 8006918:	e7f9      	b.n	800690e <__mcmp+0x2a>
	...

0800691c <__mdiff>:
 800691c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006920:	4689      	mov	r9, r1
 8006922:	4606      	mov	r6, r0
 8006924:	4611      	mov	r1, r2
 8006926:	4648      	mov	r0, r9
 8006928:	4614      	mov	r4, r2
 800692a:	f7ff ffdb 	bl	80068e4 <__mcmp>
 800692e:	1e05      	subs	r5, r0, #0
 8006930:	d112      	bne.n	8006958 <__mdiff+0x3c>
 8006932:	4629      	mov	r1, r5
 8006934:	4630      	mov	r0, r6
 8006936:	f7ff fd5b 	bl	80063f0 <_Balloc>
 800693a:	4602      	mov	r2, r0
 800693c:	b928      	cbnz	r0, 800694a <__mdiff+0x2e>
 800693e:	4b3f      	ldr	r3, [pc, #252]	@ (8006a3c <__mdiff+0x120>)
 8006940:	f240 2137 	movw	r1, #567	@ 0x237
 8006944:	483e      	ldr	r0, [pc, #248]	@ (8006a40 <__mdiff+0x124>)
 8006946:	f000 fb03 	bl	8006f50 <__assert_func>
 800694a:	2301      	movs	r3, #1
 800694c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006950:	4610      	mov	r0, r2
 8006952:	b003      	add	sp, #12
 8006954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006958:	bfbc      	itt	lt
 800695a:	464b      	movlt	r3, r9
 800695c:	46a1      	movlt	r9, r4
 800695e:	4630      	mov	r0, r6
 8006960:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006964:	bfba      	itte	lt
 8006966:	461c      	movlt	r4, r3
 8006968:	2501      	movlt	r5, #1
 800696a:	2500      	movge	r5, #0
 800696c:	f7ff fd40 	bl	80063f0 <_Balloc>
 8006970:	4602      	mov	r2, r0
 8006972:	b918      	cbnz	r0, 800697c <__mdiff+0x60>
 8006974:	4b31      	ldr	r3, [pc, #196]	@ (8006a3c <__mdiff+0x120>)
 8006976:	f240 2145 	movw	r1, #581	@ 0x245
 800697a:	e7e3      	b.n	8006944 <__mdiff+0x28>
 800697c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006980:	6926      	ldr	r6, [r4, #16]
 8006982:	60c5      	str	r5, [r0, #12]
 8006984:	f109 0310 	add.w	r3, r9, #16
 8006988:	f109 0514 	add.w	r5, r9, #20
 800698c:	f104 0e14 	add.w	lr, r4, #20
 8006990:	f100 0b14 	add.w	fp, r0, #20
 8006994:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006998:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	46d9      	mov	r9, fp
 80069a0:	f04f 0c00 	mov.w	ip, #0
 80069a4:	9b01      	ldr	r3, [sp, #4]
 80069a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	fa1f f38a 	uxth.w	r3, sl
 80069b4:	4619      	mov	r1, r3
 80069b6:	b283      	uxth	r3, r0
 80069b8:	1acb      	subs	r3, r1, r3
 80069ba:	0c00      	lsrs	r0, r0, #16
 80069bc:	4463      	add	r3, ip
 80069be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069cc:	4576      	cmp	r6, lr
 80069ce:	f849 3b04 	str.w	r3, [r9], #4
 80069d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069d6:	d8e5      	bhi.n	80069a4 <__mdiff+0x88>
 80069d8:	1b33      	subs	r3, r6, r4
 80069da:	3b15      	subs	r3, #21
 80069dc:	f023 0303 	bic.w	r3, r3, #3
 80069e0:	3415      	adds	r4, #21
 80069e2:	3304      	adds	r3, #4
 80069e4:	42a6      	cmp	r6, r4
 80069e6:	bf38      	it	cc
 80069e8:	2304      	movcc	r3, #4
 80069ea:	441d      	add	r5, r3
 80069ec:	445b      	add	r3, fp
 80069ee:	461e      	mov	r6, r3
 80069f0:	462c      	mov	r4, r5
 80069f2:	4544      	cmp	r4, r8
 80069f4:	d30e      	bcc.n	8006a14 <__mdiff+0xf8>
 80069f6:	f108 0103 	add.w	r1, r8, #3
 80069fa:	1b49      	subs	r1, r1, r5
 80069fc:	f021 0103 	bic.w	r1, r1, #3
 8006a00:	3d03      	subs	r5, #3
 8006a02:	45a8      	cmp	r8, r5
 8006a04:	bf38      	it	cc
 8006a06:	2100      	movcc	r1, #0
 8006a08:	440b      	add	r3, r1
 8006a0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a0e:	b191      	cbz	r1, 8006a36 <__mdiff+0x11a>
 8006a10:	6117      	str	r7, [r2, #16]
 8006a12:	e79d      	b.n	8006950 <__mdiff+0x34>
 8006a14:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a18:	46e6      	mov	lr, ip
 8006a1a:	0c08      	lsrs	r0, r1, #16
 8006a1c:	fa1c fc81 	uxtah	ip, ip, r1
 8006a20:	4471      	add	r1, lr
 8006a22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a26:	b289      	uxth	r1, r1
 8006a28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a2c:	f846 1b04 	str.w	r1, [r6], #4
 8006a30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a34:	e7dd      	b.n	80069f2 <__mdiff+0xd6>
 8006a36:	3f01      	subs	r7, #1
 8006a38:	e7e7      	b.n	8006a0a <__mdiff+0xee>
 8006a3a:	bf00      	nop
 8006a3c:	08007d10 	.word	0x08007d10
 8006a40:	08007d21 	.word	0x08007d21

08006a44 <__d2b>:
 8006a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a48:	460f      	mov	r7, r1
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	ec59 8b10 	vmov	r8, r9, d0
 8006a50:	4616      	mov	r6, r2
 8006a52:	f7ff fccd 	bl	80063f0 <_Balloc>
 8006a56:	4604      	mov	r4, r0
 8006a58:	b930      	cbnz	r0, 8006a68 <__d2b+0x24>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	4b23      	ldr	r3, [pc, #140]	@ (8006aec <__d2b+0xa8>)
 8006a5e:	4824      	ldr	r0, [pc, #144]	@ (8006af0 <__d2b+0xac>)
 8006a60:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a64:	f000 fa74 	bl	8006f50 <__assert_func>
 8006a68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a70:	b10d      	cbz	r5, 8006a76 <__d2b+0x32>
 8006a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	f1b8 0300 	subs.w	r3, r8, #0
 8006a7c:	d023      	beq.n	8006ac6 <__d2b+0x82>
 8006a7e:	4668      	mov	r0, sp
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	f7ff fd7c 	bl	800657e <__lo0bits>
 8006a86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a8a:	b1d0      	cbz	r0, 8006ac2 <__d2b+0x7e>
 8006a8c:	f1c0 0320 	rsb	r3, r0, #32
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	430b      	orrs	r3, r1
 8006a96:	40c2      	lsrs	r2, r0
 8006a98:	6163      	str	r3, [r4, #20]
 8006a9a:	9201      	str	r2, [sp, #4]
 8006a9c:	9b01      	ldr	r3, [sp, #4]
 8006a9e:	61a3      	str	r3, [r4, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2201      	moveq	r2, #1
 8006aa6:	2202      	movne	r2, #2
 8006aa8:	6122      	str	r2, [r4, #16]
 8006aaa:	b1a5      	cbz	r5, 8006ad6 <__d2b+0x92>
 8006aac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ab0:	4405      	add	r5, r0
 8006ab2:	603d      	str	r5, [r7, #0]
 8006ab4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ab8:	6030      	str	r0, [r6, #0]
 8006aba:	4620      	mov	r0, r4
 8006abc:	b003      	add	sp, #12
 8006abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ac2:	6161      	str	r1, [r4, #20]
 8006ac4:	e7ea      	b.n	8006a9c <__d2b+0x58>
 8006ac6:	a801      	add	r0, sp, #4
 8006ac8:	f7ff fd59 	bl	800657e <__lo0bits>
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	6163      	str	r3, [r4, #20]
 8006ad0:	3020      	adds	r0, #32
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	e7e8      	b.n	8006aa8 <__d2b+0x64>
 8006ad6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ada:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006ade:	6038      	str	r0, [r7, #0]
 8006ae0:	6918      	ldr	r0, [r3, #16]
 8006ae2:	f7ff fd2d 	bl	8006540 <__hi0bits>
 8006ae6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006aea:	e7e5      	b.n	8006ab8 <__d2b+0x74>
 8006aec:	08007d10 	.word	0x08007d10
 8006af0:	08007d21 	.word	0x08007d21

08006af4 <__ssputs_r>:
 8006af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	688e      	ldr	r6, [r1, #8]
 8006afa:	461f      	mov	r7, r3
 8006afc:	42be      	cmp	r6, r7
 8006afe:	680b      	ldr	r3, [r1, #0]
 8006b00:	4682      	mov	sl, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	4690      	mov	r8, r2
 8006b06:	d82d      	bhi.n	8006b64 <__ssputs_r+0x70>
 8006b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b10:	d026      	beq.n	8006b60 <__ssputs_r+0x6c>
 8006b12:	6965      	ldr	r5, [r4, #20]
 8006b14:	6909      	ldr	r1, [r1, #16]
 8006b16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b1a:	eba3 0901 	sub.w	r9, r3, r1
 8006b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b22:	1c7b      	adds	r3, r7, #1
 8006b24:	444b      	add	r3, r9
 8006b26:	106d      	asrs	r5, r5, #1
 8006b28:	429d      	cmp	r5, r3
 8006b2a:	bf38      	it	cc
 8006b2c:	461d      	movcc	r5, r3
 8006b2e:	0553      	lsls	r3, r2, #21
 8006b30:	d527      	bpl.n	8006b82 <__ssputs_r+0x8e>
 8006b32:	4629      	mov	r1, r5
 8006b34:	f7ff fbd0 	bl	80062d8 <_malloc_r>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	b360      	cbz	r0, 8006b96 <__ssputs_r+0xa2>
 8006b3c:	6921      	ldr	r1, [r4, #16]
 8006b3e:	464a      	mov	r2, r9
 8006b40:	f7fe fcfb 	bl	800553a <memcpy>
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	6126      	str	r6, [r4, #16]
 8006b52:	6165      	str	r5, [r4, #20]
 8006b54:	444e      	add	r6, r9
 8006b56:	eba5 0509 	sub.w	r5, r5, r9
 8006b5a:	6026      	str	r6, [r4, #0]
 8006b5c:	60a5      	str	r5, [r4, #8]
 8006b5e:	463e      	mov	r6, r7
 8006b60:	42be      	cmp	r6, r7
 8006b62:	d900      	bls.n	8006b66 <__ssputs_r+0x72>
 8006b64:	463e      	mov	r6, r7
 8006b66:	6820      	ldr	r0, [r4, #0]
 8006b68:	4632      	mov	r2, r6
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	f000 f9c6 	bl	8006efc <memmove>
 8006b70:	68a3      	ldr	r3, [r4, #8]
 8006b72:	1b9b      	subs	r3, r3, r6
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	4433      	add	r3, r6
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b82:	462a      	mov	r2, r5
 8006b84:	f000 fa28 	bl	8006fd8 <_realloc_r>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d1e0      	bne.n	8006b50 <__ssputs_r+0x5c>
 8006b8e:	6921      	ldr	r1, [r4, #16]
 8006b90:	4650      	mov	r0, sl
 8006b92:	f7ff fb2d 	bl	80061f0 <_free_r>
 8006b96:	230c      	movs	r3, #12
 8006b98:	f8ca 3000 	str.w	r3, [sl]
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	e7e9      	b.n	8006b7e <__ssputs_r+0x8a>
	...

08006bac <_svfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	4698      	mov	r8, r3
 8006bb2:	898b      	ldrh	r3, [r1, #12]
 8006bb4:	061b      	lsls	r3, r3, #24
 8006bb6:	b09d      	sub	sp, #116	@ 0x74
 8006bb8:	4607      	mov	r7, r0
 8006bba:	460d      	mov	r5, r1
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	d510      	bpl.n	8006be2 <_svfiprintf_r+0x36>
 8006bc0:	690b      	ldr	r3, [r1, #16]
 8006bc2:	b973      	cbnz	r3, 8006be2 <_svfiprintf_r+0x36>
 8006bc4:	2140      	movs	r1, #64	@ 0x40
 8006bc6:	f7ff fb87 	bl	80062d8 <_malloc_r>
 8006bca:	6028      	str	r0, [r5, #0]
 8006bcc:	6128      	str	r0, [r5, #16]
 8006bce:	b930      	cbnz	r0, 8006bde <_svfiprintf_r+0x32>
 8006bd0:	230c      	movs	r3, #12
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	b01d      	add	sp, #116	@ 0x74
 8006bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bde:	2340      	movs	r3, #64	@ 0x40
 8006be0:	616b      	str	r3, [r5, #20]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be6:	2320      	movs	r3, #32
 8006be8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf0:	2330      	movs	r3, #48	@ 0x30
 8006bf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d90 <_svfiprintf_r+0x1e4>
 8006bf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bfa:	f04f 0901 	mov.w	r9, #1
 8006bfe:	4623      	mov	r3, r4
 8006c00:	469a      	mov	sl, r3
 8006c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c06:	b10a      	cbz	r2, 8006c0c <_svfiprintf_r+0x60>
 8006c08:	2a25      	cmp	r2, #37	@ 0x25
 8006c0a:	d1f9      	bne.n	8006c00 <_svfiprintf_r+0x54>
 8006c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c10:	d00b      	beq.n	8006c2a <_svfiprintf_r+0x7e>
 8006c12:	465b      	mov	r3, fp
 8006c14:	4622      	mov	r2, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ff6b 	bl	8006af4 <__ssputs_r>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f000 80a7 	beq.w	8006d72 <_svfiprintf_r+0x1c6>
 8006c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c26:	445a      	add	r2, fp
 8006c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 809f 	beq.w	8006d72 <_svfiprintf_r+0x1c6>
 8006c34:	2300      	movs	r3, #0
 8006c36:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c3e:	f10a 0a01 	add.w	sl, sl, #1
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c4c:	4654      	mov	r4, sl
 8006c4e:	2205      	movs	r2, #5
 8006c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c54:	484e      	ldr	r0, [pc, #312]	@ (8006d90 <_svfiprintf_r+0x1e4>)
 8006c56:	f7f9 fabb 	bl	80001d0 <memchr>
 8006c5a:	9a04      	ldr	r2, [sp, #16]
 8006c5c:	b9d8      	cbnz	r0, 8006c96 <_svfiprintf_r+0xea>
 8006c5e:	06d0      	lsls	r0, r2, #27
 8006c60:	bf44      	itt	mi
 8006c62:	2320      	movmi	r3, #32
 8006c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c68:	0711      	lsls	r1, r2, #28
 8006c6a:	bf44      	itt	mi
 8006c6c:	232b      	movmi	r3, #43	@ 0x2b
 8006c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c72:	f89a 3000 	ldrb.w	r3, [sl]
 8006c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c78:	d015      	beq.n	8006ca6 <_svfiprintf_r+0xfa>
 8006c7a:	9a07      	ldr	r2, [sp, #28]
 8006c7c:	4654      	mov	r4, sl
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f04f 0c0a 	mov.w	ip, #10
 8006c84:	4621      	mov	r1, r4
 8006c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c8a:	3b30      	subs	r3, #48	@ 0x30
 8006c8c:	2b09      	cmp	r3, #9
 8006c8e:	d94b      	bls.n	8006d28 <_svfiprintf_r+0x17c>
 8006c90:	b1b0      	cbz	r0, 8006cc0 <_svfiprintf_r+0x114>
 8006c92:	9207      	str	r2, [sp, #28]
 8006c94:	e014      	b.n	8006cc0 <_svfiprintf_r+0x114>
 8006c96:	eba0 0308 	sub.w	r3, r0, r8
 8006c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	46a2      	mov	sl, r4
 8006ca4:	e7d2      	b.n	8006c4c <_svfiprintf_r+0xa0>
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	1d19      	adds	r1, r3, #4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	9103      	str	r1, [sp, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfbb      	ittet	lt
 8006cb2:	425b      	neglt	r3, r3
 8006cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb8:	9307      	strge	r3, [sp, #28]
 8006cba:	9307      	strlt	r3, [sp, #28]
 8006cbc:	bfb8      	it	lt
 8006cbe:	9204      	strlt	r2, [sp, #16]
 8006cc0:	7823      	ldrb	r3, [r4, #0]
 8006cc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cc4:	d10a      	bne.n	8006cdc <_svfiprintf_r+0x130>
 8006cc6:	7863      	ldrb	r3, [r4, #1]
 8006cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cca:	d132      	bne.n	8006d32 <_svfiprintf_r+0x186>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	9203      	str	r2, [sp, #12]
 8006cd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cd8:	3402      	adds	r4, #2
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006da0 <_svfiprintf_r+0x1f4>
 8006ce0:	7821      	ldrb	r1, [r4, #0]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	4650      	mov	r0, sl
 8006ce6:	f7f9 fa73 	bl	80001d0 <memchr>
 8006cea:	b138      	cbz	r0, 8006cfc <_svfiprintf_r+0x150>
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	eba0 000a 	sub.w	r0, r0, sl
 8006cf2:	2240      	movs	r2, #64	@ 0x40
 8006cf4:	4082      	lsls	r2, r0
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	3401      	adds	r4, #1
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d00:	4824      	ldr	r0, [pc, #144]	@ (8006d94 <_svfiprintf_r+0x1e8>)
 8006d02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d06:	2206      	movs	r2, #6
 8006d08:	f7f9 fa62 	bl	80001d0 <memchr>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d036      	beq.n	8006d7e <_svfiprintf_r+0x1d2>
 8006d10:	4b21      	ldr	r3, [pc, #132]	@ (8006d98 <_svfiprintf_r+0x1ec>)
 8006d12:	bb1b      	cbnz	r3, 8006d5c <_svfiprintf_r+0x1b0>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	3307      	adds	r3, #7
 8006d18:	f023 0307 	bic.w	r3, r3, #7
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	9303      	str	r3, [sp, #12]
 8006d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d22:	4433      	add	r3, r6
 8006d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d26:	e76a      	b.n	8006bfe <_svfiprintf_r+0x52>
 8006d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	2001      	movs	r0, #1
 8006d30:	e7a8      	b.n	8006c84 <_svfiprintf_r+0xd8>
 8006d32:	2300      	movs	r3, #0
 8006d34:	3401      	adds	r4, #1
 8006d36:	9305      	str	r3, [sp, #20]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f04f 0c0a 	mov.w	ip, #10
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d44:	3a30      	subs	r2, #48	@ 0x30
 8006d46:	2a09      	cmp	r2, #9
 8006d48:	d903      	bls.n	8006d52 <_svfiprintf_r+0x1a6>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c6      	beq.n	8006cdc <_svfiprintf_r+0x130>
 8006d4e:	9105      	str	r1, [sp, #20]
 8006d50:	e7c4      	b.n	8006cdc <_svfiprintf_r+0x130>
 8006d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d56:	4604      	mov	r4, r0
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e7f0      	b.n	8006d3e <_svfiprintf_r+0x192>
 8006d5c:	ab03      	add	r3, sp, #12
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	462a      	mov	r2, r5
 8006d62:	4b0e      	ldr	r3, [pc, #56]	@ (8006d9c <_svfiprintf_r+0x1f0>)
 8006d64:	a904      	add	r1, sp, #16
 8006d66:	4638      	mov	r0, r7
 8006d68:	f7fd fe7a 	bl	8004a60 <_printf_float>
 8006d6c:	1c42      	adds	r2, r0, #1
 8006d6e:	4606      	mov	r6, r0
 8006d70:	d1d6      	bne.n	8006d20 <_svfiprintf_r+0x174>
 8006d72:	89ab      	ldrh	r3, [r5, #12]
 8006d74:	065b      	lsls	r3, r3, #25
 8006d76:	f53f af2d 	bmi.w	8006bd4 <_svfiprintf_r+0x28>
 8006d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d7c:	e72c      	b.n	8006bd8 <_svfiprintf_r+0x2c>
 8006d7e:	ab03      	add	r3, sp, #12
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	462a      	mov	r2, r5
 8006d84:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <_svfiprintf_r+0x1f0>)
 8006d86:	a904      	add	r1, sp, #16
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f7fe f901 	bl	8004f90 <_printf_i>
 8006d8e:	e7ed      	b.n	8006d6c <_svfiprintf_r+0x1c0>
 8006d90:	08007e78 	.word	0x08007e78
 8006d94:	08007e82 	.word	0x08007e82
 8006d98:	08004a61 	.word	0x08004a61
 8006d9c:	08006af5 	.word	0x08006af5
 8006da0:	08007e7e 	.word	0x08007e7e

08006da4 <__sflush_r>:
 8006da4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dac:	0716      	lsls	r6, r2, #28
 8006dae:	4605      	mov	r5, r0
 8006db0:	460c      	mov	r4, r1
 8006db2:	d454      	bmi.n	8006e5e <__sflush_r+0xba>
 8006db4:	684b      	ldr	r3, [r1, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dc02      	bgt.n	8006dc0 <__sflush_r+0x1c>
 8006dba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dd48      	ble.n	8006e52 <__sflush_r+0xae>
 8006dc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dc2:	2e00      	cmp	r6, #0
 8006dc4:	d045      	beq.n	8006e52 <__sflush_r+0xae>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dcc:	682f      	ldr	r7, [r5, #0]
 8006dce:	6a21      	ldr	r1, [r4, #32]
 8006dd0:	602b      	str	r3, [r5, #0]
 8006dd2:	d030      	beq.n	8006e36 <__sflush_r+0x92>
 8006dd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	0759      	lsls	r1, r3, #29
 8006dda:	d505      	bpl.n	8006de8 <__sflush_r+0x44>
 8006ddc:	6863      	ldr	r3, [r4, #4]
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006de2:	b10b      	cbz	r3, 8006de8 <__sflush_r+0x44>
 8006de4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006de6:	1ad2      	subs	r2, r2, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dec:	6a21      	ldr	r1, [r4, #32]
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b0      	blx	r6
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	d106      	bne.n	8006e06 <__sflush_r+0x62>
 8006df8:	6829      	ldr	r1, [r5, #0]
 8006dfa:	291d      	cmp	r1, #29
 8006dfc:	d82b      	bhi.n	8006e56 <__sflush_r+0xb2>
 8006dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8006ea8 <__sflush_r+0x104>)
 8006e00:	410a      	asrs	r2, r1
 8006e02:	07d6      	lsls	r6, r2, #31
 8006e04:	d427      	bmi.n	8006e56 <__sflush_r+0xb2>
 8006e06:	2200      	movs	r2, #0
 8006e08:	6062      	str	r2, [r4, #4]
 8006e0a:	04d9      	lsls	r1, r3, #19
 8006e0c:	6922      	ldr	r2, [r4, #16]
 8006e0e:	6022      	str	r2, [r4, #0]
 8006e10:	d504      	bpl.n	8006e1c <__sflush_r+0x78>
 8006e12:	1c42      	adds	r2, r0, #1
 8006e14:	d101      	bne.n	8006e1a <__sflush_r+0x76>
 8006e16:	682b      	ldr	r3, [r5, #0]
 8006e18:	b903      	cbnz	r3, 8006e1c <__sflush_r+0x78>
 8006e1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e1e:	602f      	str	r7, [r5, #0]
 8006e20:	b1b9      	cbz	r1, 8006e52 <__sflush_r+0xae>
 8006e22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e26:	4299      	cmp	r1, r3
 8006e28:	d002      	beq.n	8006e30 <__sflush_r+0x8c>
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f7ff f9e0 	bl	80061f0 <_free_r>
 8006e30:	2300      	movs	r3, #0
 8006e32:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e34:	e00d      	b.n	8006e52 <__sflush_r+0xae>
 8006e36:	2301      	movs	r3, #1
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b0      	blx	r6
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	1c50      	adds	r0, r2, #1
 8006e40:	d1c9      	bne.n	8006dd6 <__sflush_r+0x32>
 8006e42:	682b      	ldr	r3, [r5, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0c6      	beq.n	8006dd6 <__sflush_r+0x32>
 8006e48:	2b1d      	cmp	r3, #29
 8006e4a:	d001      	beq.n	8006e50 <__sflush_r+0xac>
 8006e4c:	2b16      	cmp	r3, #22
 8006e4e:	d11e      	bne.n	8006e8e <__sflush_r+0xea>
 8006e50:	602f      	str	r7, [r5, #0]
 8006e52:	2000      	movs	r0, #0
 8006e54:	e022      	b.n	8006e9c <__sflush_r+0xf8>
 8006e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e5a:	b21b      	sxth	r3, r3
 8006e5c:	e01b      	b.n	8006e96 <__sflush_r+0xf2>
 8006e5e:	690f      	ldr	r7, [r1, #16]
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	d0f6      	beq.n	8006e52 <__sflush_r+0xae>
 8006e64:	0793      	lsls	r3, r2, #30
 8006e66:	680e      	ldr	r6, [r1, #0]
 8006e68:	bf08      	it	eq
 8006e6a:	694b      	ldreq	r3, [r1, #20]
 8006e6c:	600f      	str	r7, [r1, #0]
 8006e6e:	bf18      	it	ne
 8006e70:	2300      	movne	r3, #0
 8006e72:	eba6 0807 	sub.w	r8, r6, r7
 8006e76:	608b      	str	r3, [r1, #8]
 8006e78:	f1b8 0f00 	cmp.w	r8, #0
 8006e7c:	dde9      	ble.n	8006e52 <__sflush_r+0xae>
 8006e7e:	6a21      	ldr	r1, [r4, #32]
 8006e80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e82:	4643      	mov	r3, r8
 8006e84:	463a      	mov	r2, r7
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b0      	blx	r6
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	dc08      	bgt.n	8006ea0 <__sflush_r+0xfc>
 8006e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea0:	4407      	add	r7, r0
 8006ea2:	eba8 0800 	sub.w	r8, r8, r0
 8006ea6:	e7e7      	b.n	8006e78 <__sflush_r+0xd4>
 8006ea8:	dfbffffe 	.word	0xdfbffffe

08006eac <_fflush_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	690b      	ldr	r3, [r1, #16]
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	b913      	cbnz	r3, 8006ebc <_fflush_r+0x10>
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	4628      	mov	r0, r5
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	b118      	cbz	r0, 8006ec6 <_fflush_r+0x1a>
 8006ebe:	6a03      	ldr	r3, [r0, #32]
 8006ec0:	b90b      	cbnz	r3, 8006ec6 <_fflush_r+0x1a>
 8006ec2:	f7fe fa11 	bl	80052e8 <__sinit>
 8006ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f3      	beq.n	8006eb6 <_fflush_r+0xa>
 8006ece:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ed0:	07d0      	lsls	r0, r2, #31
 8006ed2:	d404      	bmi.n	8006ede <_fflush_r+0x32>
 8006ed4:	0599      	lsls	r1, r3, #22
 8006ed6:	d402      	bmi.n	8006ede <_fflush_r+0x32>
 8006ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eda:	f7fe fb2c 	bl	8005536 <__retarget_lock_acquire_recursive>
 8006ede:	4628      	mov	r0, r5
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	f7ff ff5f 	bl	8006da4 <__sflush_r>
 8006ee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ee8:	07da      	lsls	r2, r3, #31
 8006eea:	4605      	mov	r5, r0
 8006eec:	d4e4      	bmi.n	8006eb8 <_fflush_r+0xc>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	059b      	lsls	r3, r3, #22
 8006ef2:	d4e1      	bmi.n	8006eb8 <_fflush_r+0xc>
 8006ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ef6:	f7fe fb1f 	bl	8005538 <__retarget_lock_release_recursive>
 8006efa:	e7dd      	b.n	8006eb8 <_fflush_r+0xc>

08006efc <memmove>:
 8006efc:	4288      	cmp	r0, r1
 8006efe:	b510      	push	{r4, lr}
 8006f00:	eb01 0402 	add.w	r4, r1, r2
 8006f04:	d902      	bls.n	8006f0c <memmove+0x10>
 8006f06:	4284      	cmp	r4, r0
 8006f08:	4623      	mov	r3, r4
 8006f0a:	d807      	bhi.n	8006f1c <memmove+0x20>
 8006f0c:	1e43      	subs	r3, r0, #1
 8006f0e:	42a1      	cmp	r1, r4
 8006f10:	d008      	beq.n	8006f24 <memmove+0x28>
 8006f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f1a:	e7f8      	b.n	8006f0e <memmove+0x12>
 8006f1c:	4402      	add	r2, r0
 8006f1e:	4601      	mov	r1, r0
 8006f20:	428a      	cmp	r2, r1
 8006f22:	d100      	bne.n	8006f26 <memmove+0x2a>
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f2e:	e7f7      	b.n	8006f20 <memmove+0x24>

08006f30 <_sbrk_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4d06      	ldr	r5, [pc, #24]	@ (8006f4c <_sbrk_r+0x1c>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	602b      	str	r3, [r5, #0]
 8006f3c:	f7fa fe30 	bl	8001ba0 <_sbrk>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_sbrk_r+0x1a>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_sbrk_r+0x1a>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	20000864 	.word	0x20000864

08006f50 <__assert_func>:
 8006f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f52:	4614      	mov	r4, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	4b09      	ldr	r3, [pc, #36]	@ (8006f7c <__assert_func+0x2c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	68d8      	ldr	r0, [r3, #12]
 8006f5e:	b954      	cbnz	r4, 8006f76 <__assert_func+0x26>
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <__assert_func+0x30>)
 8006f62:	461c      	mov	r4, r3
 8006f64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f68:	9100      	str	r1, [sp, #0]
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	4905      	ldr	r1, [pc, #20]	@ (8006f84 <__assert_func+0x34>)
 8006f6e:	f000 f86f 	bl	8007050 <fiprintf>
 8006f72:	f000 f87f 	bl	8007074 <abort>
 8006f76:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <__assert_func+0x38>)
 8006f78:	e7f4      	b.n	8006f64 <__assert_func+0x14>
 8006f7a:	bf00      	nop
 8006f7c:	20000018 	.word	0x20000018
 8006f80:	08007ece 	.word	0x08007ece
 8006f84:	08007ea0 	.word	0x08007ea0
 8006f88:	08007e93 	.word	0x08007e93

08006f8c <_calloc_r>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	fba1 5402 	umull	r5, r4, r1, r2
 8006f92:	b93c      	cbnz	r4, 8006fa4 <_calloc_r+0x18>
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7ff f99f 	bl	80062d8 <_malloc_r>
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	b928      	cbnz	r0, 8006faa <_calloc_r+0x1e>
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	220c      	movs	r2, #12
 8006fa6:	6002      	str	r2, [r0, #0]
 8006fa8:	e7f9      	b.n	8006f9e <_calloc_r+0x12>
 8006faa:	462a      	mov	r2, r5
 8006fac:	4621      	mov	r1, r4
 8006fae:	f7fe fa44 	bl	800543a <memset>
 8006fb2:	e7f5      	b.n	8006fa0 <_calloc_r+0x14>

08006fb4 <__ascii_mbtowc>:
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	b901      	cbnz	r1, 8006fba <__ascii_mbtowc+0x6>
 8006fb8:	a901      	add	r1, sp, #4
 8006fba:	b142      	cbz	r2, 8006fce <__ascii_mbtowc+0x1a>
 8006fbc:	b14b      	cbz	r3, 8006fd2 <__ascii_mbtowc+0x1e>
 8006fbe:	7813      	ldrb	r3, [r2, #0]
 8006fc0:	600b      	str	r3, [r1, #0]
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	1e10      	subs	r0, r2, #0
 8006fc6:	bf18      	it	ne
 8006fc8:	2001      	movne	r0, #1
 8006fca:	b002      	add	sp, #8
 8006fcc:	4770      	bx	lr
 8006fce:	4610      	mov	r0, r2
 8006fd0:	e7fb      	b.n	8006fca <__ascii_mbtowc+0x16>
 8006fd2:	f06f 0001 	mvn.w	r0, #1
 8006fd6:	e7f8      	b.n	8006fca <__ascii_mbtowc+0x16>

08006fd8 <_realloc_r>:
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	4680      	mov	r8, r0
 8006fde:	4615      	mov	r5, r2
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	b921      	cbnz	r1, 8006fee <_realloc_r+0x16>
 8006fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe8:	4611      	mov	r1, r2
 8006fea:	f7ff b975 	b.w	80062d8 <_malloc_r>
 8006fee:	b92a      	cbnz	r2, 8006ffc <_realloc_r+0x24>
 8006ff0:	f7ff f8fe 	bl	80061f0 <_free_r>
 8006ff4:	2400      	movs	r4, #0
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffc:	f000 f841 	bl	8007082 <_malloc_usable_size_r>
 8007000:	4285      	cmp	r5, r0
 8007002:	4606      	mov	r6, r0
 8007004:	d802      	bhi.n	800700c <_realloc_r+0x34>
 8007006:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800700a:	d8f4      	bhi.n	8006ff6 <_realloc_r+0x1e>
 800700c:	4629      	mov	r1, r5
 800700e:	4640      	mov	r0, r8
 8007010:	f7ff f962 	bl	80062d8 <_malloc_r>
 8007014:	4607      	mov	r7, r0
 8007016:	2800      	cmp	r0, #0
 8007018:	d0ec      	beq.n	8006ff4 <_realloc_r+0x1c>
 800701a:	42b5      	cmp	r5, r6
 800701c:	462a      	mov	r2, r5
 800701e:	4621      	mov	r1, r4
 8007020:	bf28      	it	cs
 8007022:	4632      	movcs	r2, r6
 8007024:	f7fe fa89 	bl	800553a <memcpy>
 8007028:	4621      	mov	r1, r4
 800702a:	4640      	mov	r0, r8
 800702c:	f7ff f8e0 	bl	80061f0 <_free_r>
 8007030:	463c      	mov	r4, r7
 8007032:	e7e0      	b.n	8006ff6 <_realloc_r+0x1e>

08007034 <__ascii_wctomb>:
 8007034:	4603      	mov	r3, r0
 8007036:	4608      	mov	r0, r1
 8007038:	b141      	cbz	r1, 800704c <__ascii_wctomb+0x18>
 800703a:	2aff      	cmp	r2, #255	@ 0xff
 800703c:	d904      	bls.n	8007048 <__ascii_wctomb+0x14>
 800703e:	228a      	movs	r2, #138	@ 0x8a
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	f04f 30ff 	mov.w	r0, #4294967295
 8007046:	4770      	bx	lr
 8007048:	700a      	strb	r2, [r1, #0]
 800704a:	2001      	movs	r0, #1
 800704c:	4770      	bx	lr
	...

08007050 <fiprintf>:
 8007050:	b40e      	push	{r1, r2, r3}
 8007052:	b503      	push	{r0, r1, lr}
 8007054:	4601      	mov	r1, r0
 8007056:	ab03      	add	r3, sp, #12
 8007058:	4805      	ldr	r0, [pc, #20]	@ (8007070 <fiprintf+0x20>)
 800705a:	f853 2b04 	ldr.w	r2, [r3], #4
 800705e:	6800      	ldr	r0, [r0, #0]
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	f000 f83f 	bl	80070e4 <_vfiprintf_r>
 8007066:	b002      	add	sp, #8
 8007068:	f85d eb04 	ldr.w	lr, [sp], #4
 800706c:	b003      	add	sp, #12
 800706e:	4770      	bx	lr
 8007070:	20000018 	.word	0x20000018

08007074 <abort>:
 8007074:	b508      	push	{r3, lr}
 8007076:	2006      	movs	r0, #6
 8007078:	f000 fa08 	bl	800748c <raise>
 800707c:	2001      	movs	r0, #1
 800707e:	f7fa fd17 	bl	8001ab0 <_exit>

08007082 <_malloc_usable_size_r>:
 8007082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007086:	1f18      	subs	r0, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	bfbc      	itt	lt
 800708c:	580b      	ldrlt	r3, [r1, r0]
 800708e:	18c0      	addlt	r0, r0, r3
 8007090:	4770      	bx	lr

08007092 <__sfputc_r>:
 8007092:	6893      	ldr	r3, [r2, #8]
 8007094:	3b01      	subs	r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	b410      	push	{r4}
 800709a:	6093      	str	r3, [r2, #8]
 800709c:	da08      	bge.n	80070b0 <__sfputc_r+0x1e>
 800709e:	6994      	ldr	r4, [r2, #24]
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	db01      	blt.n	80070a8 <__sfputc_r+0x16>
 80070a4:	290a      	cmp	r1, #10
 80070a6:	d103      	bne.n	80070b0 <__sfputc_r+0x1e>
 80070a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070ac:	f000 b932 	b.w	8007314 <__swbuf_r>
 80070b0:	6813      	ldr	r3, [r2, #0]
 80070b2:	1c58      	adds	r0, r3, #1
 80070b4:	6010      	str	r0, [r2, #0]
 80070b6:	7019      	strb	r1, [r3, #0]
 80070b8:	4608      	mov	r0, r1
 80070ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <__sfputs_r>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	4606      	mov	r6, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	4614      	mov	r4, r2
 80070c8:	18d5      	adds	r5, r2, r3
 80070ca:	42ac      	cmp	r4, r5
 80070cc:	d101      	bne.n	80070d2 <__sfputs_r+0x12>
 80070ce:	2000      	movs	r0, #0
 80070d0:	e007      	b.n	80070e2 <__sfputs_r+0x22>
 80070d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d6:	463a      	mov	r2, r7
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff ffda 	bl	8007092 <__sfputc_r>
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	d1f3      	bne.n	80070ca <__sfputs_r+0xa>
 80070e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070e4 <_vfiprintf_r>:
 80070e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	460d      	mov	r5, r1
 80070ea:	b09d      	sub	sp, #116	@ 0x74
 80070ec:	4614      	mov	r4, r2
 80070ee:	4698      	mov	r8, r3
 80070f0:	4606      	mov	r6, r0
 80070f2:	b118      	cbz	r0, 80070fc <_vfiprintf_r+0x18>
 80070f4:	6a03      	ldr	r3, [r0, #32]
 80070f6:	b90b      	cbnz	r3, 80070fc <_vfiprintf_r+0x18>
 80070f8:	f7fe f8f6 	bl	80052e8 <__sinit>
 80070fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070fe:	07d9      	lsls	r1, r3, #31
 8007100:	d405      	bmi.n	800710e <_vfiprintf_r+0x2a>
 8007102:	89ab      	ldrh	r3, [r5, #12]
 8007104:	059a      	lsls	r2, r3, #22
 8007106:	d402      	bmi.n	800710e <_vfiprintf_r+0x2a>
 8007108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800710a:	f7fe fa14 	bl	8005536 <__retarget_lock_acquire_recursive>
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	071b      	lsls	r3, r3, #28
 8007112:	d501      	bpl.n	8007118 <_vfiprintf_r+0x34>
 8007114:	692b      	ldr	r3, [r5, #16]
 8007116:	b99b      	cbnz	r3, 8007140 <_vfiprintf_r+0x5c>
 8007118:	4629      	mov	r1, r5
 800711a:	4630      	mov	r0, r6
 800711c:	f000 f938 	bl	8007390 <__swsetup_r>
 8007120:	b170      	cbz	r0, 8007140 <_vfiprintf_r+0x5c>
 8007122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007124:	07dc      	lsls	r4, r3, #31
 8007126:	d504      	bpl.n	8007132 <_vfiprintf_r+0x4e>
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	b01d      	add	sp, #116	@ 0x74
 800712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	0598      	lsls	r0, r3, #22
 8007136:	d4f7      	bmi.n	8007128 <_vfiprintf_r+0x44>
 8007138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800713a:	f7fe f9fd 	bl	8005538 <__retarget_lock_release_recursive>
 800713e:	e7f3      	b.n	8007128 <_vfiprintf_r+0x44>
 8007140:	2300      	movs	r3, #0
 8007142:	9309      	str	r3, [sp, #36]	@ 0x24
 8007144:	2320      	movs	r3, #32
 8007146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800714a:	f8cd 800c 	str.w	r8, [sp, #12]
 800714e:	2330      	movs	r3, #48	@ 0x30
 8007150:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007300 <_vfiprintf_r+0x21c>
 8007154:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007158:	f04f 0901 	mov.w	r9, #1
 800715c:	4623      	mov	r3, r4
 800715e:	469a      	mov	sl, r3
 8007160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007164:	b10a      	cbz	r2, 800716a <_vfiprintf_r+0x86>
 8007166:	2a25      	cmp	r2, #37	@ 0x25
 8007168:	d1f9      	bne.n	800715e <_vfiprintf_r+0x7a>
 800716a:	ebba 0b04 	subs.w	fp, sl, r4
 800716e:	d00b      	beq.n	8007188 <_vfiprintf_r+0xa4>
 8007170:	465b      	mov	r3, fp
 8007172:	4622      	mov	r2, r4
 8007174:	4629      	mov	r1, r5
 8007176:	4630      	mov	r0, r6
 8007178:	f7ff ffa2 	bl	80070c0 <__sfputs_r>
 800717c:	3001      	adds	r0, #1
 800717e:	f000 80a7 	beq.w	80072d0 <_vfiprintf_r+0x1ec>
 8007182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007184:	445a      	add	r2, fp
 8007186:	9209      	str	r2, [sp, #36]	@ 0x24
 8007188:	f89a 3000 	ldrb.w	r3, [sl]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 809f 	beq.w	80072d0 <_vfiprintf_r+0x1ec>
 8007192:	2300      	movs	r3, #0
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800719c:	f10a 0a01 	add.w	sl, sl, #1
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	9307      	str	r3, [sp, #28]
 80071a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80071aa:	4654      	mov	r4, sl
 80071ac:	2205      	movs	r2, #5
 80071ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b2:	4853      	ldr	r0, [pc, #332]	@ (8007300 <_vfiprintf_r+0x21c>)
 80071b4:	f7f9 f80c 	bl	80001d0 <memchr>
 80071b8:	9a04      	ldr	r2, [sp, #16]
 80071ba:	b9d8      	cbnz	r0, 80071f4 <_vfiprintf_r+0x110>
 80071bc:	06d1      	lsls	r1, r2, #27
 80071be:	bf44      	itt	mi
 80071c0:	2320      	movmi	r3, #32
 80071c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071c6:	0713      	lsls	r3, r2, #28
 80071c8:	bf44      	itt	mi
 80071ca:	232b      	movmi	r3, #43	@ 0x2b
 80071cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071d0:	f89a 3000 	ldrb.w	r3, [sl]
 80071d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80071d6:	d015      	beq.n	8007204 <_vfiprintf_r+0x120>
 80071d8:	9a07      	ldr	r2, [sp, #28]
 80071da:	4654      	mov	r4, sl
 80071dc:	2000      	movs	r0, #0
 80071de:	f04f 0c0a 	mov.w	ip, #10
 80071e2:	4621      	mov	r1, r4
 80071e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e8:	3b30      	subs	r3, #48	@ 0x30
 80071ea:	2b09      	cmp	r3, #9
 80071ec:	d94b      	bls.n	8007286 <_vfiprintf_r+0x1a2>
 80071ee:	b1b0      	cbz	r0, 800721e <_vfiprintf_r+0x13a>
 80071f0:	9207      	str	r2, [sp, #28]
 80071f2:	e014      	b.n	800721e <_vfiprintf_r+0x13a>
 80071f4:	eba0 0308 	sub.w	r3, r0, r8
 80071f8:	fa09 f303 	lsl.w	r3, r9, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	46a2      	mov	sl, r4
 8007202:	e7d2      	b.n	80071aa <_vfiprintf_r+0xc6>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	1d19      	adds	r1, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	9103      	str	r1, [sp, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfbb      	ittet	lt
 8007210:	425b      	neglt	r3, r3
 8007212:	f042 0202 	orrlt.w	r2, r2, #2
 8007216:	9307      	strge	r3, [sp, #28]
 8007218:	9307      	strlt	r3, [sp, #28]
 800721a:	bfb8      	it	lt
 800721c:	9204      	strlt	r2, [sp, #16]
 800721e:	7823      	ldrb	r3, [r4, #0]
 8007220:	2b2e      	cmp	r3, #46	@ 0x2e
 8007222:	d10a      	bne.n	800723a <_vfiprintf_r+0x156>
 8007224:	7863      	ldrb	r3, [r4, #1]
 8007226:	2b2a      	cmp	r3, #42	@ 0x2a
 8007228:	d132      	bne.n	8007290 <_vfiprintf_r+0x1ac>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	1d1a      	adds	r2, r3, #4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	9203      	str	r2, [sp, #12]
 8007232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007236:	3402      	adds	r4, #2
 8007238:	9305      	str	r3, [sp, #20]
 800723a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007310 <_vfiprintf_r+0x22c>
 800723e:	7821      	ldrb	r1, [r4, #0]
 8007240:	2203      	movs	r2, #3
 8007242:	4650      	mov	r0, sl
 8007244:	f7f8 ffc4 	bl	80001d0 <memchr>
 8007248:	b138      	cbz	r0, 800725a <_vfiprintf_r+0x176>
 800724a:	9b04      	ldr	r3, [sp, #16]
 800724c:	eba0 000a 	sub.w	r0, r0, sl
 8007250:	2240      	movs	r2, #64	@ 0x40
 8007252:	4082      	lsls	r2, r0
 8007254:	4313      	orrs	r3, r2
 8007256:	3401      	adds	r4, #1
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800725e:	4829      	ldr	r0, [pc, #164]	@ (8007304 <_vfiprintf_r+0x220>)
 8007260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007264:	2206      	movs	r2, #6
 8007266:	f7f8 ffb3 	bl	80001d0 <memchr>
 800726a:	2800      	cmp	r0, #0
 800726c:	d03f      	beq.n	80072ee <_vfiprintf_r+0x20a>
 800726e:	4b26      	ldr	r3, [pc, #152]	@ (8007308 <_vfiprintf_r+0x224>)
 8007270:	bb1b      	cbnz	r3, 80072ba <_vfiprintf_r+0x1d6>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	3307      	adds	r3, #7
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	3308      	adds	r3, #8
 800727c:	9303      	str	r3, [sp, #12]
 800727e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007280:	443b      	add	r3, r7
 8007282:	9309      	str	r3, [sp, #36]	@ 0x24
 8007284:	e76a      	b.n	800715c <_vfiprintf_r+0x78>
 8007286:	fb0c 3202 	mla	r2, ip, r2, r3
 800728a:	460c      	mov	r4, r1
 800728c:	2001      	movs	r0, #1
 800728e:	e7a8      	b.n	80071e2 <_vfiprintf_r+0xfe>
 8007290:	2300      	movs	r3, #0
 8007292:	3401      	adds	r4, #1
 8007294:	9305      	str	r3, [sp, #20]
 8007296:	4619      	mov	r1, r3
 8007298:	f04f 0c0a 	mov.w	ip, #10
 800729c:	4620      	mov	r0, r4
 800729e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a2:	3a30      	subs	r2, #48	@ 0x30
 80072a4:	2a09      	cmp	r2, #9
 80072a6:	d903      	bls.n	80072b0 <_vfiprintf_r+0x1cc>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0c6      	beq.n	800723a <_vfiprintf_r+0x156>
 80072ac:	9105      	str	r1, [sp, #20]
 80072ae:	e7c4      	b.n	800723a <_vfiprintf_r+0x156>
 80072b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80072b4:	4604      	mov	r4, r0
 80072b6:	2301      	movs	r3, #1
 80072b8:	e7f0      	b.n	800729c <_vfiprintf_r+0x1b8>
 80072ba:	ab03      	add	r3, sp, #12
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	462a      	mov	r2, r5
 80072c0:	4b12      	ldr	r3, [pc, #72]	@ (800730c <_vfiprintf_r+0x228>)
 80072c2:	a904      	add	r1, sp, #16
 80072c4:	4630      	mov	r0, r6
 80072c6:	f7fd fbcb 	bl	8004a60 <_printf_float>
 80072ca:	4607      	mov	r7, r0
 80072cc:	1c78      	adds	r0, r7, #1
 80072ce:	d1d6      	bne.n	800727e <_vfiprintf_r+0x19a>
 80072d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072d2:	07d9      	lsls	r1, r3, #31
 80072d4:	d405      	bmi.n	80072e2 <_vfiprintf_r+0x1fe>
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	059a      	lsls	r2, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_vfiprintf_r+0x1fe>
 80072dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072de:	f7fe f92b 	bl	8005538 <__retarget_lock_release_recursive>
 80072e2:	89ab      	ldrh	r3, [r5, #12]
 80072e4:	065b      	lsls	r3, r3, #25
 80072e6:	f53f af1f 	bmi.w	8007128 <_vfiprintf_r+0x44>
 80072ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072ec:	e71e      	b.n	800712c <_vfiprintf_r+0x48>
 80072ee:	ab03      	add	r3, sp, #12
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	462a      	mov	r2, r5
 80072f4:	4b05      	ldr	r3, [pc, #20]	@ (800730c <_vfiprintf_r+0x228>)
 80072f6:	a904      	add	r1, sp, #16
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7fd fe49 	bl	8004f90 <_printf_i>
 80072fe:	e7e4      	b.n	80072ca <_vfiprintf_r+0x1e6>
 8007300:	08007e78 	.word	0x08007e78
 8007304:	08007e82 	.word	0x08007e82
 8007308:	08004a61 	.word	0x08004a61
 800730c:	080070c1 	.word	0x080070c1
 8007310:	08007e7e 	.word	0x08007e7e

08007314 <__swbuf_r>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	460e      	mov	r6, r1
 8007318:	4614      	mov	r4, r2
 800731a:	4605      	mov	r5, r0
 800731c:	b118      	cbz	r0, 8007326 <__swbuf_r+0x12>
 800731e:	6a03      	ldr	r3, [r0, #32]
 8007320:	b90b      	cbnz	r3, 8007326 <__swbuf_r+0x12>
 8007322:	f7fd ffe1 	bl	80052e8 <__sinit>
 8007326:	69a3      	ldr	r3, [r4, #24]
 8007328:	60a3      	str	r3, [r4, #8]
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	071a      	lsls	r2, r3, #28
 800732e:	d501      	bpl.n	8007334 <__swbuf_r+0x20>
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	b943      	cbnz	r3, 8007346 <__swbuf_r+0x32>
 8007334:	4621      	mov	r1, r4
 8007336:	4628      	mov	r0, r5
 8007338:	f000 f82a 	bl	8007390 <__swsetup_r>
 800733c:	b118      	cbz	r0, 8007346 <__swbuf_r+0x32>
 800733e:	f04f 37ff 	mov.w	r7, #4294967295
 8007342:	4638      	mov	r0, r7
 8007344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	6922      	ldr	r2, [r4, #16]
 800734a:	1a98      	subs	r0, r3, r2
 800734c:	6963      	ldr	r3, [r4, #20]
 800734e:	b2f6      	uxtb	r6, r6
 8007350:	4283      	cmp	r3, r0
 8007352:	4637      	mov	r7, r6
 8007354:	dc05      	bgt.n	8007362 <__swbuf_r+0x4e>
 8007356:	4621      	mov	r1, r4
 8007358:	4628      	mov	r0, r5
 800735a:	f7ff fda7 	bl	8006eac <_fflush_r>
 800735e:	2800      	cmp	r0, #0
 8007360:	d1ed      	bne.n	800733e <__swbuf_r+0x2a>
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	3b01      	subs	r3, #1
 8007366:	60a3      	str	r3, [r4, #8]
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	6022      	str	r2, [r4, #0]
 800736e:	701e      	strb	r6, [r3, #0]
 8007370:	6962      	ldr	r2, [r4, #20]
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	429a      	cmp	r2, r3
 8007376:	d004      	beq.n	8007382 <__swbuf_r+0x6e>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	07db      	lsls	r3, r3, #31
 800737c:	d5e1      	bpl.n	8007342 <__swbuf_r+0x2e>
 800737e:	2e0a      	cmp	r6, #10
 8007380:	d1df      	bne.n	8007342 <__swbuf_r+0x2e>
 8007382:	4621      	mov	r1, r4
 8007384:	4628      	mov	r0, r5
 8007386:	f7ff fd91 	bl	8006eac <_fflush_r>
 800738a:	2800      	cmp	r0, #0
 800738c:	d0d9      	beq.n	8007342 <__swbuf_r+0x2e>
 800738e:	e7d6      	b.n	800733e <__swbuf_r+0x2a>

08007390 <__swsetup_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4b29      	ldr	r3, [pc, #164]	@ (8007438 <__swsetup_r+0xa8>)
 8007394:	4605      	mov	r5, r0
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	460c      	mov	r4, r1
 800739a:	b118      	cbz	r0, 80073a4 <__swsetup_r+0x14>
 800739c:	6a03      	ldr	r3, [r0, #32]
 800739e:	b90b      	cbnz	r3, 80073a4 <__swsetup_r+0x14>
 80073a0:	f7fd ffa2 	bl	80052e8 <__sinit>
 80073a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a8:	0719      	lsls	r1, r3, #28
 80073aa:	d422      	bmi.n	80073f2 <__swsetup_r+0x62>
 80073ac:	06da      	lsls	r2, r3, #27
 80073ae:	d407      	bmi.n	80073c0 <__swsetup_r+0x30>
 80073b0:	2209      	movs	r2, #9
 80073b2:	602a      	str	r2, [r5, #0]
 80073b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	f04f 30ff 	mov.w	r0, #4294967295
 80073be:	e033      	b.n	8007428 <__swsetup_r+0x98>
 80073c0:	0758      	lsls	r0, r3, #29
 80073c2:	d512      	bpl.n	80073ea <__swsetup_r+0x5a>
 80073c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073c6:	b141      	cbz	r1, 80073da <__swsetup_r+0x4a>
 80073c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073cc:	4299      	cmp	r1, r3
 80073ce:	d002      	beq.n	80073d6 <__swsetup_r+0x46>
 80073d0:	4628      	mov	r0, r5
 80073d2:	f7fe ff0d 	bl	80061f0 <_free_r>
 80073d6:	2300      	movs	r3, #0
 80073d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	2300      	movs	r3, #0
 80073e4:	6063      	str	r3, [r4, #4]
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	f043 0308 	orr.w	r3, r3, #8
 80073f0:	81a3      	strh	r3, [r4, #12]
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	b94b      	cbnz	r3, 800740a <__swsetup_r+0x7a>
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80073fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007400:	d003      	beq.n	800740a <__swsetup_r+0x7a>
 8007402:	4621      	mov	r1, r4
 8007404:	4628      	mov	r0, r5
 8007406:	f000 f883 	bl	8007510 <__smakebuf_r>
 800740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740e:	f013 0201 	ands.w	r2, r3, #1
 8007412:	d00a      	beq.n	800742a <__swsetup_r+0x9a>
 8007414:	2200      	movs	r2, #0
 8007416:	60a2      	str	r2, [r4, #8]
 8007418:	6962      	ldr	r2, [r4, #20]
 800741a:	4252      	negs	r2, r2
 800741c:	61a2      	str	r2, [r4, #24]
 800741e:	6922      	ldr	r2, [r4, #16]
 8007420:	b942      	cbnz	r2, 8007434 <__swsetup_r+0xa4>
 8007422:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007426:	d1c5      	bne.n	80073b4 <__swsetup_r+0x24>
 8007428:	bd38      	pop	{r3, r4, r5, pc}
 800742a:	0799      	lsls	r1, r3, #30
 800742c:	bf58      	it	pl
 800742e:	6962      	ldrpl	r2, [r4, #20]
 8007430:	60a2      	str	r2, [r4, #8]
 8007432:	e7f4      	b.n	800741e <__swsetup_r+0x8e>
 8007434:	2000      	movs	r0, #0
 8007436:	e7f7      	b.n	8007428 <__swsetup_r+0x98>
 8007438:	20000018 	.word	0x20000018

0800743c <_raise_r>:
 800743c:	291f      	cmp	r1, #31
 800743e:	b538      	push	{r3, r4, r5, lr}
 8007440:	4605      	mov	r5, r0
 8007442:	460c      	mov	r4, r1
 8007444:	d904      	bls.n	8007450 <_raise_r+0x14>
 8007446:	2316      	movs	r3, #22
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	f04f 30ff 	mov.w	r0, #4294967295
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007452:	b112      	cbz	r2, 800745a <_raise_r+0x1e>
 8007454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007458:	b94b      	cbnz	r3, 800746e <_raise_r+0x32>
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f830 	bl	80074c0 <_getpid_r>
 8007460:	4622      	mov	r2, r4
 8007462:	4601      	mov	r1, r0
 8007464:	4628      	mov	r0, r5
 8007466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800746a:	f000 b817 	b.w	800749c <_kill_r>
 800746e:	2b01      	cmp	r3, #1
 8007470:	d00a      	beq.n	8007488 <_raise_r+0x4c>
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	d103      	bne.n	800747e <_raise_r+0x42>
 8007476:	2316      	movs	r3, #22
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	2001      	movs	r0, #1
 800747c:	e7e7      	b.n	800744e <_raise_r+0x12>
 800747e:	2100      	movs	r1, #0
 8007480:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007484:	4620      	mov	r0, r4
 8007486:	4798      	blx	r3
 8007488:	2000      	movs	r0, #0
 800748a:	e7e0      	b.n	800744e <_raise_r+0x12>

0800748c <raise>:
 800748c:	4b02      	ldr	r3, [pc, #8]	@ (8007498 <raise+0xc>)
 800748e:	4601      	mov	r1, r0
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	f7ff bfd3 	b.w	800743c <_raise_r>
 8007496:	bf00      	nop
 8007498:	20000018 	.word	0x20000018

0800749c <_kill_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d07      	ldr	r5, [pc, #28]	@ (80074bc <_kill_r+0x20>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	602b      	str	r3, [r5, #0]
 80074aa:	f7fa faf1 	bl	8001a90 <_kill>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d102      	bne.n	80074b8 <_kill_r+0x1c>
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	b103      	cbz	r3, 80074b8 <_kill_r+0x1c>
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	bd38      	pop	{r3, r4, r5, pc}
 80074ba:	bf00      	nop
 80074bc:	20000864 	.word	0x20000864

080074c0 <_getpid_r>:
 80074c0:	f7fa bade 	b.w	8001a80 <_getpid>

080074c4 <__swhatbuf_r>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	460c      	mov	r4, r1
 80074c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074cc:	2900      	cmp	r1, #0
 80074ce:	b096      	sub	sp, #88	@ 0x58
 80074d0:	4615      	mov	r5, r2
 80074d2:	461e      	mov	r6, r3
 80074d4:	da0d      	bge.n	80074f2 <__swhatbuf_r+0x2e>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074dc:	f04f 0100 	mov.w	r1, #0
 80074e0:	bf14      	ite	ne
 80074e2:	2340      	movne	r3, #64	@ 0x40
 80074e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074e8:	2000      	movs	r0, #0
 80074ea:	6031      	str	r1, [r6, #0]
 80074ec:	602b      	str	r3, [r5, #0]
 80074ee:	b016      	add	sp, #88	@ 0x58
 80074f0:	bd70      	pop	{r4, r5, r6, pc}
 80074f2:	466a      	mov	r2, sp
 80074f4:	f000 f848 	bl	8007588 <_fstat_r>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	dbec      	blt.n	80074d6 <__swhatbuf_r+0x12>
 80074fc:	9901      	ldr	r1, [sp, #4]
 80074fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007502:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007506:	4259      	negs	r1, r3
 8007508:	4159      	adcs	r1, r3
 800750a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800750e:	e7eb      	b.n	80074e8 <__swhatbuf_r+0x24>

08007510 <__smakebuf_r>:
 8007510:	898b      	ldrh	r3, [r1, #12]
 8007512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007514:	079d      	lsls	r5, r3, #30
 8007516:	4606      	mov	r6, r0
 8007518:	460c      	mov	r4, r1
 800751a:	d507      	bpl.n	800752c <__smakebuf_r+0x1c>
 800751c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	6123      	str	r3, [r4, #16]
 8007524:	2301      	movs	r3, #1
 8007526:	6163      	str	r3, [r4, #20]
 8007528:	b003      	add	sp, #12
 800752a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800752c:	ab01      	add	r3, sp, #4
 800752e:	466a      	mov	r2, sp
 8007530:	f7ff ffc8 	bl	80074c4 <__swhatbuf_r>
 8007534:	9f00      	ldr	r7, [sp, #0]
 8007536:	4605      	mov	r5, r0
 8007538:	4639      	mov	r1, r7
 800753a:	4630      	mov	r0, r6
 800753c:	f7fe fecc 	bl	80062d8 <_malloc_r>
 8007540:	b948      	cbnz	r0, 8007556 <__smakebuf_r+0x46>
 8007542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007546:	059a      	lsls	r2, r3, #22
 8007548:	d4ee      	bmi.n	8007528 <__smakebuf_r+0x18>
 800754a:	f023 0303 	bic.w	r3, r3, #3
 800754e:	f043 0302 	orr.w	r3, r3, #2
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	e7e2      	b.n	800751c <__smakebuf_r+0xc>
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	6020      	str	r0, [r4, #0]
 800755a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	9b01      	ldr	r3, [sp, #4]
 8007562:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007566:	b15b      	cbz	r3, 8007580 <__smakebuf_r+0x70>
 8007568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800756c:	4630      	mov	r0, r6
 800756e:	f000 f81d 	bl	80075ac <_isatty_r>
 8007572:	b128      	cbz	r0, 8007580 <__smakebuf_r+0x70>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f023 0303 	bic.w	r3, r3, #3
 800757a:	f043 0301 	orr.w	r3, r3, #1
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	431d      	orrs	r5, r3
 8007584:	81a5      	strh	r5, [r4, #12]
 8007586:	e7cf      	b.n	8007528 <__smakebuf_r+0x18>

08007588 <_fstat_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d07      	ldr	r5, [pc, #28]	@ (80075a8 <_fstat_r+0x20>)
 800758c:	2300      	movs	r3, #0
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	4611      	mov	r1, r2
 8007594:	602b      	str	r3, [r5, #0]
 8007596:	f7fa fadb 	bl	8001b50 <_fstat>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	d102      	bne.n	80075a4 <_fstat_r+0x1c>
 800759e:	682b      	ldr	r3, [r5, #0]
 80075a0:	b103      	cbz	r3, 80075a4 <_fstat_r+0x1c>
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	bd38      	pop	{r3, r4, r5, pc}
 80075a6:	bf00      	nop
 80075a8:	20000864 	.word	0x20000864

080075ac <_isatty_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d06      	ldr	r5, [pc, #24]	@ (80075c8 <_isatty_r+0x1c>)
 80075b0:	2300      	movs	r3, #0
 80075b2:	4604      	mov	r4, r0
 80075b4:	4608      	mov	r0, r1
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	f7fa fada 	bl	8001b70 <_isatty>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_isatty_r+0x1a>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_isatty_r+0x1a>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	20000864 	.word	0x20000864

080075cc <_init>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	bf00      	nop
 80075d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d2:	bc08      	pop	{r3}
 80075d4:	469e      	mov	lr, r3
 80075d6:	4770      	bx	lr

080075d8 <_fini>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	bf00      	nop
 80075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075de:	bc08      	pop	{r3}
 80075e0:	469e      	mov	lr, r3
 80075e2:	4770      	bx	lr
