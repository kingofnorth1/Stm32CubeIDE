
F407_FreeRTOS_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002ed0  08002ed0  00003ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f44  08002f44  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002f44  08002f44  00003f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f4c  08002f4c  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f4c  08002f4c  00003f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f50  08002f50  00003f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002f54  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004060  2**0
                  CONTENTS
 10 .bss          00004400  20000060  20000060  00004060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004460  20004460  00004060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009953  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f74  00000000  00000000  0000d9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0000f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000698  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021207  00000000  00000000  000108d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b153  00000000  00000000  00031adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8342  00000000  00000000  0003cc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00104f74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024dc  00000000  00000000  00104fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00107494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002eb8 	.word	0x08002eb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002eb8 	.word	0x08002eb8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000328 	.word	0x20000328
 80004f0:	200003c8 	.word	0x200003c8

080004f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b092      	sub	sp, #72	@ 0x48
 80004f8:	af04      	add	r7, sp, #16
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <MX_FREERTOS_Init+0x74>)
 80004fc:	f107 041c 	add.w	r4, r7, #28
 8000500:	461d      	mov	r5, r3
 8000502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000506:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f001 f968 	bl	80017ea <osThreadCreate>
 800051a:	4603      	mov	r3, r0
 800051c:	4a13      	ldr	r2, [pc, #76]	@ (800056c <MX_FREERTOS_Init+0x78>)
 800051e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000520:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <MX_FREERTOS_Init+0x7c>)
 8000522:	463c      	mov	r4, r7
 8000524:	461d      	mov	r5, r3
 8000526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000532:	463b      	mov	r3, r7
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f001 f957 	bl	80017ea <osThreadCreate>
 800053c:	4603      	mov	r3, r0
 800053e:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <MX_FREERTOS_Init+0x80>)
 8000540:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  Task04_Handler =
		  xTaskCreateStatic(
 8000542:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <MX_FREERTOS_Init+0x84>)
 8000544:	9302      	str	r3, [sp, #8]
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <MX_FREERTOS_Init+0x88>)
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2280      	movs	r2, #128	@ 0x80
 8000552:	490b      	ldr	r1, [pc, #44]	@ (8000580 <MX_FREERTOS_Init+0x8c>)
 8000554:	480b      	ldr	r0, [pc, #44]	@ (8000584 <MX_FREERTOS_Init+0x90>)
 8000556:	f001 fa5c 	bl	8001a12 <xTaskCreateStatic>
 800055a:	4603      	mov	r3, r0
  Task04_Handler =
 800055c:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <MX_FREERTOS_Init+0x94>)
 800055e:	6013      	str	r3, [r2, #0]
				  &Task04TCB
				  );
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000560:	bf00      	nop
 8000562:	3738      	adds	r7, #56	@ 0x38
 8000564:	46bd      	mov	sp, r7
 8000566:	bdb0      	pop	{r4, r5, r7, pc}
 8000568:	08002ee8 	.word	0x08002ee8
 800056c:	20000320 	.word	0x20000320
 8000570:	08002f10 	.word	0x08002f10
 8000574:	20000324 	.word	0x20000324
 8000578:	2000007c 	.word	0x2000007c
 800057c:	2000011c 	.word	0x2000011c
 8000580:	08002ed0 	.word	0x08002ed0
 8000584:	080005d5 	.word	0x080005d5
 8000588:	2000031c 	.word	0x2000031c

0800058c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800059a:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <StartDefaultTask+0x34>)
 800059c:	f000 fc88 	bl	8000eb0 <HAL_GPIO_WritePin>
	  osDelay(500);
 80005a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a4:	f001 f96d 	bl	8001882 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005ae:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <StartDefaultTask+0x34>)
 80005b0:	f000 fc7e 	bl	8000eb0 <HAL_GPIO_WritePin>
	  osDelay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005b8:	f001 f963 	bl	8001882 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80005bc:	bf00      	nop
 80005be:	e7e9      	b.n	8000594 <StartDefaultTask+0x8>
 80005c0:	40020400 	.word	0x40020400

080005c4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f001 f958 	bl	8001882 <osDelay>
 80005d2:	e7fb      	b.n	80005cc <StartTask02+0x8>

080005d4 <Tesk04>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Tesk04(void const * argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005e2:	4809      	ldr	r0, [pc, #36]	@ (8000608 <Tesk04+0x34>)
 80005e4:	f000 fc64 	bl	8000eb0 <HAL_GPIO_WritePin>
		osDelay(500);
 80005e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005ec:	f001 f949 	bl	8001882 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005f6:	4804      	ldr	r0, [pc, #16]	@ (8000608 <Tesk04+0x34>)
 80005f8:	f000 fc5a 	bl	8000eb0 <HAL_GPIO_WritePin>
		osDelay(500);
 80005fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000600:	f001 f93f 	bl	8001882 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000604:	bf00      	nop
 8000606:	e7e9      	b.n	80005dc <Tesk04+0x8>
 8000608:	40020400 	.word	0x40020400

0800060c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a1f      	ldr	r2, [pc, #124]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a18      	ldr	r2, [pc, #96]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000660:	4812      	ldr	r0, [pc, #72]	@ (80006ac <MX_GPIO_Init+0xa0>)
 8000662:	f000 fc25 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000666:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	480b      	ldr	r0, [pc, #44]	@ (80006ac <MX_GPIO_Init+0xa0>)
 8000680:	f000 fa7a 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000684:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068e:	2301      	movs	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_GPIO_Init+0xa0>)
 800069a:	f000 fa6d 	bl	8000b78 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020400 	.word	0x40020400

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 f908 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f808 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f7ff ffa6 	bl	800060c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80006c0:	f7ff ff18 	bl	80004f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006c4:	f001 f88a 	bl	80017dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <main+0x18>

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	@ 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fb12 	bl	8002d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <SystemClock_Config+0xc8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a26      	ldr	r2, [pc, #152]	@ (8000794 <SystemClock_Config+0xc8>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <SystemClock_Config+0xc8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <SystemClock_Config+0xcc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a20      	ldr	r2, [pc, #128]	@ (8000798 <SystemClock_Config+0xcc>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <SystemClock_Config+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000740:	2348      	movs	r3, #72	@ 0x48
 8000742:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fbc7 	bl	8000ee4 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800075c:	f000 f81e 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2102      	movs	r1, #2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fe29 	bl	80013d4 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000788:	f000 f808 	bl	800079c <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	@ 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_MspInit+0x54>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b6:	4a11      	ldr	r2, [pc, #68]	@ (80007fc <HAL_MspInit+0x54>)
 80007b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <HAL_MspInit+0x54>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <HAL_MspInit+0x54>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <HAL_MspInit+0x54>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_MspInit+0x54>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	210f      	movs	r1, #15
 80007ea:	f06f 0001 	mvn.w	r0, #1
 80007ee:	f000 f99a 	bl	8000b26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <MemManage_Handler+0x4>

08000818 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <UsageFault_Handler+0x4>

08000828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f897 	bl	800096c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800083e:	f001 fddd 	bl	80023fc <xTaskGetSchedulerState>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d001      	beq.n	800084c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000848:	f002 f81e 	bl	8002888 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000878:	f7ff ffea 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	@ (80008b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	@ (80008c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f002 fa8d 	bl	8002dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a6:	f7ff ff03 	bl	80006b0 <main>
  bx  lr    
 80008aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008b8:	08002f54 	.word	0x08002f54
  ldr r2, =_sbss
 80008bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008c0:	20004460 	.word	0x20004460

080008c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <HAL_Init+0x40>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_Init+0x40>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <HAL_Init+0x40>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f90d 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff ff54 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023c00 	.word	0x40023c00

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f917 	bl	8000b5e <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f8ed 	bl	8000b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	200005c8 	.word	0x200005c8

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200005c8 	.word	0x200005c8

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	@ (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	@ 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	@ 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff8e 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff47 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff5c 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff8e 	bl	8000a64 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5d 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffb0 	bl	8000acc <SysTick_Config>
 8000b6c:	4603      	mov	r3, r0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	@ 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	e16b      	b.n	8000e6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b94:	2201      	movs	r2, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	f040 815a 	bne.w	8000e66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d005      	beq.n	8000bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d130      	bne.n	8000c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4013      	ands	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c00:	2201      	movs	r2, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	091b      	lsrs	r3, r3, #4
 8000c16:	f003 0201 	and.w	r2, r3, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d017      	beq.n	8000c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d123      	bne.n	8000cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	08da      	lsrs	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	69b9      	ldr	r1, [r7, #24]
 8000cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0203 	and.w	r2, r3, #3
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 80b4 	beq.w	8000e66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b60      	ldr	r3, [pc, #384]	@ (8000e84 <HAL_GPIO_Init+0x30c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a5f      	ldr	r2, [pc, #380]	@ (8000e84 <HAL_GPIO_Init+0x30c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e84 <HAL_GPIO_Init+0x30c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8000e88 <HAL_GPIO_Init+0x310>)
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a52      	ldr	r2, [pc, #328]	@ (8000e8c <HAL_GPIO_Init+0x314>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d02b      	beq.n	8000d9e <HAL_GPIO_Init+0x226>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a51      	ldr	r2, [pc, #324]	@ (8000e90 <HAL_GPIO_Init+0x318>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d025      	beq.n	8000d9a <HAL_GPIO_Init+0x222>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a50      	ldr	r2, [pc, #320]	@ (8000e94 <HAL_GPIO_Init+0x31c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d01f      	beq.n	8000d96 <HAL_GPIO_Init+0x21e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4f      	ldr	r2, [pc, #316]	@ (8000e98 <HAL_GPIO_Init+0x320>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d019      	beq.n	8000d92 <HAL_GPIO_Init+0x21a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4e      	ldr	r2, [pc, #312]	@ (8000e9c <HAL_GPIO_Init+0x324>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0x216>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4d      	ldr	r2, [pc, #308]	@ (8000ea0 <HAL_GPIO_Init+0x328>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00d      	beq.n	8000d8a <HAL_GPIO_Init+0x212>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4c      	ldr	r2, [pc, #304]	@ (8000ea4 <HAL_GPIO_Init+0x32c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <HAL_GPIO_Init+0x20e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4b      	ldr	r2, [pc, #300]	@ (8000ea8 <HAL_GPIO_Init+0x330>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_GPIO_Init+0x20a>
 8000d7e:	2307      	movs	r3, #7
 8000d80:	e00e      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d82:	2308      	movs	r3, #8
 8000d84:	e00c      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d86:	2306      	movs	r3, #6
 8000d88:	e00a      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	e008      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d92:	2303      	movs	r3, #3
 8000d94:	e004      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	69fa      	ldr	r2, [r7, #28]
 8000da2:	f002 0203 	and.w	r2, r2, #3
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4093      	lsls	r3, r2
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db0:	4935      	ldr	r1, [pc, #212]	@ (8000e88 <HAL_GPIO_Init+0x310>)
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000eac <HAL_GPIO_Init+0x334>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de2:	4a32      	ldr	r2, [pc, #200]	@ (8000eac <HAL_GPIO_Init+0x334>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de8:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <HAL_GPIO_Init+0x334>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e0c:	4a27      	ldr	r2, [pc, #156]	@ (8000eac <HAL_GPIO_Init+0x334>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e12:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <HAL_GPIO_Init+0x334>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e36:	4a1d      	ldr	r2, [pc, #116]	@ (8000eac <HAL_GPIO_Init+0x334>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <HAL_GPIO_Init+0x334>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e60:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <HAL_GPIO_Init+0x334>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	f67f ae90 	bls.w	8000b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020c00 	.word	0x40020c00
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	40021c00 	.word	0x40021c00
 8000eac:	40013c00 	.word	0x40013c00

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e267      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d075      	beq.n	8000fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f02:	4b88      	ldr	r3, [pc, #544]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d00c      	beq.n	8000f28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0e:	4b85      	ldr	r3, [pc, #532]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d112      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4b82      	ldr	r3, [pc, #520]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f26:	d10b      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	4b7e      	ldr	r3, [pc, #504]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d05b      	beq.n	8000fec <HAL_RCC_OscConfig+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d157      	bne.n	8000fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e242      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x74>
 8000f4a:	4b76      	ldr	r3, [pc, #472]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a75      	ldr	r2, [pc, #468]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b70      	ldr	r3, [pc, #448]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a6f      	ldr	r2, [pc, #444]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6c      	ldr	r2, [pc, #432]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	4b69      	ldr	r3, [pc, #420]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a68      	ldr	r2, [pc, #416]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b66      	ldr	r3, [pc, #408]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a65      	ldr	r2, [pc, #404]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fcfa 	bl	8000994 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fcf6 	bl	8000994 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	@ 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e207      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xc0>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fce6 	bl	8000994 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fce2 	bl	8000994 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	@ 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1f3      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	4b51      	ldr	r3, [pc, #324]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0xe8>
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d063      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e1c7      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b3b      	ldr	r3, [pc, #236]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4937      	ldr	r1, [pc, #220]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	e03a      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <HAL_RCC_OscConfig+0x244>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105a:	f7ff fc9b 	bl	8000994 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fc97 	bl	8000994 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1a8      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4925      	ldr	r1, [pc, #148]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <HAL_RCC_OscConfig+0x244>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fc7a 	bl	8000994 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc76 	bl	8000994 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e187      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d036      	beq.n	800113c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d016      	beq.n	8001104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_RCC_OscConfig+0x248>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc5a 	bl	8000994 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc56 	bl	8000994 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e167      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 80010f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x200>
 8001102:	e01b      	b.n	800113c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_RCC_OscConfig+0x248>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fc43 	bl	8000994 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	e00e      	b.n	8001130 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fc3f 	bl	8000994 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d907      	bls.n	8001130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e150      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001124:	40023800 	.word	0x40023800
 8001128:	42470000 	.word	0x42470000
 800112c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b88      	ldr	r3, [pc, #544]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ea      	bne.n	8001112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8097 	beq.w	8001278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114e:	4b81      	ldr	r3, [pc, #516]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b7d      	ldr	r3, [pc, #500]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a7c      	ldr	r2, [pc, #496]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b7a      	ldr	r3, [pc, #488]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b77      	ldr	r3, [pc, #476]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d118      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b74      	ldr	r3, [pc, #464]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a73      	ldr	r2, [pc, #460]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fbff 	bl	8000994 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fbfb 	bl	8000994 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e10c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x2ea>
 80011c0:	4b64      	ldr	r3, [pc, #400]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c4:	4a63      	ldr	r2, [pc, #396]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80011cc:	e01c      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x30c>
 80011d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011da:	4a5e      	ldr	r2, [pc, #376]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80011e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011f0:	4b58      	ldr	r3, [pc, #352]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f4:	4a57      	ldr	r2, [pc, #348]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80011fc:	4b55      	ldr	r3, [pc, #340]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001200:	4a54      	ldr	r2, [pc, #336]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff fbc0 	bl	8000994 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001216:	e00a      	b.n	800122e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff fbbc 	bl	8000994 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0cb      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122e:	4b49      	ldr	r3, [pc, #292]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0ee      	beq.n	8001218 <HAL_RCC_OscConfig+0x334>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fbaa 	bl	8000994 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001242:	e00a      	b.n	800125a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff fba6 	bl	8000994 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e0b5      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125a:	4b3e      	ldr	r3, [pc, #248]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ee      	bne.n	8001244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126c:	4b39      	ldr	r3, [pc, #228]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a38      	ldr	r2, [pc, #224]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a1 	beq.w	80013c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d05c      	beq.n	8001348 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d141      	bne.n	800131a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b31      	ldr	r3, [pc, #196]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb7a 	bl	8000994 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb76 	bl	8000994 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e087      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	3b01      	subs	r3, #1
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	491b      	ldr	r1, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb4f 	bl	8000994 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fb4b 	bl	8000994 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e05c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x416>
 8001318:	e054      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb38 	bl	8000994 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fb34 	bl	8000994 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e045      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x444>
 8001346:	e03d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e038      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000
 800135c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_RCC_OscConfig+0x4ec>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d028      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d121      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d11a      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001390:	4013      	ands	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001398:	4293      	cmp	r3, r2
 800139a:	d111      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d107      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cc      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b68      	ldr	r3, [pc, #416]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d90c      	bls.n	8001410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b65      	ldr	r3, [pc, #404]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a58      	ldr	r2, [pc, #352]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b3f      	ldr	r3, [pc, #252]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e067      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b2:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4934      	ldr	r1, [pc, #208]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fa66 	bl	8000994 <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff fa62 	bl	8000994 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 020c 	and.w	r2, r3, #12
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1eb      	bne.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b22      	ldr	r3, [pc, #136]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	@ (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_RCC_ClockConfig+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f9c6 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00
 8001590:	40023800 	.word	0x40023800
 8001594:	08002f34 	.word	0x08002f34
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b094      	sub	sp, #80	@ 0x50
 80015a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80015ac:	2300      	movs	r3, #0
 80015ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015b0:	2300      	movs	r3, #0
 80015b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b8:	4b79      	ldr	r3, [pc, #484]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d00d      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x40>
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	f200 80e1 	bhi.w	800178c <HAL_RCC_GetSysClockFreq+0x1ec>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x34>
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x3a>
 80015d2:	e0db      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b73      	ldr	r3, [pc, #460]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80015d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80015d8:	e0db      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015da:	4b73      	ldr	r3, [pc, #460]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80015dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80015de:	e0d8      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e0:	4b6f      	ldr	r3, [pc, #444]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ea:	4b6d      	ldr	r3, [pc, #436]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d063      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	4b6a      	ldr	r3, [pc, #424]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	099b      	lsrs	r3, r3, #6
 80015fc:	2200      	movs	r2, #0
 80015fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001600:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001608:	633b      	str	r3, [r7, #48]	@ 0x30
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	@ 0x34
 800160e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001612:	4622      	mov	r2, r4
 8001614:	462b      	mov	r3, r5
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	0159      	lsls	r1, r3, #5
 8001620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001624:	0150      	lsls	r0, r2, #5
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4621      	mov	r1, r4
 800162c:	1a51      	subs	r1, r2, r1
 800162e:	6139      	str	r1, [r7, #16]
 8001630:	4629      	mov	r1, r5
 8001632:	eb63 0301 	sbc.w	r3, r3, r1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001644:	4659      	mov	r1, fp
 8001646:	018b      	lsls	r3, r1, #6
 8001648:	4651      	mov	r1, sl
 800164a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800164e:	4651      	mov	r1, sl
 8001650:	018a      	lsls	r2, r1, #6
 8001652:	4651      	mov	r1, sl
 8001654:	ebb2 0801 	subs.w	r8, r2, r1
 8001658:	4659      	mov	r1, fp
 800165a:	eb63 0901 	sbc.w	r9, r3, r1
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800166a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800166e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001672:	4690      	mov	r8, r2
 8001674:	4699      	mov	r9, r3
 8001676:	4623      	mov	r3, r4
 8001678:	eb18 0303 	adds.w	r3, r8, r3
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	462b      	mov	r3, r5
 8001680:	eb49 0303 	adc.w	r3, r9, r3
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001692:	4629      	mov	r1, r5
 8001694:	024b      	lsls	r3, r1, #9
 8001696:	4621      	mov	r1, r4
 8001698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800169c:	4621      	mov	r1, r4
 800169e:	024a      	lsls	r2, r1, #9
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016a6:	2200      	movs	r2, #0
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016b0:	f7fe fd8e 	bl	80001d0 <__aeabi_uldivmod>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4613      	mov	r3, r2
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016bc:	e058      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016be:	4b38      	ldr	r3, [pc, #224]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	2200      	movs	r2, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	4611      	mov	r1, r2
 80016ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016d8:	4642      	mov	r2, r8
 80016da:	464b      	mov	r3, r9
 80016dc:	f04f 0000 	mov.w	r0, #0
 80016e0:	f04f 0100 	mov.w	r1, #0
 80016e4:	0159      	lsls	r1, r3, #5
 80016e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ea:	0150      	lsls	r0, r2, #5
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4641      	mov	r1, r8
 80016f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80016f6:	4649      	mov	r1, r9
 80016f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800170c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001710:	ebb2 040a 	subs.w	r4, r2, sl
 8001714:	eb63 050b 	sbc.w	r5, r3, fp
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	00eb      	lsls	r3, r5, #3
 8001722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001726:	00e2      	lsls	r2, r4, #3
 8001728:	4614      	mov	r4, r2
 800172a:	461d      	mov	r5, r3
 800172c:	4643      	mov	r3, r8
 800172e:	18e3      	adds	r3, r4, r3
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	464b      	mov	r3, r9
 8001734:	eb45 0303 	adc.w	r3, r5, r3
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001746:	4629      	mov	r1, r5
 8001748:	028b      	lsls	r3, r1, #10
 800174a:	4621      	mov	r1, r4
 800174c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001750:	4621      	mov	r1, r4
 8001752:	028a      	lsls	r2, r1, #10
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800175a:	2200      	movs	r2, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	61fa      	str	r2, [r7, #28]
 8001760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001764:	f7fe fd34 	bl	80001d0 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	3301      	adds	r3, #1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800178a:	e002      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800178e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001794:	4618      	mov	r0, r3
 8001796:	3750      	adds	r7, #80	@ 0x50
 8001798:	46bd      	mov	sp, r7
 800179a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	00f42400 	.word	0x00f42400
 80017a8:	007a1200 	.word	0x007a1200

080017ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80017ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017be:	2b84      	cmp	r3, #132	@ 0x84
 80017c0:	d005      	beq.n	80017ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80017c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4413      	add	r3, r2
 80017ca:	3303      	adds	r3, #3
 80017cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80017e0:	f000 fafc 	bl	8001ddc <vTaskStartScheduler>
  
  return osOK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}

080017ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80017ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ec:	b089      	sub	sp, #36	@ 0x24
 80017ee:	af04      	add	r7, sp, #16
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <osThreadCreate+0x54>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01c      	beq.n	800183e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685c      	ldr	r4, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691e      	ldr	r6, [r3, #16]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ffc8 	bl	80017ac <makeFreeRtosPriority>
 800181c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001826:	9202      	str	r2, [sp, #8]
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	9100      	str	r1, [sp, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	4632      	mov	r2, r6
 8001830:	4629      	mov	r1, r5
 8001832:	4620      	mov	r0, r4
 8001834:	f000 f8ed 	bl	8001a12 <xTaskCreateStatic>
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e01c      	b.n	8001878 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685c      	ldr	r4, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800184a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ffaa 	bl	80017ac <makeFreeRtosPriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	9200      	str	r2, [sp, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	4632      	mov	r2, r6
 8001866:	4629      	mov	r1, r5
 8001868:	4620      	mov	r0, r4
 800186a:	f000 f932 	bl	8001ad2 <xTaskCreate>
 800186e:	4603      	mov	r3, r0
 8001870:	2b01      	cmp	r3, #1
 8001872:	d001      	beq.n	8001878 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001874:	2300      	movs	r3, #0
 8001876:	e000      	b.n	800187a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001878:	68fb      	ldr	r3, [r7, #12]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001882 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <osDelay+0x16>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	e000      	b.n	800189a <osDelay+0x18>
 8001898:	2301      	movs	r3, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fa68 	bl	8001d70 <vTaskDelay>
  
  return osOK;
 80018a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f103 0208 	add.w	r2, r3, #8
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f04f 32ff 	mov.w	r2, #4294967295
 80018c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f103 0208 	add.w	r2, r3, #8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f103 0208 	add.w	r2, r3, #8
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001962:	d103      	bne.n	800196c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e00c      	b.n	8001986 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3308      	adds	r3, #8
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e002      	b.n	800197a <vListInsert+0x2e>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	429a      	cmp	r2, r3
 8001984:	d2f6      	bcs.n	8001974 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019be:	b480      	push	{r7}
 80019c0:	b085      	sub	sp, #20
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6892      	ldr	r2, [r2, #8]
 80019d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6852      	ldr	r2, [r2, #4]
 80019de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d103      	bne.n	80019f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b08e      	sub	sp, #56	@ 0x38
 8001a16:	af04      	add	r7, sp, #16
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10b      	bne.n	8001a3e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a2a:	f383 8811 	msr	BASEPRI, r3
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f3bf 8f4f 	dsb	sy
 8001a36:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	e7fd      	b.n	8001a3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10b      	bne.n	8001a5c <xTaskCreateStatic+0x4a>
	__asm volatile
 8001a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a48:	f383 8811 	msr	BASEPRI, r3
 8001a4c:	f3bf 8f6f 	isb	sy
 8001a50:	f3bf 8f4f 	dsb	sy
 8001a54:	61fb      	str	r3, [r7, #28]
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001a5c:	23a0      	movs	r3, #160	@ 0xa0
 8001a5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a64:	d00b      	beq.n	8001a7e <xTaskCreateStatic+0x6c>
	__asm volatile
 8001a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a6a:	f383 8811 	msr	BASEPRI, r3
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	f3bf 8f4f 	dsb	sy
 8001a76:	61bb      	str	r3, [r7, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	e7fd      	b.n	8001a7a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001a7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01e      	beq.n	8001ac4 <xTaskCreateStatic+0xb2>
 8001a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01b      	beq.n	8001ac4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9303      	str	r3, [sp, #12]
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	9302      	str	r3, [sp, #8]
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f850 	bl	8001b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001abc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001abe:	f000 f8ed 	bl	8001c9c <prvAddNewTaskToReadyList>
 8001ac2:	e001      	b.n	8001ac8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001ac8:	697b      	ldr	r3, [r7, #20]
	}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3728      	adds	r7, #40	@ 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08c      	sub	sp, #48	@ 0x30
 8001ad6:	af04      	add	r7, sp, #16
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 ff1e 	bl	8002928 <pvPortMalloc>
 8001aec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00e      	beq.n	8001b12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001af4:	20a0      	movs	r0, #160	@ 0xa0
 8001af6:	f000 ff17 	bl	8002928 <pvPortMalloc>
 8001afa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b08:	e005      	b.n	8001b16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f000 ffda 	bl	8002ac4 <vPortFree>
 8001b10:	e001      	b.n	8001b16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d017      	beq.n	8001b4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b24:	88fa      	ldrh	r2, [r7, #6]
 8001b26:	2300      	movs	r3, #0
 8001b28:	9303      	str	r3, [sp, #12]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	9302      	str	r3, [sp, #8]
 8001b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f80e 	bl	8001b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b40:	69f8      	ldr	r0, [r7, #28]
 8001b42:	f000 f8ab 	bl	8001c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	e002      	b.n	8001b52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001b52:	69bb      	ldr	r3, [r7, #24]
	}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b74:	3b01      	subs	r3, #1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f023 0307 	bic.w	r3, r3, #7
 8001b82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b92:	f383 8811 	msr	BASEPRI, r3
 8001b96:	f3bf 8f6f 	isb	sy
 8001b9a:	f3bf 8f4f 	dsb	sy
 8001b9e:	617b      	str	r3, [r7, #20]
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	e7fd      	b.n	8001ba2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01f      	beq.n	8001bec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	e012      	b.n	8001bd8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	7819      	ldrb	r1, [r3, #0]
 8001bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3334      	adds	r3, #52	@ 0x34
 8001bc2:	460a      	mov	r2, r1
 8001bc4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	d9e9      	bls.n	8001bb2 <prvInitialiseNewTask+0x56>
 8001bde:	e000      	b.n	8001be2 <prvInitialiseNewTask+0x86>
			{
				break;
 8001be0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bea:	e003      	b.n	8001bf4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d901      	bls.n	8001bfe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c02:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c08:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c12:	3304      	adds	r3, #4
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fe68 	bl	80018ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1c:	3318      	adds	r3, #24
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe63 	bl	80018ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2c:	f1c3 0207 	rsb	r2, r3, #7
 8001c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c4c:	334c      	adds	r3, #76	@ 0x4c
 8001c4e:	224c      	movs	r2, #76	@ 0x4c
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 f856 	bl	8002d04 <memset>
 8001c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c90 <prvInitialiseNewTask+0x134>)
 8001c5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c60:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <prvInitialiseNewTask+0x138>)
 8001c62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c66:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <prvInitialiseNewTask+0x13c>)
 8001c68:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	69b8      	ldr	r0, [r7, #24]
 8001c70:	f000 fc48 	bl	8002504 <pxPortInitialiseStack>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c86:	bf00      	nop
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20004320 	.word	0x20004320
 8001c94:	20004388 	.word	0x20004388
 8001c98:	200043f0 	.word	0x200043f0

08001c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001ca4:	f000 fd60 	bl	8002768 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <prvAddNewTaskToReadyList+0xb8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	4a29      	ldr	r2, [pc, #164]	@ (8001d54 <prvAddNewTaskToReadyList+0xb8>)
 8001cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <prvAddNewTaskToReadyList+0xbc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001cba:	4a27      	ldr	r2, [pc, #156]	@ (8001d58 <prvAddNewTaskToReadyList+0xbc>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <prvAddNewTaskToReadyList+0xb8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d110      	bne.n	8001cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001cc8:	f000 fad4 	bl	8002274 <prvInitialiseTaskLists>
 8001ccc:	e00d      	b.n	8001cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001cce:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <prvAddNewTaskToReadyList+0xc0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001cd6:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <prvAddNewTaskToReadyList+0xbc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d802      	bhi.n	8001cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d58 <prvAddNewTaskToReadyList+0xbc>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <prvAddNewTaskToReadyList+0xc4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d60 <prvAddNewTaskToReadyList+0xc4>)
 8001cf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <prvAddNewTaskToReadyList+0xc8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	4a18      	ldr	r2, [pc, #96]	@ (8001d64 <prvAddNewTaskToReadyList+0xc8>)
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <prvAddNewTaskToReadyList+0xcc>)
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	f7ff fdf1 	bl	8001904 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001d22:	f000 fd53 	bl	80027cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001d26:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <prvAddNewTaskToReadyList+0xc0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00e      	beq.n	8001d4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <prvAddNewTaskToReadyList+0xbc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <prvAddNewTaskToReadyList+0xd0>)
 8001d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200006cc 	.word	0x200006cc
 8001d58:	200005cc 	.word	0x200005cc
 8001d5c:	200006d8 	.word	0x200006d8
 8001d60:	200006e8 	.word	0x200006e8
 8001d64:	200006d4 	.word	0x200006d4
 8001d68:	200005d0 	.word	0x200005d0
 8001d6c:	e000ed04 	.word	0xe000ed04

08001d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d018      	beq.n	8001db4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001d82:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <vTaskDelay+0x64>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <vTaskDelay+0x32>
	__asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	60bb      	str	r3, [r7, #8]
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001da2:	f000 f885 	bl	8001eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001da6:	2100      	movs	r1, #0
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fb45 	bl	8002438 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001dae:	f000 f88d 	bl	8001ecc <xTaskResumeAll>
 8001db2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d107      	bne.n	8001dca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001dba:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <vTaskDelay+0x68>)
 8001dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f3bf 8f4f 	dsb	sy
 8001dc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200006f4 	.word	0x200006f4
 8001dd8:	e000ed04 	.word	0xe000ed04

08001ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	@ 0x28
 8001de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001dea:	463a      	mov	r2, r7
 8001dec:	1d39      	adds	r1, r7, #4
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb64 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	9202      	str	r2, [sp, #8]
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	2300      	movs	r3, #0
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2300      	movs	r3, #0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	4921      	ldr	r1, [pc, #132]	@ (8001e90 <vTaskStartScheduler+0xb4>)
 8001e0c:	4821      	ldr	r0, [pc, #132]	@ (8001e94 <vTaskStartScheduler+0xb8>)
 8001e0e:	f7ff fe00 	bl	8001a12 <xTaskCreateStatic>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a20      	ldr	r2, [pc, #128]	@ (8001e98 <vTaskStartScheduler+0xbc>)
 8001e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001e18:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <vTaskStartScheduler+0xbc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001e20:	2301      	movs	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e001      	b.n	8001e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d11b      	bne.n	8001e68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8001e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e34:	f383 8811 	msr	BASEPRI, r3
 8001e38:	f3bf 8f6f 	isb	sy
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	613b      	str	r3, [r7, #16]
}
 8001e42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001e44:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <vTaskStartScheduler+0xc0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	334c      	adds	r3, #76	@ 0x4c
 8001e4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ea0 <vTaskStartScheduler+0xc4>)
 8001e4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <vTaskStartScheduler+0xc8>)
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001e56:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <vTaskStartScheduler+0xcc>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <vTaskStartScheduler+0xd0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001e62:	f000 fbdd 	bl	8002620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001e66:	e00f      	b.n	8001e88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6e:	d10b      	bne.n	8001e88 <vTaskStartScheduler+0xac>
	__asm volatile
 8001e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e74:	f383 8811 	msr	BASEPRI, r3
 8001e78:	f3bf 8f6f 	isb	sy
 8001e7c:	f3bf 8f4f 	dsb	sy
 8001e80:	60fb      	str	r3, [r7, #12]
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <vTaskStartScheduler+0xa8>
}
 8001e88:	bf00      	nop
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	08002f2c 	.word	0x08002f2c
 8001e94:	08002245 	.word	0x08002245
 8001e98:	200006f0 	.word	0x200006f0
 8001e9c:	200005cc 	.word	0x200005cc
 8001ea0:	20000010 	.word	0x20000010
 8001ea4:	200006ec 	.word	0x200006ec
 8001ea8:	200006d8 	.word	0x200006d8
 8001eac:	200006d0 	.word	0x200006d0

08001eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <vTaskSuspendAll+0x18>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4a03      	ldr	r2, [pc, #12]	@ (8001ec8 <vTaskSuspendAll+0x18>)
 8001ebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	200006f4 	.word	0x200006f4

08001ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001eda:	4b42      	ldr	r3, [pc, #264]	@ (8001fe4 <xTaskResumeAll+0x118>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <xTaskResumeAll+0x2e>
	__asm volatile
 8001ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	603b      	str	r3, [r7, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	e7fd      	b.n	8001ef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001efa:	f000 fc35 	bl	8002768 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001efe:	4b39      	ldr	r3, [pc, #228]	@ (8001fe4 <xTaskResumeAll+0x118>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	4a37      	ldr	r2, [pc, #220]	@ (8001fe4 <xTaskResumeAll+0x118>)
 8001f06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f08:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <xTaskResumeAll+0x118>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d161      	bne.n	8001fd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f10:	4b35      	ldr	r3, [pc, #212]	@ (8001fe8 <xTaskResumeAll+0x11c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d05d      	beq.n	8001fd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f18:	e02e      	b.n	8001f78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f1a:	4b34      	ldr	r3, [pc, #208]	@ (8001fec <xTaskResumeAll+0x120>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3318      	adds	r3, #24
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fd49 	bl	80019be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fd44 	bl	80019be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <xTaskResumeAll+0x124>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff0 <xTaskResumeAll+0x124>)
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4a27      	ldr	r2, [pc, #156]	@ (8001ff4 <xTaskResumeAll+0x128>)
 8001f56:	441a      	add	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	f7ff fcd0 	bl	8001904 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f68:	4b23      	ldr	r3, [pc, #140]	@ (8001ff8 <xTaskResumeAll+0x12c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d302      	bcc.n	8001f78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001f72:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <xTaskResumeAll+0x130>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f78:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <xTaskResumeAll+0x120>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1cc      	bne.n	8001f1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001f86:	f000 fa19 	bl	80023bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <xTaskResumeAll+0x134>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d010      	beq.n	8001fb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001f96:	f000 f837 	bl	8002008 <xTaskIncrementTick>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <xTaskResumeAll+0x130>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f1      	bne.n	8001f96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <xTaskResumeAll+0x134>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <xTaskResumeAll+0x130>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <xTaskResumeAll+0x138>)
 8001fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001fd4:	f000 fbfa 	bl	80027cc <vPortExitCritical>

	return xAlreadyYielded;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200006f4 	.word	0x200006f4
 8001fe8:	200006cc 	.word	0x200006cc
 8001fec:	2000068c 	.word	0x2000068c
 8001ff0:	200006d4 	.word	0x200006d4
 8001ff4:	200005d0 	.word	0x200005d0
 8001ff8:	200005cc 	.word	0x200005cc
 8001ffc:	200006e0 	.word	0x200006e0
 8002000:	200006dc 	.word	0x200006dc
 8002004:	e000ed04 	.word	0xe000ed04

08002008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002012:	4b4f      	ldr	r3, [pc, #316]	@ (8002150 <xTaskIncrementTick+0x148>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 808f 	bne.w	800213a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800201c:	4b4d      	ldr	r3, [pc, #308]	@ (8002154 <xTaskIncrementTick+0x14c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002024:	4a4b      	ldr	r2, [pc, #300]	@ (8002154 <xTaskIncrementTick+0x14c>)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d121      	bne.n	8002074 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002030:	4b49      	ldr	r3, [pc, #292]	@ (8002158 <xTaskIncrementTick+0x150>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <xTaskIncrementTick+0x4a>
	__asm volatile
 800203a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800203e:	f383 8811 	msr	BASEPRI, r3
 8002042:	f3bf 8f6f 	isb	sy
 8002046:	f3bf 8f4f 	dsb	sy
 800204a:	603b      	str	r3, [r7, #0]
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	e7fd      	b.n	800204e <xTaskIncrementTick+0x46>
 8002052:	4b41      	ldr	r3, [pc, #260]	@ (8002158 <xTaskIncrementTick+0x150>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	4b40      	ldr	r3, [pc, #256]	@ (800215c <xTaskIncrementTick+0x154>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a3e      	ldr	r2, [pc, #248]	@ (8002158 <xTaskIncrementTick+0x150>)
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4a3e      	ldr	r2, [pc, #248]	@ (800215c <xTaskIncrementTick+0x154>)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b3e      	ldr	r3, [pc, #248]	@ (8002160 <xTaskIncrementTick+0x158>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	4a3c      	ldr	r2, [pc, #240]	@ (8002160 <xTaskIncrementTick+0x158>)
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	f000 f9a4 	bl	80023bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002074:	4b3b      	ldr	r3, [pc, #236]	@ (8002164 <xTaskIncrementTick+0x15c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	429a      	cmp	r2, r3
 800207c:	d348      	bcc.n	8002110 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800207e:	4b36      	ldr	r3, [pc, #216]	@ (8002158 <xTaskIncrementTick+0x150>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d104      	bne.n	8002092 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <xTaskIncrementTick+0x15c>)
 800208a:	f04f 32ff 	mov.w	r2, #4294967295
 800208e:	601a      	str	r2, [r3, #0]
					break;
 8002090:	e03e      	b.n	8002110 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002092:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <xTaskIncrementTick+0x150>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d203      	bcs.n	80020b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80020aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002164 <xTaskIncrementTick+0x15c>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80020b0:	e02e      	b.n	8002110 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3304      	adds	r3, #4
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fc81 	bl	80019be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	3318      	adds	r3, #24
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fc78 	bl	80019be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	2201      	movs	r2, #1
 80020d4:	409a      	lsls	r2, r3
 80020d6:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <xTaskIncrementTick+0x160>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	4a22      	ldr	r2, [pc, #136]	@ (8002168 <xTaskIncrementTick+0x160>)
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4a1f      	ldr	r2, [pc, #124]	@ (800216c <xTaskIncrementTick+0x164>)
 80020ee:	441a      	add	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3304      	adds	r3, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4610      	mov	r0, r2
 80020f8:	f7ff fc04 	bl	8001904 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <xTaskIncrementTick+0x168>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	429a      	cmp	r2, r3
 8002108:	d3b9      	bcc.n	800207e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800210a:	2301      	movs	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800210e:	e7b6      	b.n	800207e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002110:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <xTaskIncrementTick+0x168>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002116:	4915      	ldr	r1, [pc, #84]	@ (800216c <xTaskIncrementTick+0x164>)
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d901      	bls.n	800212c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002128:	2301      	movs	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <xTaskIncrementTick+0x16c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002134:	2301      	movs	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	e004      	b.n	8002144 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800213a:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <xTaskIncrementTick+0x170>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3301      	adds	r3, #1
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <xTaskIncrementTick+0x170>)
 8002142:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002144:	697b      	ldr	r3, [r7, #20]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200006f4 	.word	0x200006f4
 8002154:	200006d0 	.word	0x200006d0
 8002158:	20000684 	.word	0x20000684
 800215c:	20000688 	.word	0x20000688
 8002160:	200006e4 	.word	0x200006e4
 8002164:	200006ec 	.word	0x200006ec
 8002168:	200006d4 	.word	0x200006d4
 800216c:	200005d0 	.word	0x200005d0
 8002170:	200005cc 	.word	0x200005cc
 8002174:	200006e0 	.word	0x200006e0
 8002178:	200006dc 	.word	0x200006dc

0800217c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002182:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <vTaskSwitchContext+0xb0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800218a:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <vTaskSwitchContext+0xb4>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002190:	e045      	b.n	800221e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002192:	4b27      	ldr	r3, [pc, #156]	@ (8002230 <vTaskSwitchContext+0xb4>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002198:	4b26      	ldr	r3, [pc, #152]	@ (8002234 <vTaskSwitchContext+0xb8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	f1c3 031f 	rsb	r3, r3, #31
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	4922      	ldr	r1, [pc, #136]	@ (8002238 <vTaskSwitchContext+0xbc>)
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10b      	bne.n	80021da <vTaskSwitchContext+0x5e>
	__asm volatile
 80021c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	607b      	str	r3, [r7, #4]
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	e7fd      	b.n	80021d6 <vTaskSwitchContext+0x5a>
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4a14      	ldr	r2, [pc, #80]	@ (8002238 <vTaskSwitchContext+0xbc>)
 80021e6:	4413      	add	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	3308      	adds	r3, #8
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d104      	bne.n	800220a <vTaskSwitchContext+0x8e>
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <vTaskSwitchContext+0xc0>)
 8002212:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002214:	4b09      	ldr	r3, [pc, #36]	@ (800223c <vTaskSwitchContext+0xc0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	334c      	adds	r3, #76	@ 0x4c
 800221a:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <vTaskSwitchContext+0xc4>)
 800221c:	6013      	str	r3, [r2, #0]
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	200006f4 	.word	0x200006f4
 8002230:	200006e0 	.word	0x200006e0
 8002234:	200006d4 	.word	0x200006d4
 8002238:	200005d0 	.word	0x200005d0
 800223c:	200005cc 	.word	0x200005cc
 8002240:	20000010 	.word	0x20000010

08002244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800224c:	f000 f852 	bl	80022f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <prvIdleTask+0x28>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d9f9      	bls.n	800224c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <prvIdleTask+0x2c>)
 800225a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002268:	e7f0      	b.n	800224c <prvIdleTask+0x8>
 800226a:	bf00      	nop
 800226c:	200005d0 	.word	0x200005d0
 8002270:	e000ed04 	.word	0xe000ed04

08002274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	e00c      	b.n	800229a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <prvInitialiseTaskLists+0x60>)
 800228c:	4413      	add	r3, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fb0b 	bl	80018aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3301      	adds	r3, #1
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b06      	cmp	r3, #6
 800229e:	d9ef      	bls.n	8002280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80022a0:	480d      	ldr	r0, [pc, #52]	@ (80022d8 <prvInitialiseTaskLists+0x64>)
 80022a2:	f7ff fb02 	bl	80018aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80022a6:	480d      	ldr	r0, [pc, #52]	@ (80022dc <prvInitialiseTaskLists+0x68>)
 80022a8:	f7ff faff 	bl	80018aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80022ac:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <prvInitialiseTaskLists+0x6c>)
 80022ae:	f7ff fafc 	bl	80018aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80022b2:	480c      	ldr	r0, [pc, #48]	@ (80022e4 <prvInitialiseTaskLists+0x70>)
 80022b4:	f7ff faf9 	bl	80018aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80022b8:	480b      	ldr	r0, [pc, #44]	@ (80022e8 <prvInitialiseTaskLists+0x74>)
 80022ba:	f7ff faf6 	bl	80018aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80022be:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <prvInitialiseTaskLists+0x78>)
 80022c0:	4a05      	ldr	r2, [pc, #20]	@ (80022d8 <prvInitialiseTaskLists+0x64>)
 80022c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <prvInitialiseTaskLists+0x7c>)
 80022c6:	4a05      	ldr	r2, [pc, #20]	@ (80022dc <prvInitialiseTaskLists+0x68>)
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200005d0 	.word	0x200005d0
 80022d8:	2000065c 	.word	0x2000065c
 80022dc:	20000670 	.word	0x20000670
 80022e0:	2000068c 	.word	0x2000068c
 80022e4:	200006a0 	.word	0x200006a0
 80022e8:	200006b8 	.word	0x200006b8
 80022ec:	20000684 	.word	0x20000684
 80022f0:	20000688 	.word	0x20000688

080022f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022fa:	e019      	b.n	8002330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80022fc:	f000 fa34 	bl	8002768 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002300:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <prvCheckTasksWaitingTermination+0x50>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fb56 	bl	80019be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <prvCheckTasksWaitingTermination+0x54>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3b01      	subs	r3, #1
 8002318:	4a0b      	ldr	r2, [pc, #44]	@ (8002348 <prvCheckTasksWaitingTermination+0x54>)
 800231a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800231c:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <prvCheckTasksWaitingTermination+0x58>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3b01      	subs	r3, #1
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <prvCheckTasksWaitingTermination+0x58>)
 8002324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002326:	f000 fa51 	bl	80027cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f810 	bl	8002350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <prvCheckTasksWaitingTermination+0x58>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e1      	bne.n	80022fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200006a0 	.word	0x200006a0
 8002348:	200006cc 	.word	0x200006cc
 800234c:	200006b4 	.word	0x200006b4

08002350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	334c      	adds	r3, #76	@ 0x4c
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fcd9 	bl	8002d14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002368:	2b00      	cmp	r3, #0
 800236a:	d108      	bne.n	800237e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fba7 	bl	8002ac4 <vPortFree>
				vPortFree( pxTCB );
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fba4 	bl	8002ac4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800237c:	e019      	b.n	80023b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002384:	2b01      	cmp	r3, #1
 8002386:	d103      	bne.n	8002390 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fb9b 	bl	8002ac4 <vPortFree>
	}
 800238e:	e010      	b.n	80023b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002396:	2b02      	cmp	r3, #2
 8002398:	d00b      	beq.n	80023b2 <prvDeleteTCB+0x62>
	__asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	60fb      	str	r3, [r7, #12]
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	e7fd      	b.n	80023ae <prvDeleteTCB+0x5e>
	}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023c2:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <prvResetNextTaskUnblockTime+0x38>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d104      	bne.n	80023d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <prvResetNextTaskUnblockTime+0x3c>)
 80023ce:	f04f 32ff 	mov.w	r2, #4294967295
 80023d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80023d4:	e008      	b.n	80023e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023d6:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <prvResetNextTaskUnblockTime+0x38>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <prvResetNextTaskUnblockTime+0x3c>)
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	20000684 	.word	0x20000684
 80023f8:	200006ec 	.word	0x200006ec

080023fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002402:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <xTaskGetSchedulerState+0x34>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800240a:	2301      	movs	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	e008      	b.n	8002422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <xTaskGetSchedulerState+0x38>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002418:	2302      	movs	r3, #2
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	e001      	b.n	8002422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002422:	687b      	ldr	r3, [r7, #4]
	}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	200006d8 	.word	0x200006d8
 8002434:	200006f4 	.word	0x200006f4

08002438 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002442:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002448:	4b28      	ldr	r3, [pc, #160]	@ (80024ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3304      	adds	r3, #4
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fab5 	bl	80019be <uxListRemove>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10b      	bne.n	8002472 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	2201      	movs	r2, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4013      	ands	r3, r2
 800246e:	4a20      	ldr	r2, [pc, #128]	@ (80024f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002470:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d10a      	bne.n	8002490 <prvAddCurrentTaskToDelayedList+0x58>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002480:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3304      	adds	r3, #4
 8002486:	4619      	mov	r1, r3
 8002488:	481a      	ldr	r0, [pc, #104]	@ (80024f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800248a:	f7ff fa3b 	bl	8001904 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800248e:	e026      	b.n	80024de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002498:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d209      	bcs.n	80024bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024a8:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3304      	adds	r3, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7ff fa49 	bl	800194c <vListInsert>
}
 80024ba:	e010      	b.n	80024de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024bc:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3304      	adds	r3, #4
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f7ff fa3f 	bl	800194c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80024ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d202      	bcs.n	80024de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80024d8:	4a09      	ldr	r2, [pc, #36]	@ (8002500 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6013      	str	r3, [r2, #0]
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200006d0 	.word	0x200006d0
 80024ec:	200005cc 	.word	0x200005cc
 80024f0:	200006d4 	.word	0x200006d4
 80024f4:	200006b8 	.word	0x200006b8
 80024f8:	20000688 	.word	0x20000688
 80024fc:	20000684 	.word	0x20000684
 8002500:	200006ec 	.word	0x200006ec

08002504 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3b04      	subs	r3, #4
 8002514:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800251c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3b04      	subs	r3, #4
 8002522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f023 0201 	bic.w	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3b04      	subs	r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002534:	4a0c      	ldr	r2, [pc, #48]	@ (8002568 <pxPortInitialiseStack+0x64>)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3b14      	subs	r3, #20
 800253e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3b04      	subs	r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f06f 0202 	mvn.w	r2, #2
 8002552:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3b20      	subs	r3, #32
 8002558:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	0800256d 	.word	0x0800256d

0800256c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <prvTaskExitError+0x58>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d00b      	beq.n	8002598 <prvTaskExitError+0x2c>
	__asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	60fb      	str	r3, [r7, #12]
}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <prvTaskExitError+0x28>
	__asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	60bb      	str	r3, [r7, #8]
}
 80025aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80025ac:	bf00      	nop
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0fc      	beq.n	80025ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	2000000c 	.word	0x2000000c
	...

080025d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80025d0:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <pxCurrentTCBConst2>)
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	6808      	ldr	r0, [r1, #0]
 80025d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025da:	f380 8809 	msr	PSP, r0
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f380 8811 	msr	BASEPRI, r0
 80025ea:	4770      	bx	lr
 80025ec:	f3af 8000 	nop.w

080025f0 <pxCurrentTCBConst2>:
 80025f0:	200005cc 	.word	0x200005cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop

080025f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80025f8:	4808      	ldr	r0, [pc, #32]	@ (800261c <prvPortStartFirstTask+0x24>)
 80025fa:	6800      	ldr	r0, [r0, #0]
 80025fc:	6800      	ldr	r0, [r0, #0]
 80025fe:	f380 8808 	msr	MSP, r0
 8002602:	f04f 0000 	mov.w	r0, #0
 8002606:	f380 8814 	msr	CONTROL, r0
 800260a:	b662      	cpsie	i
 800260c:	b661      	cpsie	f
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	df00      	svc	0
 8002618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800261a:	bf00      	nop
 800261c:	e000ed08 	.word	0xe000ed08

08002620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002626:	4b47      	ldr	r3, [pc, #284]	@ (8002744 <xPortStartScheduler+0x124>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a47      	ldr	r2, [pc, #284]	@ (8002748 <xPortStartScheduler+0x128>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10b      	bne.n	8002648 <xPortStartScheduler+0x28>
	__asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	613b      	str	r3, [r7, #16]
}
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002648:	4b3e      	ldr	r3, [pc, #248]	@ (8002744 <xPortStartScheduler+0x124>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a3f      	ldr	r2, [pc, #252]	@ (800274c <xPortStartScheduler+0x12c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10b      	bne.n	800266a <xPortStartScheduler+0x4a>
	__asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	60fb      	str	r3, [r7, #12]
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	e7fd      	b.n	8002666 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800266a:	4b39      	ldr	r3, [pc, #228]	@ (8002750 <xPortStartScheduler+0x130>)
 800266c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	22ff      	movs	r2, #255	@ 0xff
 800267a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b31      	ldr	r3, [pc, #196]	@ (8002754 <xPortStartScheduler+0x134>)
 8002690:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002692:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <xPortStartScheduler+0x138>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002698:	e009      	b.n	80026ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800269a:	4b2f      	ldr	r3, [pc, #188]	@ (8002758 <xPortStartScheduler+0x138>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3b01      	subs	r3, #1
 80026a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002758 <xPortStartScheduler+0x138>)
 80026a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	2b80      	cmp	r3, #128	@ 0x80
 80026b8:	d0ef      	beq.n	800269a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026ba:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <xPortStartScheduler+0x138>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d00b      	beq.n	80026de <xPortStartScheduler+0xbe>
	__asm volatile
 80026c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	60bb      	str	r3, [r7, #8]
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	e7fd      	b.n	80026da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026de:	4b1e      	ldr	r3, [pc, #120]	@ (8002758 <xPortStartScheduler+0x138>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002758 <xPortStartScheduler+0x138>)
 80026e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <xPortStartScheduler+0x138>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026f0:	4a19      	ldr	r2, [pc, #100]	@ (8002758 <xPortStartScheduler+0x138>)
 80026f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80026fc:	4b17      	ldr	r3, [pc, #92]	@ (800275c <xPortStartScheduler+0x13c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a16      	ldr	r2, [pc, #88]	@ (800275c <xPortStartScheduler+0x13c>)
 8002702:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002706:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002708:	4b14      	ldr	r3, [pc, #80]	@ (800275c <xPortStartScheduler+0x13c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a13      	ldr	r2, [pc, #76]	@ (800275c <xPortStartScheduler+0x13c>)
 800270e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002712:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002714:	f000 f8da 	bl	80028cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <xPortStartScheduler+0x140>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800271e:	f000 f8f9 	bl	8002914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <xPortStartScheduler+0x144>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a0f      	ldr	r2, [pc, #60]	@ (8002764 <xPortStartScheduler+0x144>)
 8002728:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800272c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800272e:	f7ff ff63 	bl	80025f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002732:	f7ff fd23 	bl	800217c <vTaskSwitchContext>
	prvTaskExitError();
 8002736:	f7ff ff19 	bl	800256c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	e000ed00 	.word	0xe000ed00
 8002748:	410fc271 	.word	0x410fc271
 800274c:	410fc270 	.word	0x410fc270
 8002750:	e000e400 	.word	0xe000e400
 8002754:	200006f8 	.word	0x200006f8
 8002758:	200006fc 	.word	0x200006fc
 800275c:	e000ed20 	.word	0xe000ed20
 8002760:	2000000c 	.word	0x2000000c
 8002764:	e000ef34 	.word	0xe000ef34

08002768 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
	__asm volatile
 800276e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	607b      	str	r3, [r7, #4]
}
 8002780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002782:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <vPortEnterCritical+0x5c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	4a0e      	ldr	r2, [pc, #56]	@ (80027c4 <vPortEnterCritical+0x5c>)
 800278a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800278c:	4b0d      	ldr	r3, [pc, #52]	@ (80027c4 <vPortEnterCritical+0x5c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d110      	bne.n	80027b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002794:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <vPortEnterCritical+0x60>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	603b      	str	r3, [r7, #0]
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	e7fd      	b.n	80027b2 <vPortEnterCritical+0x4a>
	}
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2000000c 	.word	0x2000000c
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <vPortExitCritical+0x50>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10b      	bne.n	80027f2 <vPortExitCritical+0x26>
	__asm volatile
 80027da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	607b      	str	r3, [r7, #4]
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	e7fd      	b.n	80027ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <vPortExitCritical+0x50>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	4a08      	ldr	r2, [pc, #32]	@ (800281c <vPortExitCritical+0x50>)
 80027fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80027fc:	4b07      	ldr	r3, [pc, #28]	@ (800281c <vPortExitCritical+0x50>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d105      	bne.n	8002810 <vPortExitCritical+0x44>
 8002804:	2300      	movs	r3, #0
 8002806:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800280e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	2000000c 	.word	0x2000000c

08002820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002820:	f3ef 8009 	mrs	r0, PSP
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <pxCurrentTCBConst>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f01e 0f10 	tst.w	lr, #16
 8002830:	bf08      	it	eq
 8002832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283a:	6010      	str	r0, [r2, #0]
 800283c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002844:	f380 8811 	msr	BASEPRI, r0
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f7ff fc94 	bl	800217c <vTaskSwitchContext>
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f380 8811 	msr	BASEPRI, r0
 800285c:	bc09      	pop	{r0, r3}
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	6808      	ldr	r0, [r1, #0]
 8002862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002866:	f01e 0f10 	tst.w	lr, #16
 800286a:	bf08      	it	eq
 800286c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002870:	f380 8809 	msr	PSP, r0
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	f3af 8000 	nop.w

08002880 <pxCurrentTCBConst>:
 8002880:	200005cc 	.word	0x200005cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop

08002888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
	__asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	607b      	str	r3, [r7, #4]
}
 80028a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80028a2:	f7ff fbb1 	bl	8002008 <xTaskIncrementTick>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <xPortSysTickHandler+0x40>)
 80028ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	2300      	movs	r3, #0
 80028b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f383 8811 	msr	BASEPRI, r3
}
 80028be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <vPortSetupTimerInterrupt+0x34>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <vPortSetupTimerInterrupt+0x38>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <vPortSetupTimerInterrupt+0x3c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <vPortSetupTimerInterrupt+0x40>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	4a09      	ldr	r2, [pc, #36]	@ (8002910 <vPortSetupTimerInterrupt+0x44>)
 80028ea:	3b01      	subs	r3, #1
 80028ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <vPortSetupTimerInterrupt+0x34>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010
 8002904:	e000e018 	.word	0xe000e018
 8002908:	20000000 	.word	0x20000000
 800290c:	10624dd3 	.word	0x10624dd3
 8002910:	e000e014 	.word	0xe000e014

08002914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002914:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002924 <vPortEnableVFP+0x10>
 8002918:	6801      	ldr	r1, [r0, #0]
 800291a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800291e:	6001      	str	r1, [r0, #0]
 8002920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002922:	bf00      	nop
 8002924:	e000ed88 	.word	0xe000ed88

08002928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002934:	f7ff fabc 	bl	8001eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002938:	4b5c      	ldr	r3, [pc, #368]	@ (8002aac <pvPortMalloc+0x184>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002940:	f000 f924 	bl	8002b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002944:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab0 <pvPortMalloc+0x188>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 8095 	bne.w	8002a7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01e      	beq.n	8002996 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002958:	2208      	movs	r2, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	2b00      	cmp	r3, #0
 8002968:	d015      	beq.n	8002996 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f023 0307 	bic.w	r3, r3, #7
 8002970:	3308      	adds	r3, #8
 8002972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <pvPortMalloc+0x6e>
	__asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	617b      	str	r3, [r7, #20]
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	e7fd      	b.n	8002992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d06f      	beq.n	8002a7c <pvPortMalloc+0x154>
 800299c:	4b45      	ldr	r3, [pc, #276]	@ (8002ab4 <pvPortMalloc+0x18c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d86a      	bhi.n	8002a7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80029a6:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <pvPortMalloc+0x190>)
 80029a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80029aa:	4b43      	ldr	r3, [pc, #268]	@ (8002ab8 <pvPortMalloc+0x190>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029b0:	e004      	b.n	80029bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d903      	bls.n	80029ce <pvPortMalloc+0xa6>
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f1      	bne.n	80029b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80029ce:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <pvPortMalloc+0x184>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d051      	beq.n	8002a7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2208      	movs	r2, #8
 80029de:	4413      	add	r3, r2
 80029e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	2308      	movs	r3, #8
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d920      	bls.n	8002a3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80029fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <pvPortMalloc+0xfc>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	613b      	str	r3, [r7, #16]
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1ad2      	subs	r2, r2, r3
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a36:	69b8      	ldr	r0, [r7, #24]
 8002a38:	f000 f90a 	bl	8002c50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab4 <pvPortMalloc+0x18c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab4 <pvPortMalloc+0x18c>)
 8002a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <pvPortMalloc+0x18c>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <pvPortMalloc+0x194>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d203      	bcs.n	8002a5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a56:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <pvPortMalloc+0x18c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a18      	ldr	r2, [pc, #96]	@ (8002abc <pvPortMalloc+0x194>)
 8002a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <pvPortMalloc+0x188>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002a72:	4b13      	ldr	r3, [pc, #76]	@ (8002ac0 <pvPortMalloc+0x198>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a11      	ldr	r2, [pc, #68]	@ (8002ac0 <pvPortMalloc+0x198>)
 8002a7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a7c:	f7ff fa26 	bl	8001ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <pvPortMalloc+0x17a>
	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	60fb      	str	r3, [r7, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	e7fd      	b.n	8002a9e <pvPortMalloc+0x176>
	return pvReturn;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3728      	adds	r7, #40	@ 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20004308 	.word	0x20004308
 8002ab0:	2000431c 	.word	0x2000431c
 8002ab4:	2000430c 	.word	0x2000430c
 8002ab8:	20004300 	.word	0x20004300
 8002abc:	20004310 	.word	0x20004310
 8002ac0:	20004314 	.word	0x20004314

08002ac4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d04f      	beq.n	8002b76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	425b      	negs	r3, r3
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4413      	add	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <vPortFree+0xbc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10b      	bne.n	8002b0a <vPortFree+0x46>
	__asm volatile
 8002af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	60fb      	str	r3, [r7, #12]
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	e7fd      	b.n	8002b06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <vPortFree+0x66>
	__asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	60bb      	str	r3, [r7, #8]
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	e7fd      	b.n	8002b26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <vPortFree+0xbc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01e      	beq.n	8002b76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d11a      	bne.n	8002b76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <vPortFree+0xbc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b50:	f7ff f9ae 	bl	8001eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <vPortFree+0xc0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <vPortFree+0xc0>)
 8002b60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b62:	6938      	ldr	r0, [r7, #16]
 8002b64:	f000 f874 	bl	8002c50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002b68:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <vPortFree+0xc4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	4a06      	ldr	r2, [pc, #24]	@ (8002b88 <vPortFree+0xc4>)
 8002b70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002b72:	f7ff f9ab 	bl	8001ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	2000431c 	.word	0x2000431c
 8002b84:	2000430c 	.word	0x2000430c
 8002b88:	20004318 	.word	0x20004318

08002b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b92:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002b96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b98:	4b27      	ldr	r3, [pc, #156]	@ (8002c38 <prvHeapInit+0xac>)
 8002b9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3307      	adds	r3, #7
 8002baa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0307 	bic.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <prvHeapInit+0xac>)
 8002bbc:	4413      	add	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <prvHeapInit+0xb0>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002bca:	4b1c      	ldr	r3, [pc, #112]	@ (8002c3c <prvHeapInit+0xb0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002bd8:	2208      	movs	r2, #8
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0307 	bic.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a15      	ldr	r2, [pc, #84]	@ (8002c40 <prvHeapInit+0xb4>)
 8002bec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <prvHeapInit+0xb4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002bf6:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <prvHeapInit+0xb4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	1ad2      	subs	r2, r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <prvHeapInit+0xb4>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <prvHeapInit+0xb8>)
 8002c1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <prvHeapInit+0xbc>)
 8002c22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c24:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <prvHeapInit+0xc0>)
 8002c26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c2a:	601a      	str	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	20000700 	.word	0x20000700
 8002c3c:	20004300 	.word	0x20004300
 8002c40:	20004308 	.word	0x20004308
 8002c44:	20004310 	.word	0x20004310
 8002c48:	2000430c 	.word	0x2000430c
 8002c4c:	2000431c 	.word	0x2000431c

08002c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c58:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <prvInsertBlockIntoFreeList+0xac>)
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e002      	b.n	8002c64 <prvInsertBlockIntoFreeList+0x14>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d8f7      	bhi.n	8002c5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4413      	add	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d108      	bne.n	8002c92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	441a      	add	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	441a      	add	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d118      	bne.n	8002cd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <prvInsertBlockIntoFreeList+0xb0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d00d      	beq.n	8002cce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	441a      	add	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e008      	b.n	8002ce0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cce:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <prvInsertBlockIntoFreeList+0xb0>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e003      	b.n	8002ce0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d002      	beq.n	8002cee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20004300 	.word	0x20004300
 8002d00:	20004308 	.word	0x20004308

08002d04 <memset>:
 8002d04:	4402      	add	r2, r0
 8002d06:	4603      	mov	r3, r0
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <memset+0xa>
 8002d0c:	4770      	bx	lr
 8002d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d12:	e7f9      	b.n	8002d08 <memset+0x4>

08002d14 <_reclaim_reent>:
 8002d14:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <_reclaim_reent+0xa8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4283      	cmp	r3, r0
 8002d1a:	b570      	push	{r4, r5, r6, lr}
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	d04b      	beq.n	8002db8 <_reclaim_reent+0xa4>
 8002d20:	69c3      	ldr	r3, [r0, #28]
 8002d22:	b1ab      	cbz	r3, 8002d50 <_reclaim_reent+0x3c>
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	b16b      	cbz	r3, 8002d44 <_reclaim_reent+0x30>
 8002d28:	2500      	movs	r5, #0
 8002d2a:	69e3      	ldr	r3, [r4, #28]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	5959      	ldr	r1, [r3, r5]
 8002d30:	2900      	cmp	r1, #0
 8002d32:	d13b      	bne.n	8002dac <_reclaim_reent+0x98>
 8002d34:	3504      	adds	r5, #4
 8002d36:	2d80      	cmp	r5, #128	@ 0x80
 8002d38:	d1f7      	bne.n	8002d2a <_reclaim_reent+0x16>
 8002d3a:	69e3      	ldr	r3, [r4, #28]
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	68d9      	ldr	r1, [r3, #12]
 8002d40:	f000 f864 	bl	8002e0c <_free_r>
 8002d44:	69e3      	ldr	r3, [r4, #28]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	b111      	cbz	r1, 8002d50 <_reclaim_reent+0x3c>
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f000 f85e 	bl	8002e0c <_free_r>
 8002d50:	6961      	ldr	r1, [r4, #20]
 8002d52:	b111      	cbz	r1, 8002d5a <_reclaim_reent+0x46>
 8002d54:	4620      	mov	r0, r4
 8002d56:	f000 f859 	bl	8002e0c <_free_r>
 8002d5a:	69e1      	ldr	r1, [r4, #28]
 8002d5c:	b111      	cbz	r1, 8002d64 <_reclaim_reent+0x50>
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f000 f854 	bl	8002e0c <_free_r>
 8002d64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002d66:	b111      	cbz	r1, 8002d6e <_reclaim_reent+0x5a>
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f000 f84f 	bl	8002e0c <_free_r>
 8002d6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d70:	b111      	cbz	r1, 8002d78 <_reclaim_reent+0x64>
 8002d72:	4620      	mov	r0, r4
 8002d74:	f000 f84a 	bl	8002e0c <_free_r>
 8002d78:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002d7a:	b111      	cbz	r1, 8002d82 <_reclaim_reent+0x6e>
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f000 f845 	bl	8002e0c <_free_r>
 8002d82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002d84:	b111      	cbz	r1, 8002d8c <_reclaim_reent+0x78>
 8002d86:	4620      	mov	r0, r4
 8002d88:	f000 f840 	bl	8002e0c <_free_r>
 8002d8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002d8e:	b111      	cbz	r1, 8002d96 <_reclaim_reent+0x82>
 8002d90:	4620      	mov	r0, r4
 8002d92:	f000 f83b 	bl	8002e0c <_free_r>
 8002d96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002d98:	b111      	cbz	r1, 8002da0 <_reclaim_reent+0x8c>
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f000 f836 	bl	8002e0c <_free_r>
 8002da0:	6a23      	ldr	r3, [r4, #32]
 8002da2:	b14b      	cbz	r3, 8002db8 <_reclaim_reent+0xa4>
 8002da4:	4620      	mov	r0, r4
 8002da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002daa:	4718      	bx	r3
 8002dac:	680e      	ldr	r6, [r1, #0]
 8002dae:	4620      	mov	r0, r4
 8002db0:	f000 f82c 	bl	8002e0c <_free_r>
 8002db4:	4631      	mov	r1, r6
 8002db6:	e7bb      	b.n	8002d30 <_reclaim_reent+0x1c>
 8002db8:	bd70      	pop	{r4, r5, r6, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000010 	.word	0x20000010

08002dc0 <__libc_init_array>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8002df8 <__libc_init_array+0x38>)
 8002dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8002dfc <__libc_init_array+0x3c>)
 8002dc6:	1b64      	subs	r4, r4, r5
 8002dc8:	10a4      	asrs	r4, r4, #2
 8002dca:	2600      	movs	r6, #0
 8002dcc:	42a6      	cmp	r6, r4
 8002dce:	d109      	bne.n	8002de4 <__libc_init_array+0x24>
 8002dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8002e00 <__libc_init_array+0x40>)
 8002dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8002e04 <__libc_init_array+0x44>)
 8002dd4:	f000 f870 	bl	8002eb8 <_init>
 8002dd8:	1b64      	subs	r4, r4, r5
 8002dda:	10a4      	asrs	r4, r4, #2
 8002ddc:	2600      	movs	r6, #0
 8002dde:	42a6      	cmp	r6, r4
 8002de0:	d105      	bne.n	8002dee <__libc_init_array+0x2e>
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de8:	4798      	blx	r3
 8002dea:	3601      	adds	r6, #1
 8002dec:	e7ee      	b.n	8002dcc <__libc_init_array+0xc>
 8002dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df2:	4798      	blx	r3
 8002df4:	3601      	adds	r6, #1
 8002df6:	e7f2      	b.n	8002dde <__libc_init_array+0x1e>
 8002df8:	08002f4c 	.word	0x08002f4c
 8002dfc:	08002f4c 	.word	0x08002f4c
 8002e00:	08002f4c 	.word	0x08002f4c
 8002e04:	08002f50 	.word	0x08002f50

08002e08 <__retarget_lock_acquire_recursive>:
 8002e08:	4770      	bx	lr

08002e0a <__retarget_lock_release_recursive>:
 8002e0a:	4770      	bx	lr

08002e0c <_free_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4605      	mov	r5, r0
 8002e10:	2900      	cmp	r1, #0
 8002e12:	d041      	beq.n	8002e98 <_free_r+0x8c>
 8002e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e18:	1f0c      	subs	r4, r1, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bfb8      	it	lt
 8002e1e:	18e4      	addlt	r4, r4, r3
 8002e20:	f000 f83e 	bl	8002ea0 <__malloc_lock>
 8002e24:	4a1d      	ldr	r2, [pc, #116]	@ (8002e9c <_free_r+0x90>)
 8002e26:	6813      	ldr	r3, [r2, #0]
 8002e28:	b933      	cbnz	r3, 8002e38 <_free_r+0x2c>
 8002e2a:	6063      	str	r3, [r4, #4]
 8002e2c:	6014      	str	r4, [r2, #0]
 8002e2e:	4628      	mov	r0, r5
 8002e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e34:	f000 b83a 	b.w	8002eac <__malloc_unlock>
 8002e38:	42a3      	cmp	r3, r4
 8002e3a:	d908      	bls.n	8002e4e <_free_r+0x42>
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	1821      	adds	r1, r4, r0
 8002e40:	428b      	cmp	r3, r1
 8002e42:	bf01      	itttt	eq
 8002e44:	6819      	ldreq	r1, [r3, #0]
 8002e46:	685b      	ldreq	r3, [r3, #4]
 8002e48:	1809      	addeq	r1, r1, r0
 8002e4a:	6021      	streq	r1, [r4, #0]
 8002e4c:	e7ed      	b.n	8002e2a <_free_r+0x1e>
 8002e4e:	461a      	mov	r2, r3
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b10b      	cbz	r3, 8002e58 <_free_r+0x4c>
 8002e54:	42a3      	cmp	r3, r4
 8002e56:	d9fa      	bls.n	8002e4e <_free_r+0x42>
 8002e58:	6811      	ldr	r1, [r2, #0]
 8002e5a:	1850      	adds	r0, r2, r1
 8002e5c:	42a0      	cmp	r0, r4
 8002e5e:	d10b      	bne.n	8002e78 <_free_r+0x6c>
 8002e60:	6820      	ldr	r0, [r4, #0]
 8002e62:	4401      	add	r1, r0
 8002e64:	1850      	adds	r0, r2, r1
 8002e66:	4283      	cmp	r3, r0
 8002e68:	6011      	str	r1, [r2, #0]
 8002e6a:	d1e0      	bne.n	8002e2e <_free_r+0x22>
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	6053      	str	r3, [r2, #4]
 8002e72:	4408      	add	r0, r1
 8002e74:	6010      	str	r0, [r2, #0]
 8002e76:	e7da      	b.n	8002e2e <_free_r+0x22>
 8002e78:	d902      	bls.n	8002e80 <_free_r+0x74>
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	602b      	str	r3, [r5, #0]
 8002e7e:	e7d6      	b.n	8002e2e <_free_r+0x22>
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	1821      	adds	r1, r4, r0
 8002e84:	428b      	cmp	r3, r1
 8002e86:	bf04      	itt	eq
 8002e88:	6819      	ldreq	r1, [r3, #0]
 8002e8a:	685b      	ldreq	r3, [r3, #4]
 8002e8c:	6063      	str	r3, [r4, #4]
 8002e8e:	bf04      	itt	eq
 8002e90:	1809      	addeq	r1, r1, r0
 8002e92:	6021      	streq	r1, [r4, #0]
 8002e94:	6054      	str	r4, [r2, #4]
 8002e96:	e7ca      	b.n	8002e2e <_free_r+0x22>
 8002e98:	bd38      	pop	{r3, r4, r5, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000445c 	.word	0x2000445c

08002ea0 <__malloc_lock>:
 8002ea0:	4801      	ldr	r0, [pc, #4]	@ (8002ea8 <__malloc_lock+0x8>)
 8002ea2:	f7ff bfb1 	b.w	8002e08 <__retarget_lock_acquire_recursive>
 8002ea6:	bf00      	nop
 8002ea8:	20004458 	.word	0x20004458

08002eac <__malloc_unlock>:
 8002eac:	4801      	ldr	r0, [pc, #4]	@ (8002eb4 <__malloc_unlock+0x8>)
 8002eae:	f7ff bfac 	b.w	8002e0a <__retarget_lock_release_recursive>
 8002eb2:	bf00      	nop
 8002eb4:	20004458 	.word	0x20004458

08002eb8 <_init>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr

08002ec4 <_fini>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr
