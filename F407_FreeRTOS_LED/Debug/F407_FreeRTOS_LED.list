
F407_FreeRTOS_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003f58  08003f58  00004f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004008  08004008  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004008  08004008  00005008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004010  08004010  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004010  08004010  00005010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004014  08004014  00005014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004018  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          00004410  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000447c  2000447c  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a18d  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221c  00000000  00000000  00010229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  00012448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000724  00000000  00000000  00012df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226cd  00000000  00000000  0001351c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c150  00000000  00000000  00035be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca7e3  00000000  00000000  00041d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c51c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c60  00000000  00000000  0010c560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0010f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f40 	.word	0x08003f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003f40 	.word	0x08003f40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000334 	.word	0x20000334
 8000590:	200003d4 	.word	0x200003d4

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b092      	sub	sp, #72	@ 0x48
 8000598:	af04      	add	r7, sp, #16
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_FREERTOS_Init+0x74>)
 800059c:	f107 041c 	add.w	r4, r7, #28
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fa1a 	bl	80019ee <osThreadCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a13      	ldr	r2, [pc, #76]	@ (800060c <MX_FREERTOS_Init+0x78>)
 80005be:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80005c0:	4b13      	ldr	r3, [pc, #76]	@ (8000610 <MX_FREERTOS_Init+0x7c>)
 80005c2:	463c      	mov	r4, r7
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005d2:	463b      	mov	r3, r7
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fa09 	bl	80019ee <osThreadCreate>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <MX_FREERTOS_Init+0x80>)
 80005e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  Task04_Handler =
		  xTaskCreateStatic(
 80005e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <MX_FREERTOS_Init+0x84>)
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <MX_FREERTOS_Init+0x88>)
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2301      	movs	r3, #1
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	490b      	ldr	r1, [pc, #44]	@ (8000620 <MX_FREERTOS_Init+0x8c>)
 80005f4:	480b      	ldr	r0, [pc, #44]	@ (8000624 <MX_FREERTOS_Init+0x90>)
 80005f6:	f001 fb0e 	bl	8001c16 <xTaskCreateStatic>
 80005fa:	4603      	mov	r3, r0
  Task04_Handler =
 80005fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000628 <MX_FREERTOS_Init+0x94>)
 80005fe:	6013      	str	r3, [r2, #0]
				  &Task04TCB
				  );
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000600:	bf00      	nop
 8000602:	3738      	adds	r7, #56	@ 0x38
 8000604:	46bd      	mov	sp, r7
 8000606:	bdb0      	pop	{r4, r5, r7, pc}
 8000608:	08003f70 	.word	0x08003f70
 800060c:	2000032c 	.word	0x2000032c
 8000610:	08003f98 	.word	0x08003f98
 8000614:	20000330 	.word	0x20000330
 8000618:	20000088 	.word	0x20000088
 800061c:	20000128 	.word	0x20000128
 8000620:	08003f58 	.word	0x08003f58
 8000624:	08000681 	.word	0x08000681
 8000628:	20000328 	.word	0x20000328

0800062c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <StartDefaultTask+0x3c>)
 800063c:	f000 fd3a 	bl	80010b4 <HAL_GPIO_WritePin>
	  osDelay(500);
 8000640:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000644:	f001 fa1f 	bl	8001a86 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <StartDefaultTask+0x3c>)
 8000650:	f000 fd30 	bl	80010b4 <HAL_GPIO_WritePin>
	  osDelay(500);
 8000654:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000658:	f001 fa15 	bl	8001a86 <osDelay>
	  printf("Test");
 800065c:	4803      	ldr	r0, [pc, #12]	@ (800066c <StartDefaultTask+0x40>)
 800065e:	f002 fdab 	bl	80031b8 <iprintf>
  {
 8000662:	bf00      	nop
 8000664:	e7e6      	b.n	8000634 <StartDefaultTask+0x8>
 8000666:	bf00      	nop
 8000668:	40020400 	.word	0x40020400
 800066c:	08003fb4 	.word	0x08003fb4

08000670 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f001 fa04 	bl	8001a86 <osDelay>
 800067e:	e7fb      	b.n	8000678 <StartTask02+0x8>

08000680 <Tesk04>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Tesk04(void const * argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800068e:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <Tesk04+0x40>)
 8000690:	f000 fd10 	bl	80010b4 <HAL_GPIO_WritePin>
		osDelay(500);
 8000694:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000698:	f001 f9f5 	bl	8001a86 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a2:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <Tesk04+0x40>)
 80006a4:	f000 fd06 	bl	80010b4 <HAL_GPIO_WritePin>
		osDelay(500);
 80006a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ac:	f001 f9eb 	bl	8001a86 <osDelay>
		vTaskSuspend(defaultTaskHandle);
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <Tesk04+0x44>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fc93 	bl	8001fe0 <vTaskSuspend>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80006ba:	bf00      	nop
 80006bc:	e7e4      	b.n	8000688 <Tesk04+0x8>
 80006be:	bf00      	nop
 80006c0:	40020400 	.word	0x40020400
 80006c4:	2000032c 	.word	0x2000032c

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MX_GPIO_Init+0x9c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000764 <MX_GPIO_Init+0x9c>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MX_GPIO_Init+0x9c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <MX_GPIO_Init+0x9c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a18      	ldr	r2, [pc, #96]	@ (8000764 <MX_GPIO_Init+0x9c>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <MX_GPIO_Init+0x9c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_GPIO_Init+0xa0>)
 800071e:	f000 fcc9 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000722:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <MX_GPIO_Init+0xa0>)
 800073c:	f000 fb1e 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000740:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_GPIO_Init+0xa0>)
 8000756:	f000 fb11 	bl	8000d7c <HAL_GPIO_Init>

}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40020400 	.word	0x40020400

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 f9ac 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f808 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f7ff ffa6 	bl	80006c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800077c:	f7ff ff0a 	bl	8000594 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000780:	f001 f92e 	bl	80019e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <main+0x18>

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	@ 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	@ 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fd63 	bl	8003262 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <SystemClock_Config+0xc8>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	4a26      	ldr	r2, [pc, #152]	@ (8000850 <SystemClock_Config+0xc8>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <SystemClock_Config+0xc8>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <SystemClock_Config+0xcc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a20      	ldr	r2, [pc, #128]	@ (8000854 <SystemClock_Config+0xcc>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <SystemClock_Config+0xcc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007fc:	2348      	movs	r3, #72	@ 0x48
 80007fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000804:	2304      	movs	r3, #4
 8000806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fc6b 	bl	80010e8 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000818:	f000 f81e 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2102      	movs	r1, #2
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fecd 	bl	80015d8 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000844:	f000 f808 	bl	8000858 <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3750      	adds	r7, #80	@ 0x50
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	@ 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fa3e 	bl	8000d2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f6:	f000 f93b 	bl	8000b70 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008fa:	f001 ff15 	bl	8002728 <xTaskGetSchedulerState>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d001      	beq.n	8000908 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000904:	f002 f958 	bl	8002bb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	e00a      	b.n	8000934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800091e:	f3af 8000 	nop.w
 8000922:	4601      	mov	r1, r0
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	60ba      	str	r2, [r7, #8]
 800092a:	b2ca      	uxtb	r2, r1
 800092c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbf0      	blt.n	800091e <_read+0x12>
  }

  return len;
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	e009      	b.n	800096c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	60ba      	str	r2, [r7, #8]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	dbf1      	blt.n	8000958 <_write+0x12>
  }
  return len;
 8000974:	687b      	ldr	r3, [r7, #4]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <_close>:

int _close(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a6:	605a      	str	r2, [r3, #4]
  return 0;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <_isatty>:

int _isatty(int file)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f002 fcc8 	bl	80033ac <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20020000 	.word	0x20020000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	200005d4 	.word	0x200005d4
 8000a50:	20004480 	.word	0x20004480

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a7c:	f7ff ffea 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f002 fc87 	bl	80033b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fe5f 	bl	800076c <main>
  bx  lr    
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000abc:	08004018 	.word	0x08004018
  ldr r2, =_sbss
 8000ac0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ac4:	2000447c 	.word	0x2000447c

08000ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>
	...

08000acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <HAL_Init+0x40>)
 8000ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <HAL_Init+0x40>)
 8000ae2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <HAL_Init+0x40>)
 8000aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f90d 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff feb0 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023c00 	.word	0x40023c00

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f917 	bl	8000d62 <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f8ed 	bl	8000d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	@ (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	200005d8 	.word	0x200005d8

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200005d8 	.word	0x200005d8

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	@ (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff8e 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff47 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff5c 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffb0 	bl	8000cd0 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e16b      	b.n	8001070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 815a 	bne.w	800106a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80b4 	beq.w	800106a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b60      	ldr	r3, [pc, #384]	@ (8001088 <HAL_GPIO_Init+0x30c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	4a5f      	ldr	r2, [pc, #380]	@ (8001088 <HAL_GPIO_Init+0x30c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f12:	4b5d      	ldr	r3, [pc, #372]	@ (8001088 <HAL_GPIO_Init+0x30c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800108c <HAL_GPIO_Init+0x310>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a52      	ldr	r2, [pc, #328]	@ (8001090 <HAL_GPIO_Init+0x314>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d02b      	beq.n	8000fa2 <HAL_GPIO_Init+0x226>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a51      	ldr	r2, [pc, #324]	@ (8001094 <HAL_GPIO_Init+0x318>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d025      	beq.n	8000f9e <HAL_GPIO_Init+0x222>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a50      	ldr	r2, [pc, #320]	@ (8001098 <HAL_GPIO_Init+0x31c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d01f      	beq.n	8000f9a <HAL_GPIO_Init+0x21e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800109c <HAL_GPIO_Init+0x320>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d019      	beq.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4e      	ldr	r2, [pc, #312]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0x216>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80010a4 <HAL_GPIO_Init+0x328>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d00d      	beq.n	8000f8e <HAL_GPIO_Init+0x212>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	@ (80010a8 <HAL_GPIO_Init+0x32c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x20e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80010ac <HAL_GPIO_Init+0x330>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_Init+0x20a>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e00e      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f86:	2308      	movs	r3, #8
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	@ (800108c <HAL_GPIO_Init+0x310>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe6:	4a32      	ldr	r2, [pc, #200]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fec:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001010:	4a27      	ldr	r2, [pc, #156]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103a:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001064:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f67f ae90 	bls.w	8000d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40013800 	.word	0x40013800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40021400 	.word	0x40021400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40021c00 	.word	0x40021c00
 80010b0:	40013c00 	.word	0x40013c00

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e267      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d075      	beq.n	80011f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001106:	4b88      	ldr	r3, [pc, #544]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d00c      	beq.n	800112c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001112:	4b85      	ldr	r3, [pc, #532]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d112      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b82      	ldr	r3, [pc, #520]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001126:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b7e      	ldr	r3, [pc, #504]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d05b      	beq.n	80011f0 <HAL_RCC_OscConfig+0x108>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d157      	bne.n	80011f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e242      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x74>
 800114e:	4b76      	ldr	r3, [pc, #472]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a75      	ldr	r2, [pc, #468]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x98>
 8001166:	4b70      	ldr	r3, [pc, #448]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a6f      	ldr	r2, [pc, #444]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b6d      	ldr	r3, [pc, #436]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6c      	ldr	r2, [pc, #432]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 8001180:	4b69      	ldr	r3, [pc, #420]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a68      	ldr	r2, [pc, #416]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b66      	ldr	r3, [pc, #408]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a65      	ldr	r2, [pc, #404]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fcfa 	bl	8000b98 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fcf6 	bl	8000b98 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	@ 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e207      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xc0>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fce6 	bl	8000b98 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fce2 	bl	8000b98 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	@ 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1f3      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	4b51      	ldr	r3, [pc, #324]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0xe8>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d063      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b47      	ldr	r3, [pc, #284]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	2b08      	cmp	r3, #8
 8001214:	d11c      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b44      	ldr	r3, [pc, #272]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	4b41      	ldr	r3, [pc, #260]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1c7      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b3b      	ldr	r3, [pc, #236]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4937      	ldr	r1, [pc, #220]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	e03a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b34      	ldr	r3, [pc, #208]	@ (800132c <HAL_RCC_OscConfig+0x244>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fc9b 	bl	8000b98 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fc97 	bl	8000b98 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1a8      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	4b2b      	ldr	r3, [pc, #172]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4925      	ldr	r1, [pc, #148]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e015      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4b24      	ldr	r3, [pc, #144]	@ (800132c <HAL_RCC_OscConfig+0x244>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fc7a 	bl	8000b98 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc76 	bl	8000b98 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e187      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d036      	beq.n	8001340 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_RCC_OscConfig+0x248>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff fc5a 	bl	8000b98 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc56 	bl	8000b98 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e167      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 80012fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x200>
 8001306:	e01b      	b.n	8001340 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_RCC_OscConfig+0x248>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fc43 	bl	8000b98 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	e00e      	b.n	8001334 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff fc3f 	bl	8000b98 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d907      	bls.n	8001334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e150      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001328:	40023800 	.word	0x40023800
 800132c:	42470000 	.word	0x42470000
 8001330:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b88      	ldr	r3, [pc, #544]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ea      	bne.n	8001316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8097 	beq.w	800147c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b81      	ldr	r3, [pc, #516]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b7d      	ldr	r3, [pc, #500]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	4a7c      	ldr	r2, [pc, #496]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	@ 0x40
 800136e:	4b7a      	ldr	r3, [pc, #488]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b77      	ldr	r3, [pc, #476]	@ (800155c <HAL_RCC_OscConfig+0x474>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d118      	bne.n	80013bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b74      	ldr	r3, [pc, #464]	@ (800155c <HAL_RCC_OscConfig+0x474>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a73      	ldr	r2, [pc, #460]	@ (800155c <HAL_RCC_OscConfig+0x474>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7ff fbff 	bl	8000b98 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139e:	f7ff fbfb 	bl	8000b98 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e10c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b6a      	ldr	r3, [pc, #424]	@ (800155c <HAL_RCC_OscConfig+0x474>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x2ea>
 80013c4:	4b64      	ldr	r3, [pc, #400]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c8:	4a63      	ldr	r2, [pc, #396]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x30c>
 80013da:	4b5f      	ldr	r3, [pc, #380]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013de:	4a5e      	ldr	r2, [pc, #376]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013f4:	4b58      	ldr	r3, [pc, #352]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f8:	4a57      	ldr	r2, [pc, #348]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001400:	4b55      	ldr	r3, [pc, #340]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001404:	4a54      	ldr	r2, [pc, #336]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d015      	beq.n	8001440 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fbc0 	bl	8000b98 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141a:	e00a      	b.n	8001432 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fbbc 	bl	8000b98 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e0cb      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	4b49      	ldr	r3, [pc, #292]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0ee      	beq.n	800141c <HAL_RCC_OscConfig+0x334>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fbaa 	bl	8000b98 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fba6 	bl	8000b98 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0b5      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	4b3e      	ldr	r3, [pc, #248]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ee      	bne.n	8001448 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001470:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a38      	ldr	r2, [pc, #224]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80a1 	beq.w	80015c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001486:	4b34      	ldr	r3, [pc, #208]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d05c      	beq.n	800154c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d141      	bne.n	800151e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b31      	ldr	r3, [pc, #196]	@ (8001560 <HAL_RCC_OscConfig+0x478>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb7a 	bl	8000b98 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fb76 	bl	8000b98 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e087      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69da      	ldr	r2, [r3, #28]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	019b      	lsls	r3, r3, #6
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	3b01      	subs	r3, #1
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	491b      	ldr	r1, [pc, #108]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <HAL_RCC_OscConfig+0x478>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb4f 	bl	8000b98 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fb4b 	bl	8000b98 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e05c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x416>
 800151c:	e054      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <HAL_RCC_OscConfig+0x478>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fb38 	bl	8000b98 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff fb34 	bl	8000b98 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e045      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x444>
 800154a:	e03d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d107      	bne.n	8001564 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e038      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000
 8001560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <HAL_RCC_OscConfig+0x4ec>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d028      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d121      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d11a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800159a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159c:	4293      	cmp	r3, r2
 800159e:	d111      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	3b01      	subs	r3, #1
 80015ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0cc      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b68      	ldr	r3, [pc, #416]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d90c      	bls.n	8001614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b65      	ldr	r3, [pc, #404]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b63      	ldr	r3, [pc, #396]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0b8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b59      	ldr	r3, [pc, #356]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a58      	ldr	r2, [pc, #352]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001644:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a52      	ldr	r2, [pc, #328]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800164e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b50      	ldr	r3, [pc, #320]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	494d      	ldr	r1, [pc, #308]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d044      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d003      	beq.n	8001696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b3f      	ldr	r3, [pc, #252]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e06f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e067      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4934      	ldr	r1, [pc, #208]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff fa66 	bl	8000b98 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff fa62 	bl	8000b98 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20c      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e032      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4916      	ldr	r1, [pc, #88]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	490e      	ldr	r1, [pc, #56]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800175e:	f000 f821 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001762:	4602      	mov	r2, r0
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	490a      	ldr	r1, [pc, #40]	@ (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	5ccb      	ldrb	r3, [r1, r3]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	4a09      	ldr	r2, [pc, #36]	@ (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f9c6 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	08003fc4 	.word	0x08003fc4
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a8:	b094      	sub	sp, #80	@ 0x50
 80017aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80017b0:	2300      	movs	r3, #0
 80017b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017b4:	2300      	movs	r3, #0
 80017b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017bc:	4b79      	ldr	r3, [pc, #484]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x40>
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	f200 80e1 	bhi.w	8001990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x34>
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x3a>
 80017d6:	e0db      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b73      	ldr	r3, [pc, #460]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017da:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80017dc:	e0db      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017de:	4b73      	ldr	r3, [pc, #460]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x208>)
 80017e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017e2:	e0d8      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4b6f      	ldr	r3, [pc, #444]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ee:	4b6d      	ldr	r3, [pc, #436]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d063      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b6a      	ldr	r3, [pc, #424]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	2200      	movs	r2, #0
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001804:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180c:	633b      	str	r3, [r7, #48]	@ 0x30
 800180e:	2300      	movs	r3, #0
 8001810:	637b      	str	r3, [r7, #52]	@ 0x34
 8001812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001816:	4622      	mov	r2, r4
 8001818:	462b      	mov	r3, r5
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	0159      	lsls	r1, r3, #5
 8001824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001828:	0150      	lsls	r0, r2, #5
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4621      	mov	r1, r4
 8001830:	1a51      	subs	r1, r2, r1
 8001832:	6139      	str	r1, [r7, #16]
 8001834:	4629      	mov	r1, r5
 8001836:	eb63 0301 	sbc.w	r3, r3, r1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001848:	4659      	mov	r1, fp
 800184a:	018b      	lsls	r3, r1, #6
 800184c:	4651      	mov	r1, sl
 800184e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001852:	4651      	mov	r1, sl
 8001854:	018a      	lsls	r2, r1, #6
 8001856:	4651      	mov	r1, sl
 8001858:	ebb2 0801 	subs.w	r8, r2, r1
 800185c:	4659      	mov	r1, fp
 800185e:	eb63 0901 	sbc.w	r9, r3, r1
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800186e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001876:	4690      	mov	r8, r2
 8001878:	4699      	mov	r9, r3
 800187a:	4623      	mov	r3, r4
 800187c:	eb18 0303 	adds.w	r3, r8, r3
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	462b      	mov	r3, r5
 8001884:	eb49 0303 	adc.w	r3, r9, r3
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001896:	4629      	mov	r1, r5
 8001898:	024b      	lsls	r3, r1, #9
 800189a:	4621      	mov	r1, r4
 800189c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a0:	4621      	mov	r1, r4
 80018a2:	024a      	lsls	r2, r1, #9
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018aa:	2200      	movs	r2, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018b4:	f7fe fcdc 	bl	8000270 <__aeabi_uldivmod>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4613      	mov	r3, r2
 80018be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018c0:	e058      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c2:	4b38      	ldr	r3, [pc, #224]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	2200      	movs	r2, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	4611      	mov	r1, r2
 80018ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018d2:	623b      	str	r3, [r7, #32]
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018dc:	4642      	mov	r2, r8
 80018de:	464b      	mov	r3, r9
 80018e0:	f04f 0000 	mov.w	r0, #0
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	0159      	lsls	r1, r3, #5
 80018ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ee:	0150      	lsls	r0, r2, #5
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4641      	mov	r1, r8
 80018f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018fa:	4649      	mov	r1, r9
 80018fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800190c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001914:	ebb2 040a 	subs.w	r4, r2, sl
 8001918:	eb63 050b 	sbc.w	r5, r3, fp
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	00eb      	lsls	r3, r5, #3
 8001926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192a:	00e2      	lsls	r2, r4, #3
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	4643      	mov	r3, r8
 8001932:	18e3      	adds	r3, r4, r3
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	464b      	mov	r3, r9
 8001938:	eb45 0303 	adc.w	r3, r5, r3
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194a:	4629      	mov	r1, r5
 800194c:	028b      	lsls	r3, r1, #10
 800194e:	4621      	mov	r1, r4
 8001950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001954:	4621      	mov	r1, r4
 8001956:	028a      	lsls	r2, r1, #10
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800195e:	2200      	movs	r2, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	61fa      	str	r2, [r7, #28]
 8001964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001968:	f7fe fc82 	bl	8000270 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001984:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800198e:	e002      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001992:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001998:	4618      	mov	r0, r3
 800199a:	3750      	adds	r7, #80	@ 0x50
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	007a1200 	.word	0x007a1200

080019b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c2:	2b84      	cmp	r3, #132	@ 0x84
 80019c4:	d005      	beq.n	80019d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4413      	add	r3, r2
 80019ce:	3303      	adds	r3, #3
 80019d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019e4:	f000 fb90 	bl	8002108 <vTaskStartScheduler>
  
  return osOK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}

080019ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80019ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f0:	b089      	sub	sp, #36	@ 0x24
 80019f2:	af04      	add	r7, sp, #16
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <osThreadCreate+0x54>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01c      	beq.n	8001a42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685c      	ldr	r4, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691e      	ldr	r6, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ffc8 	bl	80019b0 <makeFreeRtosPriority>
 8001a20:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a2a:	9202      	str	r2, [sp, #8]
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	9100      	str	r1, [sp, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4632      	mov	r2, r6
 8001a34:	4629      	mov	r1, r5
 8001a36:	4620      	mov	r0, r4
 8001a38:	f000 f8ed 	bl	8001c16 <xTaskCreateStatic>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e01c      	b.n	8001a7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685c      	ldr	r4, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a4e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ffaa 	bl	80019b0 <makeFreeRtosPriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	9200      	str	r2, [sp, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	4632      	mov	r2, r6
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f000 f932 	bl	8001cd6 <xTaskCreate>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d001      	beq.n	8001a7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <osDelay+0x16>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	e000      	b.n	8001a9e <osDelay+0x18>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fa68 	bl	8001f74 <vTaskDelay>
  
  return osOK;
 8001aa4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 0208 	add.w	r2, r3, #8
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 0208 	add.w	r2, r3, #8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f103 0208 	add.w	r2, r3, #8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	601a      	str	r2, [r3, #0]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d103      	bne.n	8001b70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e00c      	b.n	8001b8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3308      	adds	r3, #8
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	e002      	b.n	8001b7e <vListInsert+0x2e>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d2f6      	bcs.n	8001b78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6892      	ldr	r2, [r2, #8]
 8001bd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6852      	ldr	r2, [r2, #4]
 8001be2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d103      	bne.n	8001bf6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1e5a      	subs	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b08e      	sub	sp, #56	@ 0x38
 8001c1a:	af04      	add	r7, sp, #16
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10b      	bne.n	8001c42 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	e7fd      	b.n	8001c3e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10b      	bne.n	8001c60 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c4c:	f383 8811 	msr	BASEPRI, r3
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	61fb      	str	r3, [r7, #28]
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c60:	23a0      	movs	r3, #160	@ 0xa0
 8001c62:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c68:	d00b      	beq.n	8001c82 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c6e:	f383 8811 	msr	BASEPRI, r3
 8001c72:	f3bf 8f6f 	isb	sy
 8001c76:	f3bf 8f4f 	dsb	sy
 8001c7a:	61bb      	str	r3, [r7, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	e7fd      	b.n	8001c7e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001c82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01e      	beq.n	8001cc8 <xTaskCreateStatic+0xb2>
 8001c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c98:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9303      	str	r3, [sp, #12]
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f850 	bl	8001d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cc2:	f000 f8ed 	bl	8001ea0 <prvAddNewTaskToReadyList>
 8001cc6:	e001      	b.n	8001ccc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001ccc:	697b      	ldr	r3, [r7, #20]
	}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3728      	adds	r7, #40	@ 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b08c      	sub	sp, #48	@ 0x30
 8001cda:	af04      	add	r7, sp, #16
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 ffb4 	bl	8002c58 <pvPortMalloc>
 8001cf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00e      	beq.n	8001d16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001cf8:	20a0      	movs	r0, #160	@ 0xa0
 8001cfa:	f000 ffad 	bl	8002c58 <pvPortMalloc>
 8001cfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d0c:	e005      	b.n	8001d1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f001 f870 	bl	8002df4 <vPortFree>
 8001d14:	e001      	b.n	8001d1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d017      	beq.n	8001d50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	9303      	str	r3, [sp, #12]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f80e 	bl	8001d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d44:	69f8      	ldr	r0, [r7, #28]
 8001d46:	f000 f8ab 	bl	8001ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	e002      	b.n	8001d56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d56:	69bb      	ldr	r3, [r7, #24]
	}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f023 0307 	bic.w	r3, r3, #7
 8001d86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	617b      	str	r3, [r7, #20]
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	e7fd      	b.n	8001da6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01f      	beq.n	8001df0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	e012      	b.n	8001ddc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	7819      	ldrb	r1, [r3, #0]
 8001dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3334      	adds	r3, #52	@ 0x34
 8001dc6:	460a      	mov	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b0f      	cmp	r3, #15
 8001de0:	d9e9      	bls.n	8001db6 <prvInitialiseNewTask+0x56>
 8001de2:	e000      	b.n	8001de6 <prvInitialiseNewTask+0x86>
			{
				break;
 8001de4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dee:	e003      	b.n	8001df8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d901      	bls.n	8001e02 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001dfe:	2306      	movs	r3, #6
 8001e00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e10:	2200      	movs	r2, #0
 8001e12:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e16:	3304      	adds	r3, #4
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fe68 	bl	8001aee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e20:	3318      	adds	r3, #24
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fe63 	bl	8001aee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e30:	f1c3 0207 	rsb	r2, r3, #7
 8001e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e40:	2200      	movs	r2, #0
 8001e42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e50:	334c      	adds	r3, #76	@ 0x4c
 8001e52:	224c      	movs	r2, #76	@ 0x4c
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fa03 	bl	8003262 <memset>
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <prvInitialiseNewTask+0x134>)
 8001e60:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e64:	4a0c      	ldr	r2, [pc, #48]	@ (8001e98 <prvInitialiseNewTask+0x138>)
 8001e66:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e9c <prvInitialiseNewTask+0x13c>)
 8001e6c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	69b8      	ldr	r0, [r7, #24]
 8001e74:	f000 fcdc 	bl	8002830 <pxPortInitialiseStack>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e8a:	bf00      	nop
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20004330 	.word	0x20004330
 8001e98:	20004398 	.word	0x20004398
 8001e9c:	20004400 	.word	0x20004400

08001ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001ea8:	f000 fdf6 	bl	8002a98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001eac:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <prvAddNewTaskToReadyList+0xb8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <prvAddNewTaskToReadyList+0xb8>)
 8001eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001eb6:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <prvAddNewTaskToReadyList+0xbc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001ebe:	4a27      	ldr	r2, [pc, #156]	@ (8001f5c <prvAddNewTaskToReadyList+0xbc>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ec4:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <prvAddNewTaskToReadyList+0xb8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d110      	bne.n	8001eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ecc:	f000 fb68 	bl	80025a0 <prvInitialiseTaskLists>
 8001ed0:	e00d      	b.n	8001eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001ed2:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <prvAddNewTaskToReadyList+0xc0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <prvAddNewTaskToReadyList+0xbc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d802      	bhi.n	8001eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f5c <prvAddNewTaskToReadyList+0xbc>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001eee:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <prvAddNewTaskToReadyList+0xc4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <prvAddNewTaskToReadyList+0xc4>)
 8001ef6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	2201      	movs	r2, #1
 8001efe:	409a      	lsls	r2, r3
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <prvAddNewTaskToReadyList+0xc8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <prvAddNewTaskToReadyList+0xc8>)
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <prvAddNewTaskToReadyList+0xcc>)
 8001f18:	441a      	add	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4610      	mov	r0, r2
 8001f22:	f7ff fdf1 	bl	8001b08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001f26:	f000 fde9 	bl	8002afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <prvAddNewTaskToReadyList+0xc0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00e      	beq.n	8001f50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <prvAddNewTaskToReadyList+0xbc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <prvAddNewTaskToReadyList+0xd0>)
 8001f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200006dc 	.word	0x200006dc
 8001f5c:	200005dc 	.word	0x200005dc
 8001f60:	200006e8 	.word	0x200006e8
 8001f64:	200006f8 	.word	0x200006f8
 8001f68:	200006e4 	.word	0x200006e4
 8001f6c:	200005e0 	.word	0x200005e0
 8001f70:	e000ed04 	.word	0xe000ed04

08001f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d018      	beq.n	8001fb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f86:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <vTaskDelay+0x64>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <vTaskDelay+0x32>
	__asm volatile
 8001f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f92:	f383 8811 	msr	BASEPRI, r3
 8001f96:	f3bf 8f6f 	isb	sy
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	60bb      	str	r3, [r7, #8]
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	e7fd      	b.n	8001fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001fa6:	f000 f919 	bl	80021dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001faa:	2100      	movs	r1, #0
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fbd9 	bl	8002764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001fb2:	f000 f921 	bl	80021f8 <xTaskResumeAll>
 8001fb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d107      	bne.n	8001fce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001fbe:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <vTaskDelay+0x68>)
 8001fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000704 	.word	0x20000704
 8001fdc:	e000ed04 	.word	0xe000ed04

08001fe0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001fe8:	f000 fd56 	bl	8002a98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <vTaskSuspend+0x18>
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80020e8 <vTaskSuspend+0x108>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	e000      	b.n	8001ffa <vTaskSuspend+0x1a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fdde 	bl	8001bc2 <uxListRemove>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d115      	bne.n	8002038 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002010:	4936      	ldr	r1, [pc, #216]	@ (80020ec <vTaskSuspend+0x10c>)
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10a      	bne.n	8002038 <vTaskSuspend+0x58>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	2201      	movs	r2, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43da      	mvns	r2, r3
 800202e:	4b30      	ldr	r3, [pc, #192]	@ (80020f0 <vTaskSuspend+0x110>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4013      	ands	r3, r2
 8002034:	4a2e      	ldr	r2, [pc, #184]	@ (80020f0 <vTaskSuspend+0x110>)
 8002036:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3318      	adds	r3, #24
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fdbc 	bl	8001bc2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3304      	adds	r3, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4828      	ldr	r0, [pc, #160]	@ (80020f4 <vTaskSuspend+0x114>)
 8002052:	f7ff fd59 	bl	8001b08 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d103      	bne.n	800206a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800206a:	f000 fd47 	bl	8002afc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800206e:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <vTaskSuspend+0x118>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002076:	f000 fd0f 	bl	8002a98 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800207a:	f000 fb35 	bl	80026e8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800207e:	f000 fd3d 	bl	8002afc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <vTaskSuspend+0x108>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d128      	bne.n	80020de <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800208c:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <vTaskSuspend+0x118>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d018      	beq.n	80020c6 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8002094:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <vTaskSuspend+0x11c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <vTaskSuspend+0xd4>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	60bb      	str	r3, [r7, #8]
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <vTaskSuspend+0x120>)
 80020b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80020c4:	e00b      	b.n	80020de <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <vTaskSuspend+0x114>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <vTaskSuspend+0x124>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d103      	bne.n	80020da <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80020d2:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <vTaskSuspend+0x108>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
	}
 80020d8:	e001      	b.n	80020de <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80020da:	f000 f9e5 	bl	80024a8 <vTaskSwitchContext>
	}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200005dc 	.word	0x200005dc
 80020ec:	200005e0 	.word	0x200005e0
 80020f0:	200006e4 	.word	0x200006e4
 80020f4:	200006c8 	.word	0x200006c8
 80020f8:	200006e8 	.word	0x200006e8
 80020fc:	20000704 	.word	0x20000704
 8002100:	e000ed04 	.word	0xe000ed04
 8002104:	200006dc 	.word	0x200006dc

08002108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002116:	463a      	mov	r2, r7
 8002118:	1d39      	adds	r1, r7, #4
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa1e 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002124:	6839      	ldr	r1, [r7, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	9202      	str	r2, [sp, #8]
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	2300      	movs	r3, #0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	460a      	mov	r2, r1
 8002136:	4921      	ldr	r1, [pc, #132]	@ (80021bc <vTaskStartScheduler+0xb4>)
 8002138:	4821      	ldr	r0, [pc, #132]	@ (80021c0 <vTaskStartScheduler+0xb8>)
 800213a:	f7ff fd6c 	bl	8001c16 <xTaskCreateStatic>
 800213e:	4603      	mov	r3, r0
 8002140:	4a20      	ldr	r2, [pc, #128]	@ (80021c4 <vTaskStartScheduler+0xbc>)
 8002142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002144:	4b1f      	ldr	r3, [pc, #124]	@ (80021c4 <vTaskStartScheduler+0xbc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800214c:	2301      	movs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e001      	b.n	8002156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d11b      	bne.n	8002194 <vTaskStartScheduler+0x8c>
	__asm volatile
 800215c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002160:	f383 8811 	msr	BASEPRI, r3
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	613b      	str	r3, [r7, #16]
}
 800216e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002170:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <vTaskStartScheduler+0xc0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	334c      	adds	r3, #76	@ 0x4c
 8002176:	4a15      	ldr	r2, [pc, #84]	@ (80021cc <vTaskStartScheduler+0xc4>)
 8002178:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800217a:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <vTaskStartScheduler+0xc8>)
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002182:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <vTaskStartScheduler+0xcc>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <vTaskStartScheduler+0xd0>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800218e:	f000 fbdf 	bl	8002950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002192:	e00f      	b.n	80021b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d10b      	bne.n	80021b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	60fb      	str	r3, [r7, #12]
}
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <vTaskStartScheduler+0xa8>
}
 80021b4:	bf00      	nop
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	08003fbc 	.word	0x08003fbc
 80021c0:	08002571 	.word	0x08002571
 80021c4:	20000700 	.word	0x20000700
 80021c8:	200005dc 	.word	0x200005dc
 80021cc:	2000001c 	.word	0x2000001c
 80021d0:	200006fc 	.word	0x200006fc
 80021d4:	200006e8 	.word	0x200006e8
 80021d8:	200006e0 	.word	0x200006e0

080021dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <vTaskSuspendAll+0x18>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	4a03      	ldr	r2, [pc, #12]	@ (80021f4 <vTaskSuspendAll+0x18>)
 80021e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	20000704 	.word	0x20000704

080021f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002206:	4b42      	ldr	r3, [pc, #264]	@ (8002310 <xTaskResumeAll+0x118>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10b      	bne.n	8002226 <xTaskResumeAll+0x2e>
	__asm volatile
 800220e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	603b      	str	r3, [r7, #0]
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	e7fd      	b.n	8002222 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002226:	f000 fc37 	bl	8002a98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800222a:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <xTaskResumeAll+0x118>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3b01      	subs	r3, #1
 8002230:	4a37      	ldr	r2, [pc, #220]	@ (8002310 <xTaskResumeAll+0x118>)
 8002232:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002234:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <xTaskResumeAll+0x118>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d161      	bne.n	8002300 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800223c:	4b35      	ldr	r3, [pc, #212]	@ (8002314 <xTaskResumeAll+0x11c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d05d      	beq.n	8002300 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002244:	e02e      	b.n	80022a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002246:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <xTaskResumeAll+0x120>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3318      	adds	r3, #24
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fcb5 	bl	8001bc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3304      	adds	r3, #4
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fcb0 	bl	8001bc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	2201      	movs	r2, #1
 8002268:	409a      	lsls	r2, r3
 800226a:	4b2c      	ldr	r3, [pc, #176]	@ (800231c <xTaskResumeAll+0x124>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	4a2a      	ldr	r2, [pc, #168]	@ (800231c <xTaskResumeAll+0x124>)
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <xTaskResumeAll+0x128>)
 8002282:	441a      	add	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3304      	adds	r3, #4
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f7ff fc3c 	bl	8001b08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002294:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <xTaskResumeAll+0x12c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229a:	429a      	cmp	r2, r3
 800229c:	d302      	bcc.n	80022a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800229e:	4b22      	ldr	r3, [pc, #136]	@ (8002328 <xTaskResumeAll+0x130>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <xTaskResumeAll+0x120>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1cc      	bne.n	8002246 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80022b2:	f000 fa19 	bl	80026e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80022b6:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <xTaskResumeAll+0x134>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80022c2:	f000 f837 	bl	8002334 <xTaskIncrementTick>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80022cc:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <xTaskResumeAll+0x130>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f1      	bne.n	80022c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <xTaskResumeAll+0x134>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80022e4:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <xTaskResumeAll+0x130>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80022f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <xTaskResumeAll+0x138>)
 80022f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002300:	f000 fbfc 	bl	8002afc <vPortExitCritical>

	return xAlreadyYielded;
 8002304:	68bb      	ldr	r3, [r7, #8]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000704 	.word	0x20000704
 8002314:	200006dc 	.word	0x200006dc
 8002318:	2000069c 	.word	0x2000069c
 800231c:	200006e4 	.word	0x200006e4
 8002320:	200005e0 	.word	0x200005e0
 8002324:	200005dc 	.word	0x200005dc
 8002328:	200006f0 	.word	0x200006f0
 800232c:	200006ec 	.word	0x200006ec
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800233e:	4b4f      	ldr	r3, [pc, #316]	@ (800247c <xTaskIncrementTick+0x148>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 808f 	bne.w	8002466 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002348:	4b4d      	ldr	r3, [pc, #308]	@ (8002480 <xTaskIncrementTick+0x14c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002350:	4a4b      	ldr	r2, [pc, #300]	@ (8002480 <xTaskIncrementTick+0x14c>)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d121      	bne.n	80023a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800235c:	4b49      	ldr	r3, [pc, #292]	@ (8002484 <xTaskIncrementTick+0x150>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800236a:	f383 8811 	msr	BASEPRI, r3
 800236e:	f3bf 8f6f 	isb	sy
 8002372:	f3bf 8f4f 	dsb	sy
 8002376:	603b      	str	r3, [r7, #0]
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	e7fd      	b.n	800237a <xTaskIncrementTick+0x46>
 800237e:	4b41      	ldr	r3, [pc, #260]	@ (8002484 <xTaskIncrementTick+0x150>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	4b40      	ldr	r3, [pc, #256]	@ (8002488 <xTaskIncrementTick+0x154>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a3e      	ldr	r2, [pc, #248]	@ (8002484 <xTaskIncrementTick+0x150>)
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4a3e      	ldr	r2, [pc, #248]	@ (8002488 <xTaskIncrementTick+0x154>)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b3e      	ldr	r3, [pc, #248]	@ (800248c <xTaskIncrementTick+0x158>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	4a3c      	ldr	r2, [pc, #240]	@ (800248c <xTaskIncrementTick+0x158>)
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	f000 f9a4 	bl	80026e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80023a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <xTaskIncrementTick+0x15c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d348      	bcc.n	800243c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023aa:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <xTaskIncrementTick+0x150>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023b4:	4b36      	ldr	r3, [pc, #216]	@ (8002490 <xTaskIncrementTick+0x15c>)
 80023b6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ba:	601a      	str	r2, [r3, #0]
					break;
 80023bc:	e03e      	b.n	800243c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023be:	4b31      	ldr	r3, [pc, #196]	@ (8002484 <xTaskIncrementTick+0x150>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d203      	bcs.n	80023de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80023d6:	4a2e      	ldr	r2, [pc, #184]	@ (8002490 <xTaskIncrementTick+0x15c>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80023dc:	e02e      	b.n	800243c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fbed 	bl	8001bc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3318      	adds	r3, #24
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fbe4 	bl	8001bc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fe:	2201      	movs	r2, #1
 8002400:	409a      	lsls	r2, r3
 8002402:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <xTaskIncrementTick+0x160>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	4a22      	ldr	r2, [pc, #136]	@ (8002494 <xTaskIncrementTick+0x160>)
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <xTaskIncrementTick+0x164>)
 800241a:	441a      	add	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	3304      	adds	r3, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f7ff fb70 	bl	8001b08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800242c:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <xTaskIncrementTick+0x168>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	429a      	cmp	r2, r3
 8002434:	d3b9      	bcc.n	80023aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800243a:	e7b6      	b.n	80023aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800243c:	4b17      	ldr	r3, [pc, #92]	@ (800249c <xTaskIncrementTick+0x168>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002442:	4915      	ldr	r1, [pc, #84]	@ (8002498 <xTaskIncrementTick+0x164>)
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d901      	bls.n	8002458 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002454:	2301      	movs	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002458:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <xTaskIncrementTick+0x16c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002460:	2301      	movs	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e004      	b.n	8002470 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002466:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <xTaskIncrementTick+0x170>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <xTaskIncrementTick+0x170>)
 800246e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002470:	697b      	ldr	r3, [r7, #20]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000704 	.word	0x20000704
 8002480:	200006e0 	.word	0x200006e0
 8002484:	20000694 	.word	0x20000694
 8002488:	20000698 	.word	0x20000698
 800248c:	200006f4 	.word	0x200006f4
 8002490:	200006fc 	.word	0x200006fc
 8002494:	200006e4 	.word	0x200006e4
 8002498:	200005e0 	.word	0x200005e0
 800249c:	200005dc 	.word	0x200005dc
 80024a0:	200006f0 	.word	0x200006f0
 80024a4:	200006ec 	.word	0x200006ec

080024a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <vTaskSwitchContext+0xb0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80024b6:	4b29      	ldr	r3, [pc, #164]	@ (800255c <vTaskSwitchContext+0xb4>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80024bc:	e045      	b.n	800254a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80024be:	4b27      	ldr	r3, [pc, #156]	@ (800255c <vTaskSwitchContext+0xb4>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024c4:	4b26      	ldr	r3, [pc, #152]	@ (8002560 <vTaskSwitchContext+0xb8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	f1c3 031f 	rsb	r3, r3, #31
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	4922      	ldr	r1, [pc, #136]	@ (8002564 <vTaskSwitchContext+0xbc>)
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10b      	bne.n	8002506 <vTaskSwitchContext+0x5e>
	__asm volatile
 80024ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	607b      	str	r3, [r7, #4]
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	e7fd      	b.n	8002502 <vTaskSwitchContext+0x5a>
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <vTaskSwitchContext+0xbc>)
 8002512:	4413      	add	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	3308      	adds	r3, #8
 8002528:	429a      	cmp	r2, r3
 800252a:	d104      	bne.n	8002536 <vTaskSwitchContext+0x8e>
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <vTaskSwitchContext+0xc0>)
 800253e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <vTaskSwitchContext+0xc0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	334c      	adds	r3, #76	@ 0x4c
 8002546:	4a09      	ldr	r2, [pc, #36]	@ (800256c <vTaskSwitchContext+0xc4>)
 8002548:	6013      	str	r3, [r2, #0]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000704 	.word	0x20000704
 800255c:	200006f0 	.word	0x200006f0
 8002560:	200006e4 	.word	0x200006e4
 8002564:	200005e0 	.word	0x200005e0
 8002568:	200005dc 	.word	0x200005dc
 800256c:	2000001c 	.word	0x2000001c

08002570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002578:	f000 f852 	bl	8002620 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <prvIdleTask+0x28>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d9f9      	bls.n	8002578 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <prvIdleTask+0x2c>)
 8002586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002594:	e7f0      	b.n	8002578 <prvIdleTask+0x8>
 8002596:	bf00      	nop
 8002598:	200005e0 	.word	0x200005e0
 800259c:	e000ed04 	.word	0xe000ed04

080025a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	e00c      	b.n	80025c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <prvInitialiseTaskLists+0x60>)
 80025b8:	4413      	add	r3, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fa77 	bl	8001aae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3301      	adds	r3, #1
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d9ef      	bls.n	80025ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80025cc:	480d      	ldr	r0, [pc, #52]	@ (8002604 <prvInitialiseTaskLists+0x64>)
 80025ce:	f7ff fa6e 	bl	8001aae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80025d2:	480d      	ldr	r0, [pc, #52]	@ (8002608 <prvInitialiseTaskLists+0x68>)
 80025d4:	f7ff fa6b 	bl	8001aae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80025d8:	480c      	ldr	r0, [pc, #48]	@ (800260c <prvInitialiseTaskLists+0x6c>)
 80025da:	f7ff fa68 	bl	8001aae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80025de:	480c      	ldr	r0, [pc, #48]	@ (8002610 <prvInitialiseTaskLists+0x70>)
 80025e0:	f7ff fa65 	bl	8001aae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80025e4:	480b      	ldr	r0, [pc, #44]	@ (8002614 <prvInitialiseTaskLists+0x74>)
 80025e6:	f7ff fa62 	bl	8001aae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <prvInitialiseTaskLists+0x78>)
 80025ec:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <prvInitialiseTaskLists+0x64>)
 80025ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <prvInitialiseTaskLists+0x7c>)
 80025f2:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <prvInitialiseTaskLists+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200005e0 	.word	0x200005e0
 8002604:	2000066c 	.word	0x2000066c
 8002608:	20000680 	.word	0x20000680
 800260c:	2000069c 	.word	0x2000069c
 8002610:	200006b0 	.word	0x200006b0
 8002614:	200006c8 	.word	0x200006c8
 8002618:	20000694 	.word	0x20000694
 800261c:	20000698 	.word	0x20000698

08002620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002626:	e019      	b.n	800265c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002628:	f000 fa36 	bl	8002a98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <prvCheckTasksWaitingTermination+0x50>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fac2 	bl	8001bc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800263e:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <prvCheckTasksWaitingTermination+0x54>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3b01      	subs	r3, #1
 8002644:	4a0b      	ldr	r2, [pc, #44]	@ (8002674 <prvCheckTasksWaitingTermination+0x54>)
 8002646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <prvCheckTasksWaitingTermination+0x58>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3b01      	subs	r3, #1
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <prvCheckTasksWaitingTermination+0x58>)
 8002650:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002652:	f000 fa53 	bl	8002afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f810 	bl	800267c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <prvCheckTasksWaitingTermination+0x58>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e1      	bne.n	8002628 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200006b0 	.word	0x200006b0
 8002674:	200006dc 	.word	0x200006dc
 8002678:	200006c4 	.word	0x200006c4

0800267c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	334c      	adds	r3, #76	@ 0x4c
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fe03 	bl	8003294 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002694:	2b00      	cmp	r3, #0
 8002696:	d108      	bne.n	80026aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fba9 	bl	8002df4 <vPortFree>
				vPortFree( pxTCB );
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fba6 	bl	8002df4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80026a8:	e019      	b.n	80026de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d103      	bne.n	80026bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fb9d 	bl	8002df4 <vPortFree>
	}
 80026ba:	e010      	b.n	80026de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d00b      	beq.n	80026de <prvDeleteTCB+0x62>
	__asm volatile
 80026c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	60fb      	str	r3, [r7, #12]
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	e7fd      	b.n	80026da <prvDeleteTCB+0x5e>
	}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <prvResetNextTaskUnblockTime+0x38>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d104      	bne.n	8002702 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <prvResetNextTaskUnblockTime+0x3c>)
 80026fa:	f04f 32ff 	mov.w	r2, #4294967295
 80026fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002700:	e008      	b.n	8002714 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002702:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <prvResetNextTaskUnblockTime+0x38>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <prvResetNextTaskUnblockTime+0x3c>)
 8002712:	6013      	str	r3, [r2, #0]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	20000694 	.word	0x20000694
 8002724:	200006fc 	.word	0x200006fc

08002728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <xTaskGetSchedulerState+0x34>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002736:	2301      	movs	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	e008      	b.n	800274e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <xTaskGetSchedulerState+0x38>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002744:	2302      	movs	r3, #2
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	e001      	b.n	800274e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800274e:	687b      	ldr	r3, [r7, #4]
	}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	200006e8 	.word	0x200006e8
 8002760:	20000704 	.word	0x20000704

08002764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800276e:	4b29      	ldr	r3, [pc, #164]	@ (8002814 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002774:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3304      	adds	r3, #4
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fa21 	bl	8001bc2 <uxListRemove>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10b      	bne.n	800279e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002786:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	2201      	movs	r2, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	4b21      	ldr	r3, [pc, #132]	@ (800281c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4013      	ands	r3, r2
 800279a:	4a20      	ldr	r2, [pc, #128]	@ (800281c <prvAddCurrentTaskToDelayedList+0xb8>)
 800279c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d10a      	bne.n	80027bc <prvAddCurrentTaskToDelayedList+0x58>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3304      	adds	r3, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	481a      	ldr	r0, [pc, #104]	@ (8002820 <prvAddCurrentTaskToDelayedList+0xbc>)
 80027b6:	f7ff f9a7 	bl	8001b08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80027ba:	e026      	b.n	800280a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027c4:	4b14      	ldr	r3, [pc, #80]	@ (8002818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d209      	bcs.n	80027e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027d4:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <prvAddCurrentTaskToDelayedList+0xc0>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3304      	adds	r3, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7ff f9b5 	bl	8001b50 <vListInsert>
}
 80027e6:	e010      	b.n	800280a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xc4>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3304      	adds	r3, #4
 80027f2:	4619      	mov	r1, r3
 80027f4:	4610      	mov	r0, r2
 80027f6:	f7ff f9ab 	bl	8001b50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80027fa:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <prvAddCurrentTaskToDelayedList+0xc8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	429a      	cmp	r2, r3
 8002802:	d202      	bcs.n	800280a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002804:	4a09      	ldr	r2, [pc, #36]	@ (800282c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6013      	str	r3, [r2, #0]
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200006e0 	.word	0x200006e0
 8002818:	200005dc 	.word	0x200005dc
 800281c:	200006e4 	.word	0x200006e4
 8002820:	200006c8 	.word	0x200006c8
 8002824:	20000698 	.word	0x20000698
 8002828:	20000694 	.word	0x20000694
 800282c:	200006fc 	.word	0x200006fc

08002830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3b04      	subs	r3, #4
 8002840:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3b04      	subs	r3, #4
 800284e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f023 0201 	bic.w	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3b04      	subs	r3, #4
 800285e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002860:	4a0c      	ldr	r2, [pc, #48]	@ (8002894 <pxPortInitialiseStack+0x64>)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3b14      	subs	r3, #20
 800286a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b04      	subs	r3, #4
 8002876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f06f 0202 	mvn.w	r2, #2
 800287e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3b20      	subs	r3, #32
 8002884:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	08002899 	.word	0x08002899

08002898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <prvTaskExitError+0x58>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d00b      	beq.n	80028c4 <prvTaskExitError+0x2c>
	__asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	60fb      	str	r3, [r7, #12]
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <prvTaskExitError+0x28>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	60bb      	str	r3, [r7, #8]
}
 80028d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80028d8:	bf00      	nop
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0fc      	beq.n	80028da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	2000000c 	.word	0x2000000c
	...

08002900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002900:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <pxCurrentTCBConst2>)
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	6808      	ldr	r0, [r1, #0]
 8002906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290a:	f380 8809 	msr	PSP, r0
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f04f 0000 	mov.w	r0, #0
 8002916:	f380 8811 	msr	BASEPRI, r0
 800291a:	4770      	bx	lr
 800291c:	f3af 8000 	nop.w

08002920 <pxCurrentTCBConst2>:
 8002920:	200005dc 	.word	0x200005dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop

08002928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002928:	4808      	ldr	r0, [pc, #32]	@ (800294c <prvPortStartFirstTask+0x24>)
 800292a:	6800      	ldr	r0, [r0, #0]
 800292c:	6800      	ldr	r0, [r0, #0]
 800292e:	f380 8808 	msr	MSP, r0
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f380 8814 	msr	CONTROL, r0
 800293a:	b662      	cpsie	i
 800293c:	b661      	cpsie	f
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	df00      	svc	0
 8002948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800294a:	bf00      	nop
 800294c:	e000ed08 	.word	0xe000ed08

08002950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002956:	4b47      	ldr	r3, [pc, #284]	@ (8002a74 <xPortStartScheduler+0x124>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a47      	ldr	r2, [pc, #284]	@ (8002a78 <xPortStartScheduler+0x128>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d10b      	bne.n	8002978 <xPortStartScheduler+0x28>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	613b      	str	r3, [r7, #16]
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002978:	4b3e      	ldr	r3, [pc, #248]	@ (8002a74 <xPortStartScheduler+0x124>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a3f      	ldr	r2, [pc, #252]	@ (8002a7c <xPortStartScheduler+0x12c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10b      	bne.n	800299a <xPortStartScheduler+0x4a>
	__asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	60fb      	str	r3, [r7, #12]
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	e7fd      	b.n	8002996 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800299a:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <xPortStartScheduler+0x130>)
 800299c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	22ff      	movs	r2, #255	@ 0xff
 80029aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4b31      	ldr	r3, [pc, #196]	@ (8002a84 <xPortStartScheduler+0x134>)
 80029c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029c2:	4b31      	ldr	r3, [pc, #196]	@ (8002a88 <xPortStartScheduler+0x138>)
 80029c4:	2207      	movs	r2, #7
 80029c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029c8:	e009      	b.n	80029de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80029ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002a88 <xPortStartScheduler+0x138>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a88 <xPortStartScheduler+0x138>)
 80029d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e6:	2b80      	cmp	r3, #128	@ 0x80
 80029e8:	d0ef      	beq.n	80029ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80029ea:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <xPortStartScheduler+0x138>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d00b      	beq.n	8002a0e <xPortStartScheduler+0xbe>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	60bb      	str	r3, [r7, #8]
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	e7fd      	b.n	8002a0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a88 <xPortStartScheduler+0x138>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	4a1c      	ldr	r2, [pc, #112]	@ (8002a88 <xPortStartScheduler+0x138>)
 8002a16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <xPortStartScheduler+0x138>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a20:	4a19      	ldr	r2, [pc, #100]	@ (8002a88 <xPortStartScheduler+0x138>)
 8002a22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a2c:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <xPortStartScheduler+0x13c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a16      	ldr	r2, [pc, #88]	@ (8002a8c <xPortStartScheduler+0x13c>)
 8002a32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a38:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <xPortStartScheduler+0x13c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a13      	ldr	r2, [pc, #76]	@ (8002a8c <xPortStartScheduler+0x13c>)
 8002a3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002a42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002a44:	f000 f8da 	bl	8002bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <xPortStartScheduler+0x140>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002a4e:	f000 f8f9 	bl	8002c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a52:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <xPortStartScheduler+0x144>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a0f      	ldr	r2, [pc, #60]	@ (8002a94 <xPortStartScheduler+0x144>)
 8002a58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002a5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002a5e:	f7ff ff63 	bl	8002928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002a62:	f7ff fd21 	bl	80024a8 <vTaskSwitchContext>
	prvTaskExitError();
 8002a66:	f7ff ff17 	bl	8002898 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	e000ed00 	.word	0xe000ed00
 8002a78:	410fc271 	.word	0x410fc271
 8002a7c:	410fc270 	.word	0x410fc270
 8002a80:	e000e400 	.word	0xe000e400
 8002a84:	20000708 	.word	0x20000708
 8002a88:	2000070c 	.word	0x2000070c
 8002a8c:	e000ed20 	.word	0xe000ed20
 8002a90:	2000000c 	.word	0x2000000c
 8002a94:	e000ef34 	.word	0xe000ef34

08002a98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	607b      	str	r3, [r7, #4]
}
 8002ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <vPortEnterCritical+0x5c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8002af4 <vPortEnterCritical+0x5c>)
 8002aba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002abc:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <vPortEnterCritical+0x5c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d110      	bne.n	8002ae6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <vPortEnterCritical+0x60>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <vPortEnterCritical+0x4e>
	__asm volatile
 8002ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	603b      	str	r3, [r7, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	e7fd      	b.n	8002ae2 <vPortEnterCritical+0x4a>
	}
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	2000000c 	.word	0x2000000c
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b02:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <vPortExitCritical+0x50>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <vPortExitCritical+0x26>
	__asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	607b      	str	r3, [r7, #4]
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	e7fd      	b.n	8002b1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <vPortExitCritical+0x50>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	4a08      	ldr	r2, [pc, #32]	@ (8002b4c <vPortExitCritical+0x50>)
 8002b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b2c:	4b07      	ldr	r3, [pc, #28]	@ (8002b4c <vPortExitCritical+0x50>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <vPortExitCritical+0x44>
 8002b34:	2300      	movs	r3, #0
 8002b36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	2000000c 	.word	0x2000000c

08002b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002b50:	f3ef 8009 	mrs	r0, PSP
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <pxCurrentTCBConst>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	f01e 0f10 	tst.w	lr, #16
 8002b60:	bf08      	it	eq
 8002b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6a:	6010      	str	r0, [r2, #0]
 8002b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b74:	f380 8811 	msr	BASEPRI, r0
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f7ff fc92 	bl	80024a8 <vTaskSwitchContext>
 8002b84:	f04f 0000 	mov.w	r0, #0
 8002b88:	f380 8811 	msr	BASEPRI, r0
 8002b8c:	bc09      	pop	{r0, r3}
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	6808      	ldr	r0, [r1, #0]
 8002b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b96:	f01e 0f10 	tst.w	lr, #16
 8002b9a:	bf08      	it	eq
 8002b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ba0:	f380 8809 	msr	PSP, r0
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	f3af 8000 	nop.w

08002bb0 <pxCurrentTCBConst>:
 8002bb0:	200005dc 	.word	0x200005dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop

08002bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	607b      	str	r3, [r7, #4]
}
 8002bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002bd2:	f7ff fbaf 	bl	8002334 <xTaskIncrementTick>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <xPortSysTickHandler+0x40>)
 8002bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f383 8811 	msr	BASEPRI, r3
}
 8002bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c00:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <vPortSetupTimerInterrupt+0x34>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <vPortSetupTimerInterrupt+0x38>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <vPortSetupTimerInterrupt+0x3c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <vPortSetupTimerInterrupt+0x40>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	4a09      	ldr	r2, [pc, #36]	@ (8002c40 <vPortSetupTimerInterrupt+0x44>)
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <vPortSetupTimerInterrupt+0x34>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010
 8002c34:	e000e018 	.word	0xe000e018
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	10624dd3 	.word	0x10624dd3
 8002c40:	e000e014 	.word	0xe000e014

08002c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002c44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002c54 <vPortEnableVFP+0x10>
 8002c48:	6801      	ldr	r1, [r0, #0]
 8002c4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002c4e:	6001      	str	r1, [r0, #0]
 8002c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002c52:	bf00      	nop
 8002c54:	e000ed88 	.word	0xe000ed88

08002c58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	@ 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002c64:	f7ff faba 	bl	80021dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002c68:	4b5c      	ldr	r3, [pc, #368]	@ (8002ddc <pvPortMalloc+0x184>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002c70:	f000 f924 	bl	8002ebc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c74:	4b5a      	ldr	r3, [pc, #360]	@ (8002de0 <pvPortMalloc+0x188>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f040 8095 	bne.w	8002dac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01e      	beq.n	8002cc6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002c88:	2208      	movs	r2, #8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d015      	beq.n	8002cc6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f023 0307 	bic.w	r3, r3, #7
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <pvPortMalloc+0x6e>
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	617b      	str	r3, [r7, #20]
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	e7fd      	b.n	8002cc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d06f      	beq.n	8002dac <pvPortMalloc+0x154>
 8002ccc:	4b45      	ldr	r3, [pc, #276]	@ (8002de4 <pvPortMalloc+0x18c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d86a      	bhi.n	8002dac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002cd6:	4b44      	ldr	r3, [pc, #272]	@ (8002de8 <pvPortMalloc+0x190>)
 8002cd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002cda:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <pvPortMalloc+0x190>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ce0:	e004      	b.n	8002cec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d903      	bls.n	8002cfe <pvPortMalloc+0xa6>
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f1      	bne.n	8002ce2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002cfe:	4b37      	ldr	r3, [pc, #220]	@ (8002ddc <pvPortMalloc+0x184>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d051      	beq.n	8002dac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	4413      	add	r3, r2
 8002d10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	1ad2      	subs	r2, r2, r3
 8002d22:	2308      	movs	r3, #8
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d920      	bls.n	8002d6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <pvPortMalloc+0xfc>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	613b      	str	r3, [r7, #16]
}
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	1ad2      	subs	r2, r2, r3
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d66:	69b8      	ldr	r0, [r7, #24]
 8002d68:	f000 f90a 	bl	8002f80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <pvPortMalloc+0x18c>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	4a1b      	ldr	r2, [pc, #108]	@ (8002de4 <pvPortMalloc+0x18c>)
 8002d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <pvPortMalloc+0x18c>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <pvPortMalloc+0x194>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d203      	bcs.n	8002d8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d86:	4b17      	ldr	r3, [pc, #92]	@ (8002de4 <pvPortMalloc+0x18c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a18      	ldr	r2, [pc, #96]	@ (8002dec <pvPortMalloc+0x194>)
 8002d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	4b13      	ldr	r3, [pc, #76]	@ (8002de0 <pvPortMalloc+0x188>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002da2:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <pvPortMalloc+0x198>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	4a11      	ldr	r2, [pc, #68]	@ (8002df0 <pvPortMalloc+0x198>)
 8002daa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002dac:	f7ff fa24 	bl	80021f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <pvPortMalloc+0x17a>
	__asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	60fb      	str	r3, [r7, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	e7fd      	b.n	8002dce <pvPortMalloc+0x176>
	return pvReturn;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3728      	adds	r7, #40	@ 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20004318 	.word	0x20004318
 8002de0:	2000432c 	.word	0x2000432c
 8002de4:	2000431c 	.word	0x2000431c
 8002de8:	20004310 	.word	0x20004310
 8002dec:	20004320 	.word	0x20004320
 8002df0:	20004324 	.word	0x20004324

08002df4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d04f      	beq.n	8002ea6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e06:	2308      	movs	r3, #8
 8002e08:	425b      	negs	r3, r3
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4b25      	ldr	r3, [pc, #148]	@ (8002eb0 <vPortFree+0xbc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <vPortFree+0x46>
	__asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	60fb      	str	r3, [r7, #12]
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	e7fd      	b.n	8002e36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <vPortFree+0x66>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	60bb      	str	r3, [r7, #8]
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	e7fd      	b.n	8002e56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <vPortFree+0xbc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01e      	beq.n	8002ea6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11a      	bne.n	8002ea6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <vPortFree+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002e80:	f7ff f9ac 	bl	80021dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <vPortFree+0xc0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a09      	ldr	r2, [pc, #36]	@ (8002eb4 <vPortFree+0xc0>)
 8002e90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e92:	6938      	ldr	r0, [r7, #16]
 8002e94:	f000 f874 	bl	8002f80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002e98:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <vPortFree+0xc4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a06      	ldr	r2, [pc, #24]	@ (8002eb8 <vPortFree+0xc4>)
 8002ea0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002ea2:	f7ff f9a9 	bl	80021f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000432c 	.word	0x2000432c
 8002eb4:	2000431c 	.word	0x2000431c
 8002eb8:	20004328 	.word	0x20004328

08002ebc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ec2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002ec6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ec8:	4b27      	ldr	r3, [pc, #156]	@ (8002f68 <prvHeapInit+0xac>)
 8002eca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3307      	adds	r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0307 	bic.w	r3, r3, #7
 8002ee2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	4a1f      	ldr	r2, [pc, #124]	@ (8002f68 <prvHeapInit+0xac>)
 8002eec:	4413      	add	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <prvHeapInit+0xb0>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002efa:	4b1c      	ldr	r3, [pc, #112]	@ (8002f6c <prvHeapInit+0xb0>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4413      	add	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002f08:	2208      	movs	r2, #8
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <prvHeapInit+0xb4>)
 8002f1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002f1e:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <prvHeapInit+0xb4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002f26:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <prvHeapInit+0xb4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	1ad2      	subs	r2, r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <prvHeapInit+0xb4>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <prvHeapInit+0xb8>)
 8002f4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a09      	ldr	r2, [pc, #36]	@ (8002f78 <prvHeapInit+0xbc>)
 8002f52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <prvHeapInit+0xc0>)
 8002f56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002f5a:	601a      	str	r2, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	20000710 	.word	0x20000710
 8002f6c:	20004310 	.word	0x20004310
 8002f70:	20004318 	.word	0x20004318
 8002f74:	20004320 	.word	0x20004320
 8002f78:	2000431c 	.word	0x2000431c
 8002f7c:	2000432c 	.word	0x2000432c

08002f80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f88:	4b28      	ldr	r3, [pc, #160]	@ (800302c <prvInsertBlockIntoFreeList+0xac>)
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e002      	b.n	8002f94 <prvInsertBlockIntoFreeList+0x14>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d8f7      	bhi.n	8002f8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d108      	bne.n	8002fc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	441a      	add	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d118      	bne.n	8003008 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b15      	ldr	r3, [pc, #84]	@ (8003030 <prvInsertBlockIntoFreeList+0xb0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d00d      	beq.n	8002ffe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e008      	b.n	8003010 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8003030 <prvInsertBlockIntoFreeList+0xb0>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e003      	b.n	8003010 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	429a      	cmp	r2, r3
 8003016:	d002      	beq.n	800301e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800301e:	bf00      	nop
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20004310 	.word	0x20004310
 8003030:	20004318 	.word	0x20004318

08003034 <std>:
 8003034:	2300      	movs	r3, #0
 8003036:	b510      	push	{r4, lr}
 8003038:	4604      	mov	r4, r0
 800303a:	e9c0 3300 	strd	r3, r3, [r0]
 800303e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003042:	6083      	str	r3, [r0, #8]
 8003044:	8181      	strh	r1, [r0, #12]
 8003046:	6643      	str	r3, [r0, #100]	@ 0x64
 8003048:	81c2      	strh	r2, [r0, #14]
 800304a:	6183      	str	r3, [r0, #24]
 800304c:	4619      	mov	r1, r3
 800304e:	2208      	movs	r2, #8
 8003050:	305c      	adds	r0, #92	@ 0x5c
 8003052:	f000 f906 	bl	8003262 <memset>
 8003056:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <std+0x58>)
 8003058:	6263      	str	r3, [r4, #36]	@ 0x24
 800305a:	4b0d      	ldr	r3, [pc, #52]	@ (8003090 <std+0x5c>)
 800305c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800305e:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <std+0x60>)
 8003060:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003062:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <std+0x64>)
 8003064:	6323      	str	r3, [r4, #48]	@ 0x30
 8003066:	4b0d      	ldr	r3, [pc, #52]	@ (800309c <std+0x68>)
 8003068:	6224      	str	r4, [r4, #32]
 800306a:	429c      	cmp	r4, r3
 800306c:	d006      	beq.n	800307c <std+0x48>
 800306e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003072:	4294      	cmp	r4, r2
 8003074:	d002      	beq.n	800307c <std+0x48>
 8003076:	33d0      	adds	r3, #208	@ 0xd0
 8003078:	429c      	cmp	r4, r3
 800307a:	d105      	bne.n	8003088 <std+0x54>
 800307c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003084:	f000 b9bc 	b.w	8003400 <__retarget_lock_init_recursive>
 8003088:	bd10      	pop	{r4, pc}
 800308a:	bf00      	nop
 800308c:	080031dd 	.word	0x080031dd
 8003090:	080031ff 	.word	0x080031ff
 8003094:	08003237 	.word	0x08003237
 8003098:	0800325b 	.word	0x0800325b
 800309c:	20004330 	.word	0x20004330

080030a0 <stdio_exit_handler>:
 80030a0:	4a02      	ldr	r2, [pc, #8]	@ (80030ac <stdio_exit_handler+0xc>)
 80030a2:	4903      	ldr	r1, [pc, #12]	@ (80030b0 <stdio_exit_handler+0x10>)
 80030a4:	4803      	ldr	r0, [pc, #12]	@ (80030b4 <stdio_exit_handler+0x14>)
 80030a6:	f000 b869 	b.w	800317c <_fwalk_sglue>
 80030aa:	bf00      	nop
 80030ac:	20000010 	.word	0x20000010
 80030b0:	08003ca1 	.word	0x08003ca1
 80030b4:	20000020 	.word	0x20000020

080030b8 <cleanup_stdio>:
 80030b8:	6841      	ldr	r1, [r0, #4]
 80030ba:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <cleanup_stdio+0x34>)
 80030bc:	4299      	cmp	r1, r3
 80030be:	b510      	push	{r4, lr}
 80030c0:	4604      	mov	r4, r0
 80030c2:	d001      	beq.n	80030c8 <cleanup_stdio+0x10>
 80030c4:	f000 fdec 	bl	8003ca0 <_fflush_r>
 80030c8:	68a1      	ldr	r1, [r4, #8]
 80030ca:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <cleanup_stdio+0x38>)
 80030cc:	4299      	cmp	r1, r3
 80030ce:	d002      	beq.n	80030d6 <cleanup_stdio+0x1e>
 80030d0:	4620      	mov	r0, r4
 80030d2:	f000 fde5 	bl	8003ca0 <_fflush_r>
 80030d6:	68e1      	ldr	r1, [r4, #12]
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <cleanup_stdio+0x3c>)
 80030da:	4299      	cmp	r1, r3
 80030dc:	d004      	beq.n	80030e8 <cleanup_stdio+0x30>
 80030de:	4620      	mov	r0, r4
 80030e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030e4:	f000 bddc 	b.w	8003ca0 <_fflush_r>
 80030e8:	bd10      	pop	{r4, pc}
 80030ea:	bf00      	nop
 80030ec:	20004330 	.word	0x20004330
 80030f0:	20004398 	.word	0x20004398
 80030f4:	20004400 	.word	0x20004400

080030f8 <global_stdio_init.part.0>:
 80030f8:	b510      	push	{r4, lr}
 80030fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <global_stdio_init.part.0+0x30>)
 80030fc:	4c0b      	ldr	r4, [pc, #44]	@ (800312c <global_stdio_init.part.0+0x34>)
 80030fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003130 <global_stdio_init.part.0+0x38>)
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	4620      	mov	r0, r4
 8003104:	2200      	movs	r2, #0
 8003106:	2104      	movs	r1, #4
 8003108:	f7ff ff94 	bl	8003034 <std>
 800310c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003110:	2201      	movs	r2, #1
 8003112:	2109      	movs	r1, #9
 8003114:	f7ff ff8e 	bl	8003034 <std>
 8003118:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800311c:	2202      	movs	r2, #2
 800311e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003122:	2112      	movs	r1, #18
 8003124:	f7ff bf86 	b.w	8003034 <std>
 8003128:	20004468 	.word	0x20004468
 800312c:	20004330 	.word	0x20004330
 8003130:	080030a1 	.word	0x080030a1

08003134 <__sfp_lock_acquire>:
 8003134:	4801      	ldr	r0, [pc, #4]	@ (800313c <__sfp_lock_acquire+0x8>)
 8003136:	f000 b964 	b.w	8003402 <__retarget_lock_acquire_recursive>
 800313a:	bf00      	nop
 800313c:	20004471 	.word	0x20004471

08003140 <__sfp_lock_release>:
 8003140:	4801      	ldr	r0, [pc, #4]	@ (8003148 <__sfp_lock_release+0x8>)
 8003142:	f000 b95f 	b.w	8003404 <__retarget_lock_release_recursive>
 8003146:	bf00      	nop
 8003148:	20004471 	.word	0x20004471

0800314c <__sinit>:
 800314c:	b510      	push	{r4, lr}
 800314e:	4604      	mov	r4, r0
 8003150:	f7ff fff0 	bl	8003134 <__sfp_lock_acquire>
 8003154:	6a23      	ldr	r3, [r4, #32]
 8003156:	b11b      	cbz	r3, 8003160 <__sinit+0x14>
 8003158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800315c:	f7ff bff0 	b.w	8003140 <__sfp_lock_release>
 8003160:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <__sinit+0x28>)
 8003162:	6223      	str	r3, [r4, #32]
 8003164:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <__sinit+0x2c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f5      	bne.n	8003158 <__sinit+0xc>
 800316c:	f7ff ffc4 	bl	80030f8 <global_stdio_init.part.0>
 8003170:	e7f2      	b.n	8003158 <__sinit+0xc>
 8003172:	bf00      	nop
 8003174:	080030b9 	.word	0x080030b9
 8003178:	20004468 	.word	0x20004468

0800317c <_fwalk_sglue>:
 800317c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003180:	4607      	mov	r7, r0
 8003182:	4688      	mov	r8, r1
 8003184:	4614      	mov	r4, r2
 8003186:	2600      	movs	r6, #0
 8003188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800318c:	f1b9 0901 	subs.w	r9, r9, #1
 8003190:	d505      	bpl.n	800319e <_fwalk_sglue+0x22>
 8003192:	6824      	ldr	r4, [r4, #0]
 8003194:	2c00      	cmp	r4, #0
 8003196:	d1f7      	bne.n	8003188 <_fwalk_sglue+0xc>
 8003198:	4630      	mov	r0, r6
 800319a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800319e:	89ab      	ldrh	r3, [r5, #12]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d907      	bls.n	80031b4 <_fwalk_sglue+0x38>
 80031a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031a8:	3301      	adds	r3, #1
 80031aa:	d003      	beq.n	80031b4 <_fwalk_sglue+0x38>
 80031ac:	4629      	mov	r1, r5
 80031ae:	4638      	mov	r0, r7
 80031b0:	47c0      	blx	r8
 80031b2:	4306      	orrs	r6, r0
 80031b4:	3568      	adds	r5, #104	@ 0x68
 80031b6:	e7e9      	b.n	800318c <_fwalk_sglue+0x10>

080031b8 <iprintf>:
 80031b8:	b40f      	push	{r0, r1, r2, r3}
 80031ba:	b507      	push	{r0, r1, r2, lr}
 80031bc:	4906      	ldr	r1, [pc, #24]	@ (80031d8 <iprintf+0x20>)
 80031be:	ab04      	add	r3, sp, #16
 80031c0:	6808      	ldr	r0, [r1, #0]
 80031c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80031c6:	6881      	ldr	r1, [r0, #8]
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	f000 fa3f 	bl	800364c <_vfiprintf_r>
 80031ce:	b003      	add	sp, #12
 80031d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031d4:	b004      	add	sp, #16
 80031d6:	4770      	bx	lr
 80031d8:	2000001c 	.word	0x2000001c

080031dc <__sread>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	460c      	mov	r4, r1
 80031e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e4:	f000 f8be 	bl	8003364 <_read_r>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	bfab      	itete	ge
 80031ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031ee:	89a3      	ldrhlt	r3, [r4, #12]
 80031f0:	181b      	addge	r3, r3, r0
 80031f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80031f6:	bfac      	ite	ge
 80031f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80031fa:	81a3      	strhlt	r3, [r4, #12]
 80031fc:	bd10      	pop	{r4, pc}

080031fe <__swrite>:
 80031fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003202:	461f      	mov	r7, r3
 8003204:	898b      	ldrh	r3, [r1, #12]
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	4605      	mov	r5, r0
 800320a:	460c      	mov	r4, r1
 800320c:	4616      	mov	r6, r2
 800320e:	d505      	bpl.n	800321c <__swrite+0x1e>
 8003210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003214:	2302      	movs	r3, #2
 8003216:	2200      	movs	r2, #0
 8003218:	f000 f892 	bl	8003340 <_lseek_r>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003226:	81a3      	strh	r3, [r4, #12]
 8003228:	4632      	mov	r2, r6
 800322a:	463b      	mov	r3, r7
 800322c:	4628      	mov	r0, r5
 800322e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003232:	f000 b8a9 	b.w	8003388 <_write_r>

08003236 <__sseek>:
 8003236:	b510      	push	{r4, lr}
 8003238:	460c      	mov	r4, r1
 800323a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800323e:	f000 f87f 	bl	8003340 <_lseek_r>
 8003242:	1c43      	adds	r3, r0, #1
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	bf15      	itete	ne
 8003248:	6560      	strne	r0, [r4, #84]	@ 0x54
 800324a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800324e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003252:	81a3      	strheq	r3, [r4, #12]
 8003254:	bf18      	it	ne
 8003256:	81a3      	strhne	r3, [r4, #12]
 8003258:	bd10      	pop	{r4, pc}

0800325a <__sclose>:
 800325a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800325e:	f000 b809 	b.w	8003274 <_close_r>

08003262 <memset>:
 8003262:	4402      	add	r2, r0
 8003264:	4603      	mov	r3, r0
 8003266:	4293      	cmp	r3, r2
 8003268:	d100      	bne.n	800326c <memset+0xa>
 800326a:	4770      	bx	lr
 800326c:	f803 1b01 	strb.w	r1, [r3], #1
 8003270:	e7f9      	b.n	8003266 <memset+0x4>
	...

08003274 <_close_r>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	4d06      	ldr	r5, [pc, #24]	@ (8003290 <_close_r+0x1c>)
 8003278:	2300      	movs	r3, #0
 800327a:	4604      	mov	r4, r0
 800327c:	4608      	mov	r0, r1
 800327e:	602b      	str	r3, [r5, #0]
 8003280:	f7fd fb7d 	bl	800097e <_close>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d102      	bne.n	800328e <_close_r+0x1a>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	b103      	cbz	r3, 800328e <_close_r+0x1a>
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	2000446c 	.word	0x2000446c

08003294 <_reclaim_reent>:
 8003294:	4b29      	ldr	r3, [pc, #164]	@ (800333c <_reclaim_reent+0xa8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4283      	cmp	r3, r0
 800329a:	b570      	push	{r4, r5, r6, lr}
 800329c:	4604      	mov	r4, r0
 800329e:	d04b      	beq.n	8003338 <_reclaim_reent+0xa4>
 80032a0:	69c3      	ldr	r3, [r0, #28]
 80032a2:	b1ab      	cbz	r3, 80032d0 <_reclaim_reent+0x3c>
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	b16b      	cbz	r3, 80032c4 <_reclaim_reent+0x30>
 80032a8:	2500      	movs	r5, #0
 80032aa:	69e3      	ldr	r3, [r4, #28]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	5959      	ldr	r1, [r3, r5]
 80032b0:	2900      	cmp	r1, #0
 80032b2:	d13b      	bne.n	800332c <_reclaim_reent+0x98>
 80032b4:	3504      	adds	r5, #4
 80032b6:	2d80      	cmp	r5, #128	@ 0x80
 80032b8:	d1f7      	bne.n	80032aa <_reclaim_reent+0x16>
 80032ba:	69e3      	ldr	r3, [r4, #28]
 80032bc:	4620      	mov	r0, r4
 80032be:	68d9      	ldr	r1, [r3, #12]
 80032c0:	f000 f8a2 	bl	8003408 <_free_r>
 80032c4:	69e3      	ldr	r3, [r4, #28]
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	b111      	cbz	r1, 80032d0 <_reclaim_reent+0x3c>
 80032ca:	4620      	mov	r0, r4
 80032cc:	f000 f89c 	bl	8003408 <_free_r>
 80032d0:	6961      	ldr	r1, [r4, #20]
 80032d2:	b111      	cbz	r1, 80032da <_reclaim_reent+0x46>
 80032d4:	4620      	mov	r0, r4
 80032d6:	f000 f897 	bl	8003408 <_free_r>
 80032da:	69e1      	ldr	r1, [r4, #28]
 80032dc:	b111      	cbz	r1, 80032e4 <_reclaim_reent+0x50>
 80032de:	4620      	mov	r0, r4
 80032e0:	f000 f892 	bl	8003408 <_free_r>
 80032e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80032e6:	b111      	cbz	r1, 80032ee <_reclaim_reent+0x5a>
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 f88d 	bl	8003408 <_free_r>
 80032ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032f0:	b111      	cbz	r1, 80032f8 <_reclaim_reent+0x64>
 80032f2:	4620      	mov	r0, r4
 80032f4:	f000 f888 	bl	8003408 <_free_r>
 80032f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80032fa:	b111      	cbz	r1, 8003302 <_reclaim_reent+0x6e>
 80032fc:	4620      	mov	r0, r4
 80032fe:	f000 f883 	bl	8003408 <_free_r>
 8003302:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003304:	b111      	cbz	r1, 800330c <_reclaim_reent+0x78>
 8003306:	4620      	mov	r0, r4
 8003308:	f000 f87e 	bl	8003408 <_free_r>
 800330c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800330e:	b111      	cbz	r1, 8003316 <_reclaim_reent+0x82>
 8003310:	4620      	mov	r0, r4
 8003312:	f000 f879 	bl	8003408 <_free_r>
 8003316:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003318:	b111      	cbz	r1, 8003320 <_reclaim_reent+0x8c>
 800331a:	4620      	mov	r0, r4
 800331c:	f000 f874 	bl	8003408 <_free_r>
 8003320:	6a23      	ldr	r3, [r4, #32]
 8003322:	b14b      	cbz	r3, 8003338 <_reclaim_reent+0xa4>
 8003324:	4620      	mov	r0, r4
 8003326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800332a:	4718      	bx	r3
 800332c:	680e      	ldr	r6, [r1, #0]
 800332e:	4620      	mov	r0, r4
 8003330:	f000 f86a 	bl	8003408 <_free_r>
 8003334:	4631      	mov	r1, r6
 8003336:	e7bb      	b.n	80032b0 <_reclaim_reent+0x1c>
 8003338:	bd70      	pop	{r4, r5, r6, pc}
 800333a:	bf00      	nop
 800333c:	2000001c 	.word	0x2000001c

08003340 <_lseek_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d07      	ldr	r5, [pc, #28]	@ (8003360 <_lseek_r+0x20>)
 8003344:	4604      	mov	r4, r0
 8003346:	4608      	mov	r0, r1
 8003348:	4611      	mov	r1, r2
 800334a:	2200      	movs	r2, #0
 800334c:	602a      	str	r2, [r5, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	f7fd fb3c 	bl	80009cc <_lseek>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d102      	bne.n	800335e <_lseek_r+0x1e>
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	b103      	cbz	r3, 800335e <_lseek_r+0x1e>
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	2000446c 	.word	0x2000446c

08003364 <_read_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4d07      	ldr	r5, [pc, #28]	@ (8003384 <_read_r+0x20>)
 8003368:	4604      	mov	r4, r0
 800336a:	4608      	mov	r0, r1
 800336c:	4611      	mov	r1, r2
 800336e:	2200      	movs	r2, #0
 8003370:	602a      	str	r2, [r5, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	f7fd faca 	bl	800090c <_read>
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	d102      	bne.n	8003382 <_read_r+0x1e>
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	b103      	cbz	r3, 8003382 <_read_r+0x1e>
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	bd38      	pop	{r3, r4, r5, pc}
 8003384:	2000446c 	.word	0x2000446c

08003388 <_write_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4d07      	ldr	r5, [pc, #28]	@ (80033a8 <_write_r+0x20>)
 800338c:	4604      	mov	r4, r0
 800338e:	4608      	mov	r0, r1
 8003390:	4611      	mov	r1, r2
 8003392:	2200      	movs	r2, #0
 8003394:	602a      	str	r2, [r5, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	f7fd fad5 	bl	8000946 <_write>
 800339c:	1c43      	adds	r3, r0, #1
 800339e:	d102      	bne.n	80033a6 <_write_r+0x1e>
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	b103      	cbz	r3, 80033a6 <_write_r+0x1e>
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
 80033a8:	2000446c 	.word	0x2000446c

080033ac <__errno>:
 80033ac:	4b01      	ldr	r3, [pc, #4]	@ (80033b4 <__errno+0x8>)
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	2000001c 	.word	0x2000001c

080033b8 <__libc_init_array>:
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	4d0d      	ldr	r5, [pc, #52]	@ (80033f0 <__libc_init_array+0x38>)
 80033bc:	4c0d      	ldr	r4, [pc, #52]	@ (80033f4 <__libc_init_array+0x3c>)
 80033be:	1b64      	subs	r4, r4, r5
 80033c0:	10a4      	asrs	r4, r4, #2
 80033c2:	2600      	movs	r6, #0
 80033c4:	42a6      	cmp	r6, r4
 80033c6:	d109      	bne.n	80033dc <__libc_init_array+0x24>
 80033c8:	4d0b      	ldr	r5, [pc, #44]	@ (80033f8 <__libc_init_array+0x40>)
 80033ca:	4c0c      	ldr	r4, [pc, #48]	@ (80033fc <__libc_init_array+0x44>)
 80033cc:	f000 fdb8 	bl	8003f40 <_init>
 80033d0:	1b64      	subs	r4, r4, r5
 80033d2:	10a4      	asrs	r4, r4, #2
 80033d4:	2600      	movs	r6, #0
 80033d6:	42a6      	cmp	r6, r4
 80033d8:	d105      	bne.n	80033e6 <__libc_init_array+0x2e>
 80033da:	bd70      	pop	{r4, r5, r6, pc}
 80033dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e0:	4798      	blx	r3
 80033e2:	3601      	adds	r6, #1
 80033e4:	e7ee      	b.n	80033c4 <__libc_init_array+0xc>
 80033e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ea:	4798      	blx	r3
 80033ec:	3601      	adds	r6, #1
 80033ee:	e7f2      	b.n	80033d6 <__libc_init_array+0x1e>
 80033f0:	08004010 	.word	0x08004010
 80033f4:	08004010 	.word	0x08004010
 80033f8:	08004010 	.word	0x08004010
 80033fc:	08004014 	.word	0x08004014

08003400 <__retarget_lock_init_recursive>:
 8003400:	4770      	bx	lr

08003402 <__retarget_lock_acquire_recursive>:
 8003402:	4770      	bx	lr

08003404 <__retarget_lock_release_recursive>:
 8003404:	4770      	bx	lr
	...

08003408 <_free_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	4605      	mov	r5, r0
 800340c:	2900      	cmp	r1, #0
 800340e:	d041      	beq.n	8003494 <_free_r+0x8c>
 8003410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003414:	1f0c      	subs	r4, r1, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	bfb8      	it	lt
 800341a:	18e4      	addlt	r4, r4, r3
 800341c:	f000 f8e0 	bl	80035e0 <__malloc_lock>
 8003420:	4a1d      	ldr	r2, [pc, #116]	@ (8003498 <_free_r+0x90>)
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	b933      	cbnz	r3, 8003434 <_free_r+0x2c>
 8003426:	6063      	str	r3, [r4, #4]
 8003428:	6014      	str	r4, [r2, #0]
 800342a:	4628      	mov	r0, r5
 800342c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003430:	f000 b8dc 	b.w	80035ec <__malloc_unlock>
 8003434:	42a3      	cmp	r3, r4
 8003436:	d908      	bls.n	800344a <_free_r+0x42>
 8003438:	6820      	ldr	r0, [r4, #0]
 800343a:	1821      	adds	r1, r4, r0
 800343c:	428b      	cmp	r3, r1
 800343e:	bf01      	itttt	eq
 8003440:	6819      	ldreq	r1, [r3, #0]
 8003442:	685b      	ldreq	r3, [r3, #4]
 8003444:	1809      	addeq	r1, r1, r0
 8003446:	6021      	streq	r1, [r4, #0]
 8003448:	e7ed      	b.n	8003426 <_free_r+0x1e>
 800344a:	461a      	mov	r2, r3
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b10b      	cbz	r3, 8003454 <_free_r+0x4c>
 8003450:	42a3      	cmp	r3, r4
 8003452:	d9fa      	bls.n	800344a <_free_r+0x42>
 8003454:	6811      	ldr	r1, [r2, #0]
 8003456:	1850      	adds	r0, r2, r1
 8003458:	42a0      	cmp	r0, r4
 800345a:	d10b      	bne.n	8003474 <_free_r+0x6c>
 800345c:	6820      	ldr	r0, [r4, #0]
 800345e:	4401      	add	r1, r0
 8003460:	1850      	adds	r0, r2, r1
 8003462:	4283      	cmp	r3, r0
 8003464:	6011      	str	r1, [r2, #0]
 8003466:	d1e0      	bne.n	800342a <_free_r+0x22>
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	6053      	str	r3, [r2, #4]
 800346e:	4408      	add	r0, r1
 8003470:	6010      	str	r0, [r2, #0]
 8003472:	e7da      	b.n	800342a <_free_r+0x22>
 8003474:	d902      	bls.n	800347c <_free_r+0x74>
 8003476:	230c      	movs	r3, #12
 8003478:	602b      	str	r3, [r5, #0]
 800347a:	e7d6      	b.n	800342a <_free_r+0x22>
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	1821      	adds	r1, r4, r0
 8003480:	428b      	cmp	r3, r1
 8003482:	bf04      	itt	eq
 8003484:	6819      	ldreq	r1, [r3, #0]
 8003486:	685b      	ldreq	r3, [r3, #4]
 8003488:	6063      	str	r3, [r4, #4]
 800348a:	bf04      	itt	eq
 800348c:	1809      	addeq	r1, r1, r0
 800348e:	6021      	streq	r1, [r4, #0]
 8003490:	6054      	str	r4, [r2, #4]
 8003492:	e7ca      	b.n	800342a <_free_r+0x22>
 8003494:	bd38      	pop	{r3, r4, r5, pc}
 8003496:	bf00      	nop
 8003498:	20004478 	.word	0x20004478

0800349c <sbrk_aligned>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	4e0f      	ldr	r6, [pc, #60]	@ (80034dc <sbrk_aligned+0x40>)
 80034a0:	460c      	mov	r4, r1
 80034a2:	6831      	ldr	r1, [r6, #0]
 80034a4:	4605      	mov	r5, r0
 80034a6:	b911      	cbnz	r1, 80034ae <sbrk_aligned+0x12>
 80034a8:	f000 fcb6 	bl	8003e18 <_sbrk_r>
 80034ac:	6030      	str	r0, [r6, #0]
 80034ae:	4621      	mov	r1, r4
 80034b0:	4628      	mov	r0, r5
 80034b2:	f000 fcb1 	bl	8003e18 <_sbrk_r>
 80034b6:	1c43      	adds	r3, r0, #1
 80034b8:	d103      	bne.n	80034c2 <sbrk_aligned+0x26>
 80034ba:	f04f 34ff 	mov.w	r4, #4294967295
 80034be:	4620      	mov	r0, r4
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
 80034c2:	1cc4      	adds	r4, r0, #3
 80034c4:	f024 0403 	bic.w	r4, r4, #3
 80034c8:	42a0      	cmp	r0, r4
 80034ca:	d0f8      	beq.n	80034be <sbrk_aligned+0x22>
 80034cc:	1a21      	subs	r1, r4, r0
 80034ce:	4628      	mov	r0, r5
 80034d0:	f000 fca2 	bl	8003e18 <_sbrk_r>
 80034d4:	3001      	adds	r0, #1
 80034d6:	d1f2      	bne.n	80034be <sbrk_aligned+0x22>
 80034d8:	e7ef      	b.n	80034ba <sbrk_aligned+0x1e>
 80034da:	bf00      	nop
 80034dc:	20004474 	.word	0x20004474

080034e0 <_malloc_r>:
 80034e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034e4:	1ccd      	adds	r5, r1, #3
 80034e6:	f025 0503 	bic.w	r5, r5, #3
 80034ea:	3508      	adds	r5, #8
 80034ec:	2d0c      	cmp	r5, #12
 80034ee:	bf38      	it	cc
 80034f0:	250c      	movcc	r5, #12
 80034f2:	2d00      	cmp	r5, #0
 80034f4:	4606      	mov	r6, r0
 80034f6:	db01      	blt.n	80034fc <_malloc_r+0x1c>
 80034f8:	42a9      	cmp	r1, r5
 80034fa:	d904      	bls.n	8003506 <_malloc_r+0x26>
 80034fc:	230c      	movs	r3, #12
 80034fe:	6033      	str	r3, [r6, #0]
 8003500:	2000      	movs	r0, #0
 8003502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035dc <_malloc_r+0xfc>
 800350a:	f000 f869 	bl	80035e0 <__malloc_lock>
 800350e:	f8d8 3000 	ldr.w	r3, [r8]
 8003512:	461c      	mov	r4, r3
 8003514:	bb44      	cbnz	r4, 8003568 <_malloc_r+0x88>
 8003516:	4629      	mov	r1, r5
 8003518:	4630      	mov	r0, r6
 800351a:	f7ff ffbf 	bl	800349c <sbrk_aligned>
 800351e:	1c43      	adds	r3, r0, #1
 8003520:	4604      	mov	r4, r0
 8003522:	d158      	bne.n	80035d6 <_malloc_r+0xf6>
 8003524:	f8d8 4000 	ldr.w	r4, [r8]
 8003528:	4627      	mov	r7, r4
 800352a:	2f00      	cmp	r7, #0
 800352c:	d143      	bne.n	80035b6 <_malloc_r+0xd6>
 800352e:	2c00      	cmp	r4, #0
 8003530:	d04b      	beq.n	80035ca <_malloc_r+0xea>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	4639      	mov	r1, r7
 8003536:	4630      	mov	r0, r6
 8003538:	eb04 0903 	add.w	r9, r4, r3
 800353c:	f000 fc6c 	bl	8003e18 <_sbrk_r>
 8003540:	4581      	cmp	r9, r0
 8003542:	d142      	bne.n	80035ca <_malloc_r+0xea>
 8003544:	6821      	ldr	r1, [r4, #0]
 8003546:	1a6d      	subs	r5, r5, r1
 8003548:	4629      	mov	r1, r5
 800354a:	4630      	mov	r0, r6
 800354c:	f7ff ffa6 	bl	800349c <sbrk_aligned>
 8003550:	3001      	adds	r0, #1
 8003552:	d03a      	beq.n	80035ca <_malloc_r+0xea>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	442b      	add	r3, r5
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	f8d8 3000 	ldr.w	r3, [r8]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	bb62      	cbnz	r2, 80035bc <_malloc_r+0xdc>
 8003562:	f8c8 7000 	str.w	r7, [r8]
 8003566:	e00f      	b.n	8003588 <_malloc_r+0xa8>
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	1b52      	subs	r2, r2, r5
 800356c:	d420      	bmi.n	80035b0 <_malloc_r+0xd0>
 800356e:	2a0b      	cmp	r2, #11
 8003570:	d917      	bls.n	80035a2 <_malloc_r+0xc2>
 8003572:	1961      	adds	r1, r4, r5
 8003574:	42a3      	cmp	r3, r4
 8003576:	6025      	str	r5, [r4, #0]
 8003578:	bf18      	it	ne
 800357a:	6059      	strne	r1, [r3, #4]
 800357c:	6863      	ldr	r3, [r4, #4]
 800357e:	bf08      	it	eq
 8003580:	f8c8 1000 	streq.w	r1, [r8]
 8003584:	5162      	str	r2, [r4, r5]
 8003586:	604b      	str	r3, [r1, #4]
 8003588:	4630      	mov	r0, r6
 800358a:	f000 f82f 	bl	80035ec <__malloc_unlock>
 800358e:	f104 000b 	add.w	r0, r4, #11
 8003592:	1d23      	adds	r3, r4, #4
 8003594:	f020 0007 	bic.w	r0, r0, #7
 8003598:	1ac2      	subs	r2, r0, r3
 800359a:	bf1c      	itt	ne
 800359c:	1a1b      	subne	r3, r3, r0
 800359e:	50a3      	strne	r3, [r4, r2]
 80035a0:	e7af      	b.n	8003502 <_malloc_r+0x22>
 80035a2:	6862      	ldr	r2, [r4, #4]
 80035a4:	42a3      	cmp	r3, r4
 80035a6:	bf0c      	ite	eq
 80035a8:	f8c8 2000 	streq.w	r2, [r8]
 80035ac:	605a      	strne	r2, [r3, #4]
 80035ae:	e7eb      	b.n	8003588 <_malloc_r+0xa8>
 80035b0:	4623      	mov	r3, r4
 80035b2:	6864      	ldr	r4, [r4, #4]
 80035b4:	e7ae      	b.n	8003514 <_malloc_r+0x34>
 80035b6:	463c      	mov	r4, r7
 80035b8:	687f      	ldr	r7, [r7, #4]
 80035ba:	e7b6      	b.n	800352a <_malloc_r+0x4a>
 80035bc:	461a      	mov	r2, r3
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	42a3      	cmp	r3, r4
 80035c2:	d1fb      	bne.n	80035bc <_malloc_r+0xdc>
 80035c4:	2300      	movs	r3, #0
 80035c6:	6053      	str	r3, [r2, #4]
 80035c8:	e7de      	b.n	8003588 <_malloc_r+0xa8>
 80035ca:	230c      	movs	r3, #12
 80035cc:	6033      	str	r3, [r6, #0]
 80035ce:	4630      	mov	r0, r6
 80035d0:	f000 f80c 	bl	80035ec <__malloc_unlock>
 80035d4:	e794      	b.n	8003500 <_malloc_r+0x20>
 80035d6:	6005      	str	r5, [r0, #0]
 80035d8:	e7d6      	b.n	8003588 <_malloc_r+0xa8>
 80035da:	bf00      	nop
 80035dc:	20004478 	.word	0x20004478

080035e0 <__malloc_lock>:
 80035e0:	4801      	ldr	r0, [pc, #4]	@ (80035e8 <__malloc_lock+0x8>)
 80035e2:	f7ff bf0e 	b.w	8003402 <__retarget_lock_acquire_recursive>
 80035e6:	bf00      	nop
 80035e8:	20004470 	.word	0x20004470

080035ec <__malloc_unlock>:
 80035ec:	4801      	ldr	r0, [pc, #4]	@ (80035f4 <__malloc_unlock+0x8>)
 80035ee:	f7ff bf09 	b.w	8003404 <__retarget_lock_release_recursive>
 80035f2:	bf00      	nop
 80035f4:	20004470 	.word	0x20004470

080035f8 <__sfputc_r>:
 80035f8:	6893      	ldr	r3, [r2, #8]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	b410      	push	{r4}
 8003600:	6093      	str	r3, [r2, #8]
 8003602:	da08      	bge.n	8003616 <__sfputc_r+0x1e>
 8003604:	6994      	ldr	r4, [r2, #24]
 8003606:	42a3      	cmp	r3, r4
 8003608:	db01      	blt.n	800360e <__sfputc_r+0x16>
 800360a:	290a      	cmp	r1, #10
 800360c:	d103      	bne.n	8003616 <__sfputc_r+0x1e>
 800360e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003612:	f000 bb6d 	b.w	8003cf0 <__swbuf_r>
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	1c58      	adds	r0, r3, #1
 800361a:	6010      	str	r0, [r2, #0]
 800361c:	7019      	strb	r1, [r3, #0]
 800361e:	4608      	mov	r0, r1
 8003620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003624:	4770      	bx	lr

08003626 <__sfputs_r>:
 8003626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003628:	4606      	mov	r6, r0
 800362a:	460f      	mov	r7, r1
 800362c:	4614      	mov	r4, r2
 800362e:	18d5      	adds	r5, r2, r3
 8003630:	42ac      	cmp	r4, r5
 8003632:	d101      	bne.n	8003638 <__sfputs_r+0x12>
 8003634:	2000      	movs	r0, #0
 8003636:	e007      	b.n	8003648 <__sfputs_r+0x22>
 8003638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800363c:	463a      	mov	r2, r7
 800363e:	4630      	mov	r0, r6
 8003640:	f7ff ffda 	bl	80035f8 <__sfputc_r>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	d1f3      	bne.n	8003630 <__sfputs_r+0xa>
 8003648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800364c <_vfiprintf_r>:
 800364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003650:	460d      	mov	r5, r1
 8003652:	b09d      	sub	sp, #116	@ 0x74
 8003654:	4614      	mov	r4, r2
 8003656:	4698      	mov	r8, r3
 8003658:	4606      	mov	r6, r0
 800365a:	b118      	cbz	r0, 8003664 <_vfiprintf_r+0x18>
 800365c:	6a03      	ldr	r3, [r0, #32]
 800365e:	b90b      	cbnz	r3, 8003664 <_vfiprintf_r+0x18>
 8003660:	f7ff fd74 	bl	800314c <__sinit>
 8003664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003666:	07d9      	lsls	r1, r3, #31
 8003668:	d405      	bmi.n	8003676 <_vfiprintf_r+0x2a>
 800366a:	89ab      	ldrh	r3, [r5, #12]
 800366c:	059a      	lsls	r2, r3, #22
 800366e:	d402      	bmi.n	8003676 <_vfiprintf_r+0x2a>
 8003670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003672:	f7ff fec6 	bl	8003402 <__retarget_lock_acquire_recursive>
 8003676:	89ab      	ldrh	r3, [r5, #12]
 8003678:	071b      	lsls	r3, r3, #28
 800367a:	d501      	bpl.n	8003680 <_vfiprintf_r+0x34>
 800367c:	692b      	ldr	r3, [r5, #16]
 800367e:	b99b      	cbnz	r3, 80036a8 <_vfiprintf_r+0x5c>
 8003680:	4629      	mov	r1, r5
 8003682:	4630      	mov	r0, r6
 8003684:	f000 fb72 	bl	8003d6c <__swsetup_r>
 8003688:	b170      	cbz	r0, 80036a8 <_vfiprintf_r+0x5c>
 800368a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800368c:	07dc      	lsls	r4, r3, #31
 800368e:	d504      	bpl.n	800369a <_vfiprintf_r+0x4e>
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	b01d      	add	sp, #116	@ 0x74
 8003696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369a:	89ab      	ldrh	r3, [r5, #12]
 800369c:	0598      	lsls	r0, r3, #22
 800369e:	d4f7      	bmi.n	8003690 <_vfiprintf_r+0x44>
 80036a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036a2:	f7ff feaf 	bl	8003404 <__retarget_lock_release_recursive>
 80036a6:	e7f3      	b.n	8003690 <_vfiprintf_r+0x44>
 80036a8:	2300      	movs	r3, #0
 80036aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80036ac:	2320      	movs	r3, #32
 80036ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80036b6:	2330      	movs	r3, #48	@ 0x30
 80036b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003868 <_vfiprintf_r+0x21c>
 80036bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036c0:	f04f 0901 	mov.w	r9, #1
 80036c4:	4623      	mov	r3, r4
 80036c6:	469a      	mov	sl, r3
 80036c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036cc:	b10a      	cbz	r2, 80036d2 <_vfiprintf_r+0x86>
 80036ce:	2a25      	cmp	r2, #37	@ 0x25
 80036d0:	d1f9      	bne.n	80036c6 <_vfiprintf_r+0x7a>
 80036d2:	ebba 0b04 	subs.w	fp, sl, r4
 80036d6:	d00b      	beq.n	80036f0 <_vfiprintf_r+0xa4>
 80036d8:	465b      	mov	r3, fp
 80036da:	4622      	mov	r2, r4
 80036dc:	4629      	mov	r1, r5
 80036de:	4630      	mov	r0, r6
 80036e0:	f7ff ffa1 	bl	8003626 <__sfputs_r>
 80036e4:	3001      	adds	r0, #1
 80036e6:	f000 80a7 	beq.w	8003838 <_vfiprintf_r+0x1ec>
 80036ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036ec:	445a      	add	r2, fp
 80036ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80036f0:	f89a 3000 	ldrb.w	r3, [sl]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 809f 	beq.w	8003838 <_vfiprintf_r+0x1ec>
 80036fa:	2300      	movs	r3, #0
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003704:	f10a 0a01 	add.w	sl, sl, #1
 8003708:	9304      	str	r3, [sp, #16]
 800370a:	9307      	str	r3, [sp, #28]
 800370c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003710:	931a      	str	r3, [sp, #104]	@ 0x68
 8003712:	4654      	mov	r4, sl
 8003714:	2205      	movs	r2, #5
 8003716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800371a:	4853      	ldr	r0, [pc, #332]	@ (8003868 <_vfiprintf_r+0x21c>)
 800371c:	f7fc fd58 	bl	80001d0 <memchr>
 8003720:	9a04      	ldr	r2, [sp, #16]
 8003722:	b9d8      	cbnz	r0, 800375c <_vfiprintf_r+0x110>
 8003724:	06d1      	lsls	r1, r2, #27
 8003726:	bf44      	itt	mi
 8003728:	2320      	movmi	r3, #32
 800372a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800372e:	0713      	lsls	r3, r2, #28
 8003730:	bf44      	itt	mi
 8003732:	232b      	movmi	r3, #43	@ 0x2b
 8003734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003738:	f89a 3000 	ldrb.w	r3, [sl]
 800373c:	2b2a      	cmp	r3, #42	@ 0x2a
 800373e:	d015      	beq.n	800376c <_vfiprintf_r+0x120>
 8003740:	9a07      	ldr	r2, [sp, #28]
 8003742:	4654      	mov	r4, sl
 8003744:	2000      	movs	r0, #0
 8003746:	f04f 0c0a 	mov.w	ip, #10
 800374a:	4621      	mov	r1, r4
 800374c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003750:	3b30      	subs	r3, #48	@ 0x30
 8003752:	2b09      	cmp	r3, #9
 8003754:	d94b      	bls.n	80037ee <_vfiprintf_r+0x1a2>
 8003756:	b1b0      	cbz	r0, 8003786 <_vfiprintf_r+0x13a>
 8003758:	9207      	str	r2, [sp, #28]
 800375a:	e014      	b.n	8003786 <_vfiprintf_r+0x13a>
 800375c:	eba0 0308 	sub.w	r3, r0, r8
 8003760:	fa09 f303 	lsl.w	r3, r9, r3
 8003764:	4313      	orrs	r3, r2
 8003766:	9304      	str	r3, [sp, #16]
 8003768:	46a2      	mov	sl, r4
 800376a:	e7d2      	b.n	8003712 <_vfiprintf_r+0xc6>
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	1d19      	adds	r1, r3, #4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	9103      	str	r1, [sp, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	bfbb      	ittet	lt
 8003778:	425b      	neglt	r3, r3
 800377a:	f042 0202 	orrlt.w	r2, r2, #2
 800377e:	9307      	strge	r3, [sp, #28]
 8003780:	9307      	strlt	r3, [sp, #28]
 8003782:	bfb8      	it	lt
 8003784:	9204      	strlt	r2, [sp, #16]
 8003786:	7823      	ldrb	r3, [r4, #0]
 8003788:	2b2e      	cmp	r3, #46	@ 0x2e
 800378a:	d10a      	bne.n	80037a2 <_vfiprintf_r+0x156>
 800378c:	7863      	ldrb	r3, [r4, #1]
 800378e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003790:	d132      	bne.n	80037f8 <_vfiprintf_r+0x1ac>
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	1d1a      	adds	r2, r3, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	9203      	str	r2, [sp, #12]
 800379a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800379e:	3402      	adds	r4, #2
 80037a0:	9305      	str	r3, [sp, #20]
 80037a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003878 <_vfiprintf_r+0x22c>
 80037a6:	7821      	ldrb	r1, [r4, #0]
 80037a8:	2203      	movs	r2, #3
 80037aa:	4650      	mov	r0, sl
 80037ac:	f7fc fd10 	bl	80001d0 <memchr>
 80037b0:	b138      	cbz	r0, 80037c2 <_vfiprintf_r+0x176>
 80037b2:	9b04      	ldr	r3, [sp, #16]
 80037b4:	eba0 000a 	sub.w	r0, r0, sl
 80037b8:	2240      	movs	r2, #64	@ 0x40
 80037ba:	4082      	lsls	r2, r0
 80037bc:	4313      	orrs	r3, r2
 80037be:	3401      	adds	r4, #1
 80037c0:	9304      	str	r3, [sp, #16]
 80037c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037c6:	4829      	ldr	r0, [pc, #164]	@ (800386c <_vfiprintf_r+0x220>)
 80037c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037cc:	2206      	movs	r2, #6
 80037ce:	f7fc fcff 	bl	80001d0 <memchr>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d03f      	beq.n	8003856 <_vfiprintf_r+0x20a>
 80037d6:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <_vfiprintf_r+0x224>)
 80037d8:	bb1b      	cbnz	r3, 8003822 <_vfiprintf_r+0x1d6>
 80037da:	9b03      	ldr	r3, [sp, #12]
 80037dc:	3307      	adds	r3, #7
 80037de:	f023 0307 	bic.w	r3, r3, #7
 80037e2:	3308      	adds	r3, #8
 80037e4:	9303      	str	r3, [sp, #12]
 80037e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037e8:	443b      	add	r3, r7
 80037ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80037ec:	e76a      	b.n	80036c4 <_vfiprintf_r+0x78>
 80037ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80037f2:	460c      	mov	r4, r1
 80037f4:	2001      	movs	r0, #1
 80037f6:	e7a8      	b.n	800374a <_vfiprintf_r+0xfe>
 80037f8:	2300      	movs	r3, #0
 80037fa:	3401      	adds	r4, #1
 80037fc:	9305      	str	r3, [sp, #20]
 80037fe:	4619      	mov	r1, r3
 8003800:	f04f 0c0a 	mov.w	ip, #10
 8003804:	4620      	mov	r0, r4
 8003806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800380a:	3a30      	subs	r2, #48	@ 0x30
 800380c:	2a09      	cmp	r2, #9
 800380e:	d903      	bls.n	8003818 <_vfiprintf_r+0x1cc>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0c6      	beq.n	80037a2 <_vfiprintf_r+0x156>
 8003814:	9105      	str	r1, [sp, #20]
 8003816:	e7c4      	b.n	80037a2 <_vfiprintf_r+0x156>
 8003818:	fb0c 2101 	mla	r1, ip, r1, r2
 800381c:	4604      	mov	r4, r0
 800381e:	2301      	movs	r3, #1
 8003820:	e7f0      	b.n	8003804 <_vfiprintf_r+0x1b8>
 8003822:	ab03      	add	r3, sp, #12
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	462a      	mov	r2, r5
 8003828:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <_vfiprintf_r+0x228>)
 800382a:	a904      	add	r1, sp, #16
 800382c:	4630      	mov	r0, r6
 800382e:	f3af 8000 	nop.w
 8003832:	4607      	mov	r7, r0
 8003834:	1c78      	adds	r0, r7, #1
 8003836:	d1d6      	bne.n	80037e6 <_vfiprintf_r+0x19a>
 8003838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800383a:	07d9      	lsls	r1, r3, #31
 800383c:	d405      	bmi.n	800384a <_vfiprintf_r+0x1fe>
 800383e:	89ab      	ldrh	r3, [r5, #12]
 8003840:	059a      	lsls	r2, r3, #22
 8003842:	d402      	bmi.n	800384a <_vfiprintf_r+0x1fe>
 8003844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003846:	f7ff fddd 	bl	8003404 <__retarget_lock_release_recursive>
 800384a:	89ab      	ldrh	r3, [r5, #12]
 800384c:	065b      	lsls	r3, r3, #25
 800384e:	f53f af1f 	bmi.w	8003690 <_vfiprintf_r+0x44>
 8003852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003854:	e71e      	b.n	8003694 <_vfiprintf_r+0x48>
 8003856:	ab03      	add	r3, sp, #12
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	462a      	mov	r2, r5
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <_vfiprintf_r+0x228>)
 800385e:	a904      	add	r1, sp, #16
 8003860:	4630      	mov	r0, r6
 8003862:	f000 f879 	bl	8003958 <_printf_i>
 8003866:	e7e4      	b.n	8003832 <_vfiprintf_r+0x1e6>
 8003868:	08003fd4 	.word	0x08003fd4
 800386c:	08003fde 	.word	0x08003fde
 8003870:	00000000 	.word	0x00000000
 8003874:	08003627 	.word	0x08003627
 8003878:	08003fda 	.word	0x08003fda

0800387c <_printf_common>:
 800387c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003880:	4616      	mov	r6, r2
 8003882:	4698      	mov	r8, r3
 8003884:	688a      	ldr	r2, [r1, #8]
 8003886:	690b      	ldr	r3, [r1, #16]
 8003888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800388c:	4293      	cmp	r3, r2
 800388e:	bfb8      	it	lt
 8003890:	4613      	movlt	r3, r2
 8003892:	6033      	str	r3, [r6, #0]
 8003894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003898:	4607      	mov	r7, r0
 800389a:	460c      	mov	r4, r1
 800389c:	b10a      	cbz	r2, 80038a2 <_printf_common+0x26>
 800389e:	3301      	adds	r3, #1
 80038a0:	6033      	str	r3, [r6, #0]
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	0699      	lsls	r1, r3, #26
 80038a6:	bf42      	ittt	mi
 80038a8:	6833      	ldrmi	r3, [r6, #0]
 80038aa:	3302      	addmi	r3, #2
 80038ac:	6033      	strmi	r3, [r6, #0]
 80038ae:	6825      	ldr	r5, [r4, #0]
 80038b0:	f015 0506 	ands.w	r5, r5, #6
 80038b4:	d106      	bne.n	80038c4 <_printf_common+0x48>
 80038b6:	f104 0a19 	add.w	sl, r4, #25
 80038ba:	68e3      	ldr	r3, [r4, #12]
 80038bc:	6832      	ldr	r2, [r6, #0]
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	42ab      	cmp	r3, r5
 80038c2:	dc26      	bgt.n	8003912 <_printf_common+0x96>
 80038c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	3b00      	subs	r3, #0
 80038cc:	bf18      	it	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	0692      	lsls	r2, r2, #26
 80038d2:	d42b      	bmi.n	800392c <_printf_common+0xb0>
 80038d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038d8:	4641      	mov	r1, r8
 80038da:	4638      	mov	r0, r7
 80038dc:	47c8      	blx	r9
 80038de:	3001      	adds	r0, #1
 80038e0:	d01e      	beq.n	8003920 <_printf_common+0xa4>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	6922      	ldr	r2, [r4, #16]
 80038e6:	f003 0306 	and.w	r3, r3, #6
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	bf02      	ittt	eq
 80038ee:	68e5      	ldreq	r5, [r4, #12]
 80038f0:	6833      	ldreq	r3, [r6, #0]
 80038f2:	1aed      	subeq	r5, r5, r3
 80038f4:	68a3      	ldr	r3, [r4, #8]
 80038f6:	bf0c      	ite	eq
 80038f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038fc:	2500      	movne	r5, #0
 80038fe:	4293      	cmp	r3, r2
 8003900:	bfc4      	itt	gt
 8003902:	1a9b      	subgt	r3, r3, r2
 8003904:	18ed      	addgt	r5, r5, r3
 8003906:	2600      	movs	r6, #0
 8003908:	341a      	adds	r4, #26
 800390a:	42b5      	cmp	r5, r6
 800390c:	d11a      	bne.n	8003944 <_printf_common+0xc8>
 800390e:	2000      	movs	r0, #0
 8003910:	e008      	b.n	8003924 <_printf_common+0xa8>
 8003912:	2301      	movs	r3, #1
 8003914:	4652      	mov	r2, sl
 8003916:	4641      	mov	r1, r8
 8003918:	4638      	mov	r0, r7
 800391a:	47c8      	blx	r9
 800391c:	3001      	adds	r0, #1
 800391e:	d103      	bne.n	8003928 <_printf_common+0xac>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003928:	3501      	adds	r5, #1
 800392a:	e7c6      	b.n	80038ba <_printf_common+0x3e>
 800392c:	18e1      	adds	r1, r4, r3
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	2030      	movs	r0, #48	@ 0x30
 8003932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003936:	4422      	add	r2, r4
 8003938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800393c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003940:	3302      	adds	r3, #2
 8003942:	e7c7      	b.n	80038d4 <_printf_common+0x58>
 8003944:	2301      	movs	r3, #1
 8003946:	4622      	mov	r2, r4
 8003948:	4641      	mov	r1, r8
 800394a:	4638      	mov	r0, r7
 800394c:	47c8      	blx	r9
 800394e:	3001      	adds	r0, #1
 8003950:	d0e6      	beq.n	8003920 <_printf_common+0xa4>
 8003952:	3601      	adds	r6, #1
 8003954:	e7d9      	b.n	800390a <_printf_common+0x8e>
	...

08003958 <_printf_i>:
 8003958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	7e0f      	ldrb	r7, [r1, #24]
 800395e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003960:	2f78      	cmp	r7, #120	@ 0x78
 8003962:	4691      	mov	r9, r2
 8003964:	4680      	mov	r8, r0
 8003966:	460c      	mov	r4, r1
 8003968:	469a      	mov	sl, r3
 800396a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800396e:	d807      	bhi.n	8003980 <_printf_i+0x28>
 8003970:	2f62      	cmp	r7, #98	@ 0x62
 8003972:	d80a      	bhi.n	800398a <_printf_i+0x32>
 8003974:	2f00      	cmp	r7, #0
 8003976:	f000 80d2 	beq.w	8003b1e <_printf_i+0x1c6>
 800397a:	2f58      	cmp	r7, #88	@ 0x58
 800397c:	f000 80b9 	beq.w	8003af2 <_printf_i+0x19a>
 8003980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003988:	e03a      	b.n	8003a00 <_printf_i+0xa8>
 800398a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800398e:	2b15      	cmp	r3, #21
 8003990:	d8f6      	bhi.n	8003980 <_printf_i+0x28>
 8003992:	a101      	add	r1, pc, #4	@ (adr r1, 8003998 <_printf_i+0x40>)
 8003994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003998:	080039f1 	.word	0x080039f1
 800399c:	08003a05 	.word	0x08003a05
 80039a0:	08003981 	.word	0x08003981
 80039a4:	08003981 	.word	0x08003981
 80039a8:	08003981 	.word	0x08003981
 80039ac:	08003981 	.word	0x08003981
 80039b0:	08003a05 	.word	0x08003a05
 80039b4:	08003981 	.word	0x08003981
 80039b8:	08003981 	.word	0x08003981
 80039bc:	08003981 	.word	0x08003981
 80039c0:	08003981 	.word	0x08003981
 80039c4:	08003b05 	.word	0x08003b05
 80039c8:	08003a2f 	.word	0x08003a2f
 80039cc:	08003abf 	.word	0x08003abf
 80039d0:	08003981 	.word	0x08003981
 80039d4:	08003981 	.word	0x08003981
 80039d8:	08003b27 	.word	0x08003b27
 80039dc:	08003981 	.word	0x08003981
 80039e0:	08003a2f 	.word	0x08003a2f
 80039e4:	08003981 	.word	0x08003981
 80039e8:	08003981 	.word	0x08003981
 80039ec:	08003ac7 	.word	0x08003ac7
 80039f0:	6833      	ldr	r3, [r6, #0]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6032      	str	r2, [r6, #0]
 80039f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a00:	2301      	movs	r3, #1
 8003a02:	e09d      	b.n	8003b40 <_printf_i+0x1e8>
 8003a04:	6833      	ldr	r3, [r6, #0]
 8003a06:	6820      	ldr	r0, [r4, #0]
 8003a08:	1d19      	adds	r1, r3, #4
 8003a0a:	6031      	str	r1, [r6, #0]
 8003a0c:	0606      	lsls	r6, r0, #24
 8003a0e:	d501      	bpl.n	8003a14 <_printf_i+0xbc>
 8003a10:	681d      	ldr	r5, [r3, #0]
 8003a12:	e003      	b.n	8003a1c <_printf_i+0xc4>
 8003a14:	0645      	lsls	r5, r0, #25
 8003a16:	d5fb      	bpl.n	8003a10 <_printf_i+0xb8>
 8003a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a1c:	2d00      	cmp	r5, #0
 8003a1e:	da03      	bge.n	8003a28 <_printf_i+0xd0>
 8003a20:	232d      	movs	r3, #45	@ 0x2d
 8003a22:	426d      	negs	r5, r5
 8003a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a28:	4859      	ldr	r0, [pc, #356]	@ (8003b90 <_printf_i+0x238>)
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	e011      	b.n	8003a52 <_printf_i+0xfa>
 8003a2e:	6821      	ldr	r1, [r4, #0]
 8003a30:	6833      	ldr	r3, [r6, #0]
 8003a32:	0608      	lsls	r0, r1, #24
 8003a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a38:	d402      	bmi.n	8003a40 <_printf_i+0xe8>
 8003a3a:	0649      	lsls	r1, r1, #25
 8003a3c:	bf48      	it	mi
 8003a3e:	b2ad      	uxthmi	r5, r5
 8003a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a42:	4853      	ldr	r0, [pc, #332]	@ (8003b90 <_printf_i+0x238>)
 8003a44:	6033      	str	r3, [r6, #0]
 8003a46:	bf14      	ite	ne
 8003a48:	230a      	movne	r3, #10
 8003a4a:	2308      	moveq	r3, #8
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a52:	6866      	ldr	r6, [r4, #4]
 8003a54:	60a6      	str	r6, [r4, #8]
 8003a56:	2e00      	cmp	r6, #0
 8003a58:	bfa2      	ittt	ge
 8003a5a:	6821      	ldrge	r1, [r4, #0]
 8003a5c:	f021 0104 	bicge.w	r1, r1, #4
 8003a60:	6021      	strge	r1, [r4, #0]
 8003a62:	b90d      	cbnz	r5, 8003a68 <_printf_i+0x110>
 8003a64:	2e00      	cmp	r6, #0
 8003a66:	d04b      	beq.n	8003b00 <_printf_i+0x1a8>
 8003a68:	4616      	mov	r6, r2
 8003a6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a6e:	fb03 5711 	mls	r7, r3, r1, r5
 8003a72:	5dc7      	ldrb	r7, [r0, r7]
 8003a74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a78:	462f      	mov	r7, r5
 8003a7a:	42bb      	cmp	r3, r7
 8003a7c:	460d      	mov	r5, r1
 8003a7e:	d9f4      	bls.n	8003a6a <_printf_i+0x112>
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d10b      	bne.n	8003a9c <_printf_i+0x144>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	07df      	lsls	r7, r3, #31
 8003a88:	d508      	bpl.n	8003a9c <_printf_i+0x144>
 8003a8a:	6923      	ldr	r3, [r4, #16]
 8003a8c:	6861      	ldr	r1, [r4, #4]
 8003a8e:	4299      	cmp	r1, r3
 8003a90:	bfde      	ittt	le
 8003a92:	2330      	movle	r3, #48	@ 0x30
 8003a94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a9c:	1b92      	subs	r2, r2, r6
 8003a9e:	6122      	str	r2, [r4, #16]
 8003aa0:	f8cd a000 	str.w	sl, [sp]
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	aa03      	add	r2, sp, #12
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	4640      	mov	r0, r8
 8003aac:	f7ff fee6 	bl	800387c <_printf_common>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d14a      	bne.n	8003b4a <_printf_i+0x1f2>
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	b004      	add	sp, #16
 8003aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	f043 0320 	orr.w	r3, r3, #32
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	4833      	ldr	r0, [pc, #204]	@ (8003b94 <_printf_i+0x23c>)
 8003ac8:	2778      	movs	r7, #120	@ 0x78
 8003aca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	6831      	ldr	r1, [r6, #0]
 8003ad2:	061f      	lsls	r7, r3, #24
 8003ad4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ad8:	d402      	bmi.n	8003ae0 <_printf_i+0x188>
 8003ada:	065f      	lsls	r7, r3, #25
 8003adc:	bf48      	it	mi
 8003ade:	b2ad      	uxthmi	r5, r5
 8003ae0:	6031      	str	r1, [r6, #0]
 8003ae2:	07d9      	lsls	r1, r3, #31
 8003ae4:	bf44      	itt	mi
 8003ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8003aea:	6023      	strmi	r3, [r4, #0]
 8003aec:	b11d      	cbz	r5, 8003af6 <_printf_i+0x19e>
 8003aee:	2310      	movs	r3, #16
 8003af0:	e7ac      	b.n	8003a4c <_printf_i+0xf4>
 8003af2:	4827      	ldr	r0, [pc, #156]	@ (8003b90 <_printf_i+0x238>)
 8003af4:	e7e9      	b.n	8003aca <_printf_i+0x172>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	f023 0320 	bic.w	r3, r3, #32
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	e7f6      	b.n	8003aee <_printf_i+0x196>
 8003b00:	4616      	mov	r6, r2
 8003b02:	e7bd      	b.n	8003a80 <_printf_i+0x128>
 8003b04:	6833      	ldr	r3, [r6, #0]
 8003b06:	6825      	ldr	r5, [r4, #0]
 8003b08:	6961      	ldr	r1, [r4, #20]
 8003b0a:	1d18      	adds	r0, r3, #4
 8003b0c:	6030      	str	r0, [r6, #0]
 8003b0e:	062e      	lsls	r6, r5, #24
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	d501      	bpl.n	8003b18 <_printf_i+0x1c0>
 8003b14:	6019      	str	r1, [r3, #0]
 8003b16:	e002      	b.n	8003b1e <_printf_i+0x1c6>
 8003b18:	0668      	lsls	r0, r5, #25
 8003b1a:	d5fb      	bpl.n	8003b14 <_printf_i+0x1bc>
 8003b1c:	8019      	strh	r1, [r3, #0]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	6123      	str	r3, [r4, #16]
 8003b22:	4616      	mov	r6, r2
 8003b24:	e7bc      	b.n	8003aa0 <_printf_i+0x148>
 8003b26:	6833      	ldr	r3, [r6, #0]
 8003b28:	1d1a      	adds	r2, r3, #4
 8003b2a:	6032      	str	r2, [r6, #0]
 8003b2c:	681e      	ldr	r6, [r3, #0]
 8003b2e:	6862      	ldr	r2, [r4, #4]
 8003b30:	2100      	movs	r1, #0
 8003b32:	4630      	mov	r0, r6
 8003b34:	f7fc fb4c 	bl	80001d0 <memchr>
 8003b38:	b108      	cbz	r0, 8003b3e <_printf_i+0x1e6>
 8003b3a:	1b80      	subs	r0, r0, r6
 8003b3c:	6060      	str	r0, [r4, #4]
 8003b3e:	6863      	ldr	r3, [r4, #4]
 8003b40:	6123      	str	r3, [r4, #16]
 8003b42:	2300      	movs	r3, #0
 8003b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b48:	e7aa      	b.n	8003aa0 <_printf_i+0x148>
 8003b4a:	6923      	ldr	r3, [r4, #16]
 8003b4c:	4632      	mov	r2, r6
 8003b4e:	4649      	mov	r1, r9
 8003b50:	4640      	mov	r0, r8
 8003b52:	47d0      	blx	sl
 8003b54:	3001      	adds	r0, #1
 8003b56:	d0ad      	beq.n	8003ab4 <_printf_i+0x15c>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	079b      	lsls	r3, r3, #30
 8003b5c:	d413      	bmi.n	8003b86 <_printf_i+0x22e>
 8003b5e:	68e0      	ldr	r0, [r4, #12]
 8003b60:	9b03      	ldr	r3, [sp, #12]
 8003b62:	4298      	cmp	r0, r3
 8003b64:	bfb8      	it	lt
 8003b66:	4618      	movlt	r0, r3
 8003b68:	e7a6      	b.n	8003ab8 <_printf_i+0x160>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	4649      	mov	r1, r9
 8003b70:	4640      	mov	r0, r8
 8003b72:	47d0      	blx	sl
 8003b74:	3001      	adds	r0, #1
 8003b76:	d09d      	beq.n	8003ab4 <_printf_i+0x15c>
 8003b78:	3501      	adds	r5, #1
 8003b7a:	68e3      	ldr	r3, [r4, #12]
 8003b7c:	9903      	ldr	r1, [sp, #12]
 8003b7e:	1a5b      	subs	r3, r3, r1
 8003b80:	42ab      	cmp	r3, r5
 8003b82:	dcf2      	bgt.n	8003b6a <_printf_i+0x212>
 8003b84:	e7eb      	b.n	8003b5e <_printf_i+0x206>
 8003b86:	2500      	movs	r5, #0
 8003b88:	f104 0619 	add.w	r6, r4, #25
 8003b8c:	e7f5      	b.n	8003b7a <_printf_i+0x222>
 8003b8e:	bf00      	nop
 8003b90:	08003fe5 	.word	0x08003fe5
 8003b94:	08003ff6 	.word	0x08003ff6

08003b98 <__sflush_r>:
 8003b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba0:	0716      	lsls	r6, r2, #28
 8003ba2:	4605      	mov	r5, r0
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	d454      	bmi.n	8003c52 <__sflush_r+0xba>
 8003ba8:	684b      	ldr	r3, [r1, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	dc02      	bgt.n	8003bb4 <__sflush_r+0x1c>
 8003bae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	dd48      	ble.n	8003c46 <__sflush_r+0xae>
 8003bb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bb6:	2e00      	cmp	r6, #0
 8003bb8:	d045      	beq.n	8003c46 <__sflush_r+0xae>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003bc0:	682f      	ldr	r7, [r5, #0]
 8003bc2:	6a21      	ldr	r1, [r4, #32]
 8003bc4:	602b      	str	r3, [r5, #0]
 8003bc6:	d030      	beq.n	8003c2a <__sflush_r+0x92>
 8003bc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	0759      	lsls	r1, r3, #29
 8003bce:	d505      	bpl.n	8003bdc <__sflush_r+0x44>
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bd6:	b10b      	cbz	r3, 8003bdc <__sflush_r+0x44>
 8003bd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003be0:	6a21      	ldr	r1, [r4, #32]
 8003be2:	4628      	mov	r0, r5
 8003be4:	47b0      	blx	r6
 8003be6:	1c43      	adds	r3, r0, #1
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	d106      	bne.n	8003bfa <__sflush_r+0x62>
 8003bec:	6829      	ldr	r1, [r5, #0]
 8003bee:	291d      	cmp	r1, #29
 8003bf0:	d82b      	bhi.n	8003c4a <__sflush_r+0xb2>
 8003bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c9c <__sflush_r+0x104>)
 8003bf4:	410a      	asrs	r2, r1
 8003bf6:	07d6      	lsls	r6, r2, #31
 8003bf8:	d427      	bmi.n	8003c4a <__sflush_r+0xb2>
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	6062      	str	r2, [r4, #4]
 8003bfe:	04d9      	lsls	r1, r3, #19
 8003c00:	6922      	ldr	r2, [r4, #16]
 8003c02:	6022      	str	r2, [r4, #0]
 8003c04:	d504      	bpl.n	8003c10 <__sflush_r+0x78>
 8003c06:	1c42      	adds	r2, r0, #1
 8003c08:	d101      	bne.n	8003c0e <__sflush_r+0x76>
 8003c0a:	682b      	ldr	r3, [r5, #0]
 8003c0c:	b903      	cbnz	r3, 8003c10 <__sflush_r+0x78>
 8003c0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c12:	602f      	str	r7, [r5, #0]
 8003c14:	b1b9      	cbz	r1, 8003c46 <__sflush_r+0xae>
 8003c16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c1a:	4299      	cmp	r1, r3
 8003c1c:	d002      	beq.n	8003c24 <__sflush_r+0x8c>
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f7ff fbf2 	bl	8003408 <_free_r>
 8003c24:	2300      	movs	r3, #0
 8003c26:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c28:	e00d      	b.n	8003c46 <__sflush_r+0xae>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	47b0      	blx	r6
 8003c30:	4602      	mov	r2, r0
 8003c32:	1c50      	adds	r0, r2, #1
 8003c34:	d1c9      	bne.n	8003bca <__sflush_r+0x32>
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0c6      	beq.n	8003bca <__sflush_r+0x32>
 8003c3c:	2b1d      	cmp	r3, #29
 8003c3e:	d001      	beq.n	8003c44 <__sflush_r+0xac>
 8003c40:	2b16      	cmp	r3, #22
 8003c42:	d11e      	bne.n	8003c82 <__sflush_r+0xea>
 8003c44:	602f      	str	r7, [r5, #0]
 8003c46:	2000      	movs	r0, #0
 8003c48:	e022      	b.n	8003c90 <__sflush_r+0xf8>
 8003c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c4e:	b21b      	sxth	r3, r3
 8003c50:	e01b      	b.n	8003c8a <__sflush_r+0xf2>
 8003c52:	690f      	ldr	r7, [r1, #16]
 8003c54:	2f00      	cmp	r7, #0
 8003c56:	d0f6      	beq.n	8003c46 <__sflush_r+0xae>
 8003c58:	0793      	lsls	r3, r2, #30
 8003c5a:	680e      	ldr	r6, [r1, #0]
 8003c5c:	bf08      	it	eq
 8003c5e:	694b      	ldreq	r3, [r1, #20]
 8003c60:	600f      	str	r7, [r1, #0]
 8003c62:	bf18      	it	ne
 8003c64:	2300      	movne	r3, #0
 8003c66:	eba6 0807 	sub.w	r8, r6, r7
 8003c6a:	608b      	str	r3, [r1, #8]
 8003c6c:	f1b8 0f00 	cmp.w	r8, #0
 8003c70:	dde9      	ble.n	8003c46 <__sflush_r+0xae>
 8003c72:	6a21      	ldr	r1, [r4, #32]
 8003c74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c76:	4643      	mov	r3, r8
 8003c78:	463a      	mov	r2, r7
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	47b0      	blx	r6
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	dc08      	bgt.n	8003c94 <__sflush_r+0xfc>
 8003c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c8a:	81a3      	strh	r3, [r4, #12]
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c94:	4407      	add	r7, r0
 8003c96:	eba8 0800 	sub.w	r8, r8, r0
 8003c9a:	e7e7      	b.n	8003c6c <__sflush_r+0xd4>
 8003c9c:	dfbffffe 	.word	0xdfbffffe

08003ca0 <_fflush_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	690b      	ldr	r3, [r1, #16]
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	b913      	cbnz	r3, 8003cb0 <_fflush_r+0x10>
 8003caa:	2500      	movs	r5, #0
 8003cac:	4628      	mov	r0, r5
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	b118      	cbz	r0, 8003cba <_fflush_r+0x1a>
 8003cb2:	6a03      	ldr	r3, [r0, #32]
 8003cb4:	b90b      	cbnz	r3, 8003cba <_fflush_r+0x1a>
 8003cb6:	f7ff fa49 	bl	800314c <__sinit>
 8003cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f3      	beq.n	8003caa <_fflush_r+0xa>
 8003cc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003cc4:	07d0      	lsls	r0, r2, #31
 8003cc6:	d404      	bmi.n	8003cd2 <_fflush_r+0x32>
 8003cc8:	0599      	lsls	r1, r3, #22
 8003cca:	d402      	bmi.n	8003cd2 <_fflush_r+0x32>
 8003ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cce:	f7ff fb98 	bl	8003402 <__retarget_lock_acquire_recursive>
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	f7ff ff5f 	bl	8003b98 <__sflush_r>
 8003cda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cdc:	07da      	lsls	r2, r3, #31
 8003cde:	4605      	mov	r5, r0
 8003ce0:	d4e4      	bmi.n	8003cac <_fflush_r+0xc>
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	059b      	lsls	r3, r3, #22
 8003ce6:	d4e1      	bmi.n	8003cac <_fflush_r+0xc>
 8003ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cea:	f7ff fb8b 	bl	8003404 <__retarget_lock_release_recursive>
 8003cee:	e7dd      	b.n	8003cac <_fflush_r+0xc>

08003cf0 <__swbuf_r>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	460e      	mov	r6, r1
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	4605      	mov	r5, r0
 8003cf8:	b118      	cbz	r0, 8003d02 <__swbuf_r+0x12>
 8003cfa:	6a03      	ldr	r3, [r0, #32]
 8003cfc:	b90b      	cbnz	r3, 8003d02 <__swbuf_r+0x12>
 8003cfe:	f7ff fa25 	bl	800314c <__sinit>
 8003d02:	69a3      	ldr	r3, [r4, #24]
 8003d04:	60a3      	str	r3, [r4, #8]
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	071a      	lsls	r2, r3, #28
 8003d0a:	d501      	bpl.n	8003d10 <__swbuf_r+0x20>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	b943      	cbnz	r3, 8003d22 <__swbuf_r+0x32>
 8003d10:	4621      	mov	r1, r4
 8003d12:	4628      	mov	r0, r5
 8003d14:	f000 f82a 	bl	8003d6c <__swsetup_r>
 8003d18:	b118      	cbz	r0, 8003d22 <__swbuf_r+0x32>
 8003d1a:	f04f 37ff 	mov.w	r7, #4294967295
 8003d1e:	4638      	mov	r0, r7
 8003d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	6922      	ldr	r2, [r4, #16]
 8003d26:	1a98      	subs	r0, r3, r2
 8003d28:	6963      	ldr	r3, [r4, #20]
 8003d2a:	b2f6      	uxtb	r6, r6
 8003d2c:	4283      	cmp	r3, r0
 8003d2e:	4637      	mov	r7, r6
 8003d30:	dc05      	bgt.n	8003d3e <__swbuf_r+0x4e>
 8003d32:	4621      	mov	r1, r4
 8003d34:	4628      	mov	r0, r5
 8003d36:	f7ff ffb3 	bl	8003ca0 <_fflush_r>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d1ed      	bne.n	8003d1a <__swbuf_r+0x2a>
 8003d3e:	68a3      	ldr	r3, [r4, #8]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	60a3      	str	r3, [r4, #8]
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	6022      	str	r2, [r4, #0]
 8003d4a:	701e      	strb	r6, [r3, #0]
 8003d4c:	6962      	ldr	r2, [r4, #20]
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d004      	beq.n	8003d5e <__swbuf_r+0x6e>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	07db      	lsls	r3, r3, #31
 8003d58:	d5e1      	bpl.n	8003d1e <__swbuf_r+0x2e>
 8003d5a:	2e0a      	cmp	r6, #10
 8003d5c:	d1df      	bne.n	8003d1e <__swbuf_r+0x2e>
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f7ff ff9d 	bl	8003ca0 <_fflush_r>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d0d9      	beq.n	8003d1e <__swbuf_r+0x2e>
 8003d6a:	e7d6      	b.n	8003d1a <__swbuf_r+0x2a>

08003d6c <__swsetup_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4b29      	ldr	r3, [pc, #164]	@ (8003e14 <__swsetup_r+0xa8>)
 8003d70:	4605      	mov	r5, r0
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	460c      	mov	r4, r1
 8003d76:	b118      	cbz	r0, 8003d80 <__swsetup_r+0x14>
 8003d78:	6a03      	ldr	r3, [r0, #32]
 8003d7a:	b90b      	cbnz	r3, 8003d80 <__swsetup_r+0x14>
 8003d7c:	f7ff f9e6 	bl	800314c <__sinit>
 8003d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d84:	0719      	lsls	r1, r3, #28
 8003d86:	d422      	bmi.n	8003dce <__swsetup_r+0x62>
 8003d88:	06da      	lsls	r2, r3, #27
 8003d8a:	d407      	bmi.n	8003d9c <__swsetup_r+0x30>
 8003d8c:	2209      	movs	r2, #9
 8003d8e:	602a      	str	r2, [r5, #0]
 8003d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9a:	e033      	b.n	8003e04 <__swsetup_r+0x98>
 8003d9c:	0758      	lsls	r0, r3, #29
 8003d9e:	d512      	bpl.n	8003dc6 <__swsetup_r+0x5a>
 8003da0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003da2:	b141      	cbz	r1, 8003db6 <__swsetup_r+0x4a>
 8003da4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003da8:	4299      	cmp	r1, r3
 8003daa:	d002      	beq.n	8003db2 <__swsetup_r+0x46>
 8003dac:	4628      	mov	r0, r5
 8003dae:	f7ff fb2b 	bl	8003408 <_free_r>
 8003db2:	2300      	movs	r3, #0
 8003db4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003db6:	89a3      	ldrh	r3, [r4, #12]
 8003db8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003dbc:	81a3      	strh	r3, [r4, #12]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6063      	str	r3, [r4, #4]
 8003dc2:	6923      	ldr	r3, [r4, #16]
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	89a3      	ldrh	r3, [r4, #12]
 8003dc8:	f043 0308 	orr.w	r3, r3, #8
 8003dcc:	81a3      	strh	r3, [r4, #12]
 8003dce:	6923      	ldr	r3, [r4, #16]
 8003dd0:	b94b      	cbnz	r3, 8003de6 <__swsetup_r+0x7a>
 8003dd2:	89a3      	ldrh	r3, [r4, #12]
 8003dd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ddc:	d003      	beq.n	8003de6 <__swsetup_r+0x7a>
 8003dde:	4621      	mov	r1, r4
 8003de0:	4628      	mov	r0, r5
 8003de2:	f000 f84f 	bl	8003e84 <__smakebuf_r>
 8003de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dea:	f013 0201 	ands.w	r2, r3, #1
 8003dee:	d00a      	beq.n	8003e06 <__swsetup_r+0x9a>
 8003df0:	2200      	movs	r2, #0
 8003df2:	60a2      	str	r2, [r4, #8]
 8003df4:	6962      	ldr	r2, [r4, #20]
 8003df6:	4252      	negs	r2, r2
 8003df8:	61a2      	str	r2, [r4, #24]
 8003dfa:	6922      	ldr	r2, [r4, #16]
 8003dfc:	b942      	cbnz	r2, 8003e10 <__swsetup_r+0xa4>
 8003dfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e02:	d1c5      	bne.n	8003d90 <__swsetup_r+0x24>
 8003e04:	bd38      	pop	{r3, r4, r5, pc}
 8003e06:	0799      	lsls	r1, r3, #30
 8003e08:	bf58      	it	pl
 8003e0a:	6962      	ldrpl	r2, [r4, #20]
 8003e0c:	60a2      	str	r2, [r4, #8]
 8003e0e:	e7f4      	b.n	8003dfa <__swsetup_r+0x8e>
 8003e10:	2000      	movs	r0, #0
 8003e12:	e7f7      	b.n	8003e04 <__swsetup_r+0x98>
 8003e14:	2000001c 	.word	0x2000001c

08003e18 <_sbrk_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	4d06      	ldr	r5, [pc, #24]	@ (8003e34 <_sbrk_r+0x1c>)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	f7fc fde0 	bl	80009e8 <_sbrk>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_sbrk_r+0x1a>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_sbrk_r+0x1a>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	2000446c 	.word	0x2000446c

08003e38 <__swhatbuf_r>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e40:	2900      	cmp	r1, #0
 8003e42:	b096      	sub	sp, #88	@ 0x58
 8003e44:	4615      	mov	r5, r2
 8003e46:	461e      	mov	r6, r3
 8003e48:	da0d      	bge.n	8003e66 <__swhatbuf_r+0x2e>
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	bf14      	ite	ne
 8003e56:	2340      	movne	r3, #64	@ 0x40
 8003e58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	6031      	str	r1, [r6, #0]
 8003e60:	602b      	str	r3, [r5, #0]
 8003e62:	b016      	add	sp, #88	@ 0x58
 8003e64:	bd70      	pop	{r4, r5, r6, pc}
 8003e66:	466a      	mov	r2, sp
 8003e68:	f000 f848 	bl	8003efc <_fstat_r>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	dbec      	blt.n	8003e4a <__swhatbuf_r+0x12>
 8003e70:	9901      	ldr	r1, [sp, #4]
 8003e72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e7a:	4259      	negs	r1, r3
 8003e7c:	4159      	adcs	r1, r3
 8003e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e82:	e7eb      	b.n	8003e5c <__swhatbuf_r+0x24>

08003e84 <__smakebuf_r>:
 8003e84:	898b      	ldrh	r3, [r1, #12]
 8003e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e88:	079d      	lsls	r5, r3, #30
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	d507      	bpl.n	8003ea0 <__smakebuf_r+0x1c>
 8003e90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	6123      	str	r3, [r4, #16]
 8003e98:	2301      	movs	r3, #1
 8003e9a:	6163      	str	r3, [r4, #20]
 8003e9c:	b003      	add	sp, #12
 8003e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ea0:	ab01      	add	r3, sp, #4
 8003ea2:	466a      	mov	r2, sp
 8003ea4:	f7ff ffc8 	bl	8003e38 <__swhatbuf_r>
 8003ea8:	9f00      	ldr	r7, [sp, #0]
 8003eaa:	4605      	mov	r5, r0
 8003eac:	4639      	mov	r1, r7
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7ff fb16 	bl	80034e0 <_malloc_r>
 8003eb4:	b948      	cbnz	r0, 8003eca <__smakebuf_r+0x46>
 8003eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eba:	059a      	lsls	r2, r3, #22
 8003ebc:	d4ee      	bmi.n	8003e9c <__smakebuf_r+0x18>
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	f043 0302 	orr.w	r3, r3, #2
 8003ec6:	81a3      	strh	r3, [r4, #12]
 8003ec8:	e7e2      	b.n	8003e90 <__smakebuf_r+0xc>
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	6020      	str	r0, [r4, #0]
 8003ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ed2:	81a3      	strh	r3, [r4, #12]
 8003ed4:	9b01      	ldr	r3, [sp, #4]
 8003ed6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003eda:	b15b      	cbz	r3, 8003ef4 <__smakebuf_r+0x70>
 8003edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ee0:	4630      	mov	r0, r6
 8003ee2:	f000 f81d 	bl	8003f20 <_isatty_r>
 8003ee6:	b128      	cbz	r0, 8003ef4 <__smakebuf_r+0x70>
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	81a3      	strh	r3, [r4, #12]
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	431d      	orrs	r5, r3
 8003ef8:	81a5      	strh	r5, [r4, #12]
 8003efa:	e7cf      	b.n	8003e9c <__smakebuf_r+0x18>

08003efc <_fstat_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d07      	ldr	r5, [pc, #28]	@ (8003f1c <_fstat_r+0x20>)
 8003f00:	2300      	movs	r3, #0
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	602b      	str	r3, [r5, #0]
 8003f0a:	f7fc fd44 	bl	8000996 <_fstat>
 8003f0e:	1c43      	adds	r3, r0, #1
 8003f10:	d102      	bne.n	8003f18 <_fstat_r+0x1c>
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	b103      	cbz	r3, 8003f18 <_fstat_r+0x1c>
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	bd38      	pop	{r3, r4, r5, pc}
 8003f1a:	bf00      	nop
 8003f1c:	2000446c 	.word	0x2000446c

08003f20 <_isatty_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4d06      	ldr	r5, [pc, #24]	@ (8003f3c <_isatty_r+0x1c>)
 8003f24:	2300      	movs	r3, #0
 8003f26:	4604      	mov	r4, r0
 8003f28:	4608      	mov	r0, r1
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	f7fc fd43 	bl	80009b6 <_isatty>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_isatty_r+0x1a>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_isatty_r+0x1a>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	2000446c 	.word	0x2000446c

08003f40 <_init>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr

08003f4c <_fini>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr
