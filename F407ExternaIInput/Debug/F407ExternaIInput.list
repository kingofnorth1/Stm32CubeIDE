
F407ExternaIInput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004100  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  08004290  08004290  00005290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004980  08004980  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004980  08004980  00005980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004988  08004988  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004988  08004988  00005988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800498c  0800498c  0000598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004990  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000006d8  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000734  20000734  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd55  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdf  00000000  00000000  00012de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00014dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b77  00000000  00000000  00015b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012146  00000000  00000000  000376bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbc9b  00000000  00000000  00049805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001154a0  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000a8c  00000000  00000000  001154e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003db0  00000000  00000000  00115f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00119d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004278 	.word	0x08004278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004278 	.word	0x08004278

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <MX_GPIO_Init+0x68>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a16      	ldr	r2, [pc, #88]	@ (80005c8 <MX_GPIO_Init+0x68>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <MX_GPIO_Init+0x68>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <MX_GPIO_Init+0x68>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a0f      	ldr	r2, [pc, #60]	@ (80005c8 <MX_GPIO_Init+0x68>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <MX_GPIO_Init+0x68>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0310 	and.w	r3, r3, #16
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <MX_GPIO_Init+0x68>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a08      	ldr	r2, [pc, #32]	@ (80005c8 <MX_GPIO_Init+0x68>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <MX_GPIO_Init+0x68>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800

080005cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <MX_I2C1_Init+0x50>)
 80005d2:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <MX_I2C1_Init+0x54>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <MX_I2C1_Init+0x50>)
 80005d8:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <MX_I2C1_Init+0x58>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <MX_I2C1_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <MX_I2C1_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_I2C1_Init+0x50>)
 80005ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_I2C1_Init+0x50>)
 800060a:	f001 f9a7 	bl	800195c <HAL_I2C_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 f8fc 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000078 	.word	0x20000078
 8000620:	40005400 	.word	0x40005400
 8000624:	000186a0 	.word	0x000186a0

08000628 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a19      	ldr	r2, [pc, #100]	@ (80006ac <HAL_I2C_MspInit+0x84>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d12b      	bne.n	80006a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <HAL_I2C_MspInit+0x88>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a17      	ldr	r2, [pc, #92]	@ (80006b0 <HAL_I2C_MspInit+0x88>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <HAL_I2C_MspInit+0x88>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000666:	23c0      	movs	r3, #192	@ 0xc0
 8000668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066a:	2312      	movs	r3, #18
 800066c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000676:	2304      	movs	r3, #4
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <HAL_I2C_MspInit+0x8c>)
 8000682:	f000 ffcf 	bl	8001624 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <HAL_I2C_MspInit+0x88>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068e:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <HAL_I2C_MspInit+0x88>)
 8000690:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000694:	6413      	str	r3, [r2, #64]	@ 0x40
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <HAL_I2C_MspInit+0x88>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40005400 	.word	0x40005400
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020400 	.word	0x40020400

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f000 fe35 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f847 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f7ff ff4b 	bl	8000560 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ca:	f7ff ff7f 	bl	80005cc <MX_I2C1_Init>
  MX_TIM1_Init();
 80006ce:	f000 fc95 	bl	8000ffc <MX_TIM1_Init>
  MX_TIM5_Init();
 80006d2:	f000 fce9 	bl	80010a8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 80006d6:	2014      	movs	r0, #20
 80006d8:	f000 fe9a 	bl	8001410 <HAL_Delay>
  OLED_Init();
 80006dc:	f000 f8c6 	bl	800086c <OLED_Init>
  HAL_TIM_Base_Start(&htim1);
 80006e0:	4818      	ldr	r0, [pc, #96]	@ (8000744 <main+0x8c>)
 80006e2:	f002 fa6d 	bl	8002bc0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80006e6:	2100      	movs	r1, #0
 80006e8:	4817      	ldr	r0, [pc, #92]	@ (8000748 <main+0x90>)
 80006ea:	f002 fb2b 	bl	8002d44 <HAL_TIM_PWM_Start>
  int counter =0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  char message[20] = "";
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  OLED_NewFrame();
 8000702:	f000 f90f 	bl	8000924 <OLED_NewFrame>

	  __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 700);
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <main+0x90>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34
	  counter = __HAL_TIM_GET_COUNTER(&htim1);
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <main+0x8c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000716:	617b      	str	r3, [r7, #20]
	  sprintf(message, "counter: %d", counter);
 8000718:	463b      	mov	r3, r7
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	490b      	ldr	r1, [pc, #44]	@ (800074c <main+0x94>)
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f8fa 	bl	8003918 <siprintf>
	  OLED_PrintString(0, 0, message, &font16x16, OLED_COLOR_NORMAL);
 8000724:	463a      	mov	r2, r7
 8000726:	2300      	movs	r3, #0
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <main+0x98>)
 800072c:	2100      	movs	r1, #0
 800072e:	2000      	movs	r0, #0
 8000730:	f000 fb1e 	bl	8000d70 <OLED_PrintString>

	  OLED_ShowFrame();
 8000734:	f000 f902 	bl	800093c <OLED_ShowFrame>
	  HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	@ 0x64
 800073a:	f000 fe69 	bl	8001410 <HAL_Delay>
	  OLED_NewFrame();
 800073e:	bf00      	nop
 8000740:	e7df      	b.n	8000702 <main+0x4a>
 8000742:	bf00      	nop
 8000744:	20000558 	.word	0x20000558
 8000748:	200005a0 	.word	0x200005a0
 800074c:	08004290 	.word	0x08004290
 8000750:	08004924 	.word	0x08004924

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	@ 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	@ 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 f908 	bl	8003978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <SystemClock_Config+0xb4>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <SystemClock_Config+0xb4>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	@ 0x40
 8000788:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <SystemClock_Config+0xb4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <SystemClock_Config+0xb8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a1b      	ldr	r2, [pc, #108]	@ (800080c <SystemClock_Config+0xb8>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b19      	ldr	r3, [pc, #100]	@ (800080c <SystemClock_Config+0xb8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2310      	movs	r3, #16
 80007ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fd67 	bl	8002298 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007d0:	f000 f81e 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007dc:	2380      	movs	r3, #128	@ 0x80
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 ffca 	bl	8002788 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007fa:	f000 f809 	bl	8000810 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	@ 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <Error_Handler+0x8>

0800081c <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	b29b      	uxth	r3, r3
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	9200      	str	r2, [sp, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	2178      	movs	r1, #120	@ 0x78
 8000836:	4803      	ldr	r0, [pc, #12]	@ (8000844 <OLED_Send+0x28>)
 8000838:	f001 f9d4 	bl	8001be4 <HAL_I2C_Master_Transmit>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000078 	.word	0x20000078

08000848 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8000852:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <OLED_SendCmd+0x20>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000858:	2102      	movs	r1, #2
 800085a:	4803      	ldr	r0, [pc, #12]	@ (8000868 <OLED_SendCmd+0x20>)
 800085c:	f7ff ffde 	bl	800081c <OLED_Send>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200004cc 	.word	0x200004cc

0800086c <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000870:	20ae      	movs	r0, #174	@ 0xae
 8000872:	f7ff ffe9 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8000876:	2020      	movs	r0, #32
 8000878:	f7ff ffe6 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 800087c:	2010      	movs	r0, #16
 800087e:	f7ff ffe3 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8000882:	20b0      	movs	r0, #176	@ 0xb0
 8000884:	f7ff ffe0 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8000888:	20c8      	movs	r0, #200	@ 0xc8
 800088a:	f7ff ffdd 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffda 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000894:	2010      	movs	r0, #16
 8000896:	f7ff ffd7 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 800089a:	2040      	movs	r0, #64	@ 0x40
 800089c:	f7ff ffd4 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80008a0:	2081      	movs	r0, #129	@ 0x81
 80008a2:	f7ff ffd1 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80008a6:	20df      	movs	r0, #223	@ 0xdf
 80008a8:	f7ff ffce 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 80008ac:	20a1      	movs	r0, #161	@ 0xa1
 80008ae:	f7ff ffcb 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 80008b2:	20a6      	movs	r0, #166	@ 0xa6
 80008b4:	f7ff ffc8 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 80008b8:	20a8      	movs	r0, #168	@ 0xa8
 80008ba:	f7ff ffc5 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 80008be:	203f      	movs	r0, #63	@ 0x3f
 80008c0:	f7ff ffc2 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 80008c4:	20a4      	movs	r0, #164	@ 0xa4
 80008c6:	f7ff ffbf 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 80008ca:	20d3      	movs	r0, #211	@ 0xd3
 80008cc:	f7ff ffbc 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff ffb9 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 80008d6:	20d5      	movs	r0, #213	@ 0xd5
 80008d8:	f7ff ffb6 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 80008dc:	20f0      	movs	r0, #240	@ 0xf0
 80008de:	f7ff ffb3 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 80008e2:	20d9      	movs	r0, #217	@ 0xd9
 80008e4:	f7ff ffb0 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 80008e8:	2022      	movs	r0, #34	@ 0x22
 80008ea:	f7ff ffad 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 80008ee:	20da      	movs	r0, #218	@ 0xda
 80008f0:	f7ff ffaa 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80008f4:	2012      	movs	r0, #18
 80008f6:	f7ff ffa7 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 80008fa:	20db      	movs	r0, #219	@ 0xdb
 80008fc:	f7ff ffa4 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8000900:	2020      	movs	r0, #32
 8000902:	f7ff ffa1 	bl	8000848 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8000906:	208d      	movs	r0, #141	@ 0x8d
 8000908:	f7ff ff9e 	bl	8000848 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 800090c:	2014      	movs	r0, #20
 800090e:	f7ff ff9b 	bl	8000848 <OLED_SendCmd>

  OLED_NewFrame();
 8000912:	f000 f807 	bl	8000924 <OLED_NewFrame>
  OLED_ShowFrame();
 8000916:	f000 f811 	bl	800093c <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 800091a:	20af      	movs	r0, #175	@ 0xaf
 800091c:	f7ff ff94 	bl	8000848 <OLED_SendCmd>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000928:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092c:	2100      	movs	r1, #0
 800092e:	4802      	ldr	r0, [pc, #8]	@ (8000938 <OLED_NewFrame+0x14>)
 8000930:	f003 f822 	bl	8003978 <memset>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000cc 	.word	0x200000cc

0800093c <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <OLED_ShowFrame+0x5c>)
 8000944:	2240      	movs	r2, #64	@ 0x40
 8000946:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000948:	2300      	movs	r3, #0
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	e01b      	b.n	8000986 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	3b50      	subs	r3, #80	@ 0x50
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff77 	bl	8000848 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ff74 	bl	8000848 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8000960:	2010      	movs	r0, #16
 8000962:	f7ff ff71 	bl	8000848 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <OLED_ShowFrame+0x60>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	01db      	lsls	r3, r3, #7
 800096c:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <OLED_ShowFrame+0x64>)
 800096e:	4413      	add	r3, r2
 8000970:	2280      	movs	r2, #128	@ 0x80
 8000972:	4619      	mov	r1, r3
 8000974:	f003 f834 	bl	80039e0 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8000978:	2181      	movs	r1, #129	@ 0x81
 800097a:	4807      	ldr	r0, [pc, #28]	@ (8000998 <OLED_ShowFrame+0x5c>)
 800097c:	f7ff ff4e 	bl	800081c <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	3301      	adds	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d9e0      	bls.n	800094e <OLED_ShowFrame+0x12>
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200004d0 	.word	0x200004d0
 800099c:	200004d1 	.word	0x200004d1
 80009a0:	200000cc 	.word	0x200000cc

080009a4 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 80009a4:	b490      	push	{r4, r7}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4604      	mov	r4, r0
 80009ac:	4608      	mov	r0, r1
 80009ae:	4611      	mov	r1, r2
 80009b0:	461a      	mov	r2, r3
 80009b2:	4623      	mov	r3, r4
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	4603      	mov	r3, r0
 80009b8:	71bb      	strb	r3, [r7, #6]
 80009ba:	460b      	mov	r3, r1
 80009bc:	717b      	strb	r3, [r7, #5]
 80009be:	4613      	mov	r3, r2
 80009c0:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d860      	bhi.n	8000a8a <OLED_SetByte_Fine+0xe6>
 80009c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db5c      	blt.n	8000a8a <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 80009d0:	7d3b      	ldrb	r3, [r7, #20]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <OLED_SetByte_Fine+0x38>
    data = ~data;
 80009d6:	797b      	ldrb	r3, [r7, #5]
 80009d8:	43db      	mvns	r3, r3
 80009da:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80009dc:	7c3b      	ldrb	r3, [r7, #16]
 80009de:	3301      	adds	r3, #1
 80009e0:	22ff      	movs	r2, #255	@ 0xff
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	b25a      	sxtb	r2, r3
 80009e8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b25a      	sxtb	r2, r3
 80009f0:	793b      	ldrb	r3, [r7, #4]
 80009f2:	f1c3 0308 	rsb	r3, r3, #8
 80009f6:	21ff      	movs	r1, #255	@ 0xff
 80009f8:	fa41 f303 	asr.w	r3, r1, r3
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <OLED_SetByte_Fine+0xf0>)
 8000a06:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000a08:	79fa      	ldrb	r2, [r7, #7]
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	4922      	ldr	r1, [pc, #136]	@ (8000a98 <OLED_SetByte_Fine+0xf4>)
 8000a0e:	01d2      	lsls	r2, r2, #7
 8000a10:	440a      	add	r2, r1
 8000a12:	4413      	add	r3, r2
 8000a14:	7818      	ldrb	r0, [r3, #0]
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <OLED_SetByte_Fine+0xf0>)
 8000a18:	7819      	ldrb	r1, [r3, #0]
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	4001      	ands	r1, r0
 8000a20:	b2c8      	uxtb	r0, r1
 8000a22:	491d      	ldr	r1, [pc, #116]	@ (8000a98 <OLED_SetByte_Fine+0xf4>)
 8000a24:	01d2      	lsls	r2, r2, #7
 8000a26:	440a      	add	r2, r1
 8000a28:	4413      	add	r3, r2
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8000a2e:	7c3b      	ldrb	r3, [r7, #16]
 8000a30:	3301      	adds	r3, #1
 8000a32:	22ff      	movs	r2, #255	@ 0xff
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	b25a      	sxtb	r2, r3
 8000a3e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a42:	4013      	ands	r3, r2
 8000a44:	b25a      	sxtb	r2, r3
 8000a46:	793b      	ldrb	r3, [r7, #4]
 8000a48:	f1c3 0308 	rsb	r3, r3, #8
 8000a4c:	21ff      	movs	r1, #255	@ 0xff
 8000a4e:	fa41 f303 	asr.w	r3, r1, r3
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <OLED_SetByte_Fine+0xf0>)
 8000a60:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8000a62:	79fa      	ldrb	r2, [r7, #7]
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <OLED_SetByte_Fine+0xf4>)
 8000a68:	01d2      	lsls	r2, r2, #7
 8000a6a:	440a      	add	r2, r1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	7818      	ldrb	r0, [r3, #0]
 8000a70:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <OLED_SetByte_Fine+0xf0>)
 8000a72:	7819      	ldrb	r1, [r3, #0]
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	4301      	orrs	r1, r0
 8000a7a:	b2c8      	uxtb	r0, r1
 8000a7c:	4906      	ldr	r1, [pc, #24]	@ (8000a98 <OLED_SetByte_Fine+0xf4>)
 8000a7e:	01d2      	lsls	r2, r2, #7
 8000a80:	440a      	add	r2, r1
 8000a82:	4413      	add	r3, r2
 8000a84:	4602      	mov	r2, r0
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e000      	b.n	8000a8c <OLED_SetByte_Fine+0xe8>
    return;
 8000a8a:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc90      	pop	{r4, r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000551 	.word	0x20000551
 8000a98:	200000cc 	.word	0x200000cc

08000a9c <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8000a9c:	b5b0      	push	{r4, r5, r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4623      	mov	r3, r4
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71bb      	strb	r3, [r7, #6]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	717b      	strb	r3, [r7, #5]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8000ac8:	7bba      	ldrb	r2, [r7, #14]
 8000aca:	793b      	ldrb	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	2b08      	cmp	r3, #8
 8000ad0:	dd29      	ble.n	8000b26 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000ad2:	797a      	ldrb	r2, [r7, #5]
 8000ad4:	7bbb      	ldrb	r3, [r7, #14]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	7bbc      	ldrb	r4, [r7, #14]
 8000ade:	79f9      	ldrb	r1, [r7, #7]
 8000ae0:	7bf8      	ldrb	r0, [r7, #15]
 8000ae2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	2307      	movs	r3, #7
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4623      	mov	r3, r4
 8000aee:	f7ff ff59 	bl	80009a4 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	3301      	adds	r3, #1
 8000af6:	b2d8      	uxtb	r0, r3
 8000af8:	797a      	ldrb	r2, [r7, #5]
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	f1c3 0308 	rsb	r3, r3, #8
 8000b00:	fa42 f303 	asr.w	r3, r2, r3
 8000b04:	b2dc      	uxtb	r4, r3
 8000b06:	793a      	ldrb	r2, [r7, #4]
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	3b09      	subs	r3, #9
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	79f9      	ldrb	r1, [r7, #7]
 8000b14:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4622      	mov	r2, r4
 8000b20:	f7ff ff40 	bl	80009a4 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8000b24:	e015      	b.n	8000b52 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8000b26:	797a      	ldrb	r2, [r7, #5]
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	b2dc      	uxtb	r4, r3
 8000b30:	7bba      	ldrb	r2, [r7, #14]
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	7bbd      	ldrb	r5, [r7, #14]
 8000b3e:	79f9      	ldrb	r1, [r7, #7]
 8000b40:	7bf8      	ldrb	r0, [r7, #15]
 8000b42:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b46:	9201      	str	r2, [sp, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	462b      	mov	r3, r5
 8000b4c:	4622      	mov	r2, r4
 8000b4e:	f7ff ff29 	bl	80009a4 <OLED_SetByte_Fine>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bdb0      	pop	{r4, r5, r7, pc}

08000b5a <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8000b5a:	b590      	push	{r4, r7, lr}
 8000b5c:	b087      	sub	sp, #28
 8000b5e:	af02      	add	r7, sp, #8
 8000b60:	4604      	mov	r4, r0
 8000b62:	4608      	mov	r0, r1
 8000b64:	4611      	mov	r1, r2
 8000b66:	461a      	mov	r2, r3
 8000b68:	4623      	mov	r3, r4
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71bb      	strb	r3, [r7, #6]
 8000b70:	460b      	mov	r3, r1
 8000b72:	717b      	strb	r3, [r7, #5]
 8000b74:	4613      	mov	r3, r2
 8000b76:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000b86:	797a      	ldrb	r2, [r7, #5]
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	7bbc      	ldrb	r4, [r7, #14]
 8000b92:	79f9      	ldrb	r1, [r7, #7]
 8000b94:	7bf8      	ldrb	r0, [r7, #15]
 8000b96:	793b      	ldrb	r3, [r7, #4]
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	4623      	mov	r3, r4
 8000ba0:	f7ff ff00 	bl	80009a4 <OLED_SetByte_Fine>
  if (bit)
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d014      	beq.n	8000bd4 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	3301      	adds	r3, #1
 8000bae:	b2d8      	uxtb	r0, r3
 8000bb0:	797a      	ldrb	r2, [r7, #5]
 8000bb2:	7bbb      	ldrb	r3, [r7, #14]
 8000bb4:	f1c3 0308 	rsb	r3, r3, #8
 8000bb8:	fa42 f303 	asr.w	r3, r2, r3
 8000bbc:	b2dc      	uxtb	r4, r3
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	79f9      	ldrb	r1, [r7, #7]
 8000bc6:	793a      	ldrb	r2, [r7, #4]
 8000bc8:	9201      	str	r2, [sp, #4]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4622      	mov	r2, r4
 8000bd0:	f7ff fee8 	bl	80009a4 <OLED_SetByte_Fine>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd90      	pop	{r4, r7, pc}

08000bdc <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	603a      	str	r2, [r7, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	460b      	mov	r3, r1
 8000bec:	71bb      	strb	r3, [r7, #6]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8000bf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bf6:	08db      	lsrs	r3, r3, #3
 8000bf8:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8000bfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e025      	b.n	8000c56 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73bb      	strb	r3, [r7, #14]
 8000c0e:	e01b      	b.n	8000c48 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	4413      	add	r3, r2
 8000c16:	b2d8      	uxtb	r0, r3
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	4413      	add	r3, r2
 8000c22:	b2dc      	uxtb	r4, r3
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	7bbb      	ldrb	r3, [r7, #14]
 8000c28:	7979      	ldrb	r1, [r7, #5]
 8000c2a:	fb01 f303 	mul.w	r3, r1, r3
 8000c2e:	4413      	add	r3, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	4413      	add	r3, r2
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f7ff ff8c 	bl	8000b5a <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8000c42:	7bbb      	ldrb	r3, [r7, #14]
 8000c44:	3301      	adds	r3, #1
 8000c46:	73bb      	strb	r3, [r7, #14]
 8000c48:	7bba      	ldrb	r2, [r7, #14]
 8000c4a:	7b3b      	ldrb	r3, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d3df      	bcc.n	8000c10 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	3301      	adds	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	797b      	ldrb	r3, [r7, #5]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d3d5      	bcc.n	8000c0a <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d028      	beq.n	8000cb6 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8000c64:	797b      	ldrb	r3, [r7, #5]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	7b3b      	ldrb	r3, [r7, #12]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	fb12 f303 	smulbb	r3, r2, r3
 8000c70:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	737b      	strb	r3, [r7, #13]
 8000c76:	e01a      	b.n	8000cae <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	7b7b      	ldrb	r3, [r7, #13]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b2d8      	uxtb	r0, r3
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b2d9      	uxtb	r1, r3
 8000c8c:	893a      	ldrh	r2, [r7, #8]
 8000c8e:	7b7b      	ldrb	r3, [r7, #13]
 8000c90:	4413      	add	r3, r2
 8000c92:	461a      	mov	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	7afc      	ldrb	r4, [r7, #11]
 8000c9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	f7ff fefa 	bl	8000a9c <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8000ca8:	7b7b      	ldrb	r3, [r7, #13]
 8000caa:	3301      	adds	r3, #1
 8000cac:	737b      	strb	r3, [r7, #13]
 8000cae:	7b7a      	ldrb	r2, [r7, #13]
 8000cb0:	797b      	ldrb	r3, [r7, #5]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d3e0      	bcc.n	8000c78 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}

08000cbe <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8000cbe:	b5b0      	push	{r4, r5, r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af02      	add	r7, sp, #8
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	71bb      	strb	r3, [r7, #6]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	797b      	ldrb	r3, [r7, #5]
 8000cd8:	f1a3 0120 	sub.w	r1, r3, #32
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	3307      	adds	r3, #7
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <OLED_PrintASCIIChar+0x2a>
 8000ce6:	3307      	adds	r3, #7
 8000ce8:	10db      	asrs	r3, r3, #3
 8000cea:	4618      	mov	r0, r3
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	fb00 f303 	mul.w	r3, r0, r3
 8000cf4:	fb01 f303 	mul.w	r3, r1, r3
 8000cf8:	18d4      	adds	r4, r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	785d      	ldrb	r5, [r3, #1]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	79b9      	ldrb	r1, [r7, #6]
 8000d04:	79f8      	ldrb	r0, [r7, #7]
 8000d06:	7e3a      	ldrb	r2, [r7, #24]
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	462b      	mov	r3, r5
 8000d0e:	4622      	mov	r2, r4
 8000d10:	f7ff ff64 	bl	8000bdc <OLED_SetBlock>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bdb0      	pop	{r4, r5, r7, pc}

08000d1c <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db01      	blt.n	8000d32 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e018      	b.n	8000d64 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000d3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8000d3c:	d101      	bne.n	8000d42 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	e010      	b.n	8000d64 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d4a:	2be0      	cmp	r3, #224	@ 0xe0
 8000d4c:	d101      	bne.n	8000d52 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e008      	b.n	8000d64 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000d5a:	2bf0      	cmp	r3, #240	@ 0xf0
 8000d5c:	d101      	bne.n	8000d62 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	e000      	b.n	8000d64 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	60ba      	str	r2, [r7, #8]
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8000d82:	2300      	movs	r3, #0
 8000d84:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	3307      	adds	r3, #7
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	da00      	bge.n	8000d92 <OLED_PrintString+0x22>
 8000d90:	3307      	adds	r3, #7
 8000d92:	10db      	asrs	r3, r3, #3
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	fb12 f303 	smulbb	r3, r2, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	3304      	adds	r3, #4
 8000da2:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8000da4:	e07d      	b.n	8000ea2 <OLED_PrintString+0x132>
  {
    found = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8000daa:	8bfb      	ldrh	r3, [r7, #30]
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	4413      	add	r3, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ffb3 	bl	8000d1c <_OLED_GetUTF8Len>
 8000db6:	4603      	mov	r3, r0
 8000db8:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8000dba:	7ebb      	ldrb	r3, [r7, #26]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d078      	beq.n	8000eb2 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	773b      	strb	r3, [r7, #28]
 8000dc4:	e032      	b.n	8000e2c <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	7f3a      	ldrb	r2, [r7, #28]
 8000dcc:	7ef9      	ldrb	r1, [r7, #27]
 8000dce:	fb01 f202 	mul.w	r2, r1, r2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8000dd6:	8bfb      	ldrh	r3, [r7, #30]
 8000dd8:	68ba      	ldr	r2, [r7, #8]
 8000dda:	4413      	add	r3, r2
 8000ddc:	7eba      	ldrb	r2, [r7, #26]
 8000dde:	6979      	ldr	r1, [r7, #20]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fdb9 	bl	8003958 <memcmp>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d11c      	bne.n	8000e26 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	1d1c      	adds	r4, r3, #4
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	785d      	ldrb	r5, [r3, #1]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	7bb9      	ldrb	r1, [r7, #14]
 8000dfa:	7bf8      	ldrb	r0, [r7, #15]
 8000dfc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	462b      	mov	r3, r5
 8000e06:	4622      	mov	r2, r4
 8000e08:	f7ff fee8 	bl	8000bdc <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	785a      	ldrb	r2, [r3, #1]
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	4413      	add	r3, r2
 8000e14:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8000e16:	7ebb      	ldrb	r3, [r7, #26]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	8bfb      	ldrh	r3, [r7, #30]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	777b      	strb	r3, [r7, #29]
        break;
 8000e24:	e007      	b.n	8000e36 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8000e26:	7f3b      	ldrb	r3, [r7, #28]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	773b      	strb	r3, [r7, #28]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7a1b      	ldrb	r3, [r3, #8]
 8000e30:	7f3a      	ldrb	r2, [r7, #28]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d3c7      	bcc.n	8000dc6 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8000e36:	7f7b      	ldrb	r3, [r7, #29]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d132      	bne.n	8000ea2 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8000e3c:	7ebb      	ldrb	r3, [r7, #26]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d119      	bne.n	8000e76 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8000e42:	8bfb      	ldrh	r3, [r7, #30]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	4413      	add	r3, r2
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68dc      	ldr	r4, [r3, #12]
 8000e4e:	7bb9      	ldrb	r1, [r7, #14]
 8000e50:	7bf8      	ldrb	r0, [r7, #15]
 8000e52:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4623      	mov	r3, r4
 8000e5a:	f7ff ff30 	bl	8000cbe <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	785a      	ldrb	r2, [r3, #1]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	4413      	add	r3, r2
 8000e68:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8000e6a:	7ebb      	ldrb	r3, [r7, #26]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	8bfb      	ldrh	r3, [r7, #30]
 8000e70:	4413      	add	r3, r2
 8000e72:	83fb      	strh	r3, [r7, #30]
 8000e74:	e015      	b.n	8000ea2 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	7bb9      	ldrb	r1, [r7, #14]
 8000e7c:	7bf8      	ldrb	r0, [r7, #15]
 8000e7e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	4613      	mov	r3, r2
 8000e86:	2220      	movs	r2, #32
 8000e88:	f7ff ff19 	bl	8000cbe <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	785a      	ldrb	r2, [r3, #1]
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	4413      	add	r3, r2
 8000e96:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8000e98:	7ebb      	ldrb	r3, [r7, #26]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	8bfb      	ldrh	r3, [r7, #30]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8000ea2:	8bfb      	ldrh	r3, [r7, #30]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f47f af7b 	bne.w	8000da6 <OLED_PrintString+0x36>
      }
    }
  }
}
 8000eb0:	e000      	b.n	8000eb4 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8000eb2:	bf00      	nop
}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bdb0      	pop	{r4, r5, r7, pc}

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 fa35 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	@ (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f002 fcf4 	bl	8003988 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20020000 	.word	0x20020000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	20000554 	.word	0x20000554
 8000fd4:	20000738 	.word	0x20000738

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 800101a:	4a22      	ldr	r2, [pc, #136]	@ (80010a4 <MX_TIM1_Init+0xa8>)
 800101c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800101e:	4b20      	ldr	r3, [pc, #128]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 800102c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001030:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001044:	4816      	ldr	r0, [pc, #88]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 8001046:	f001 fd6b 	bl	8002b20 <HAL_TIM_Base_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001050:	f7ff fbde 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001058:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 15;
 8001062:	230f      	movs	r3, #15
 8001064:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	4619      	mov	r1, r3
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 800106e:	f001 fff3 	bl	8003058 <HAL_TIM_ConfigClockSource>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001078:	f7ff fbca 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_TIM1_Init+0xa4>)
 800108a:	f002 fbc9 	bl	8003820 <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001094:	f7ff fbbc 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000558 	.word	0x20000558
 80010a4:	40010000 	.word	0x40010000

080010a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	@ 0x38
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010d8:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 80010da:	4a32      	ldr	r2, [pc, #200]	@ (80011a4 <MX_TIM5_Init+0xfc>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 80010de:	4b30      	ldr	r3, [pc, #192]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 80010e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b2e      	ldr	r3, [pc, #184]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 800-1;
 80010ec:	4b2c      	ldr	r3, [pc, #176]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 80010ee:	f240 321f 	movw	r2, #799	@ 0x31f
 80010f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001100:	4827      	ldr	r0, [pc, #156]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 8001102:	f001 fd0d 	bl	8002b20 <HAL_TIM_Base_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800110c:	f7ff fb80 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111a:	4619      	mov	r1, r3
 800111c:	4820      	ldr	r0, [pc, #128]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 800111e:	f001 ff9b 	bl	8003058 <HAL_TIM_ConfigClockSource>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001128:	f7ff fb72 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800112c:	481c      	ldr	r0, [pc, #112]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 800112e:	f001 fdaf 	bl	8002c90 <HAL_TIM_PWM_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001138:	f7ff fb6a 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 800114c:	f002 fb68 	bl	8003820 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001156:	f7ff fb5b 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115a:	2360      	movs	r3, #96	@ 0x60
 800115c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001162:	2302      	movs	r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 8001172:	f001 feaf 	bl	8002ed4 <HAL_TIM_PWM_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800117c:	f7ff fb48 	bl	8000810 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0208 	bic.w	r2, r2, #8
 800118e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001190:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <MX_TIM5_Init+0xf8>)
 8001192:	f000 f867 	bl	8001264 <HAL_TIM_MspPostInit>

}
 8001196:	bf00      	nop
 8001198:	3738      	adds	r7, #56	@ 0x38
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200005a0 	.word	0x200005a0
 80011a4:	40000c00 	.word	0x40000c00

080011a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <HAL_TIM_Base_MspInit+0xac>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12c      	bne.n	8001224 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <HAL_TIM_Base_MspInit+0xb0>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a21      	ldr	r2, [pc, #132]	@ (8001258 <HAL_TIM_Base_MspInit+0xb0>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_TIM_Base_MspInit+0xb0>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <HAL_TIM_Base_MspInit+0xb0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001258 <HAL_TIM_Base_MspInit+0xb0>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_TIM_Base_MspInit+0xb0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001202:	2380      	movs	r3, #128	@ 0x80
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001212:	2301      	movs	r3, #1
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	480f      	ldr	r0, [pc, #60]	@ (800125c <HAL_TIM_Base_MspInit+0xb4>)
 800121e:	f000 fa01 	bl	8001624 <HAL_GPIO_Init>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001222:	e012      	b.n	800124a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM5)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <HAL_TIM_Base_MspInit+0xb8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10d      	bne.n	800124a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_TIM_Base_MspInit+0xb0>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <HAL_TIM_Base_MspInit+0xb0>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_TIM_Base_MspInit+0xb0>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40010000 	.word	0x40010000
 8001258:	40023800 	.word	0x40023800
 800125c:	40021000 	.word	0x40021000
 8001260:	40000c00 	.word	0x40000c00

08001264 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <HAL_TIM_MspPostInit+0x68>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d11d      	bne.n	80012c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <HAL_TIM_MspPostInit+0x6c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a10      	ldr	r2, [pc, #64]	@ (80012d0 <HAL_TIM_MspPostInit+0x6c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_TIM_MspPostInit+0x6c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a2:	2301      	movs	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <HAL_TIM_MspPostInit+0x70>)
 80012be:	f000 f9b1 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40000c00 	.word	0x40000c00
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001310 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012dc:	f7ff fe7c 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	@ (8001318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f002 fb45 	bl	8003994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff f9d5 	bl	80006b8 <main>
  bx  lr    
 800130e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800131c:	08004990 	.word	0x08004990
  ldr r2, =_sbss
 8001320:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001324:	20000734 	.word	0x20000734

08001328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <HAL_Init+0x40>)
 8001336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800133a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <HAL_Init+0x40>)
 8001342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a07      	ldr	r2, [pc, #28]	@ (800136c <HAL_Init+0x40>)
 800134e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 f931 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	200f      	movs	r0, #15
 800135c:	f000 f808 	bl	8001370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001360:	f7ff fdac 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023c00 	.word	0x40023c00

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_InitTick+0x54>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_InitTick+0x58>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f93b 	bl	800160a <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f000 f911 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <HAL_InitTick+0x5c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	200005e8 	.word	0x200005e8

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	@ (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200005e8 	.word	0x200005e8

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffde 	bl	80013f8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	@ (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	@ (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	@ (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	@ 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff47 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff5c 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffb0 	bl	8001578 <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e16b      	b.n	8001918 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 815a 	bne.w	8001912 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d005      	beq.n	8001676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	2b02      	cmp	r3, #2
 8001674:	d130      	bne.n	80016d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80b4 	beq.w	8001912 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b60      	ldr	r3, [pc, #384]	@ (8001930 <HAL_GPIO_Init+0x30c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001930 <HAL_GPIO_Init+0x30c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001930 <HAL_GPIO_Init+0x30c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001934 <HAL_GPIO_Init+0x310>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a52      	ldr	r2, [pc, #328]	@ (8001938 <HAL_GPIO_Init+0x314>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d02b      	beq.n	800184a <HAL_GPIO_Init+0x226>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a51      	ldr	r2, [pc, #324]	@ (800193c <HAL_GPIO_Init+0x318>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d025      	beq.n	8001846 <HAL_GPIO_Init+0x222>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a50      	ldr	r2, [pc, #320]	@ (8001940 <HAL_GPIO_Init+0x31c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01f      	beq.n	8001842 <HAL_GPIO_Init+0x21e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4f      	ldr	r2, [pc, #316]	@ (8001944 <HAL_GPIO_Init+0x320>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d019      	beq.n	800183e <HAL_GPIO_Init+0x21a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4e      	ldr	r2, [pc, #312]	@ (8001948 <HAL_GPIO_Init+0x324>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0x216>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4d      	ldr	r2, [pc, #308]	@ (800194c <HAL_GPIO_Init+0x328>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00d      	beq.n	8001836 <HAL_GPIO_Init+0x212>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4c      	ldr	r2, [pc, #304]	@ (8001950 <HAL_GPIO_Init+0x32c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x20e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4b      	ldr	r2, [pc, #300]	@ (8001954 <HAL_GPIO_Init+0x330>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_GPIO_Init+0x20a>
 800182a:	2307      	movs	r3, #7
 800182c:	e00e      	b.n	800184c <HAL_GPIO_Init+0x228>
 800182e:	2308      	movs	r3, #8
 8001830:	e00c      	b.n	800184c <HAL_GPIO_Init+0x228>
 8001832:	2306      	movs	r3, #6
 8001834:	e00a      	b.n	800184c <HAL_GPIO_Init+0x228>
 8001836:	2305      	movs	r3, #5
 8001838:	e008      	b.n	800184c <HAL_GPIO_Init+0x228>
 800183a:	2304      	movs	r3, #4
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x228>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x228>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x228>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x228>
 800184a:	2300      	movs	r3, #0
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800185c:	4935      	ldr	r1, [pc, #212]	@ (8001934 <HAL_GPIO_Init+0x310>)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <HAL_GPIO_Init+0x334>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188e:	4a32      	ldr	r2, [pc, #200]	@ (8001958 <HAL_GPIO_Init+0x334>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001894:	4b30      	ldr	r3, [pc, #192]	@ (8001958 <HAL_GPIO_Init+0x334>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b8:	4a27      	ldr	r2, [pc, #156]	@ (8001958 <HAL_GPIO_Init+0x334>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018be:	4b26      	ldr	r3, [pc, #152]	@ (8001958 <HAL_GPIO_Init+0x334>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <HAL_GPIO_Init+0x334>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <HAL_GPIO_Init+0x334>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800190c:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <HAL_GPIO_Init+0x334>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b0f      	cmp	r3, #15
 800191c:	f67f ae90 	bls.w	8001640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3724      	adds	r7, #36	@ 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40013800 	.word	0x40013800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40021400 	.word	0x40021400
 8001950:	40021800 	.word	0x40021800
 8001954:	40021c00 	.word	0x40021c00
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e12b      	b.n	8001bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe fe50 	bl	8000628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2224      	movs	r2, #36	@ 0x24
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019c0:	f001 f89a 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 80019c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a81      	ldr	r2, [pc, #516]	@ (8001bd0 <HAL_I2C_Init+0x274>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d807      	bhi.n	80019e0 <HAL_I2C_Init+0x84>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4a80      	ldr	r2, [pc, #512]	@ (8001bd4 <HAL_I2C_Init+0x278>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	bf94      	ite	ls
 80019d8:	2301      	movls	r3, #1
 80019da:	2300      	movhi	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	e006      	b.n	80019ee <HAL_I2C_Init+0x92>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4a7d      	ldr	r2, [pc, #500]	@ (8001bd8 <HAL_I2C_Init+0x27c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	bf94      	ite	ls
 80019e8:	2301      	movls	r3, #1
 80019ea:	2300      	movhi	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0e7      	b.n	8001bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4a78      	ldr	r2, [pc, #480]	@ (8001bdc <HAL_I2C_Init+0x280>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	0c9b      	lsrs	r3, r3, #18
 8001a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a6a      	ldr	r2, [pc, #424]	@ (8001bd0 <HAL_I2C_Init+0x274>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d802      	bhi.n	8001a30 <HAL_I2C_Init+0xd4>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	e009      	b.n	8001a44 <HAL_I2C_Init+0xe8>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	4a69      	ldr	r2, [pc, #420]	@ (8001be0 <HAL_I2C_Init+0x284>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	3301      	adds	r3, #1
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	495c      	ldr	r1, [pc, #368]	@ (8001bd0 <HAL_I2C_Init+0x274>)
 8001a60:	428b      	cmp	r3, r1
 8001a62:	d819      	bhi.n	8001a98 <HAL_I2C_Init+0x13c>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1e59      	subs	r1, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a72:	1c59      	adds	r1, r3, #1
 8001a74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a78:	400b      	ands	r3, r1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00a      	beq.n	8001a94 <HAL_I2C_Init+0x138>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1e59      	subs	r1, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a92:	e051      	b.n	8001b38 <HAL_I2C_Init+0x1dc>
 8001a94:	2304      	movs	r3, #4
 8001a96:	e04f      	b.n	8001b38 <HAL_I2C_Init+0x1dc>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d111      	bne.n	8001ac4 <HAL_I2C_Init+0x168>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1e58      	subs	r0, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	440b      	add	r3, r1
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e012      	b.n	8001aea <HAL_I2C_Init+0x18e>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1e58      	subs	r0, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	0099      	lsls	r1, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_Init+0x196>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e022      	b.n	8001b38 <HAL_I2C_Init+0x1dc>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10e      	bne.n	8001b18 <HAL_I2C_Init+0x1bc>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1e58      	subs	r0, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b16:	e00f      	b.n	8001b38 <HAL_I2C_Init+0x1dc>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1e58      	subs	r0, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	0099      	lsls	r1, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	6809      	ldr	r1, [r1, #0]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6911      	ldr	r1, [r2, #16]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	000186a0 	.word	0x000186a0
 8001bd4:	001e847f 	.word	0x001e847f
 8001bd8:	003d08ff 	.word	0x003d08ff
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	10624dd3 	.word	0x10624dd3

08001be4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	817b      	strh	r3, [r7, #10]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff fbfe 	bl	80013f8 <HAL_GetTick>
 8001bfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	f040 80e0 	bne.w	8001dcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2319      	movs	r3, #25
 8001c12:	2201      	movs	r2, #1
 8001c14:	4970      	ldr	r1, [pc, #448]	@ (8001dd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f964 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
 8001c24:	e0d3      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_I2C_Master_Transmit+0x50>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0cc      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d007      	beq.n	8001c5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2221      	movs	r2, #33	@ 0x21
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2210      	movs	r2, #16
 8001c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	893a      	ldrh	r2, [r7, #8]
 8001c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4a50      	ldr	r2, [pc, #320]	@ (8001ddc <HAL_I2C_Master_Transmit+0x1f8>)
 8001c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c9c:	8979      	ldrh	r1, [r7, #10]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	6a3a      	ldr	r2, [r7, #32]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f89c 	bl	8001de0 <I2C_MasterRequestWrite>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08d      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cc8:	e066      	b.n	8001d98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	6a39      	ldr	r1, [r7, #32]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fa22 	bl	8002118 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d107      	bne.n	8001cf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06b      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d11b      	bne.n	8001d6c <HAL_I2C_Master_Transmit+0x188>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	6a39      	ldr	r1, [r7, #32]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 fa19 	bl	80021a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d107      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e01a      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d194      	bne.n	8001cca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	00100002 	.word	0x00100002
 8001ddc:	ffff0000 	.word	0xffff0000

08001de0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	460b      	mov	r3, r1
 8001dee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d006      	beq.n	8001e0a <I2C_MasterRequestWrite+0x2a>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d003      	beq.n	8001e0a <I2C_MasterRequestWrite+0x2a>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e08:	d108      	bne.n	8001e1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e00b      	b.n	8001e34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	2b12      	cmp	r3, #18
 8001e22:	d107      	bne.n	8001e34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f84f 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00d      	beq.n	8001e68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e5a:	d103      	bne.n	8001e64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e035      	b.n	8001ed4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e70:	d108      	bne.n	8001e84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e72:	897b      	ldrh	r3, [r7, #10]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e80:	611a      	str	r2, [r3, #16]
 8001e82:	e01b      	b.n	8001ebc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e84:	897b      	ldrh	r3, [r7, #10]
 8001e86:	11db      	asrs	r3, r3, #7
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f003 0306 	and.w	r3, r3, #6
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f063 030f 	orn	r3, r3, #15
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	490e      	ldr	r1, [pc, #56]	@ (8001edc <I2C_MasterRequestWrite+0xfc>)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f898 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e010      	b.n	8001ed4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eb2:	897b      	ldrh	r3, [r7, #10]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4907      	ldr	r1, [pc, #28]	@ (8001ee0 <I2C_MasterRequestWrite+0x100>)
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f888 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	00010008 	.word	0x00010008
 8001ee0:	00010002 	.word	0x00010002

08001ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef4:	e048      	b.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d044      	beq.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efe:	f7ff fa7b 	bl	80013f8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d302      	bcc.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d139      	bne.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	0c1b      	lsrs	r3, r3, #16
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10d      	bne.n	8001f3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	43da      	mvns	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	e00c      	b.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	43da      	mvns	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4013      	ands	r3, r2
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d116      	bne.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e023      	b.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10d      	bne.n	8001fae <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	e00c      	b.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d093      	beq.n	8001ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fe6:	e071      	b.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff6:	d123      	bne.n	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002006:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	f043 0204 	orr.w	r2, r3, #4
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e067      	b.n	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d041      	beq.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7ff f9d6 	bl	80013f8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d136      	bne.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10c      	bne.n	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4013      	ands	r3, r2
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	bf14      	ite	ne
 800207a:	2301      	movne	r3, #1
 800207c:	2300      	moveq	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	e00b      	b.n	800209a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	43da      	mvns	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4013      	ands	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e021      	b.n	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10c      	bne.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	43da      	mvns	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e00b      	b.n	8002108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	f47f af6d 	bne.w	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002124:	e034      	b.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f886 	bl	8002238 <I2C_IsAcknowledgeFailed>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e034      	b.n	80021a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d028      	beq.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213e:	f7ff f95b 	bl	80013f8 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	429a      	cmp	r2, r3
 800214c:	d302      	bcc.n	8002154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11d      	bne.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215e:	2b80      	cmp	r3, #128	@ 0x80
 8002160:	d016      	beq.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219a:	2b80      	cmp	r3, #128	@ 0x80
 800219c:	d1c3      	bne.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b4:	e034      	b.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f83e 	bl	8002238 <I2C_IsAcknowledgeFailed>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e034      	b.n	8002230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d028      	beq.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7ff f913 	bl	80013f8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d11d      	bne.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d016      	beq.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e007      	b.n	8002230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b04      	cmp	r3, #4
 800222c:	d1c3      	bne.n	80021b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224e:	d11b      	bne.n	8002288 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002258:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e267      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d075      	beq.n	80023a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022b6:	4b88      	ldr	r3, [pc, #544]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d00c      	beq.n	80022dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c2:	4b85      	ldr	r3, [pc, #532]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d112      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4b82      	ldr	r3, [pc, #520]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b7e      	ldr	r3, [pc, #504]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x108>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d157      	bne.n	80023a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e242      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x74>
 80022fe:	4b76      	ldr	r3, [pc, #472]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a75      	ldr	r2, [pc, #468]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x98>
 8002316:	4b70      	ldr	r3, [pc, #448]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6f      	ldr	r2, [pc, #444]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b6d      	ldr	r3, [pc, #436]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6c      	ldr	r2, [pc, #432]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 8002330:	4b69      	ldr	r3, [pc, #420]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a68      	ldr	r2, [pc, #416]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a65      	ldr	r2, [pc, #404]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff f852 	bl	80013f8 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff f84e 	bl	80013f8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	@ 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e207      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b5b      	ldr	r3, [pc, #364]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xc0>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff f83e 	bl	80013f8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff f83a 	bl	80013f8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1f3      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b51      	ldr	r3, [pc, #324]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0xe8>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ae:	4b4a      	ldr	r3, [pc, #296]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ba:	4b47      	ldr	r3, [pc, #284]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11c      	bne.n	8002400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b44      	ldr	r3, [pc, #272]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	4b41      	ldr	r3, [pc, #260]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x152>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1c7      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b3b      	ldr	r3, [pc, #236]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4937      	ldr	r1, [pc, #220]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	e03a      	b.n	8002476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_RCC_OscConfig+0x244>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe fff3 	bl	80013f8 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe ffef 	bl	80013f8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1a8      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	4b2b      	ldr	r3, [pc, #172]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b28      	ldr	r3, [pc, #160]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4925      	ldr	r1, [pc, #148]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_RCC_OscConfig+0x244>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe ffd2 	bl	80013f8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe ffce 	bl	80013f8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e187      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d036      	beq.n	80024f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_RCC_OscConfig+0x248>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7fe ffb2 	bl	80013f8 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002498:	f7fe ffae 	bl	80013f8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e167      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80024ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x200>
 80024b6:	e01b      	b.n	80024f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_RCC_OscConfig+0x248>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7fe ff9b 	bl	80013f8 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	e00e      	b.n	80024e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c6:	f7fe ff97 	bl	80013f8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d907      	bls.n	80024e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e150      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470000 	.word	0x42470000
 80024e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b88      	ldr	r3, [pc, #544]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ea      	bne.n	80024c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8097 	beq.w	800262c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b81      	ldr	r3, [pc, #516]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b7d      	ldr	r3, [pc, #500]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a7c      	ldr	r2, [pc, #496]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b7a      	ldr	r3, [pc, #488]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b77      	ldr	r3, [pc, #476]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d118      	bne.n	800256c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b74      	ldr	r3, [pc, #464]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a73      	ldr	r2, [pc, #460]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7fe ff57 	bl	80013f8 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7fe ff53 	bl	80013f8 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e10c      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b6a      	ldr	r3, [pc, #424]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x2ea>
 8002574:	4b64      	ldr	r3, [pc, #400]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	4a63      	ldr	r2, [pc, #396]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002580:	e01c      	b.n	80025bc <HAL_RCC_OscConfig+0x324>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b05      	cmp	r3, #5
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x30c>
 800258a:	4b5f      	ldr	r3, [pc, #380]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258e:	4a5e      	ldr	r2, [pc, #376]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	6713      	str	r3, [r2, #112]	@ 0x70
 8002596:	4b5c      	ldr	r3, [pc, #368]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259a:	4a5b      	ldr	r2, [pc, #364]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0x324>
 80025a4:	4b58      	ldr	r3, [pc, #352]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	4a57      	ldr	r2, [pc, #348]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b0:	4b55      	ldr	r3, [pc, #340]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a54      	ldr	r2, [pc, #336]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f023 0304 	bic.w	r3, r3, #4
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7fe ff18 	bl	80013f8 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7fe ff14 	bl	80013f8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e0cb      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0ee      	beq.n	80025cc <HAL_RCC_OscConfig+0x334>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7fe ff02 	bl	80013f8 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7fe fefe 	bl	80013f8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0b5      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260e:	4b3e      	ldr	r3, [pc, #248]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ee      	bne.n	80025f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002620:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	4a38      	ldr	r2, [pc, #224]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800262a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a1 	beq.w	8002778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002636:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d05c      	beq.n	80026fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d141      	bne.n	80026ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b31      	ldr	r3, [pc, #196]	@ (8002710 <HAL_RCC_OscConfig+0x478>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fed2 	bl	80013f8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fece 	bl	80013f8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e087      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	3b01      	subs	r3, #1
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	491b      	ldr	r1, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x478>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe fea7 	bl	80013f8 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ae:	f7fe fea3 	bl	80013f8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e05c      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x416>
 80026cc:	e054      	b.n	8002778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_RCC_OscConfig+0x478>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fe90 	bl	80013f8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fe8c 	bl	80013f8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e045      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x444>
 80026fa:	e03d      	b.n	8002778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e038      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
 8002708:	40023800 	.word	0x40023800
 800270c:	40007000 	.word	0x40007000
 8002710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002714:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <HAL_RCC_OscConfig+0x4ec>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d028      	beq.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d121      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d11a      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800274a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800274c:	4293      	cmp	r3, r2
 800274e:	d111      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0cc      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b68      	ldr	r3, [pc, #416]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d90c      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a58      	ldr	r2, [pc, #352]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d044      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d119      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d003      	beq.n	8002846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	2b03      	cmp	r3, #3
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e067      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b37      	ldr	r3, [pc, #220]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4934      	ldr	r1, [pc, #208]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7fe fdbe 	bl	80013f8 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7fe fdba 	bl	80013f8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e04f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2b      	ldr	r3, [pc, #172]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d20c      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f821 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fd1e 	bl	8001370 <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00
 8002944:	40023800 	.word	0x40023800
 8002948:	08004934 	.word	0x08004934
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002958:	b090      	sub	sp, #64	@ 0x40
 800295a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002960:	2300      	movs	r3, #0
 8002962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002964:	2300      	movs	r3, #0
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296c:	4b59      	ldr	r3, [pc, #356]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d00d      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x40>
 8002978:	2b08      	cmp	r3, #8
 800297a:	f200 80a1 	bhi.w	8002ac0 <HAL_RCC_GetSysClockFreq+0x16c>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x34>
 8002982:	2b04      	cmp	r3, #4
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x3a>
 8002986:	e09b      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b53      	ldr	r3, [pc, #332]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 800298a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800298c:	e09b      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298e:	4b53      	ldr	r3, [pc, #332]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x188>)
 8002990:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002992:	e098      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002994:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800299e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d028      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029aa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	099b      	lsrs	r3, r3, #6
 80029b0:	2200      	movs	r2, #0
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029bc:	2100      	movs	r1, #0
 80029be:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x188>)
 80029c0:	fb03 f201 	mul.w	r2, r3, r1
 80029c4:	2300      	movs	r3, #0
 80029c6:	fb00 f303 	mul.w	r3, r0, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	4a43      	ldr	r2, [pc, #268]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x188>)
 80029ce:	fba0 1202 	umull	r1, r2, r0, r2
 80029d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029d4:	460a      	mov	r2, r1
 80029d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029da:	4413      	add	r3, r2
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e0:	2200      	movs	r2, #0
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	61fa      	str	r2, [r7, #28]
 80029e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029ee:	f7fd fc3f 	bl	8000270 <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4613      	mov	r3, r2
 80029f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029fa:	e053      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fc:	4b35      	ldr	r3, [pc, #212]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	2200      	movs	r2, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	617a      	str	r2, [r7, #20]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a0e:	f04f 0b00 	mov.w	fp, #0
 8002a12:	4652      	mov	r2, sl
 8002a14:	465b      	mov	r3, fp
 8002a16:	f04f 0000 	mov.w	r0, #0
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	0159      	lsls	r1, r3, #5
 8002a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a24:	0150      	lsls	r0, r2, #5
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a2e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a46:	ebb2 0408 	subs.w	r4, r2, r8
 8002a4a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	00eb      	lsls	r3, r5, #3
 8002a58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a5c:	00e2      	lsls	r2, r4, #3
 8002a5e:	4614      	mov	r4, r2
 8002a60:	461d      	mov	r5, r3
 8002a62:	eb14 030a 	adds.w	r3, r4, sl
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	eb45 030b 	adc.w	r3, r5, fp
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	028b      	lsls	r3, r1, #10
 8002a7e:	4621      	mov	r1, r4
 8002a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a84:	4621      	mov	r1, r4
 8002a86:	028a      	lsls	r2, r1, #10
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	60fa      	str	r2, [r7, #12]
 8002a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a98:	f7fd fbea 	bl	8000270 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002ab4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002abe:	e002      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3740      	adds	r7, #64	@ 0x40
 8002acc:	46bd      	mov	sp, r7
 8002ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	00f42400 	.word	0x00f42400
 8002adc:	017d7840 	.word	0x017d7840

08002ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000000 	.word	0x20000000

08002af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002afc:	f7ff fff0 	bl	8002ae0 <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0a9b      	lsrs	r3, r3, #10
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	@ (8002b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08004944 	.word	0x08004944

08002b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e041      	b.n	8002bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fb2e 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	f000 fb42 	bl	80031e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d001      	beq.n	8002bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e046      	b.n	8002c66 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a23      	ldr	r2, [pc, #140]	@ (8002c74 <HAL_TIM_Base_Start+0xb4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d022      	beq.n	8002c30 <HAL_TIM_Base_Start+0x70>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf2:	d01d      	beq.n	8002c30 <HAL_TIM_Base_Start+0x70>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c78 <HAL_TIM_Base_Start+0xb8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d018      	beq.n	8002c30 <HAL_TIM_Base_Start+0x70>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1e      	ldr	r2, [pc, #120]	@ (8002c7c <HAL_TIM_Base_Start+0xbc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d013      	beq.n	8002c30 <HAL_TIM_Base_Start+0x70>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <HAL_TIM_Base_Start+0xc0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00e      	beq.n	8002c30 <HAL_TIM_Base_Start+0x70>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <HAL_TIM_Base_Start+0xc4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d009      	beq.n	8002c30 <HAL_TIM_Base_Start+0x70>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <HAL_TIM_Base_Start+0xc8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_TIM_Base_Start+0x70>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <HAL_TIM_Base_Start+0xcc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d111      	bne.n	8002c54 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d010      	beq.n	8002c64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c52:	e007      	b.n	8002c64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40010000 	.word	0x40010000
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40000c00 	.word	0x40000c00
 8002c84:	40010400 	.word	0x40010400
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	40001800 	.word	0x40001800

08002c90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e041      	b.n	8002d26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f839 	bl	8002d2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f000 fa8a 	bl	80031e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <HAL_TIM_PWM_Start+0x24>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e022      	b.n	8002dae <HAL_TIM_PWM_Start+0x6a>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d109      	bne.n	8002d82 <HAL_TIM_PWM_Start+0x3e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	e015      	b.n	8002dae <HAL_TIM_PWM_Start+0x6a>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d109      	bne.n	8002d9c <HAL_TIM_PWM_Start+0x58>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e008      	b.n	8002dae <HAL_TIM_PWM_Start+0x6a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07c      	b.n	8002eb0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0x82>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc4:	e013      	b.n	8002dee <HAL_TIM_PWM_Start+0xaa>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0x92>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd4:	e00b      	b.n	8002dee <HAL_TIM_PWM_Start+0xaa>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Start+0xa2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de4:	e003      	b.n	8002dee <HAL_TIM_PWM_Start+0xaa>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2201      	movs	r2, #1
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fcec 	bl	80037d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb8 <HAL_TIM_PWM_Start+0x174>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_TIM_PWM_Start+0xcc>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ebc <HAL_TIM_PWM_Start+0x178>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIM_PWM_Start+0xd0>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_TIM_PWM_Start+0xd2>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a22      	ldr	r2, [pc, #136]	@ (8002eb8 <HAL_TIM_PWM_Start+0x174>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d022      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x136>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3c:	d01d      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x136>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec0 <HAL_TIM_PWM_Start+0x17c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d018      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x136>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <HAL_TIM_PWM_Start+0x180>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x136>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec8 <HAL_TIM_PWM_Start+0x184>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00e      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x136>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a16      	ldr	r2, [pc, #88]	@ (8002ebc <HAL_TIM_PWM_Start+0x178>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x136>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a18      	ldr	r2, [pc, #96]	@ (8002ecc <HAL_TIM_PWM_Start+0x188>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d004      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x136>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a16      	ldr	r2, [pc, #88]	@ (8002ed0 <HAL_TIM_PWM_Start+0x18c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d111      	bne.n	8002e9e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d010      	beq.n	8002eae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9c:	e007      	b.n	8002eae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0201 	orr.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	40010400 	.word	0x40010400
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800
 8002ec8:	40000c00 	.word	0x40000c00
 8002ecc:	40014000 	.word	0x40014000
 8002ed0:	40001800 	.word	0x40001800

08002ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e0ae      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	f200 809f 	bhi.w	8003040 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f02:	a201      	add	r2, pc, #4	@ (adr r2, 8002f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08003041 	.word	0x08003041
 8002f10:	08003041 	.word	0x08003041
 8002f14:	08003041 	.word	0x08003041
 8002f18:	08002f7d 	.word	0x08002f7d
 8002f1c:	08003041 	.word	0x08003041
 8002f20:	08003041 	.word	0x08003041
 8002f24:	08003041 	.word	0x08003041
 8002f28:	08002fbf 	.word	0x08002fbf
 8002f2c:	08003041 	.word	0x08003041
 8002f30:	08003041 	.word	0x08003041
 8002f34:	08003041 	.word	0x08003041
 8002f38:	08002fff 	.word	0x08002fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f9fc 	bl	8003340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0208 	orr.w	r2, r2, #8
 8002f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6999      	ldr	r1, [r3, #24]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	619a      	str	r2, [r3, #24]
      break;
 8002f7a:	e064      	b.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fa4c 	bl	8003420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	021a      	lsls	r2, r3, #8
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	619a      	str	r2, [r3, #24]
      break;
 8002fbc:	e043      	b.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 faa1 	bl	800350c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0208 	orr.w	r2, r2, #8
 8002fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0204 	bic.w	r2, r2, #4
 8002fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69d9      	ldr	r1, [r3, #28]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	61da      	str	r2, [r3, #28]
      break;
 8002ffc:	e023      	b.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 faf5 	bl	80035f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69d9      	ldr	r1, [r3, #28]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	61da      	str	r2, [r3, #28]
      break;
 800303e:	e002      	b.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
      break;
 8003044:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800304e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIM_ConfigClockSource+0x1c>
 8003070:	2302      	movs	r3, #2
 8003072:	e0b4      	b.n	80031de <HAL_TIM_ConfigClockSource+0x186>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800309a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ac:	d03e      	beq.n	800312c <HAL_TIM_ConfigClockSource+0xd4>
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b2:	f200 8087 	bhi.w	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ba:	f000 8086 	beq.w	80031ca <HAL_TIM_ConfigClockSource+0x172>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c2:	d87f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b70      	cmp	r3, #112	@ 0x70
 80030c6:	d01a      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0xa6>
 80030c8:	2b70      	cmp	r3, #112	@ 0x70
 80030ca:	d87b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b60      	cmp	r3, #96	@ 0x60
 80030ce:	d050      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x11a>
 80030d0:	2b60      	cmp	r3, #96	@ 0x60
 80030d2:	d877      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b50      	cmp	r3, #80	@ 0x50
 80030d6:	d03c      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xfa>
 80030d8:	2b50      	cmp	r3, #80	@ 0x50
 80030da:	d873      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b40      	cmp	r3, #64	@ 0x40
 80030de:	d058      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x13a>
 80030e0:	2b40      	cmp	r3, #64	@ 0x40
 80030e2:	d86f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b30      	cmp	r3, #48	@ 0x30
 80030e6:	d064      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030e8:	2b30      	cmp	r3, #48	@ 0x30
 80030ea:	d86b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d060      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d867      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d05c      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d05a      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030fc:	e062      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800310e:	f000 fb41 	bl	8003794 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	609a      	str	r2, [r3, #8]
      break;
 800312a:	e04f      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800313c:	f000 fb2a 	bl	8003794 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800314e:	609a      	str	r2, [r3, #8]
      break;
 8003150:	e03c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315e:	461a      	mov	r2, r3
 8003160:	f000 fa9e 	bl	80036a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2150      	movs	r1, #80	@ 0x50
 800316a:	4618      	mov	r0, r3
 800316c:	f000 faf7 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 8003170:	e02c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800317e:	461a      	mov	r2, r3
 8003180:	f000 fabd 	bl	80036fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2160      	movs	r1, #96	@ 0x60
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fae7 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 8003190:	e01c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 fa7e 	bl	80036a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2140      	movs	r1, #64	@ 0x40
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fad7 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 80031b0:	e00c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f000 face 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 80031c2:	e003      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e000      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a46      	ldr	r2, [pc, #280]	@ (8003314 <TIM_Base_SetConfig+0x12c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d013      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003206:	d00f      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a43      	ldr	r2, [pc, #268]	@ (8003318 <TIM_Base_SetConfig+0x130>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00b      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a42      	ldr	r2, [pc, #264]	@ (800331c <TIM_Base_SetConfig+0x134>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a41      	ldr	r2, [pc, #260]	@ (8003320 <TIM_Base_SetConfig+0x138>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a40      	ldr	r2, [pc, #256]	@ (8003324 <TIM_Base_SetConfig+0x13c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d108      	bne.n	800323a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800322e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a35      	ldr	r2, [pc, #212]	@ (8003314 <TIM_Base_SetConfig+0x12c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02b      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003248:	d027      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a32      	ldr	r2, [pc, #200]	@ (8003318 <TIM_Base_SetConfig+0x130>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d023      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a31      	ldr	r2, [pc, #196]	@ (800331c <TIM_Base_SetConfig+0x134>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01f      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a30      	ldr	r2, [pc, #192]	@ (8003320 <TIM_Base_SetConfig+0x138>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01b      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a2f      	ldr	r2, [pc, #188]	@ (8003324 <TIM_Base_SetConfig+0x13c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d017      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2e      	ldr	r2, [pc, #184]	@ (8003328 <TIM_Base_SetConfig+0x140>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2d      	ldr	r2, [pc, #180]	@ (800332c <TIM_Base_SetConfig+0x144>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00f      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2c      	ldr	r2, [pc, #176]	@ (8003330 <TIM_Base_SetConfig+0x148>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00b      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2b      	ldr	r2, [pc, #172]	@ (8003334 <TIM_Base_SetConfig+0x14c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2a      	ldr	r2, [pc, #168]	@ (8003338 <TIM_Base_SetConfig+0x150>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a29      	ldr	r2, [pc, #164]	@ (800333c <TIM_Base_SetConfig+0x154>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d108      	bne.n	80032ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a10      	ldr	r2, [pc, #64]	@ (8003314 <TIM_Base_SetConfig+0x12c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_Base_SetConfig+0xf8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a12      	ldr	r2, [pc, #72]	@ (8003324 <TIM_Base_SetConfig+0x13c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d103      	bne.n	80032e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f023 0201 	bic.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	611a      	str	r2, [r3, #16]
  }
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40010000 	.word	0x40010000
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	40010400 	.word	0x40010400
 8003328:	40014000 	.word	0x40014000
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800
 8003334:	40001800 	.word	0x40001800
 8003338:	40001c00 	.word	0x40001c00
 800333c:	40002000 	.word	0x40002000

08003340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 0201 	bic.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800336e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0303 	bic.w	r3, r3, #3
 8003376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f023 0302 	bic.w	r3, r3, #2
 8003388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a20      	ldr	r2, [pc, #128]	@ (8003418 <TIM_OC1_SetConfig+0xd8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_OC1_SetConfig+0x64>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1f      	ldr	r2, [pc, #124]	@ (800341c <TIM_OC1_SetConfig+0xdc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10c      	bne.n	80033be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0308 	bic.w	r3, r3, #8
 80033aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <TIM_OC1_SetConfig+0xd8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_OC1_SetConfig+0x8e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a14      	ldr	r2, [pc, #80]	@ (800341c <TIM_OC1_SetConfig+0xdc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d111      	bne.n	80033f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	621a      	str	r2, [r3, #32]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40010000 	.word	0x40010000
 800341c:	40010400 	.word	0x40010400

08003420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 0210 	bic.w	r2, r3, #16
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800344e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0320 	bic.w	r3, r3, #32
 800346a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a22      	ldr	r2, [pc, #136]	@ (8003504 <TIM_OC2_SetConfig+0xe4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_OC2_SetConfig+0x68>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a21      	ldr	r2, [pc, #132]	@ (8003508 <TIM_OC2_SetConfig+0xe8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10d      	bne.n	80034a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800348e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a17      	ldr	r2, [pc, #92]	@ (8003504 <TIM_OC2_SetConfig+0xe4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_OC2_SetConfig+0x94>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a16      	ldr	r2, [pc, #88]	@ (8003508 <TIM_OC2_SetConfig+0xe8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d113      	bne.n	80034dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40010000 	.word	0x40010000
 8003508:	40010400 	.word	0x40010400

0800350c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0303 	bic.w	r3, r3, #3
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a21      	ldr	r2, [pc, #132]	@ (80035ec <TIM_OC3_SetConfig+0xe0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d003      	beq.n	8003572 <TIM_OC3_SetConfig+0x66>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a20      	ldr	r2, [pc, #128]	@ (80035f0 <TIM_OC3_SetConfig+0xe4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10d      	bne.n	800358e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a16      	ldr	r2, [pc, #88]	@ (80035ec <TIM_OC3_SetConfig+0xe0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_OC3_SetConfig+0x92>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <TIM_OC3_SetConfig+0xe4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d113      	bne.n	80035c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40010000 	.word	0x40010000
 80035f0:	40010400 	.word	0x40010400

080035f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800362a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800363e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	031b      	lsls	r3, r3, #12
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <TIM_OC4_SetConfig+0xa4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_OC4_SetConfig+0x68>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a11      	ldr	r2, [pc, #68]	@ (800369c <TIM_OC4_SetConfig+0xa8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d109      	bne.n	8003670 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	019b      	lsls	r3, r3, #6
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	40010400 	.word	0x40010400

080036a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 030a 	bic.w	r3, r3, #10
 80036dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f023 0210 	bic.w	r2, r3, #16
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	031b      	lsls	r3, r3, #12
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800373a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	f043 0307 	orr.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	021a      	lsls	r2, r3, #8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	2201      	movs	r2, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1a      	ldr	r2, [r3, #32]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003834:	2302      	movs	r3, #2
 8003836:	e05a      	b.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a21      	ldr	r2, [pc, #132]	@ (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d022      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003884:	d01d      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1d      	ldr	r2, [pc, #116]	@ (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d018      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1b      	ldr	r2, [pc, #108]	@ (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1a      	ldr	r2, [pc, #104]	@ (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a18      	ldr	r2, [pc, #96]	@ (800390c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a17      	ldr	r2, [pc, #92]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d10c      	bne.n	80038dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40010000 	.word	0x40010000
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800
 8003908:	40000c00 	.word	0x40000c00
 800390c:	40010400 	.word	0x40010400
 8003910:	40014000 	.word	0x40014000
 8003914:	40001800 	.word	0x40001800

08003918 <siprintf>:
 8003918:	b40e      	push	{r1, r2, r3}
 800391a:	b500      	push	{lr}
 800391c:	b09c      	sub	sp, #112	@ 0x70
 800391e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003920:	9002      	str	r0, [sp, #8]
 8003922:	9006      	str	r0, [sp, #24]
 8003924:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003928:	4809      	ldr	r0, [pc, #36]	@ (8003950 <siprintf+0x38>)
 800392a:	9107      	str	r1, [sp, #28]
 800392c:	9104      	str	r1, [sp, #16]
 800392e:	4909      	ldr	r1, [pc, #36]	@ (8003954 <siprintf+0x3c>)
 8003930:	f853 2b04 	ldr.w	r2, [r3], #4
 8003934:	9105      	str	r1, [sp, #20]
 8003936:	6800      	ldr	r0, [r0, #0]
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	a902      	add	r1, sp, #8
 800393c:	f000 f9b2 	bl	8003ca4 <_svfiprintf_r>
 8003940:	9b02      	ldr	r3, [sp, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	b01c      	add	sp, #112	@ 0x70
 8003948:	f85d eb04 	ldr.w	lr, [sp], #4
 800394c:	b003      	add	sp, #12
 800394e:	4770      	bx	lr
 8003950:	2000000c 	.word	0x2000000c
 8003954:	ffff0208 	.word	0xffff0208

08003958 <memcmp>:
 8003958:	b510      	push	{r4, lr}
 800395a:	3901      	subs	r1, #1
 800395c:	4402      	add	r2, r0
 800395e:	4290      	cmp	r0, r2
 8003960:	d101      	bne.n	8003966 <memcmp+0xe>
 8003962:	2000      	movs	r0, #0
 8003964:	e005      	b.n	8003972 <memcmp+0x1a>
 8003966:	7803      	ldrb	r3, [r0, #0]
 8003968:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800396c:	42a3      	cmp	r3, r4
 800396e:	d001      	beq.n	8003974 <memcmp+0x1c>
 8003970:	1b18      	subs	r0, r3, r4
 8003972:	bd10      	pop	{r4, pc}
 8003974:	3001      	adds	r0, #1
 8003976:	e7f2      	b.n	800395e <memcmp+0x6>

08003978 <memset>:
 8003978:	4402      	add	r2, r0
 800397a:	4603      	mov	r3, r0
 800397c:	4293      	cmp	r3, r2
 800397e:	d100      	bne.n	8003982 <memset+0xa>
 8003980:	4770      	bx	lr
 8003982:	f803 1b01 	strb.w	r1, [r3], #1
 8003986:	e7f9      	b.n	800397c <memset+0x4>

08003988 <__errno>:
 8003988:	4b01      	ldr	r3, [pc, #4]	@ (8003990 <__errno+0x8>)
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	2000000c 	.word	0x2000000c

08003994 <__libc_init_array>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	4d0d      	ldr	r5, [pc, #52]	@ (80039cc <__libc_init_array+0x38>)
 8003998:	4c0d      	ldr	r4, [pc, #52]	@ (80039d0 <__libc_init_array+0x3c>)
 800399a:	1b64      	subs	r4, r4, r5
 800399c:	10a4      	asrs	r4, r4, #2
 800399e:	2600      	movs	r6, #0
 80039a0:	42a6      	cmp	r6, r4
 80039a2:	d109      	bne.n	80039b8 <__libc_init_array+0x24>
 80039a4:	4d0b      	ldr	r5, [pc, #44]	@ (80039d4 <__libc_init_array+0x40>)
 80039a6:	4c0c      	ldr	r4, [pc, #48]	@ (80039d8 <__libc_init_array+0x44>)
 80039a8:	f000 fc66 	bl	8004278 <_init>
 80039ac:	1b64      	subs	r4, r4, r5
 80039ae:	10a4      	asrs	r4, r4, #2
 80039b0:	2600      	movs	r6, #0
 80039b2:	42a6      	cmp	r6, r4
 80039b4:	d105      	bne.n	80039c2 <__libc_init_array+0x2e>
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039bc:	4798      	blx	r3
 80039be:	3601      	adds	r6, #1
 80039c0:	e7ee      	b.n	80039a0 <__libc_init_array+0xc>
 80039c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c6:	4798      	blx	r3
 80039c8:	3601      	adds	r6, #1
 80039ca:	e7f2      	b.n	80039b2 <__libc_init_array+0x1e>
 80039cc:	08004988 	.word	0x08004988
 80039d0:	08004988 	.word	0x08004988
 80039d4:	08004988 	.word	0x08004988
 80039d8:	0800498c 	.word	0x0800498c

080039dc <__retarget_lock_acquire_recursive>:
 80039dc:	4770      	bx	lr

080039de <__retarget_lock_release_recursive>:
 80039de:	4770      	bx	lr

080039e0 <memcpy>:
 80039e0:	440a      	add	r2, r1
 80039e2:	4291      	cmp	r1, r2
 80039e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80039e8:	d100      	bne.n	80039ec <memcpy+0xc>
 80039ea:	4770      	bx	lr
 80039ec:	b510      	push	{r4, lr}
 80039ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039f6:	4291      	cmp	r1, r2
 80039f8:	d1f9      	bne.n	80039ee <memcpy+0xe>
 80039fa:	bd10      	pop	{r4, pc}

080039fc <_free_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4605      	mov	r5, r0
 8003a00:	2900      	cmp	r1, #0
 8003a02:	d041      	beq.n	8003a88 <_free_r+0x8c>
 8003a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a08:	1f0c      	subs	r4, r1, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bfb8      	it	lt
 8003a0e:	18e4      	addlt	r4, r4, r3
 8003a10:	f000 f8e0 	bl	8003bd4 <__malloc_lock>
 8003a14:	4a1d      	ldr	r2, [pc, #116]	@ (8003a8c <_free_r+0x90>)
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	b933      	cbnz	r3, 8003a28 <_free_r+0x2c>
 8003a1a:	6063      	str	r3, [r4, #4]
 8003a1c:	6014      	str	r4, [r2, #0]
 8003a1e:	4628      	mov	r0, r5
 8003a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a24:	f000 b8dc 	b.w	8003be0 <__malloc_unlock>
 8003a28:	42a3      	cmp	r3, r4
 8003a2a:	d908      	bls.n	8003a3e <_free_r+0x42>
 8003a2c:	6820      	ldr	r0, [r4, #0]
 8003a2e:	1821      	adds	r1, r4, r0
 8003a30:	428b      	cmp	r3, r1
 8003a32:	bf01      	itttt	eq
 8003a34:	6819      	ldreq	r1, [r3, #0]
 8003a36:	685b      	ldreq	r3, [r3, #4]
 8003a38:	1809      	addeq	r1, r1, r0
 8003a3a:	6021      	streq	r1, [r4, #0]
 8003a3c:	e7ed      	b.n	8003a1a <_free_r+0x1e>
 8003a3e:	461a      	mov	r2, r3
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	b10b      	cbz	r3, 8003a48 <_free_r+0x4c>
 8003a44:	42a3      	cmp	r3, r4
 8003a46:	d9fa      	bls.n	8003a3e <_free_r+0x42>
 8003a48:	6811      	ldr	r1, [r2, #0]
 8003a4a:	1850      	adds	r0, r2, r1
 8003a4c:	42a0      	cmp	r0, r4
 8003a4e:	d10b      	bne.n	8003a68 <_free_r+0x6c>
 8003a50:	6820      	ldr	r0, [r4, #0]
 8003a52:	4401      	add	r1, r0
 8003a54:	1850      	adds	r0, r2, r1
 8003a56:	4283      	cmp	r3, r0
 8003a58:	6011      	str	r1, [r2, #0]
 8003a5a:	d1e0      	bne.n	8003a1e <_free_r+0x22>
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	6053      	str	r3, [r2, #4]
 8003a62:	4408      	add	r0, r1
 8003a64:	6010      	str	r0, [r2, #0]
 8003a66:	e7da      	b.n	8003a1e <_free_r+0x22>
 8003a68:	d902      	bls.n	8003a70 <_free_r+0x74>
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	602b      	str	r3, [r5, #0]
 8003a6e:	e7d6      	b.n	8003a1e <_free_r+0x22>
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	1821      	adds	r1, r4, r0
 8003a74:	428b      	cmp	r3, r1
 8003a76:	bf04      	itt	eq
 8003a78:	6819      	ldreq	r1, [r3, #0]
 8003a7a:	685b      	ldreq	r3, [r3, #4]
 8003a7c:	6063      	str	r3, [r4, #4]
 8003a7e:	bf04      	itt	eq
 8003a80:	1809      	addeq	r1, r1, r0
 8003a82:	6021      	streq	r1, [r4, #0]
 8003a84:	6054      	str	r4, [r2, #4]
 8003a86:	e7ca      	b.n	8003a1e <_free_r+0x22>
 8003a88:	bd38      	pop	{r3, r4, r5, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000730 	.word	0x20000730

08003a90 <sbrk_aligned>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	4e0f      	ldr	r6, [pc, #60]	@ (8003ad0 <sbrk_aligned+0x40>)
 8003a94:	460c      	mov	r4, r1
 8003a96:	6831      	ldr	r1, [r6, #0]
 8003a98:	4605      	mov	r5, r0
 8003a9a:	b911      	cbnz	r1, 8003aa2 <sbrk_aligned+0x12>
 8003a9c:	f000 fba6 	bl	80041ec <_sbrk_r>
 8003aa0:	6030      	str	r0, [r6, #0]
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	f000 fba1 	bl	80041ec <_sbrk_r>
 8003aaa:	1c43      	adds	r3, r0, #1
 8003aac:	d103      	bne.n	8003ab6 <sbrk_aligned+0x26>
 8003aae:	f04f 34ff 	mov.w	r4, #4294967295
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	bd70      	pop	{r4, r5, r6, pc}
 8003ab6:	1cc4      	adds	r4, r0, #3
 8003ab8:	f024 0403 	bic.w	r4, r4, #3
 8003abc:	42a0      	cmp	r0, r4
 8003abe:	d0f8      	beq.n	8003ab2 <sbrk_aligned+0x22>
 8003ac0:	1a21      	subs	r1, r4, r0
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f000 fb92 	bl	80041ec <_sbrk_r>
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d1f2      	bne.n	8003ab2 <sbrk_aligned+0x22>
 8003acc:	e7ef      	b.n	8003aae <sbrk_aligned+0x1e>
 8003ace:	bf00      	nop
 8003ad0:	2000072c 	.word	0x2000072c

08003ad4 <_malloc_r>:
 8003ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ad8:	1ccd      	adds	r5, r1, #3
 8003ada:	f025 0503 	bic.w	r5, r5, #3
 8003ade:	3508      	adds	r5, #8
 8003ae0:	2d0c      	cmp	r5, #12
 8003ae2:	bf38      	it	cc
 8003ae4:	250c      	movcc	r5, #12
 8003ae6:	2d00      	cmp	r5, #0
 8003ae8:	4606      	mov	r6, r0
 8003aea:	db01      	blt.n	8003af0 <_malloc_r+0x1c>
 8003aec:	42a9      	cmp	r1, r5
 8003aee:	d904      	bls.n	8003afa <_malloc_r+0x26>
 8003af0:	230c      	movs	r3, #12
 8003af2:	6033      	str	r3, [r6, #0]
 8003af4:	2000      	movs	r0, #0
 8003af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003afa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bd0 <_malloc_r+0xfc>
 8003afe:	f000 f869 	bl	8003bd4 <__malloc_lock>
 8003b02:	f8d8 3000 	ldr.w	r3, [r8]
 8003b06:	461c      	mov	r4, r3
 8003b08:	bb44      	cbnz	r4, 8003b5c <_malloc_r+0x88>
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	f7ff ffbf 	bl	8003a90 <sbrk_aligned>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	4604      	mov	r4, r0
 8003b16:	d158      	bne.n	8003bca <_malloc_r+0xf6>
 8003b18:	f8d8 4000 	ldr.w	r4, [r8]
 8003b1c:	4627      	mov	r7, r4
 8003b1e:	2f00      	cmp	r7, #0
 8003b20:	d143      	bne.n	8003baa <_malloc_r+0xd6>
 8003b22:	2c00      	cmp	r4, #0
 8003b24:	d04b      	beq.n	8003bbe <_malloc_r+0xea>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	4639      	mov	r1, r7
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	eb04 0903 	add.w	r9, r4, r3
 8003b30:	f000 fb5c 	bl	80041ec <_sbrk_r>
 8003b34:	4581      	cmp	r9, r0
 8003b36:	d142      	bne.n	8003bbe <_malloc_r+0xea>
 8003b38:	6821      	ldr	r1, [r4, #0]
 8003b3a:	1a6d      	subs	r5, r5, r1
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f7ff ffa6 	bl	8003a90 <sbrk_aligned>
 8003b44:	3001      	adds	r0, #1
 8003b46:	d03a      	beq.n	8003bbe <_malloc_r+0xea>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	442b      	add	r3, r5
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	bb62      	cbnz	r2, 8003bb0 <_malloc_r+0xdc>
 8003b56:	f8c8 7000 	str.w	r7, [r8]
 8003b5a:	e00f      	b.n	8003b7c <_malloc_r+0xa8>
 8003b5c:	6822      	ldr	r2, [r4, #0]
 8003b5e:	1b52      	subs	r2, r2, r5
 8003b60:	d420      	bmi.n	8003ba4 <_malloc_r+0xd0>
 8003b62:	2a0b      	cmp	r2, #11
 8003b64:	d917      	bls.n	8003b96 <_malloc_r+0xc2>
 8003b66:	1961      	adds	r1, r4, r5
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	6025      	str	r5, [r4, #0]
 8003b6c:	bf18      	it	ne
 8003b6e:	6059      	strne	r1, [r3, #4]
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	bf08      	it	eq
 8003b74:	f8c8 1000 	streq.w	r1, [r8]
 8003b78:	5162      	str	r2, [r4, r5]
 8003b7a:	604b      	str	r3, [r1, #4]
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f000 f82f 	bl	8003be0 <__malloc_unlock>
 8003b82:	f104 000b 	add.w	r0, r4, #11
 8003b86:	1d23      	adds	r3, r4, #4
 8003b88:	f020 0007 	bic.w	r0, r0, #7
 8003b8c:	1ac2      	subs	r2, r0, r3
 8003b8e:	bf1c      	itt	ne
 8003b90:	1a1b      	subne	r3, r3, r0
 8003b92:	50a3      	strne	r3, [r4, r2]
 8003b94:	e7af      	b.n	8003af6 <_malloc_r+0x22>
 8003b96:	6862      	ldr	r2, [r4, #4]
 8003b98:	42a3      	cmp	r3, r4
 8003b9a:	bf0c      	ite	eq
 8003b9c:	f8c8 2000 	streq.w	r2, [r8]
 8003ba0:	605a      	strne	r2, [r3, #4]
 8003ba2:	e7eb      	b.n	8003b7c <_malloc_r+0xa8>
 8003ba4:	4623      	mov	r3, r4
 8003ba6:	6864      	ldr	r4, [r4, #4]
 8003ba8:	e7ae      	b.n	8003b08 <_malloc_r+0x34>
 8003baa:	463c      	mov	r4, r7
 8003bac:	687f      	ldr	r7, [r7, #4]
 8003bae:	e7b6      	b.n	8003b1e <_malloc_r+0x4a>
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	d1fb      	bne.n	8003bb0 <_malloc_r+0xdc>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	6053      	str	r3, [r2, #4]
 8003bbc:	e7de      	b.n	8003b7c <_malloc_r+0xa8>
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	6033      	str	r3, [r6, #0]
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f000 f80c 	bl	8003be0 <__malloc_unlock>
 8003bc8:	e794      	b.n	8003af4 <_malloc_r+0x20>
 8003bca:	6005      	str	r5, [r0, #0]
 8003bcc:	e7d6      	b.n	8003b7c <_malloc_r+0xa8>
 8003bce:	bf00      	nop
 8003bd0:	20000730 	.word	0x20000730

08003bd4 <__malloc_lock>:
 8003bd4:	4801      	ldr	r0, [pc, #4]	@ (8003bdc <__malloc_lock+0x8>)
 8003bd6:	f7ff bf01 	b.w	80039dc <__retarget_lock_acquire_recursive>
 8003bda:	bf00      	nop
 8003bdc:	20000728 	.word	0x20000728

08003be0 <__malloc_unlock>:
 8003be0:	4801      	ldr	r0, [pc, #4]	@ (8003be8 <__malloc_unlock+0x8>)
 8003be2:	f7ff befc 	b.w	80039de <__retarget_lock_release_recursive>
 8003be6:	bf00      	nop
 8003be8:	20000728 	.word	0x20000728

08003bec <__ssputs_r>:
 8003bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	688e      	ldr	r6, [r1, #8]
 8003bf2:	461f      	mov	r7, r3
 8003bf4:	42be      	cmp	r6, r7
 8003bf6:	680b      	ldr	r3, [r1, #0]
 8003bf8:	4682      	mov	sl, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	4690      	mov	r8, r2
 8003bfe:	d82d      	bhi.n	8003c5c <__ssputs_r+0x70>
 8003c00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c08:	d026      	beq.n	8003c58 <__ssputs_r+0x6c>
 8003c0a:	6965      	ldr	r5, [r4, #20]
 8003c0c:	6909      	ldr	r1, [r1, #16]
 8003c0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c12:	eba3 0901 	sub.w	r9, r3, r1
 8003c16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c1a:	1c7b      	adds	r3, r7, #1
 8003c1c:	444b      	add	r3, r9
 8003c1e:	106d      	asrs	r5, r5, #1
 8003c20:	429d      	cmp	r5, r3
 8003c22:	bf38      	it	cc
 8003c24:	461d      	movcc	r5, r3
 8003c26:	0553      	lsls	r3, r2, #21
 8003c28:	d527      	bpl.n	8003c7a <__ssputs_r+0x8e>
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f7ff ff52 	bl	8003ad4 <_malloc_r>
 8003c30:	4606      	mov	r6, r0
 8003c32:	b360      	cbz	r0, 8003c8e <__ssputs_r+0xa2>
 8003c34:	6921      	ldr	r1, [r4, #16]
 8003c36:	464a      	mov	r2, r9
 8003c38:	f7ff fed2 	bl	80039e0 <memcpy>
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c46:	81a3      	strh	r3, [r4, #12]
 8003c48:	6126      	str	r6, [r4, #16]
 8003c4a:	6165      	str	r5, [r4, #20]
 8003c4c:	444e      	add	r6, r9
 8003c4e:	eba5 0509 	sub.w	r5, r5, r9
 8003c52:	6026      	str	r6, [r4, #0]
 8003c54:	60a5      	str	r5, [r4, #8]
 8003c56:	463e      	mov	r6, r7
 8003c58:	42be      	cmp	r6, r7
 8003c5a:	d900      	bls.n	8003c5e <__ssputs_r+0x72>
 8003c5c:	463e      	mov	r6, r7
 8003c5e:	6820      	ldr	r0, [r4, #0]
 8003c60:	4632      	mov	r2, r6
 8003c62:	4641      	mov	r1, r8
 8003c64:	f000 faa8 	bl	80041b8 <memmove>
 8003c68:	68a3      	ldr	r3, [r4, #8]
 8003c6a:	1b9b      	subs	r3, r3, r6
 8003c6c:	60a3      	str	r3, [r4, #8]
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	4433      	add	r3, r6
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	2000      	movs	r0, #0
 8003c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7a:	462a      	mov	r2, r5
 8003c7c:	f000 fac6 	bl	800420c <_realloc_r>
 8003c80:	4606      	mov	r6, r0
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d1e0      	bne.n	8003c48 <__ssputs_r+0x5c>
 8003c86:	6921      	ldr	r1, [r4, #16]
 8003c88:	4650      	mov	r0, sl
 8003c8a:	f7ff feb7 	bl	80039fc <_free_r>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	f8ca 3000 	str.w	r3, [sl]
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c9a:	81a3      	strh	r3, [r4, #12]
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	e7e9      	b.n	8003c76 <__ssputs_r+0x8a>
	...

08003ca4 <_svfiprintf_r>:
 8003ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	4698      	mov	r8, r3
 8003caa:	898b      	ldrh	r3, [r1, #12]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	b09d      	sub	sp, #116	@ 0x74
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	460d      	mov	r5, r1
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	d510      	bpl.n	8003cda <_svfiprintf_r+0x36>
 8003cb8:	690b      	ldr	r3, [r1, #16]
 8003cba:	b973      	cbnz	r3, 8003cda <_svfiprintf_r+0x36>
 8003cbc:	2140      	movs	r1, #64	@ 0x40
 8003cbe:	f7ff ff09 	bl	8003ad4 <_malloc_r>
 8003cc2:	6028      	str	r0, [r5, #0]
 8003cc4:	6128      	str	r0, [r5, #16]
 8003cc6:	b930      	cbnz	r0, 8003cd6 <_svfiprintf_r+0x32>
 8003cc8:	230c      	movs	r3, #12
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	b01d      	add	sp, #116	@ 0x74
 8003cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd6:	2340      	movs	r3, #64	@ 0x40
 8003cd8:	616b      	str	r3, [r5, #20]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cde:	2320      	movs	r3, #32
 8003ce0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ce8:	2330      	movs	r3, #48	@ 0x30
 8003cea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e88 <_svfiprintf_r+0x1e4>
 8003cee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cf2:	f04f 0901 	mov.w	r9, #1
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	469a      	mov	sl, r3
 8003cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cfe:	b10a      	cbz	r2, 8003d04 <_svfiprintf_r+0x60>
 8003d00:	2a25      	cmp	r2, #37	@ 0x25
 8003d02:	d1f9      	bne.n	8003cf8 <_svfiprintf_r+0x54>
 8003d04:	ebba 0b04 	subs.w	fp, sl, r4
 8003d08:	d00b      	beq.n	8003d22 <_svfiprintf_r+0x7e>
 8003d0a:	465b      	mov	r3, fp
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	4629      	mov	r1, r5
 8003d10:	4638      	mov	r0, r7
 8003d12:	f7ff ff6b 	bl	8003bec <__ssputs_r>
 8003d16:	3001      	adds	r0, #1
 8003d18:	f000 80a7 	beq.w	8003e6a <_svfiprintf_r+0x1c6>
 8003d1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d1e:	445a      	add	r2, fp
 8003d20:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d22:	f89a 3000 	ldrb.w	r3, [sl]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 809f 	beq.w	8003e6a <_svfiprintf_r+0x1c6>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d36:	f10a 0a01 	add.w	sl, sl, #1
 8003d3a:	9304      	str	r3, [sp, #16]
 8003d3c:	9307      	str	r3, [sp, #28]
 8003d3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d42:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d44:	4654      	mov	r4, sl
 8003d46:	2205      	movs	r2, #5
 8003d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d4c:	484e      	ldr	r0, [pc, #312]	@ (8003e88 <_svfiprintf_r+0x1e4>)
 8003d4e:	f7fc fa3f 	bl	80001d0 <memchr>
 8003d52:	9a04      	ldr	r2, [sp, #16]
 8003d54:	b9d8      	cbnz	r0, 8003d8e <_svfiprintf_r+0xea>
 8003d56:	06d0      	lsls	r0, r2, #27
 8003d58:	bf44      	itt	mi
 8003d5a:	2320      	movmi	r3, #32
 8003d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d60:	0711      	lsls	r1, r2, #28
 8003d62:	bf44      	itt	mi
 8003d64:	232b      	movmi	r3, #43	@ 0x2b
 8003d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d70:	d015      	beq.n	8003d9e <_svfiprintf_r+0xfa>
 8003d72:	9a07      	ldr	r2, [sp, #28]
 8003d74:	4654      	mov	r4, sl
 8003d76:	2000      	movs	r0, #0
 8003d78:	f04f 0c0a 	mov.w	ip, #10
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d82:	3b30      	subs	r3, #48	@ 0x30
 8003d84:	2b09      	cmp	r3, #9
 8003d86:	d94b      	bls.n	8003e20 <_svfiprintf_r+0x17c>
 8003d88:	b1b0      	cbz	r0, 8003db8 <_svfiprintf_r+0x114>
 8003d8a:	9207      	str	r2, [sp, #28]
 8003d8c:	e014      	b.n	8003db8 <_svfiprintf_r+0x114>
 8003d8e:	eba0 0308 	sub.w	r3, r0, r8
 8003d92:	fa09 f303 	lsl.w	r3, r9, r3
 8003d96:	4313      	orrs	r3, r2
 8003d98:	9304      	str	r3, [sp, #16]
 8003d9a:	46a2      	mov	sl, r4
 8003d9c:	e7d2      	b.n	8003d44 <_svfiprintf_r+0xa0>
 8003d9e:	9b03      	ldr	r3, [sp, #12]
 8003da0:	1d19      	adds	r1, r3, #4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	9103      	str	r1, [sp, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bfbb      	ittet	lt
 8003daa:	425b      	neglt	r3, r3
 8003dac:	f042 0202 	orrlt.w	r2, r2, #2
 8003db0:	9307      	strge	r3, [sp, #28]
 8003db2:	9307      	strlt	r3, [sp, #28]
 8003db4:	bfb8      	it	lt
 8003db6:	9204      	strlt	r2, [sp, #16]
 8003db8:	7823      	ldrb	r3, [r4, #0]
 8003dba:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dbc:	d10a      	bne.n	8003dd4 <_svfiprintf_r+0x130>
 8003dbe:	7863      	ldrb	r3, [r4, #1]
 8003dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dc2:	d132      	bne.n	8003e2a <_svfiprintf_r+0x186>
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	9203      	str	r2, [sp, #12]
 8003dcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dd0:	3402      	adds	r4, #2
 8003dd2:	9305      	str	r3, [sp, #20]
 8003dd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e98 <_svfiprintf_r+0x1f4>
 8003dd8:	7821      	ldrb	r1, [r4, #0]
 8003dda:	2203      	movs	r2, #3
 8003ddc:	4650      	mov	r0, sl
 8003dde:	f7fc f9f7 	bl	80001d0 <memchr>
 8003de2:	b138      	cbz	r0, 8003df4 <_svfiprintf_r+0x150>
 8003de4:	9b04      	ldr	r3, [sp, #16]
 8003de6:	eba0 000a 	sub.w	r0, r0, sl
 8003dea:	2240      	movs	r2, #64	@ 0x40
 8003dec:	4082      	lsls	r2, r0
 8003dee:	4313      	orrs	r3, r2
 8003df0:	3401      	adds	r4, #1
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df8:	4824      	ldr	r0, [pc, #144]	@ (8003e8c <_svfiprintf_r+0x1e8>)
 8003dfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dfe:	2206      	movs	r2, #6
 8003e00:	f7fc f9e6 	bl	80001d0 <memchr>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	d036      	beq.n	8003e76 <_svfiprintf_r+0x1d2>
 8003e08:	4b21      	ldr	r3, [pc, #132]	@ (8003e90 <_svfiprintf_r+0x1ec>)
 8003e0a:	bb1b      	cbnz	r3, 8003e54 <_svfiprintf_r+0x1b0>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	3307      	adds	r3, #7
 8003e10:	f023 0307 	bic.w	r3, r3, #7
 8003e14:	3308      	adds	r3, #8
 8003e16:	9303      	str	r3, [sp, #12]
 8003e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e1a:	4433      	add	r3, r6
 8003e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e1e:	e76a      	b.n	8003cf6 <_svfiprintf_r+0x52>
 8003e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e24:	460c      	mov	r4, r1
 8003e26:	2001      	movs	r0, #1
 8003e28:	e7a8      	b.n	8003d7c <_svfiprintf_r+0xd8>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	3401      	adds	r4, #1
 8003e2e:	9305      	str	r3, [sp, #20]
 8003e30:	4619      	mov	r1, r3
 8003e32:	f04f 0c0a 	mov.w	ip, #10
 8003e36:	4620      	mov	r0, r4
 8003e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e3c:	3a30      	subs	r2, #48	@ 0x30
 8003e3e:	2a09      	cmp	r2, #9
 8003e40:	d903      	bls.n	8003e4a <_svfiprintf_r+0x1a6>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0c6      	beq.n	8003dd4 <_svfiprintf_r+0x130>
 8003e46:	9105      	str	r1, [sp, #20]
 8003e48:	e7c4      	b.n	8003dd4 <_svfiprintf_r+0x130>
 8003e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e4e:	4604      	mov	r4, r0
 8003e50:	2301      	movs	r3, #1
 8003e52:	e7f0      	b.n	8003e36 <_svfiprintf_r+0x192>
 8003e54:	ab03      	add	r3, sp, #12
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	462a      	mov	r2, r5
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e94 <_svfiprintf_r+0x1f0>)
 8003e5c:	a904      	add	r1, sp, #16
 8003e5e:	4638      	mov	r0, r7
 8003e60:	f3af 8000 	nop.w
 8003e64:	1c42      	adds	r2, r0, #1
 8003e66:	4606      	mov	r6, r0
 8003e68:	d1d6      	bne.n	8003e18 <_svfiprintf_r+0x174>
 8003e6a:	89ab      	ldrh	r3, [r5, #12]
 8003e6c:	065b      	lsls	r3, r3, #25
 8003e6e:	f53f af2d 	bmi.w	8003ccc <_svfiprintf_r+0x28>
 8003e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e74:	e72c      	b.n	8003cd0 <_svfiprintf_r+0x2c>
 8003e76:	ab03      	add	r3, sp, #12
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	462a      	mov	r2, r5
 8003e7c:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <_svfiprintf_r+0x1f0>)
 8003e7e:	a904      	add	r1, sp, #16
 8003e80:	4638      	mov	r0, r7
 8003e82:	f000 f879 	bl	8003f78 <_printf_i>
 8003e86:	e7ed      	b.n	8003e64 <_svfiprintf_r+0x1c0>
 8003e88:	0800494c 	.word	0x0800494c
 8003e8c:	08004956 	.word	0x08004956
 8003e90:	00000000 	.word	0x00000000
 8003e94:	08003bed 	.word	0x08003bed
 8003e98:	08004952 	.word	0x08004952

08003e9c <_printf_common>:
 8003e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea0:	4616      	mov	r6, r2
 8003ea2:	4698      	mov	r8, r3
 8003ea4:	688a      	ldr	r2, [r1, #8]
 8003ea6:	690b      	ldr	r3, [r1, #16]
 8003ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003eac:	4293      	cmp	r3, r2
 8003eae:	bfb8      	it	lt
 8003eb0:	4613      	movlt	r3, r2
 8003eb2:	6033      	str	r3, [r6, #0]
 8003eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003eb8:	4607      	mov	r7, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	b10a      	cbz	r2, 8003ec2 <_printf_common+0x26>
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	6033      	str	r3, [r6, #0]
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	0699      	lsls	r1, r3, #26
 8003ec6:	bf42      	ittt	mi
 8003ec8:	6833      	ldrmi	r3, [r6, #0]
 8003eca:	3302      	addmi	r3, #2
 8003ecc:	6033      	strmi	r3, [r6, #0]
 8003ece:	6825      	ldr	r5, [r4, #0]
 8003ed0:	f015 0506 	ands.w	r5, r5, #6
 8003ed4:	d106      	bne.n	8003ee4 <_printf_common+0x48>
 8003ed6:	f104 0a19 	add.w	sl, r4, #25
 8003eda:	68e3      	ldr	r3, [r4, #12]
 8003edc:	6832      	ldr	r2, [r6, #0]
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	42ab      	cmp	r3, r5
 8003ee2:	dc26      	bgt.n	8003f32 <_printf_common+0x96>
 8003ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	3b00      	subs	r3, #0
 8003eec:	bf18      	it	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	0692      	lsls	r2, r2, #26
 8003ef2:	d42b      	bmi.n	8003f4c <_printf_common+0xb0>
 8003ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ef8:	4641      	mov	r1, r8
 8003efa:	4638      	mov	r0, r7
 8003efc:	47c8      	blx	r9
 8003efe:	3001      	adds	r0, #1
 8003f00:	d01e      	beq.n	8003f40 <_printf_common+0xa4>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	6922      	ldr	r2, [r4, #16]
 8003f06:	f003 0306 	and.w	r3, r3, #6
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	bf02      	ittt	eq
 8003f0e:	68e5      	ldreq	r5, [r4, #12]
 8003f10:	6833      	ldreq	r3, [r6, #0]
 8003f12:	1aed      	subeq	r5, r5, r3
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	bf0c      	ite	eq
 8003f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f1c:	2500      	movne	r5, #0
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	bfc4      	itt	gt
 8003f22:	1a9b      	subgt	r3, r3, r2
 8003f24:	18ed      	addgt	r5, r5, r3
 8003f26:	2600      	movs	r6, #0
 8003f28:	341a      	adds	r4, #26
 8003f2a:	42b5      	cmp	r5, r6
 8003f2c:	d11a      	bne.n	8003f64 <_printf_common+0xc8>
 8003f2e:	2000      	movs	r0, #0
 8003f30:	e008      	b.n	8003f44 <_printf_common+0xa8>
 8003f32:	2301      	movs	r3, #1
 8003f34:	4652      	mov	r2, sl
 8003f36:	4641      	mov	r1, r8
 8003f38:	4638      	mov	r0, r7
 8003f3a:	47c8      	blx	r9
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d103      	bne.n	8003f48 <_printf_common+0xac>
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f48:	3501      	adds	r5, #1
 8003f4a:	e7c6      	b.n	8003eda <_printf_common+0x3e>
 8003f4c:	18e1      	adds	r1, r4, r3
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	2030      	movs	r0, #48	@ 0x30
 8003f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f56:	4422      	add	r2, r4
 8003f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f60:	3302      	adds	r3, #2
 8003f62:	e7c7      	b.n	8003ef4 <_printf_common+0x58>
 8003f64:	2301      	movs	r3, #1
 8003f66:	4622      	mov	r2, r4
 8003f68:	4641      	mov	r1, r8
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	47c8      	blx	r9
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d0e6      	beq.n	8003f40 <_printf_common+0xa4>
 8003f72:	3601      	adds	r6, #1
 8003f74:	e7d9      	b.n	8003f2a <_printf_common+0x8e>
	...

08003f78 <_printf_i>:
 8003f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7c:	7e0f      	ldrb	r7, [r1, #24]
 8003f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f80:	2f78      	cmp	r7, #120	@ 0x78
 8003f82:	4691      	mov	r9, r2
 8003f84:	4680      	mov	r8, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	469a      	mov	sl, r3
 8003f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f8e:	d807      	bhi.n	8003fa0 <_printf_i+0x28>
 8003f90:	2f62      	cmp	r7, #98	@ 0x62
 8003f92:	d80a      	bhi.n	8003faa <_printf_i+0x32>
 8003f94:	2f00      	cmp	r7, #0
 8003f96:	f000 80d2 	beq.w	800413e <_printf_i+0x1c6>
 8003f9a:	2f58      	cmp	r7, #88	@ 0x58
 8003f9c:	f000 80b9 	beq.w	8004112 <_printf_i+0x19a>
 8003fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fa8:	e03a      	b.n	8004020 <_printf_i+0xa8>
 8003faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fae:	2b15      	cmp	r3, #21
 8003fb0:	d8f6      	bhi.n	8003fa0 <_printf_i+0x28>
 8003fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8003fb8 <_printf_i+0x40>)
 8003fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fb8:	08004011 	.word	0x08004011
 8003fbc:	08004025 	.word	0x08004025
 8003fc0:	08003fa1 	.word	0x08003fa1
 8003fc4:	08003fa1 	.word	0x08003fa1
 8003fc8:	08003fa1 	.word	0x08003fa1
 8003fcc:	08003fa1 	.word	0x08003fa1
 8003fd0:	08004025 	.word	0x08004025
 8003fd4:	08003fa1 	.word	0x08003fa1
 8003fd8:	08003fa1 	.word	0x08003fa1
 8003fdc:	08003fa1 	.word	0x08003fa1
 8003fe0:	08003fa1 	.word	0x08003fa1
 8003fe4:	08004125 	.word	0x08004125
 8003fe8:	0800404f 	.word	0x0800404f
 8003fec:	080040df 	.word	0x080040df
 8003ff0:	08003fa1 	.word	0x08003fa1
 8003ff4:	08003fa1 	.word	0x08003fa1
 8003ff8:	08004147 	.word	0x08004147
 8003ffc:	08003fa1 	.word	0x08003fa1
 8004000:	0800404f 	.word	0x0800404f
 8004004:	08003fa1 	.word	0x08003fa1
 8004008:	08003fa1 	.word	0x08003fa1
 800400c:	080040e7 	.word	0x080040e7
 8004010:	6833      	ldr	r3, [r6, #0]
 8004012:	1d1a      	adds	r2, r3, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6032      	str	r2, [r6, #0]
 8004018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800401c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004020:	2301      	movs	r3, #1
 8004022:	e09d      	b.n	8004160 <_printf_i+0x1e8>
 8004024:	6833      	ldr	r3, [r6, #0]
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	1d19      	adds	r1, r3, #4
 800402a:	6031      	str	r1, [r6, #0]
 800402c:	0606      	lsls	r6, r0, #24
 800402e:	d501      	bpl.n	8004034 <_printf_i+0xbc>
 8004030:	681d      	ldr	r5, [r3, #0]
 8004032:	e003      	b.n	800403c <_printf_i+0xc4>
 8004034:	0645      	lsls	r5, r0, #25
 8004036:	d5fb      	bpl.n	8004030 <_printf_i+0xb8>
 8004038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800403c:	2d00      	cmp	r5, #0
 800403e:	da03      	bge.n	8004048 <_printf_i+0xd0>
 8004040:	232d      	movs	r3, #45	@ 0x2d
 8004042:	426d      	negs	r5, r5
 8004044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004048:	4859      	ldr	r0, [pc, #356]	@ (80041b0 <_printf_i+0x238>)
 800404a:	230a      	movs	r3, #10
 800404c:	e011      	b.n	8004072 <_printf_i+0xfa>
 800404e:	6821      	ldr	r1, [r4, #0]
 8004050:	6833      	ldr	r3, [r6, #0]
 8004052:	0608      	lsls	r0, r1, #24
 8004054:	f853 5b04 	ldr.w	r5, [r3], #4
 8004058:	d402      	bmi.n	8004060 <_printf_i+0xe8>
 800405a:	0649      	lsls	r1, r1, #25
 800405c:	bf48      	it	mi
 800405e:	b2ad      	uxthmi	r5, r5
 8004060:	2f6f      	cmp	r7, #111	@ 0x6f
 8004062:	4853      	ldr	r0, [pc, #332]	@ (80041b0 <_printf_i+0x238>)
 8004064:	6033      	str	r3, [r6, #0]
 8004066:	bf14      	ite	ne
 8004068:	230a      	movne	r3, #10
 800406a:	2308      	moveq	r3, #8
 800406c:	2100      	movs	r1, #0
 800406e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004072:	6866      	ldr	r6, [r4, #4]
 8004074:	60a6      	str	r6, [r4, #8]
 8004076:	2e00      	cmp	r6, #0
 8004078:	bfa2      	ittt	ge
 800407a:	6821      	ldrge	r1, [r4, #0]
 800407c:	f021 0104 	bicge.w	r1, r1, #4
 8004080:	6021      	strge	r1, [r4, #0]
 8004082:	b90d      	cbnz	r5, 8004088 <_printf_i+0x110>
 8004084:	2e00      	cmp	r6, #0
 8004086:	d04b      	beq.n	8004120 <_printf_i+0x1a8>
 8004088:	4616      	mov	r6, r2
 800408a:	fbb5 f1f3 	udiv	r1, r5, r3
 800408e:	fb03 5711 	mls	r7, r3, r1, r5
 8004092:	5dc7      	ldrb	r7, [r0, r7]
 8004094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004098:	462f      	mov	r7, r5
 800409a:	42bb      	cmp	r3, r7
 800409c:	460d      	mov	r5, r1
 800409e:	d9f4      	bls.n	800408a <_printf_i+0x112>
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d10b      	bne.n	80040bc <_printf_i+0x144>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	07df      	lsls	r7, r3, #31
 80040a8:	d508      	bpl.n	80040bc <_printf_i+0x144>
 80040aa:	6923      	ldr	r3, [r4, #16]
 80040ac:	6861      	ldr	r1, [r4, #4]
 80040ae:	4299      	cmp	r1, r3
 80040b0:	bfde      	ittt	le
 80040b2:	2330      	movle	r3, #48	@ 0x30
 80040b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040bc:	1b92      	subs	r2, r2, r6
 80040be:	6122      	str	r2, [r4, #16]
 80040c0:	f8cd a000 	str.w	sl, [sp]
 80040c4:	464b      	mov	r3, r9
 80040c6:	aa03      	add	r2, sp, #12
 80040c8:	4621      	mov	r1, r4
 80040ca:	4640      	mov	r0, r8
 80040cc:	f7ff fee6 	bl	8003e9c <_printf_common>
 80040d0:	3001      	adds	r0, #1
 80040d2:	d14a      	bne.n	800416a <_printf_i+0x1f2>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	b004      	add	sp, #16
 80040da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	f043 0320 	orr.w	r3, r3, #32
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	4833      	ldr	r0, [pc, #204]	@ (80041b4 <_printf_i+0x23c>)
 80040e8:	2778      	movs	r7, #120	@ 0x78
 80040ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	6831      	ldr	r1, [r6, #0]
 80040f2:	061f      	lsls	r7, r3, #24
 80040f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80040f8:	d402      	bmi.n	8004100 <_printf_i+0x188>
 80040fa:	065f      	lsls	r7, r3, #25
 80040fc:	bf48      	it	mi
 80040fe:	b2ad      	uxthmi	r5, r5
 8004100:	6031      	str	r1, [r6, #0]
 8004102:	07d9      	lsls	r1, r3, #31
 8004104:	bf44      	itt	mi
 8004106:	f043 0320 	orrmi.w	r3, r3, #32
 800410a:	6023      	strmi	r3, [r4, #0]
 800410c:	b11d      	cbz	r5, 8004116 <_printf_i+0x19e>
 800410e:	2310      	movs	r3, #16
 8004110:	e7ac      	b.n	800406c <_printf_i+0xf4>
 8004112:	4827      	ldr	r0, [pc, #156]	@ (80041b0 <_printf_i+0x238>)
 8004114:	e7e9      	b.n	80040ea <_printf_i+0x172>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f023 0320 	bic.w	r3, r3, #32
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	e7f6      	b.n	800410e <_printf_i+0x196>
 8004120:	4616      	mov	r6, r2
 8004122:	e7bd      	b.n	80040a0 <_printf_i+0x128>
 8004124:	6833      	ldr	r3, [r6, #0]
 8004126:	6825      	ldr	r5, [r4, #0]
 8004128:	6961      	ldr	r1, [r4, #20]
 800412a:	1d18      	adds	r0, r3, #4
 800412c:	6030      	str	r0, [r6, #0]
 800412e:	062e      	lsls	r6, r5, #24
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	d501      	bpl.n	8004138 <_printf_i+0x1c0>
 8004134:	6019      	str	r1, [r3, #0]
 8004136:	e002      	b.n	800413e <_printf_i+0x1c6>
 8004138:	0668      	lsls	r0, r5, #25
 800413a:	d5fb      	bpl.n	8004134 <_printf_i+0x1bc>
 800413c:	8019      	strh	r1, [r3, #0]
 800413e:	2300      	movs	r3, #0
 8004140:	6123      	str	r3, [r4, #16]
 8004142:	4616      	mov	r6, r2
 8004144:	e7bc      	b.n	80040c0 <_printf_i+0x148>
 8004146:	6833      	ldr	r3, [r6, #0]
 8004148:	1d1a      	adds	r2, r3, #4
 800414a:	6032      	str	r2, [r6, #0]
 800414c:	681e      	ldr	r6, [r3, #0]
 800414e:	6862      	ldr	r2, [r4, #4]
 8004150:	2100      	movs	r1, #0
 8004152:	4630      	mov	r0, r6
 8004154:	f7fc f83c 	bl	80001d0 <memchr>
 8004158:	b108      	cbz	r0, 800415e <_printf_i+0x1e6>
 800415a:	1b80      	subs	r0, r0, r6
 800415c:	6060      	str	r0, [r4, #4]
 800415e:	6863      	ldr	r3, [r4, #4]
 8004160:	6123      	str	r3, [r4, #16]
 8004162:	2300      	movs	r3, #0
 8004164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004168:	e7aa      	b.n	80040c0 <_printf_i+0x148>
 800416a:	6923      	ldr	r3, [r4, #16]
 800416c:	4632      	mov	r2, r6
 800416e:	4649      	mov	r1, r9
 8004170:	4640      	mov	r0, r8
 8004172:	47d0      	blx	sl
 8004174:	3001      	adds	r0, #1
 8004176:	d0ad      	beq.n	80040d4 <_printf_i+0x15c>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	079b      	lsls	r3, r3, #30
 800417c:	d413      	bmi.n	80041a6 <_printf_i+0x22e>
 800417e:	68e0      	ldr	r0, [r4, #12]
 8004180:	9b03      	ldr	r3, [sp, #12]
 8004182:	4298      	cmp	r0, r3
 8004184:	bfb8      	it	lt
 8004186:	4618      	movlt	r0, r3
 8004188:	e7a6      	b.n	80040d8 <_printf_i+0x160>
 800418a:	2301      	movs	r3, #1
 800418c:	4632      	mov	r2, r6
 800418e:	4649      	mov	r1, r9
 8004190:	4640      	mov	r0, r8
 8004192:	47d0      	blx	sl
 8004194:	3001      	adds	r0, #1
 8004196:	d09d      	beq.n	80040d4 <_printf_i+0x15c>
 8004198:	3501      	adds	r5, #1
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	9903      	ldr	r1, [sp, #12]
 800419e:	1a5b      	subs	r3, r3, r1
 80041a0:	42ab      	cmp	r3, r5
 80041a2:	dcf2      	bgt.n	800418a <_printf_i+0x212>
 80041a4:	e7eb      	b.n	800417e <_printf_i+0x206>
 80041a6:	2500      	movs	r5, #0
 80041a8:	f104 0619 	add.w	r6, r4, #25
 80041ac:	e7f5      	b.n	800419a <_printf_i+0x222>
 80041ae:	bf00      	nop
 80041b0:	0800495d 	.word	0x0800495d
 80041b4:	0800496e 	.word	0x0800496e

080041b8 <memmove>:
 80041b8:	4288      	cmp	r0, r1
 80041ba:	b510      	push	{r4, lr}
 80041bc:	eb01 0402 	add.w	r4, r1, r2
 80041c0:	d902      	bls.n	80041c8 <memmove+0x10>
 80041c2:	4284      	cmp	r4, r0
 80041c4:	4623      	mov	r3, r4
 80041c6:	d807      	bhi.n	80041d8 <memmove+0x20>
 80041c8:	1e43      	subs	r3, r0, #1
 80041ca:	42a1      	cmp	r1, r4
 80041cc:	d008      	beq.n	80041e0 <memmove+0x28>
 80041ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041d6:	e7f8      	b.n	80041ca <memmove+0x12>
 80041d8:	4402      	add	r2, r0
 80041da:	4601      	mov	r1, r0
 80041dc:	428a      	cmp	r2, r1
 80041de:	d100      	bne.n	80041e2 <memmove+0x2a>
 80041e0:	bd10      	pop	{r4, pc}
 80041e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041ea:	e7f7      	b.n	80041dc <memmove+0x24>

080041ec <_sbrk_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d06      	ldr	r5, [pc, #24]	@ (8004208 <_sbrk_r+0x1c>)
 80041f0:	2300      	movs	r3, #0
 80041f2:	4604      	mov	r4, r0
 80041f4:	4608      	mov	r0, r1
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	f7fc feb8 	bl	8000f6c <_sbrk>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_sbrk_r+0x1a>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	b103      	cbz	r3, 8004206 <_sbrk_r+0x1a>
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	20000724 	.word	0x20000724

0800420c <_realloc_r>:
 800420c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004210:	4680      	mov	r8, r0
 8004212:	4615      	mov	r5, r2
 8004214:	460c      	mov	r4, r1
 8004216:	b921      	cbnz	r1, 8004222 <_realloc_r+0x16>
 8004218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800421c:	4611      	mov	r1, r2
 800421e:	f7ff bc59 	b.w	8003ad4 <_malloc_r>
 8004222:	b92a      	cbnz	r2, 8004230 <_realloc_r+0x24>
 8004224:	f7ff fbea 	bl	80039fc <_free_r>
 8004228:	2400      	movs	r4, #0
 800422a:	4620      	mov	r0, r4
 800422c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004230:	f000 f81a 	bl	8004268 <_malloc_usable_size_r>
 8004234:	4285      	cmp	r5, r0
 8004236:	4606      	mov	r6, r0
 8004238:	d802      	bhi.n	8004240 <_realloc_r+0x34>
 800423a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800423e:	d8f4      	bhi.n	800422a <_realloc_r+0x1e>
 8004240:	4629      	mov	r1, r5
 8004242:	4640      	mov	r0, r8
 8004244:	f7ff fc46 	bl	8003ad4 <_malloc_r>
 8004248:	4607      	mov	r7, r0
 800424a:	2800      	cmp	r0, #0
 800424c:	d0ec      	beq.n	8004228 <_realloc_r+0x1c>
 800424e:	42b5      	cmp	r5, r6
 8004250:	462a      	mov	r2, r5
 8004252:	4621      	mov	r1, r4
 8004254:	bf28      	it	cs
 8004256:	4632      	movcs	r2, r6
 8004258:	f7ff fbc2 	bl	80039e0 <memcpy>
 800425c:	4621      	mov	r1, r4
 800425e:	4640      	mov	r0, r8
 8004260:	f7ff fbcc 	bl	80039fc <_free_r>
 8004264:	463c      	mov	r4, r7
 8004266:	e7e0      	b.n	800422a <_realloc_r+0x1e>

08004268 <_malloc_usable_size_r>:
 8004268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800426c:	1f18      	subs	r0, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	bfbc      	itt	lt
 8004272:	580b      	ldrlt	r3, [r1, r0]
 8004274:	18c0      	addlt	r0, r0, r3
 8004276:	4770      	bx	lr

08004278 <_init>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr

08004284 <_fini>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr
