
F407OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002428  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  080025b0  080025b0  000035b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d0  080028d0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080028d0  080028d0  000038d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028d8  080028d8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d8  080028d8  000038d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028dc  080028dc  000038dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000004fc  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000508  20000508  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a58  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f0  00000000  00000000  0000ba94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  0000d288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002067b  00000000  00000000  0000da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb8b  00000000  00000000  0002e0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2a27  00000000  00000000  00039c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc6a5  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000060b  00000000  00000000  000fc6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f88  00000000  00000000  000fccf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000fec7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002598 	.word	0x08002598

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002598 	.word	0x08002598

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <MX_GPIO_Init+0x4c>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000504 <MX_GPIO_Init+0x4c>)
 80004c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <MX_GPIO_Init+0x4c>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <MX_GPIO_Init+0x4c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a08      	ldr	r2, [pc, #32]	@ (8000504 <MX_GPIO_Init+0x4c>)
 80004e4:	f043 0302 	orr.w	r3, r3, #2
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <MX_GPIO_Init+0x4c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800

08000508 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800050c:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <MX_I2C1_Init+0x50>)
 800050e:	4a13      	ldr	r2, [pc, #76]	@ (800055c <MX_I2C1_Init+0x54>)
 8000510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_I2C1_Init+0x50>)
 8000514:	4a12      	ldr	r2, [pc, #72]	@ (8000560 <MX_I2C1_Init+0x58>)
 8000516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_I2C1_Init+0x50>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <MX_I2C1_Init+0x50>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_I2C1_Init+0x50>)
 8000526:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800052a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <MX_I2C1_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_I2C1_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000538:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <MX_I2C1_Init+0x50>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_I2C1_Init+0x50>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000544:	4804      	ldr	r0, [pc, #16]	@ (8000558 <MX_I2C1_Init+0x50>)
 8000546:	f000 ff0b 	bl	8001360 <HAL_I2C_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000550:	f000 f8e4 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000028 	.word	0x20000028
 800055c:	40005400 	.word	0x40005400
 8000560:	00061a80 	.word	0x00061a80

08000564 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a19      	ldr	r2, [pc, #100]	@ (80005e8 <HAL_I2C_MspInit+0x84>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d12b      	bne.n	80005de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a17      	ldr	r2, [pc, #92]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005a2:	23c0      	movs	r3, #192	@ 0xc0
 80005a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a6:	2312      	movs	r3, #18
 80005a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005b2:	2304      	movs	r3, #4
 80005b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <HAL_I2C_MspInit+0x8c>)
 80005be:	f000 fd33 	bl	8001028 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ca:	4a08      	ldr	r2, [pc, #32]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40005400 	.word	0x40005400
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020400 	.word	0x40020400

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fb99 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f823 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f7ff ff59 	bl	80004b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000606:	f7ff ff7f 	bl	8000508 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(20);
 800060a:	2014      	movs	r0, #20
 800060c:	f000 fc02 	bl	8000e14 <HAL_Delay>
  OLED_Init();
 8000610:	f000 f8b2 	bl	8000778 <OLED_Init>
  OLED_NewFrame();
 8000614:	f000 f90c 	bl	8000830 <OLED_NewFrame>
  OLED_ShowFrame();
 8000618:	f000 f916 	bl	8000848 <OLED_ShowFrame>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (uint8_t i=0;i<64;i++)
 800061c:	2300      	movs	r3, #0
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	e00c      	b.n	800063c <main+0x48>
	  {
		  OLED_NewFrame();
 8000622:	f000 f905 	bl	8000830 <OLED_NewFrame>

		  OLED_DrawImage(16, 0, &xiaohuangImg, OLED_COLOR_NORMAL);
 8000626:	2300      	movs	r3, #0
 8000628:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <main+0x50>)
 800062a:	2100      	movs	r1, #0
 800062c:	2010      	movs	r0, #16
 800062e:	f000 facc 	bl	8000bca <OLED_DrawImage>

		  OLED_ShowFrame();
 8000632:	f000 f909 	bl	8000848 <OLED_ShowFrame>
	  for (uint8_t i=0;i<64;i++)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	3301      	adds	r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000640:	d9ef      	bls.n	8000622 <main+0x2e>
 8000642:	e7eb      	b.n	800061c <main+0x28>
 8000644:	080028b0 	.word	0x080028b0

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 ff64 	bl	8002524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	@ (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b8:	2319      	movs	r3, #25
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fae4 	bl	8001c9c <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006da:	f000 f81f 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2105      	movs	r1, #5
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fd45 	bl	800218c <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000708:	f000 f808 	bl	800071c <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	@ 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af02      	add	r7, sp, #8
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	b29b      	uxth	r3, r3
 8000738:	f04f 32ff 	mov.w	r2, #4294967295
 800073c:	9200      	str	r2, [sp, #0]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	2178      	movs	r1, #120	@ 0x78
 8000742:	4803      	ldr	r0, [pc, #12]	@ (8000750 <OLED_Send+0x28>)
 8000744:	f000 ff50 	bl	80015e8 <HAL_I2C_Master_Transmit>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000028 	.word	0x20000028

08000754 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800075e:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <OLED_SendCmd+0x20>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000764:	2102      	movs	r1, #2
 8000766:	4803      	ldr	r0, [pc, #12]	@ (8000774 <OLED_SendCmd+0x20>)
 8000768:	f7ff ffde 	bl	8000728 <OLED_Send>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000047c 	.word	0x2000047c

08000778 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 800077c:	20ae      	movs	r0, #174	@ 0xae
 800077e:	f7ff ffe9 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8000782:	2020      	movs	r0, #32
 8000784:	f7ff ffe6 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000788:	2010      	movs	r0, #16
 800078a:	f7ff ffe3 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 800078e:	20b0      	movs	r0, #176	@ 0xb0
 8000790:	f7ff ffe0 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8000794:	20c8      	movs	r0, #200	@ 0xc8
 8000796:	f7ff ffdd 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ffda 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80007a0:	2010      	movs	r0, #16
 80007a2:	f7ff ffd7 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 80007a6:	2040      	movs	r0, #64	@ 0x40
 80007a8:	f7ff ffd4 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80007ac:	2081      	movs	r0, #129	@ 0x81
 80007ae:	f7ff ffd1 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80007b2:	20df      	movs	r0, #223	@ 0xdf
 80007b4:	f7ff ffce 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 80007b8:	20a1      	movs	r0, #161	@ 0xa1
 80007ba:	f7ff ffcb 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 80007be:	20a6      	movs	r0, #166	@ 0xa6
 80007c0:	f7ff ffc8 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 80007c4:	20a8      	movs	r0, #168	@ 0xa8
 80007c6:	f7ff ffc5 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 80007ca:	203f      	movs	r0, #63	@ 0x3f
 80007cc:	f7ff ffc2 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 80007d0:	20a4      	movs	r0, #164	@ 0xa4
 80007d2:	f7ff ffbf 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 80007d6:	20d3      	movs	r0, #211	@ 0xd3
 80007d8:	f7ff ffbc 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff ffb9 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 80007e2:	20d5      	movs	r0, #213	@ 0xd5
 80007e4:	f7ff ffb6 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 80007e8:	20f0      	movs	r0, #240	@ 0xf0
 80007ea:	f7ff ffb3 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 80007ee:	20d9      	movs	r0, #217	@ 0xd9
 80007f0:	f7ff ffb0 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 80007f4:	2022      	movs	r0, #34	@ 0x22
 80007f6:	f7ff ffad 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 80007fa:	20da      	movs	r0, #218	@ 0xda
 80007fc:	f7ff ffaa 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000800:	2012      	movs	r0, #18
 8000802:	f7ff ffa7 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8000806:	20db      	movs	r0, #219	@ 0xdb
 8000808:	f7ff ffa4 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 800080c:	2020      	movs	r0, #32
 800080e:	f7ff ffa1 	bl	8000754 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8000812:	208d      	movs	r0, #141	@ 0x8d
 8000814:	f7ff ff9e 	bl	8000754 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8000818:	2014      	movs	r0, #20
 800081a:	f7ff ff9b 	bl	8000754 <OLED_SendCmd>

  OLED_NewFrame();
 800081e:	f000 f807 	bl	8000830 <OLED_NewFrame>
  OLED_ShowFrame();
 8000822:	f000 f811 	bl	8000848 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8000826:	20af      	movs	r0, #175	@ 0xaf
 8000828:	f7ff ff94 	bl	8000754 <OLED_SendCmd>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000838:	2100      	movs	r1, #0
 800083a:	4802      	ldr	r0, [pc, #8]	@ (8000844 <OLED_NewFrame+0x14>)
 800083c:	f001 fe72 	bl	8002524 <memset>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000007c 	.word	0x2000007c

08000848 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <OLED_ShowFrame+0x5c>)
 8000850:	2240      	movs	r2, #64	@ 0x40
 8000852:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000854:	2300      	movs	r3, #0
 8000856:	71fb      	strb	r3, [r7, #7]
 8000858:	e01b      	b.n	8000892 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	3b50      	subs	r3, #80	@ 0x50
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff77 	bl	8000754 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff ff74 	bl	8000754 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 800086c:	2010      	movs	r0, #16
 800086e:	f7ff ff71 	bl	8000754 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8000872:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <OLED_ShowFrame+0x60>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	01db      	lsls	r3, r3, #7
 8000878:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <OLED_ShowFrame+0x64>)
 800087a:	4413      	add	r3, r2
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	4619      	mov	r1, r3
 8000880:	f001 fe7c 	bl	800257c <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8000884:	2181      	movs	r1, #129	@ 0x81
 8000886:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <OLED_ShowFrame+0x5c>)
 8000888:	f7ff ff4e 	bl	8000728 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3301      	adds	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b07      	cmp	r3, #7
 8000896:	d9e0      	bls.n	800085a <OLED_ShowFrame+0x12>
  }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000480 	.word	0x20000480
 80008a8:	20000481 	.word	0x20000481
 80008ac:	2000007c 	.word	0x2000007c

080008b0 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 80008b0:	b490      	push	{r4, r7}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4604      	mov	r4, r0
 80008b8:	4608      	mov	r0, r1
 80008ba:	4611      	mov	r1, r2
 80008bc:	461a      	mov	r2, r3
 80008be:	4623      	mov	r3, r4
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	4603      	mov	r3, r0
 80008c4:	71bb      	strb	r3, [r7, #6]
 80008c6:	460b      	mov	r3, r1
 80008c8:	717b      	strb	r3, [r7, #5]
 80008ca:	4613      	mov	r3, r2
 80008cc:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b07      	cmp	r3, #7
 80008d2:	d860      	bhi.n	8000996 <OLED_SetByte_Fine+0xe6>
 80008d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db5c      	blt.n	8000996 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 80008dc:	7d3b      	ldrb	r3, [r7, #20]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <OLED_SetByte_Fine+0x38>
    data = ~data;
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	43db      	mvns	r3, r3
 80008e6:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80008e8:	7c3b      	ldrb	r3, [r7, #16]
 80008ea:	3301      	adds	r3, #1
 80008ec:	22ff      	movs	r2, #255	@ 0xff
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	b25a      	sxtb	r2, r3
 80008f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b25a      	sxtb	r2, r3
 80008fc:	793b      	ldrb	r3, [r7, #4]
 80008fe:	f1c3 0308 	rsb	r3, r3, #8
 8000902:	21ff      	movs	r1, #255	@ 0xff
 8000904:	fa41 f303 	asr.w	r3, r1, r3
 8000908:	b25b      	sxtb	r3, r3
 800090a:	4313      	orrs	r3, r2
 800090c:	b25b      	sxtb	r3, r3
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <OLED_SetByte_Fine+0xf0>)
 8000912:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	4922      	ldr	r1, [pc, #136]	@ (80009a4 <OLED_SetByte_Fine+0xf4>)
 800091a:	01d2      	lsls	r2, r2, #7
 800091c:	440a      	add	r2, r1
 800091e:	4413      	add	r3, r2
 8000920:	7818      	ldrb	r0, [r3, #0]
 8000922:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <OLED_SetByte_Fine+0xf0>)
 8000924:	7819      	ldrb	r1, [r3, #0]
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	4001      	ands	r1, r0
 800092c:	b2c8      	uxtb	r0, r1
 800092e:	491d      	ldr	r1, [pc, #116]	@ (80009a4 <OLED_SetByte_Fine+0xf4>)
 8000930:	01d2      	lsls	r2, r2, #7
 8000932:	440a      	add	r2, r1
 8000934:	4413      	add	r3, r2
 8000936:	4602      	mov	r2, r0
 8000938:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 800093a:	7c3b      	ldrb	r3, [r7, #16]
 800093c:	3301      	adds	r3, #1
 800093e:	22ff      	movs	r2, #255	@ 0xff
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	b25b      	sxtb	r3, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	b25a      	sxtb	r2, r3
 800094a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800094e:	4013      	ands	r3, r2
 8000950:	b25a      	sxtb	r2, r3
 8000952:	793b      	ldrb	r3, [r7, #4]
 8000954:	f1c3 0308 	rsb	r3, r3, #8
 8000958:	21ff      	movs	r1, #255	@ 0xff
 800095a:	fa41 f303 	asr.w	r3, r1, r3
 800095e:	b25b      	sxtb	r3, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	b25b      	sxtb	r3, r3
 8000964:	4013      	ands	r3, r2
 8000966:	b25b      	sxtb	r3, r3
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <OLED_SetByte_Fine+0xf0>)
 800096c:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	490c      	ldr	r1, [pc, #48]	@ (80009a4 <OLED_SetByte_Fine+0xf4>)
 8000974:	01d2      	lsls	r2, r2, #7
 8000976:	440a      	add	r2, r1
 8000978:	4413      	add	r3, r2
 800097a:	7818      	ldrb	r0, [r3, #0]
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <OLED_SetByte_Fine+0xf0>)
 800097e:	7819      	ldrb	r1, [r3, #0]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	4301      	orrs	r1, r0
 8000986:	b2c8      	uxtb	r0, r1
 8000988:	4906      	ldr	r1, [pc, #24]	@ (80009a4 <OLED_SetByte_Fine+0xf4>)
 800098a:	01d2      	lsls	r2, r2, #7
 800098c:	440a      	add	r2, r1
 800098e:	4413      	add	r3, r2
 8000990:	4602      	mov	r2, r0
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	e000      	b.n	8000998 <OLED_SetByte_Fine+0xe8>
    return;
 8000996:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bc90      	pop	{r4, r7}
 800099e:	4770      	bx	lr
 80009a0:	20000501 	.word	0x20000501
 80009a4:	2000007c 	.word	0x2000007c

080009a8 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	4611      	mov	r1, r2
 80009b4:	461a      	mov	r2, r3
 80009b6:	4623      	mov	r3, r4
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	4603      	mov	r3, r0
 80009bc:	71bb      	strb	r3, [r7, #6]
 80009be:	460b      	mov	r3, r1
 80009c0:	717b      	strb	r3, [r7, #5]
 80009c2:	4613      	mov	r3, r2
 80009c4:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80009c6:	79bb      	ldrb	r3, [r7, #6]
 80009c8:	08db      	lsrs	r3, r3, #3
 80009ca:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80009cc:	79bb      	ldrb	r3, [r7, #6]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 80009d4:	7bba      	ldrb	r2, [r7, #14]
 80009d6:	793b      	ldrb	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	2b08      	cmp	r3, #8
 80009dc:	dd29      	ble.n	8000a32 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80009de:	797a      	ldrb	r2, [r7, #5]
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	7bbc      	ldrb	r4, [r7, #14]
 80009ea:	79f9      	ldrb	r1, [r7, #7]
 80009ec:	7bf8      	ldrb	r0, [r7, #15]
 80009ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	2307      	movs	r3, #7
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	4623      	mov	r3, r4
 80009fa:	f7ff ff59 	bl	80008b0 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3301      	adds	r3, #1
 8000a02:	b2d8      	uxtb	r0, r3
 8000a04:	797a      	ldrb	r2, [r7, #5]
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	f1c3 0308 	rsb	r3, r3, #8
 8000a0c:	fa42 f303 	asr.w	r3, r2, r3
 8000a10:	b2dc      	uxtb	r4, r3
 8000a12:	793a      	ldrb	r2, [r7, #4]
 8000a14:	7bbb      	ldrb	r3, [r7, #14]
 8000a16:	4413      	add	r3, r2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	3b09      	subs	r3, #9
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	79f9      	ldrb	r1, [r7, #7]
 8000a20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a24:	9201      	str	r2, [sp, #4]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	4622      	mov	r2, r4
 8000a2c:	f7ff ff40 	bl	80008b0 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8000a30:	e015      	b.n	8000a5e <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8000a32:	797a      	ldrb	r2, [r7, #5]
 8000a34:	7bbb      	ldrb	r3, [r7, #14]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	b2dc      	uxtb	r4, r3
 8000a3c:	7bba      	ldrb	r2, [r7, #14]
 8000a3e:	793b      	ldrb	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	3b01      	subs	r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	7bbd      	ldrb	r5, [r7, #14]
 8000a4a:	79f9      	ldrb	r1, [r7, #7]
 8000a4c:	7bf8      	ldrb	r0, [r7, #15]
 8000a4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a52:	9201      	str	r2, [sp, #4]
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	462b      	mov	r3, r5
 8000a58:	4622      	mov	r2, r4
 8000a5a:	f7ff ff29 	bl	80008b0 <OLED_SetByte_Fine>
}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bdb0      	pop	{r4, r5, r7, pc}

08000a66 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8000a66:	b590      	push	{r4, r7, lr}
 8000a68:	b087      	sub	sp, #28
 8000a6a:	af02      	add	r7, sp, #8
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	4608      	mov	r0, r1
 8000a70:	4611      	mov	r1, r2
 8000a72:	461a      	mov	r2, r3
 8000a74:	4623      	mov	r3, r4
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71bb      	strb	r3, [r7, #6]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	717b      	strb	r3, [r7, #5]
 8000a80:	4613      	mov	r3, r2
 8000a82:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	f003 0307 	and.w	r3, r3, #7
 8000a90:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000a92:	797a      	ldrb	r2, [r7, #5]
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	7bbc      	ldrb	r4, [r7, #14]
 8000a9e:	79f9      	ldrb	r1, [r7, #7]
 8000aa0:	7bf8      	ldrb	r0, [r7, #15]
 8000aa2:	793b      	ldrb	r3, [r7, #4]
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	4623      	mov	r3, r4
 8000aac:	f7ff ff00 	bl	80008b0 <OLED_SetByte_Fine>
  if (bit)
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d014      	beq.n	8000ae0 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b2d8      	uxtb	r0, r3
 8000abc:	797a      	ldrb	r2, [r7, #5]
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	f1c3 0308 	rsb	r3, r3, #8
 8000ac4:	fa42 f303 	asr.w	r3, r2, r3
 8000ac8:	b2dc      	uxtb	r4, r3
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	79f9      	ldrb	r1, [r7, #7]
 8000ad2:	793a      	ldrb	r2, [r7, #4]
 8000ad4:	9201      	str	r2, [sp, #4]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	4622      	mov	r2, r4
 8000adc:	f7ff fee8 	bl	80008b0 <OLED_SetByte_Fine>
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}

08000ae8 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	603a      	str	r2, [r7, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	460b      	mov	r3, r1
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	4613      	mov	r3, r2
 8000afc:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8000afe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b02:	08db      	lsrs	r3, r3, #3
 8000b04:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8000b06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e025      	b.n	8000b62 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	73bb      	strb	r3, [r7, #14]
 8000b1a:	e01b      	b.n	8000b54 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8000b1c:	79fa      	ldrb	r2, [r7, #7]
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	4413      	add	r3, r2
 8000b22:	b2d8      	uxtb	r0, r3
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	79bb      	ldrb	r3, [r7, #6]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2dc      	uxtb	r4, r3
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	7979      	ldrb	r1, [r7, #5]
 8000b36:	fb01 f303 	mul.w	r3, r1, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b48:	4621      	mov	r1, r4
 8000b4a:	f7ff ff8c 	bl	8000a66 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	3301      	adds	r3, #1
 8000b52:	73bb      	strb	r3, [r7, #14]
 8000b54:	7bba      	ldrb	r2, [r7, #14]
 8000b56:	7b3b      	ldrb	r3, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d3df      	bcc.n	8000b1c <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	7bfa      	ldrb	r2, [r7, #15]
 8000b64:	797b      	ldrb	r3, [r7, #5]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d3d5      	bcc.n	8000b16 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8000b6a:	7afb      	ldrb	r3, [r7, #11]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d028      	beq.n	8000bc2 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8000b70:	797b      	ldrb	r3, [r7, #5]
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	7b3b      	ldrb	r3, [r7, #12]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	fb12 f303 	smulbb	r3, r2, r3
 8000b7c:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	737b      	strb	r3, [r7, #13]
 8000b82:	e01a      	b.n	8000bba <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	7b7b      	ldrb	r3, [r7, #13]
 8000b88:	4413      	add	r3, r2
 8000b8a:	b2d8      	uxtb	r0, r3
 8000b8c:	7b3b      	ldrb	r3, [r7, #12]
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	79bb      	ldrb	r3, [r7, #6]
 8000b94:	4413      	add	r3, r2
 8000b96:	b2d9      	uxtb	r1, r3
 8000b98:	893a      	ldrh	r2, [r7, #8]
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	7afc      	ldrb	r4, [r7, #11]
 8000ba8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	4623      	mov	r3, r4
 8000bb0:	f7ff fefa 	bl	80009a8 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8000bb4:	7b7b      	ldrb	r3, [r7, #13]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	737b      	strb	r3, [r7, #13]
 8000bba:	7b7a      	ldrb	r2, [r7, #13]
 8000bbc:	797b      	ldrb	r3, [r7, #5]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d3e0      	bcc.n	8000b84 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd90      	pop	{r4, r7, pc}

08000bca <OLED_DrawImage>:
 * @param y 起始点纵坐标
 * @param img 图片
 * @param color 颜色
 */
void OLED_DrawImage(uint8_t x, uint8_t y, const Image *img, OLED_ColorMode color)
{
 8000bca:	b5b0      	push	{r4, r5, r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af02      	add	r7, sp, #8
 8000bd0:	603a      	str	r2, [r7, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	71bb      	strb	r3, [r7, #6]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, img->data, img->w, img->h, color);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685c      	ldr	r4, [r3, #4]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	781d      	ldrb	r5, [r3, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	785b      	ldrb	r3, [r3, #1]
 8000bec:	79b9      	ldrb	r1, [r7, #6]
 8000bee:	79f8      	ldrb	r0, [r7, #7]
 8000bf0:	797a      	ldrb	r2, [r7, #5]
 8000bf2:	9201      	str	r2, [sp, #4]
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	462b      	mov	r3, r5
 8000bf8:	4622      	mov	r2, r4
 8000bfa:	f7ff ff75 	bl	8000ae8 <OLED_SetBlock>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f891 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce0:	f7ff ffea 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f001 fc13 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fc71 	bl	80005f4 <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d20:	080028e0 	.word	0x080028e0
  ldr r2, =_sbss
 8000d24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d28:	20000508 	.word	0x20000508

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d34:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <HAL_Init+0x40>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <HAL_Init+0x40>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_Init+0x40>)
 8000d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f931 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff ff50 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f93b 	bl	800100e <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f911 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000504 	.word	0x20000504

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000504 	.word	0x20000504

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff47 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff5c 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffb0 	bl	8000f7c <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e16b      	b.n	800131c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 815a 	bne.w	8001316 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d005      	beq.n	800107a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	2b02      	cmp	r3, #2
 8001078:	d130      	bne.n	80010dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d017      	beq.n	8001118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80b4 	beq.w	8001316 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b60      	ldr	r3, [pc, #384]	@ (8001334 <HAL_GPIO_Init+0x30c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001334 <HAL_GPIO_Init+0x30c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011be:	4b5d      	ldr	r3, [pc, #372]	@ (8001334 <HAL_GPIO_Init+0x30c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001338 <HAL_GPIO_Init+0x310>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a52      	ldr	r2, [pc, #328]	@ (800133c <HAL_GPIO_Init+0x314>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d02b      	beq.n	800124e <HAL_GPIO_Init+0x226>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a51      	ldr	r2, [pc, #324]	@ (8001340 <HAL_GPIO_Init+0x318>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d025      	beq.n	800124a <HAL_GPIO_Init+0x222>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a50      	ldr	r2, [pc, #320]	@ (8001344 <HAL_GPIO_Init+0x31c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01f      	beq.n	8001246 <HAL_GPIO_Init+0x21e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4f      	ldr	r2, [pc, #316]	@ (8001348 <HAL_GPIO_Init+0x320>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d019      	beq.n	8001242 <HAL_GPIO_Init+0x21a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	@ (800134c <HAL_GPIO_Init+0x324>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0x216>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	@ (8001350 <HAL_GPIO_Init+0x328>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x212>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	@ (8001354 <HAL_GPIO_Init+0x32c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x20e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	@ (8001358 <HAL_GPIO_Init+0x330>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x20a>
 800122e:	2307      	movs	r3, #7
 8001230:	e00e      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001232:	2308      	movs	r3, #8
 8001234:	e00c      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001236:	2306      	movs	r3, #6
 8001238:	e00a      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123a:	2305      	movs	r3, #5
 800123c:	e008      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123e:	2304      	movs	r3, #4
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001242:	2303      	movs	r3, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001246:	2302      	movs	r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124e:	2300      	movs	r3, #0
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	f002 0203 	and.w	r2, r2, #3
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4093      	lsls	r3, r2
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001260:	4935      	ldr	r1, [pc, #212]	@ (8001338 <HAL_GPIO_Init+0x310>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126e:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <HAL_GPIO_Init+0x334>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001292:	4a32      	ldr	r2, [pc, #200]	@ (800135c <HAL_GPIO_Init+0x334>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001298:	4b30      	ldr	r3, [pc, #192]	@ (800135c <HAL_GPIO_Init+0x334>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012bc:	4a27      	ldr	r2, [pc, #156]	@ (800135c <HAL_GPIO_Init+0x334>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <HAL_GPIO_Init+0x334>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e6:	4a1d      	ldr	r2, [pc, #116]	@ (800135c <HAL_GPIO_Init+0x334>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_GPIO_Init+0x334>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001310:	4a12      	ldr	r2, [pc, #72]	@ (800135c <HAL_GPIO_Init+0x334>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3301      	adds	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	f67f ae90 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3724      	adds	r7, #36	@ 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40013800 	.word	0x40013800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40021000 	.word	0x40021000
 8001350:	40021400 	.word	0x40021400
 8001354:	40021800 	.word	0x40021800
 8001358:	40021c00 	.word	0x40021c00
 800135c:	40013c00 	.word	0x40013c00

08001360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e12b      	b.n	80015ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff f8ec 	bl	8000564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2224      	movs	r2, #36	@ 0x24
 8001390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013c4:	f001 f89a 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 80013c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a81      	ldr	r2, [pc, #516]	@ (80015d4 <HAL_I2C_Init+0x274>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d807      	bhi.n	80013e4 <HAL_I2C_Init+0x84>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4a80      	ldr	r2, [pc, #512]	@ (80015d8 <HAL_I2C_Init+0x278>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	bf94      	ite	ls
 80013dc:	2301      	movls	r3, #1
 80013de:	2300      	movhi	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	e006      	b.n	80013f2 <HAL_I2C_Init+0x92>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a7d      	ldr	r2, [pc, #500]	@ (80015dc <HAL_I2C_Init+0x27c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	bf94      	ite	ls
 80013ec:	2301      	movls	r3, #1
 80013ee:	2300      	movhi	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0e7      	b.n	80015ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4a78      	ldr	r2, [pc, #480]	@ (80015e0 <HAL_I2C_Init+0x280>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a6a      	ldr	r2, [pc, #424]	@ (80015d4 <HAL_I2C_Init+0x274>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d802      	bhi.n	8001434 <HAL_I2C_Init+0xd4>
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3301      	adds	r3, #1
 8001432:	e009      	b.n	8001448 <HAL_I2C_Init+0xe8>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	4a69      	ldr	r2, [pc, #420]	@ (80015e4 <HAL_I2C_Init+0x284>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	3301      	adds	r3, #1
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	430b      	orrs	r3, r1
 800144e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800145a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	495c      	ldr	r1, [pc, #368]	@ (80015d4 <HAL_I2C_Init+0x274>)
 8001464:	428b      	cmp	r3, r1
 8001466:	d819      	bhi.n	800149c <HAL_I2C_Init+0x13c>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e59      	subs	r1, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fbb1 f3f3 	udiv	r3, r1, r3
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800147c:	400b      	ands	r3, r1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <HAL_I2C_Init+0x138>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1e59      	subs	r1, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001490:	3301      	adds	r3, #1
 8001492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001496:	e051      	b.n	800153c <HAL_I2C_Init+0x1dc>
 8001498:	2304      	movs	r3, #4
 800149a:	e04f      	b.n	800153c <HAL_I2C_Init+0x1dc>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <HAL_I2C_Init+0x168>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	440b      	add	r3, r1
 80014b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	e012      	b.n	80014ee <HAL_I2C_Init+0x18e>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1e58      	subs	r0, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	0099      	lsls	r1, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	fbb0 f3f3 	udiv	r3, r0, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Init+0x196>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e022      	b.n	800153c <HAL_I2C_Init+0x1dc>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10e      	bne.n	800151c <HAL_I2C_Init+0x1bc>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1e58      	subs	r0, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6859      	ldr	r1, [r3, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	440b      	add	r3, r1
 800150c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001510:	3301      	adds	r3, #1
 8001512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800151a:	e00f      	b.n	800153c <HAL_I2C_Init+0x1dc>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e58      	subs	r0, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	0099      	lsls	r1, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001538:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	6809      	ldr	r1, [r1, #0]
 8001540:	4313      	orrs	r3, r2
 8001542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800156a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6911      	ldr	r1, [r2, #16]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68d2      	ldr	r2, [r2, #12]
 8001576:	4311      	orrs	r1, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	430b      	orrs	r3, r1
 800157e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2220      	movs	r2, #32
 80015b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	000186a0 	.word	0x000186a0
 80015d8:	001e847f 	.word	0x001e847f
 80015dc:	003d08ff 	.word	0x003d08ff
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	10624dd3 	.word	0x10624dd3

080015e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	461a      	mov	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	817b      	strh	r3, [r7, #10]
 80015f8:	4613      	mov	r3, r2
 80015fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff fbfe 	bl	8000dfc <HAL_GetTick>
 8001600:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b20      	cmp	r3, #32
 800160c:	f040 80e0 	bne.w	80017d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2319      	movs	r3, #25
 8001616:	2201      	movs	r2, #1
 8001618:	4970      	ldr	r1, [pc, #448]	@ (80017dc <HAL_I2C_Master_Transmit+0x1f4>)
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f964 	bl	80018e8 <I2C_WaitOnFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001626:	2302      	movs	r3, #2
 8001628:	e0d3      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_I2C_Master_Transmit+0x50>
 8001634:	2302      	movs	r3, #2
 8001636:	e0cc      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b01      	cmp	r3, #1
 800164c:	d007      	beq.n	800165e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800166c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2221      	movs	r2, #33	@ 0x21
 8001672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2210      	movs	r2, #16
 800167a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	893a      	ldrh	r2, [r7, #8]
 800168e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001694:	b29a      	uxth	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a50      	ldr	r2, [pc, #320]	@ (80017e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800169e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016a0:	8979      	ldrh	r1, [r7, #10]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f89c 	bl	80017e4 <I2C_MasterRequestWrite>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e08d      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016cc:	e066      	b.n	800179c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 fa22 	bl	8001b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00d      	beq.n	80016fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d107      	bne.n	80016f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e06b      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b04      	cmp	r3, #4
 8001736:	d11b      	bne.n	8001770 <HAL_I2C_Master_Transmit+0x188>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800173c:	2b00      	cmp	r3, #0
 800173e:	d017      	beq.n	8001770 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	6a39      	ldr	r1, [r7, #32]
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fa19 	bl	8001bac <I2C_WaitOnBTFFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00d      	beq.n	800179c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	2b04      	cmp	r3, #4
 8001786:	d107      	bne.n	8001798 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001796:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e01a      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d194      	bne.n	80016ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e000      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017d0:	2302      	movs	r3, #2
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	00100002 	.word	0x00100002
 80017e0:	ffff0000 	.word	0xffff0000

080017e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	460b      	mov	r3, r1
 80017f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d006      	beq.n	800180e <I2C_MasterRequestWrite+0x2a>
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d003      	beq.n	800180e <I2C_MasterRequestWrite+0x2a>
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800180c:	d108      	bne.n	8001820 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e00b      	b.n	8001838 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	2b12      	cmp	r3, #18
 8001826:	d107      	bne.n	8001838 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f84f 	bl	80018e8 <I2C_WaitOnFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00d      	beq.n	800186c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800185e:	d103      	bne.n	8001868 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001866:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e035      	b.n	80018d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001874:	d108      	bne.n	8001888 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	e01b      	b.n	80018c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001888:	897b      	ldrh	r3, [r7, #10]
 800188a:	11db      	asrs	r3, r3, #7
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f003 0306 	and.w	r3, r3, #6
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f063 030f 	orn	r3, r3, #15
 8001898:	b2da      	uxtb	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	490e      	ldr	r1, [pc, #56]	@ (80018e0 <I2C_MasterRequestWrite+0xfc>)
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f898 	bl	80019dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e010      	b.n	80018d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018b6:	897b      	ldrh	r3, [r7, #10]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4907      	ldr	r1, [pc, #28]	@ (80018e4 <I2C_MasterRequestWrite+0x100>)
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 f888 	bl	80019dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	00010008 	.word	0x00010008
 80018e4:	00010002 	.word	0x00010002

080018e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f8:	e048      	b.n	800198c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d044      	beq.n	800198c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001902:	f7ff fa7b 	bl	8000dfc <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d302      	bcc.n	8001918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d139      	bne.n	800198c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	0c1b      	lsrs	r3, r3, #16
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d10d      	bne.n	800193e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	43da      	mvns	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	4013      	ands	r3, r2
 800192e:	b29b      	uxth	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	e00c      	b.n	8001958 <I2C_WaitOnFlagUntilTimeout+0x70>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	43da      	mvns	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	4013      	ands	r3, r2
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	429a      	cmp	r2, r3
 800195c:	d116      	bne.n	800198c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	f043 0220 	orr.w	r2, r3, #32
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e023      	b.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	0c1b      	lsrs	r3, r3, #16
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10d      	bne.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	43da      	mvns	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4013      	ands	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	e00c      	b.n	80019cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4013      	ands	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d093      	beq.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019ea:	e071      	b.n	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019fa:	d123      	bne.n	8001a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	f043 0204 	orr.w	r2, r3, #4
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e067      	b.n	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4a:	d041      	beq.n	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4c:	f7ff f9d6 	bl	8000dfc <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d302      	bcc.n	8001a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d136      	bne.n	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10c      	bne.n	8001a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4013      	ands	r3, r2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf14      	ite	ne
 8001a7e:	2301      	movne	r3, #1
 8001a80:	2300      	moveq	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	e00b      	b.n	8001a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	4013      	ands	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d016      	beq.n	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e021      	b.n	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10c      	bne.n	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e00b      	b.n	8001b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4013      	ands	r3, r2
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bf14      	ite	ne
 8001b06:	2301      	movne	r3, #1
 8001b08:	2300      	moveq	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f47f af6d 	bne.w	80019ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b28:	e034      	b.n	8001b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f886 	bl	8001c3c <I2C_IsAcknowledgeFailed>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e034      	b.n	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d028      	beq.n	8001b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b42:	f7ff f95b 	bl	8000dfc <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d302      	bcc.n	8001b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d11d      	bne.n	8001b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b62:	2b80      	cmp	r3, #128	@ 0x80
 8001b64:	d016      	beq.n	8001b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e007      	b.n	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9e:	2b80      	cmp	r3, #128	@ 0x80
 8001ba0:	d1c3      	bne.n	8001b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bb8:	e034      	b.n	8001c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f83e 	bl	8001c3c <I2C_IsAcknowledgeFailed>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e034      	b.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d028      	beq.n	8001c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd2:	f7ff f913 	bl	8000dfc <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d302      	bcc.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d11d      	bne.n	8001c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d016      	beq.n	8001c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e007      	b.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d1c3      	bne.n	8001bba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c52:	d11b      	bne.n	8001c8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	f043 0204 	orr.w	r2, r3, #4
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e267      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d075      	beq.n	8001da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc6:	4b85      	ldr	r3, [pc, #532]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd2:	4b82      	ldr	r3, [pc, #520]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cde:	d10b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d05b      	beq.n	8001da4 <HAL_RCC_OscConfig+0x108>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d157      	bne.n	8001da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e242      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_OscConfig+0x74>
 8001d02:	4b76      	ldr	r3, [pc, #472]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a75      	ldr	r2, [pc, #468]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b70      	ldr	r3, [pc, #448]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b6d      	ldr	r3, [pc, #436]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d34:	4b69      	ldr	r3, [pc, #420]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a68      	ldr	r2, [pc, #416]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b66      	ldr	r3, [pc, #408]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a65      	ldr	r2, [pc, #404]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f852 	bl	8000dfc <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f84e 	bl	8000dfc <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	@ 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e207      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xc0>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f83e 	bl	8000dfc <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f83a 	bl	8000dfc <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1f3      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b51      	ldr	r3, [pc, #324]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0xe8>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db2:	4b4a      	ldr	r3, [pc, #296]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dca:	4b44      	ldr	r3, [pc, #272]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1c7      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b3b      	ldr	r3, [pc, #236]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4937      	ldr	r1, [pc, #220]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe fff3 	bl	8000dfc <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7fe ffef 	bl	8000dfc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1a8      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4925      	ldr	r1, [pc, #148]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7fe ffd2 	bl	8000dfc <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7fe ffce 	bl	8000dfc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e187      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d036      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe ffb2 	bl	8000dfc <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7fe ffae 	bl	8000dfc <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e167      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x200>
 8001eba:	e01b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7fe ff9b 	bl	8000dfc <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	e00e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eca:	f7fe ff97 	bl	8000dfc <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d907      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e150      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	42470000 	.word	0x42470000
 8001ee4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee8:	4b88      	ldr	r3, [pc, #544]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ea      	bne.n	8001eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8097 	beq.w	8002030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b81      	ldr	r3, [pc, #516]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10f      	bne.n	8001f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b7d      	ldr	r3, [pc, #500]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f22:	4b7a      	ldr	r3, [pc, #488]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b77      	ldr	r3, [pc, #476]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b74      	ldr	r3, [pc, #464]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a73      	ldr	r2, [pc, #460]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7fe ff57 	bl	8000dfc <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7fe ff53 	bl	8000dfc <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e10c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b6a      	ldr	r3, [pc, #424]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x2ea>
 8001f78:	4b64      	ldr	r3, [pc, #400]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7c:	4a63      	ldr	r2, [pc, #396]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x30c>
 8001f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	4a5e      	ldr	r2, [pc, #376]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001fa8:	4b58      	ldr	r3, [pc, #352]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	4a57      	ldr	r2, [pc, #348]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb4:	4b55      	ldr	r3, [pc, #340]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a54      	ldr	r2, [pc, #336]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fba:	f023 0304 	bic.w	r3, r3, #4
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d015      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7fe ff18 	bl	8000dfc <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff14 	bl	8000dfc <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0cb      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	4b49      	ldr	r3, [pc, #292]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0ee      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x334>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7fe ff02 	bl	8000dfc <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe fefe 	bl	8000dfc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0b5      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002012:	4b3e      	ldr	r3, [pc, #248]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ee      	bne.n	8001ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b39      	ldr	r3, [pc, #228]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	4a38      	ldr	r2, [pc, #224]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a1 	beq.w	800217c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203a:	4b34      	ldr	r3, [pc, #208]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d05c      	beq.n	8002100 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d141      	bne.n	80020d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fed2 	bl	8000dfc <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe fece 	bl	8000dfc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e087      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3b01      	subs	r3, #1
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	491b      	ldr	r1, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fea7 	bl	8000dfc <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fea3 	bl	8000dfc <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e05c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x416>
 80020d0:	e054      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fe90 	bl	8000dfc <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe fe8c 	bl	8000dfc <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e045      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x444>
 80020fe:	e03d      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e038      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
 8002114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x4ec>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d028      	beq.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d121      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d11a      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800214e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002150:	4293      	cmp	r3, r2
 8002152:	d111      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	3b01      	subs	r3, #1
 8002162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0cc      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d90c      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a52      	ldr	r2, [pc, #328]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d044      	beq.n	80022ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002246:	2b03      	cmp	r3, #3
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b3f      	ldr	r3, [pc, #252]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e067      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4934      	ldr	r1, [pc, #208]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7fe fdbe 	bl	8000dfc <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7fe fdba 	bl	8000dfc <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e04f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b25      	ldr	r3, [pc, #148]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d20c      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	@ (800234c <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fd1e 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00
 8002348:	40023800 	.word	0x40023800
 800234c:	080028b8 	.word	0x080028b8
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235c:	b090      	sub	sp, #64	@ 0x40
 800235e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	637b      	str	r3, [r7, #52]	@ 0x34
 8002364:	2300      	movs	r3, #0
 8002366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002368:	2300      	movs	r3, #0
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002370:	4b59      	ldr	r3, [pc, #356]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d00d      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x40>
 800237c:	2b08      	cmp	r3, #8
 800237e:	f200 80a1 	bhi.w	80024c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x34>
 8002386:	2b04      	cmp	r3, #4
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x3a>
 800238a:	e09b      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x184>)
 800238e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002390:	e09b      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002392:	4b53      	ldr	r3, [pc, #332]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002394:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002396:	e098      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002398:	4b4f      	ldr	r3, [pc, #316]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023a2:	4b4d      	ldr	r3, [pc, #308]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d028      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	4b4a      	ldr	r3, [pc, #296]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	2200      	movs	r2, #0
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023c0:	2100      	movs	r1, #0
 80023c2:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80023c4:	fb03 f201 	mul.w	r2, r3, r1
 80023c8:	2300      	movs	r3, #0
 80023ca:	fb00 f303 	mul.w	r3, r0, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	4a43      	ldr	r2, [pc, #268]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80023d2:	fba0 1202 	umull	r1, r2, r0, r2
 80023d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023d8:	460a      	mov	r2, r1
 80023da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023de:	4413      	add	r3, r2
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e4:	2200      	movs	r2, #0
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	61fa      	str	r2, [r7, #28]
 80023ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023f2:	f7fd fee9 	bl	80001c8 <__aeabi_uldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4613      	mov	r3, r2
 80023fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023fe:	e053      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002400:	4b35      	ldr	r3, [pc, #212]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	2200      	movs	r2, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	617a      	str	r2, [r7, #20]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002412:	f04f 0b00 	mov.w	fp, #0
 8002416:	4652      	mov	r2, sl
 8002418:	465b      	mov	r3, fp
 800241a:	f04f 0000 	mov.w	r0, #0
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	0159      	lsls	r1, r3, #5
 8002424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002428:	0150      	lsls	r0, r2, #5
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	ebb2 080a 	subs.w	r8, r2, sl
 8002432:	eb63 090b 	sbc.w	r9, r3, fp
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002442:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002446:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800244a:	ebb2 0408 	subs.w	r4, r2, r8
 800244e:	eb63 0509 	sbc.w	r5, r3, r9
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	00eb      	lsls	r3, r5, #3
 800245c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002460:	00e2      	lsls	r2, r4, #3
 8002462:	4614      	mov	r4, r2
 8002464:	461d      	mov	r5, r3
 8002466:	eb14 030a 	adds.w	r3, r4, sl
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	eb45 030b 	adc.w	r3, r5, fp
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800247e:	4629      	mov	r1, r5
 8002480:	028b      	lsls	r3, r1, #10
 8002482:	4621      	mov	r1, r4
 8002484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002488:	4621      	mov	r1, r4
 800248a:	028a      	lsls	r2, r1, #10
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002492:	2200      	movs	r2, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	60fa      	str	r2, [r7, #12]
 8002498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800249c:	f7fd fe94 	bl	80001c8 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4613      	mov	r3, r2
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80024b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024c2:	e002      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x184>)
 80024c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3740      	adds	r7, #64	@ 0x40
 80024d0:	46bd      	mov	sp, r7
 80024d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	017d7840 	.word	0x017d7840

080024e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e8:	4b03      	ldr	r3, [pc, #12]	@ (80024f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000000 	.word	0x20000000

080024fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002500:	f7ff fff0 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0a9b      	lsrs	r3, r3, #10
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	@ (8002520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	080028c8 	.word	0x080028c8

08002524 <memset>:
 8002524:	4402      	add	r2, r0
 8002526:	4603      	mov	r3, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4d0d      	ldr	r5, [pc, #52]	@ (800256c <__libc_init_array+0x38>)
 8002538:	4c0d      	ldr	r4, [pc, #52]	@ (8002570 <__libc_init_array+0x3c>)
 800253a:	1b64      	subs	r4, r4, r5
 800253c:	10a4      	asrs	r4, r4, #2
 800253e:	2600      	movs	r6, #0
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	4d0b      	ldr	r5, [pc, #44]	@ (8002574 <__libc_init_array+0x40>)
 8002546:	4c0c      	ldr	r4, [pc, #48]	@ (8002578 <__libc_init_array+0x44>)
 8002548:	f000 f826 	bl	8002598 <_init>
 800254c:	1b64      	subs	r4, r4, r5
 800254e:	10a4      	asrs	r4, r4, #2
 8002550:	2600      	movs	r6, #0
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	f855 3b04 	ldr.w	r3, [r5], #4
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	f855 3b04 	ldr.w	r3, [r5], #4
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	080028d8 	.word	0x080028d8
 8002570:	080028d8 	.word	0x080028d8
 8002574:	080028d8 	.word	0x080028d8
 8002578:	080028dc 	.word	0x080028dc

0800257c <memcpy>:
 800257c:	440a      	add	r2, r1
 800257e:	4291      	cmp	r1, r2
 8002580:	f100 33ff 	add.w	r3, r0, #4294967295
 8002584:	d100      	bne.n	8002588 <memcpy+0xc>
 8002586:	4770      	bx	lr
 8002588:	b510      	push	{r4, lr}
 800258a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800258e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002592:	4291      	cmp	r1, r2
 8002594:	d1f9      	bne.n	800258a <memcpy+0xe>
 8002596:	bd10      	pop	{r4, pc}

08002598 <_init>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr

080025a4 <_fini>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	bf00      	nop
 80025a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025aa:	bc08      	pop	{r3}
 80025ac:	469e      	mov	lr, r3
 80025ae:	4770      	bx	lr
