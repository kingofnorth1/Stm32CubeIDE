
F407_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08009668  08009668  0000a668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a38  08009a38  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009a38  08009a38  0000aa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a40  08009a40  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a40  08009a40  0000aa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a44  08009a44  0000aa44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009a48  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d8  2**0
                  CONTENTS
 10 .bss          00000228  200001d8  200001d8  0000b1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000400  20000400  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc14  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002182  00000000  00000000  00017e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  00019fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087d  00000000  00000000  0001aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e52  00000000  00000000  0001b31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9f5  00000000  00000000  0003d16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c775b  00000000  00000000  0004cb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001142bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003da8  00000000  00000000  00114304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  001180ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009650 	.word	0x08009650

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009650 	.word	0x08009650

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMP280_Read_Byte>:
	HAL_I2C_Mem_Read(&hi2c1, (BMP280_ADDRESS<<1)|1, BMP280_CHIPID_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
	return data;
}

uint8_t BMP280_Read_Byte(uint8_t reg)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, (BMP280_ADDRESS<<1)|1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	9302      	str	r3, [sp, #8]
 8000eac:	2301      	movs	r3, #1
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	f107 030f 	add.w	r3, r7, #15
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	21ed      	movs	r1, #237	@ 0xed
 8000eba:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <BMP280_Read_Byte+0x34>)
 8000ebc:	f001 fe2c 	bl	8002b18 <HAL_I2C_Mem_Read>
//	HAL_I2C_Master_Transmit(&hi2c1, (BMP280_ADDRESS<<1)|0, &reg, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
//	HAL_I2C_Master_Receive(&hi2c1, (BMP280_ADDRESS<<1)|1, &data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
//	HAL_Delay(10);
	return data;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000210 	.word	0x20000210

08000ed0 <BMP280_Write_Byte>:

void BMP280_Write_Byte(uint8_t reg, uint8_t value)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af04      	add	r7, sp, #16
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, (BMP280_ADDRESS<<1)|0, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	1dbb      	adds	r3, r7, #6
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	21ec      	movs	r1, #236	@ 0xec
 8000ef6:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <BMP280_Write_Byte+0x34>)
 8000ef8:	f001 fd14 	bl	8002924 <HAL_I2C_Mem_Write>
//	HAL_I2C_Master_Transmit(&hi2c1, (BMP280_ADDRESS<<1)|0, &reg, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
//	HAL_I2C_Master_Transmit(&hi2c1, (BMP280_ADDRESS<<1)|0, &value, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
//	HAL_Delay(10);
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000210 	.word	0x20000210

08000f08 <BMP280_Init>:

void BMP280_Init()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
	u8 Lsb,Msb;
	/********************接下来读出矫正参数*********************/
	//温度传感器的矫正值
	Lsb = BMP280_Read_Byte(BMP280_DIG_T1_LSB_REG);
 8000f0e:	2088      	movs	r0, #136	@ 0x88
 8000f10:	f7ff ffc2 	bl	8000e98 <BMP280_Read_Byte>
 8000f14:	4603      	mov	r3, r0
 8000f16:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_T1_MSB_REG);
 8000f18:	2089      	movs	r0, #137	@ 0x89
 8000f1a:	f7ff ffbd 	bl	8000e98 <BMP280_Read_Byte>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73bb      	strb	r3, [r7, #14]
	bmp280->T1 = (((u16)Msb)<<8) + Lsb;			//高位加低位
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b89      	ldr	r3, [pc, #548]	@ (8001154 <BMP280_Init+0x24c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	440a      	add	r2, r1
 8000f34:	b292      	uxth	r2, r2
 8000f36:	801a      	strh	r2, [r3, #0]
	Lsb = BMP280_Read_Byte(BMP280_DIG_T2_LSB_REG);
 8000f38:	208a      	movs	r0, #138	@ 0x8a
 8000f3a:	f7ff ffad 	bl	8000e98 <BMP280_Read_Byte>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_T2_MSB_REG);
 8000f42:	208b      	movs	r0, #139	@ 0x8b
 8000f44:	f7ff ffa8 	bl	8000e98 <BMP280_Read_Byte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73bb      	strb	r3, [r7, #14]
	bmp280->T2 = (((u16)Msb)<<8) + Lsb;
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b7d      	ldr	r3, [pc, #500]	@ (8001154 <BMP280_Init+0x24c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	b212      	sxth	r2, r2
 8000f62:	805a      	strh	r2, [r3, #2]
	Lsb = BMP280_Read_Byte(BMP280_DIG_T3_LSB_REG);
 8000f64:	208c      	movs	r0, #140	@ 0x8c
 8000f66:	f7ff ff97 	bl	8000e98 <BMP280_Read_Byte>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_T3_MSB_REG);
 8000f6e:	208d      	movs	r0, #141	@ 0x8d
 8000f70:	f7ff ff92 	bl	8000e98 <BMP280_Read_Byte>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73bb      	strb	r3, [r7, #14]
	bmp280->T3 = (((u16)Msb)<<8) + Lsb;
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4413      	add	r3, r2
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <BMP280_Init+0x24c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	b212      	sxth	r2, r2
 8000f8e:	809a      	strh	r2, [r3, #4]

	//大气压传感器的矫正值
	Lsb = BMP280_Read_Byte(BMP280_DIG_P1_LSB_REG);
 8000f90:	208e      	movs	r0, #142	@ 0x8e
 8000f92:	f7ff ff81 	bl	8000e98 <BMP280_Read_Byte>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_P1_MSB_REG);
 8000f9a:	208f      	movs	r0, #143	@ 0x8f
 8000f9c:	f7ff ff7c 	bl	8000e98 <BMP280_Read_Byte>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73bb      	strb	r3, [r7, #14]
	bmp280->P1 = (((u16)Msb)<<8) + Lsb;
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b299      	uxth	r1, r3
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b68      	ldr	r3, [pc, #416]	@ (8001154 <BMP280_Init+0x24c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	440a      	add	r2, r1
 8000fb6:	b292      	uxth	r2, r2
 8000fb8:	80da      	strh	r2, [r3, #6]
	Lsb = BMP280_Read_Byte(BMP280_DIG_P2_LSB_REG);
 8000fba:	2090      	movs	r0, #144	@ 0x90
 8000fbc:	f7ff ff6c 	bl	8000e98 <BMP280_Read_Byte>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_P2_MSB_REG);
 8000fc4:	2091      	movs	r0, #145	@ 0x91
 8000fc6:	f7ff ff67 	bl	8000e98 <BMP280_Read_Byte>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73bb      	strb	r3, [r7, #14]
	bmp280->P2 = (((u16)Msb)<<8) + Lsb;
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4413      	add	r3, r2
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b5d      	ldr	r3, [pc, #372]	@ (8001154 <BMP280_Init+0x24c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	b212      	sxth	r2, r2
 8000fe4:	811a      	strh	r2, [r3, #8]
	Lsb = BMP280_Read_Byte(BMP280_DIG_P3_LSB_REG);
 8000fe6:	2092      	movs	r0, #146	@ 0x92
 8000fe8:	f7ff ff56 	bl	8000e98 <BMP280_Read_Byte>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_P3_MSB_REG);
 8000ff0:	2093      	movs	r0, #147	@ 0x93
 8000ff2:	f7ff ff51 	bl	8000e98 <BMP280_Read_Byte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]
	bmp280->P3 = (((u16)Msb)<<8) + Lsb;
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b29a      	uxth	r2, r3
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	b29b      	uxth	r3, r3
 8001006:	4413      	add	r3, r2
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b52      	ldr	r3, [pc, #328]	@ (8001154 <BMP280_Init+0x24c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	b212      	sxth	r2, r2
 8001010:	815a      	strh	r2, [r3, #10]
	Lsb = BMP280_Read_Byte(BMP280_DIG_P4_LSB_REG);
 8001012:	2094      	movs	r0, #148	@ 0x94
 8001014:	f7ff ff40 	bl	8000e98 <BMP280_Read_Byte>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_P4_MSB_REG);
 800101c:	2095      	movs	r0, #149	@ 0x95
 800101e:	f7ff ff3b 	bl	8000e98 <BMP280_Read_Byte>
 8001022:	4603      	mov	r3, r0
 8001024:	73bb      	strb	r3, [r7, #14]
	bmp280->P4 = (((u16)Msb)<<8) + Lsb;
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	b29b      	uxth	r3, r3
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b29a      	uxth	r2, r3
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	b29b      	uxth	r3, r3
 8001032:	4413      	add	r3, r2
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b47      	ldr	r3, [pc, #284]	@ (8001154 <BMP280_Init+0x24c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	b212      	sxth	r2, r2
 800103c:	819a      	strh	r2, [r3, #12]
	Lsb = BMP280_Read_Byte(BMP280_DIG_P5_LSB_REG);
 800103e:	2096      	movs	r0, #150	@ 0x96
 8001040:	f7ff ff2a 	bl	8000e98 <BMP280_Read_Byte>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_P5_MSB_REG);
 8001048:	2097      	movs	r0, #151	@ 0x97
 800104a:	f7ff ff25 	bl	8000e98 <BMP280_Read_Byte>
 800104e:	4603      	mov	r3, r0
 8001050:	73bb      	strb	r3, [r7, #14]
	bmp280->P5 = (((u16)Msb)<<8) + Lsb;
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	b29b      	uxth	r3, r3
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b29a      	uxth	r2, r3
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4413      	add	r3, r2
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b3c      	ldr	r3, [pc, #240]	@ (8001154 <BMP280_Init+0x24c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b212      	sxth	r2, r2
 8001068:	81da      	strh	r2, [r3, #14]
	Lsb = BMP280_Read_Byte(BMP280_DIG_P6_LSB_REG);
 800106a:	2098      	movs	r0, #152	@ 0x98
 800106c:	f7ff ff14 	bl	8000e98 <BMP280_Read_Byte>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_P6_MSB_REG);
 8001074:	2099      	movs	r0, #153	@ 0x99
 8001076:	f7ff ff0f 	bl	8000e98 <BMP280_Read_Byte>
 800107a:	4603      	mov	r3, r0
 800107c:	73bb      	strb	r3, [r7, #14]
	bmp280->P6 = (((u16)Msb)<<8) + Lsb;
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	b29b      	uxth	r3, r3
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b29a      	uxth	r2, r3
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	b29b      	uxth	r3, r3
 800108a:	4413      	add	r3, r2
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <BMP280_Init+0x24c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b212      	sxth	r2, r2
 8001094:	821a      	strh	r2, [r3, #16]
	Lsb = BMP280_Read_Byte(BMP280_DIG_P7_LSB_REG);
 8001096:	209a      	movs	r0, #154	@ 0x9a
 8001098:	f7ff fefe 	bl	8000e98 <BMP280_Read_Byte>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_P7_MSB_REG);
 80010a0:	209b      	movs	r0, #155	@ 0x9b
 80010a2:	f7ff fef9 	bl	8000e98 <BMP280_Read_Byte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73bb      	strb	r3, [r7, #14]
	bmp280->P7 = (((u16)Msb)<<8) + Lsb;
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <BMP280_Init+0x24c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b212      	sxth	r2, r2
 80010c0:	825a      	strh	r2, [r3, #18]
	Lsb = BMP280_Read_Byte(BMP280_DIG_P8_LSB_REG);
 80010c2:	209c      	movs	r0, #156	@ 0x9c
 80010c4:	f7ff fee8 	bl	8000e98 <BMP280_Read_Byte>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_P8_MSB_REG);
 80010cc:	209d      	movs	r0, #157	@ 0x9d
 80010ce:	f7ff fee3 	bl	8000e98 <BMP280_Read_Byte>
 80010d2:	4603      	mov	r3, r0
 80010d4:	73bb      	strb	r3, [r7, #14]
	bmp280->P8 = (((u16)Msb)<<8) + Lsb;
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b29a      	uxth	r2, r3
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <BMP280_Init+0x24c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b212      	sxth	r2, r2
 80010ec:	829a      	strh	r2, [r3, #20]
	Lsb = BMP280_Read_Byte(BMP280_DIG_P9_LSB_REG);
 80010ee:	209e      	movs	r0, #158	@ 0x9e
 80010f0:	f7ff fed2 	bl	8000e98 <BMP280_Read_Byte>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
	Msb = BMP280_Read_Byte(BMP280_DIG_P9_MSB_REG);
 80010f8:	209f      	movs	r0, #159	@ 0x9f
 80010fa:	f7ff fecd 	bl	8000e98 <BMP280_Read_Byte>
 80010fe:	4603      	mov	r3, r0
 8001100:	73bb      	strb	r3, [r7, #14]
	bmp280->P9 = (((u16)Msb)<<8) + Lsb;
 8001102:	7bbb      	ldrb	r3, [r7, #14]
 8001104:	b29b      	uxth	r3, r3
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b29a      	uxth	r2, r3
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4413      	add	r3, r2
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <BMP280_Init+0x24c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b212      	sxth	r2, r2
 8001118:	82da      	strh	r2, [r3, #22]
	/******************************************************/
    BMP280_Write_Byte(BMP280_RESET_REG,BMP280_RESET_VALUE);	//往复位寄存器写入给定值
 800111a:	21b6      	movs	r1, #182	@ 0xb6
 800111c:	20e0      	movs	r0, #224	@ 0xe0
 800111e:	f7ff fed7 	bl	8000ed0 <BMP280_Write_Byte>
	BMP_OVERSAMPLE_MODE			BMP_OVERSAMPLE_MODEStructure;
	BMP_OVERSAMPLE_MODEStructure.P_Osample = BMP280_P_MODE_3;
 8001122:	2303      	movs	r3, #3
 8001124:	723b      	strb	r3, [r7, #8]
	BMP_OVERSAMPLE_MODEStructure.T_Osample = BMP280_T_MODE_1;
 8001126:	2301      	movs	r3, #1
 8001128:	727b      	strb	r3, [r7, #9]
	BMP_OVERSAMPLE_MODEStructure.WORKMODE  = BMP280_NORMAL_MODE;
 800112a:	2303      	movs	r3, #3
 800112c:	72bb      	strb	r3, [r7, #10]
	BMP280_Set_TemOversamp(&BMP_OVERSAMPLE_MODEStructure);
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f810 	bl	8001158 <BMP280_Set_TemOversamp>

	BMP_CONFIG					BMP_CONFIGStructure;
	BMP_CONFIGStructure.T_SB = BMP280_T_SB1;
 8001138:	2300      	movs	r3, #0
 800113a:	713b      	strb	r3, [r7, #4]
	BMP_CONFIGStructure.FILTER_COEFFICIENT = BMP280_FILTER_MODE_4;
 800113c:	2304      	movs	r3, #4
 800113e:	717b      	strb	r3, [r7, #5]
	BMP_CONFIGStructure.SPI_EN = DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	71bb      	strb	r3, [r7, #6]

	BMP280_Set_Standby_FILTER(&BMP_CONFIGStructure);
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f823 	bl	8001192 <BMP280_Set_Standby_FILTER>
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000

08001158 <BMP280_Set_TemOversamp>:

//设置BMP过采样因子 MODE
//BMP280_SLEEP_MODE||BMP280_FORCED_MODE||BMP280_NORMAL_MODE
void BMP280_Set_TemOversamp(BMP_OVERSAMPLE_MODE * Oversample_Mode)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	u8 Regtmp;
	Regtmp = ((Oversample_Mode->T_Osample)<<5)|
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	015b      	lsls	r3, r3, #5
 8001166:	b25a      	sxtb	r2, r3
			 ((Oversample_Mode->P_Osample)<<2)|
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	009b      	lsls	r3, r3, #2
	Regtmp = ((Oversample_Mode->T_Osample)<<5)|
 800116e:	b25b      	sxtb	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b25a      	sxtb	r2, r3
			 ((Oversample_Mode)->WORKMODE);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	789b      	ldrb	r3, [r3, #2]
 8001178:	b25b      	sxtb	r3, r3
			 ((Oversample_Mode->P_Osample)<<2)|
 800117a:	4313      	orrs	r3, r2
 800117c:	b25b      	sxtb	r3, r3
	Regtmp = ((Oversample_Mode->T_Osample)<<5)|
 800117e:	73fb      	strb	r3, [r7, #15]

	BMP280_Write_Byte(BMP280_CTRLMEAS_REG,Regtmp);
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	4619      	mov	r1, r3
 8001184:	20f4      	movs	r0, #244	@ 0xf4
 8001186:	f7ff fea3 	bl	8000ed0 <BMP280_Write_Byte>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <BMP280_Set_Standby_FILTER>:


//设置保持时间和滤波器分频因子
void BMP280_Set_Standby_FILTER(BMP_CONFIG * BMP_Config)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	u8 Regtmp;
	Regtmp = ((BMP_Config->T_SB)<<5)|
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	015b      	lsls	r3, r3, #5
 80011a0:	b25a      	sxtb	r2, r3
			 ((BMP_Config->FILTER_COEFFICIENT)<<2)|
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	009b      	lsls	r3, r3, #2
	Regtmp = ((BMP_Config->T_SB)<<5)|
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b25a      	sxtb	r2, r3
			 ((BMP_Config->SPI_EN));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	789b      	ldrb	r3, [r3, #2]
 80011b2:	b25b      	sxtb	r3, r3
			 ((BMP_Config->FILTER_COEFFICIENT)<<2)|
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b25b      	sxtb	r3, r3
	Regtmp = ((BMP_Config->T_SB)<<5)|
 80011b8:	73fb      	strb	r3, [r7, #15]

	BMP280_Write_Byte(BMP280_CONFIG_REG,Regtmp);
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	4619      	mov	r1, r3
 80011be:	20f5      	movs	r0, #245	@ 0xf5
 80011c0:	f7ff fe86 	bl	8000ed0 <BMP280_Write_Byte>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <BMP280_GetStatus>:

//获取BMP当前状态
//status_flag = BMP280_MEASURING ||
//			 	BMP280_IM_UPDATE
u8  BMP280_GetStatus(u8 status_flag)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	u8 flag;
	flag = BMP280_Read_Byte(BMP280_STATUS_REG);
 80011d6:	20f3      	movs	r0, #243	@ 0xf3
 80011d8:	f7ff fe5e 	bl	8000e98 <BMP280_Read_Byte>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
	if(flag&status_flag)	return SET;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4013      	ands	r3, r2
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <BMP280_GetStatus+0x24>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <BMP280_GetStatus+0x26>
	else return RESET;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <BMP280_Get_Pressure>:

/*******************主要部分*********************/
/****************获取传感器精确值****************/
//大气压值-Pa
double BMP280_Get_Pressure(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
	uint8_t XLsb = 0,Lsb = 0, Msb = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	2300      	movs	r3, #0
 8001206:	73bb      	strb	r3, [r7, #14]
 8001208:	2300      	movs	r3, #0
 800120a:	737b      	strb	r3, [r7, #13]
	long signed Bit32 = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
	double pressure;
	XLsb = BMP280_Read_Byte(BMP280_PRESSURE_XLSB_REG);
 8001210:	20f9      	movs	r0, #249	@ 0xf9
 8001212:	f7ff fe41 	bl	8000e98 <BMP280_Read_Byte>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
	Lsb	 = BMP280_Read_Byte(BMP280_PRESSURE_LSB_REG);
 800121a:	20f8      	movs	r0, #248	@ 0xf8
 800121c:	f7ff fe3c 	bl	8000e98 <BMP280_Read_Byte>
 8001220:	4603      	mov	r3, r0
 8001222:	73bb      	strb	r3, [r7, #14]
	Msb	 = BMP280_Read_Byte(BMP280_PRESSURE_MSB_REG);
 8001224:	20f7      	movs	r0, #247	@ 0xf7
 8001226:	f7ff fe37 	bl	8000e98 <BMP280_Read_Byte>
 800122a:	4603      	mov	r3, r0
 800122c:	737b      	strb	r3, [r7, #13]
	Bit32 = ((long)(Msb << 12))|((long)(Lsb << 4))|(XLsb>>4);	//寄存器的值,组成一个浮点数
 800122e:	7b7b      	ldrb	r3, [r7, #13]
 8001230:	031a      	lsls	r2, r3, #12
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	4313      	orrs	r3, r2
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	0912      	lsrs	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	4313      	orrs	r3, r2
 8001240:	60bb      	str	r3, [r7, #8]
	pressure = bmp280_compensate_P_double(Bit32);
 8001242:	68b8      	ldr	r0, [r7, #8]
 8001244:	f000 f910 	bl	8001468 <bmp280_compensate_P_double>
 8001248:	ed87 0b00 	vstr	d0, [r7]
	return pressure;
 800124c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001250:	ec43 2b17 	vmov	d7, r2, r3
}
 8001254:	eeb0 0a47 	vmov.f32	s0, s14
 8001258:	eef0 0a67 	vmov.f32	s1, s15
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <BMP280_Get_Temperature>:

//温度值-℃
double BMP280_Get_Temperature(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
	uint8_t XLsb = 0,Lsb = 0, Msb = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	2300      	movs	r3, #0
 800126e:	73bb      	strb	r3, [r7, #14]
 8001270:	2300      	movs	r3, #0
 8001272:	737b      	strb	r3, [r7, #13]
	long signed Bit32 = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
	double temperature;
	XLsb = BMP280_Read_Byte(BMP280_TEMPERATURE_XLSB_REG);
 8001278:	20fc      	movs	r0, #252	@ 0xfc
 800127a:	f7ff fe0d 	bl	8000e98 <BMP280_Read_Byte>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
	Lsb	 = BMP280_Read_Byte(BMP280_TEMPERATURE_LSB_REG);
 8001282:	20fb      	movs	r0, #251	@ 0xfb
 8001284:	f7ff fe08 	bl	8000e98 <BMP280_Read_Byte>
 8001288:	4603      	mov	r3, r0
 800128a:	73bb      	strb	r3, [r7, #14]
	Msb	 = BMP280_Read_Byte(BMP280_TEMPERATURE_MSB_REG);
 800128c:	20fa      	movs	r0, #250	@ 0xfa
 800128e:	f7ff fe03 	bl	8000e98 <BMP280_Read_Byte>
 8001292:	4603      	mov	r3, r0
 8001294:	737b      	strb	r3, [r7, #13]
	Bit32 = ((long)(Msb << 12))|((long)(Lsb << 4))|(XLsb>>4);	//寄存器的值,组成一个浮点数
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	031a      	lsls	r2, r3, #12
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4313      	orrs	r3, r2
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	0912      	lsrs	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60bb      	str	r3, [r7, #8]
	temperature = bmp280_compensate_T_double(Bit32);
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f000 f80e 	bl	80012cc <bmp280_compensate_T_double>
 80012b0:	ed87 0b00 	vstr	d0, [r7]
	return temperature;
 80012b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80012bc:	eeb0 0a47 	vmov.f32	s0, s14
 80012c0:	eef0 0a67 	vmov.f32	s1, s15
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <bmp280_compensate_T_double>:
#else
/**************************传感器值转定点值*************************************/
// Returns temperature in DegC, double precision. Output value of “51.23” equals 51.23 DegC.
// t_fine carries fine temperature as global value
double bmp280_compensate_T_double(BMP280_S32_t adc_T)
{
 80012cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012d0:	b088      	sub	sp, #32
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	double var1, var2, T;
	var1 = (((double)adc_T)/16384.0 - ((double)dig_T1)/1024.0) * ((double)dig_T2);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff f924 	bl	8000524 <__aeabi_i2d>
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b5a      	ldr	r3, [pc, #360]	@ (800144c <bmp280_compensate_T_double+0x180>)
 80012e2:	f7ff fab3 	bl	800084c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4614      	mov	r4, r2
 80012ec:	461d      	mov	r5, r3
 80012ee:	4b58      	ldr	r3, [pc, #352]	@ (8001450 <bmp280_compensate_T_double+0x184>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f905 	bl	8000504 <__aeabi_ui2d>
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b55      	ldr	r3, [pc, #340]	@ (8001454 <bmp280_compensate_T_double+0x188>)
 8001300:	f7ff faa4 	bl	800084c <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7fe ffbc 	bl	8000288 <__aeabi_dsub>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4614      	mov	r4, r2
 8001316:	461d      	mov	r5, r3
 8001318:	4b4d      	ldr	r3, [pc, #308]	@ (8001450 <bmp280_compensate_T_double+0x184>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8ff 	bl	8000524 <__aeabi_i2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f963 	bl	80005f8 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0) *
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff f8f2 	bl	8000524 <__aeabi_i2d>
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001348:	f7ff fa80 	bl	800084c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4614      	mov	r4, r2
 8001352:	461d      	mov	r5, r3
 8001354:	4b3e      	ldr	r3, [pc, #248]	@ (8001450 <bmp280_compensate_T_double+0x184>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f8d2 	bl	8000504 <__aeabi_ui2d>
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b3c      	ldr	r3, [pc, #240]	@ (8001458 <bmp280_compensate_T_double+0x18c>)
 8001366:	f7ff fa71 	bl	800084c <__aeabi_ddiv>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4620      	mov	r0, r4
 8001370:	4629      	mov	r1, r5
 8001372:	f7fe ff89 	bl	8000288 <__aeabi_dsub>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4614      	mov	r4, r2
 800137c:	461d      	mov	r5, r3
	(((double)adc_T)/131072.0 - ((double) dig_T1)/8192.0)) * ((double)dig_T3);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff f8d0 	bl	8000524 <__aeabi_i2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800138c:	f7ff fa5e 	bl	800084c <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4690      	mov	r8, r2
 8001396:	4699      	mov	r9, r3
 8001398:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <bmp280_compensate_T_double+0x184>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8b0 	bl	8000504 <__aeabi_ui2d>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001458 <bmp280_compensate_T_double+0x18c>)
 80013aa:	f7ff fa4f 	bl	800084c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4640      	mov	r0, r8
 80013b4:	4649      	mov	r1, r9
 80013b6:	f7fe ff67 	bl	8000288 <__aeabi_dsub>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
	var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0) *
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7ff f919 	bl	80005f8 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4614      	mov	r4, r2
 80013cc:	461d      	mov	r5, r3
	(((double)adc_T)/131072.0 - ((double) dig_T1)/8192.0)) * ((double)dig_T3);
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <bmp280_compensate_T_double+0x184>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8a4 	bl	8000524 <__aeabi_i2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
	var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0) *
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7ff f908 	bl	80005f8 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t_fine = (BMP280_S32_t)(var1 + var2);
 80013f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013f8:	f7fe ff48 	bl	800028c <__adddf3>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fba8 	bl	8000b58 <__aeabi_d2iz>
 8001408:	4603      	mov	r3, r0
 800140a:	4a14      	ldr	r2, [pc, #80]	@ (800145c <bmp280_compensate_T_double+0x190>)
 800140c:	6013      	str	r3, [r2, #0]
	T = (var1 + var2) / 5120.0;
 800140e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001412:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001416:	f7fe ff39 	bl	800028c <__adddf3>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <bmp280_compensate_T_double+0x194>)
 8001428:	f7ff fa10 	bl	800084c <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return T;
 8001434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001438:	ec43 2b17 	vmov	d7, r2, r3
}
 800143c:	eeb0 0a47 	vmov.f32	s0, s14
 8001440:	eef0 0a67 	vmov.f32	s1, s15
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800144c:	40d00000 	.word	0x40d00000
 8001450:	20000000 	.word	0x20000000
 8001454:	40900000 	.word	0x40900000
 8001458:	40c00000 	.word	0x40c00000
 800145c:	2000020c 	.word	0x2000020c
 8001460:	40b40000 	.word	0x40b40000
 8001464:	00000000 	.word	0x00000000

08001468 <bmp280_compensate_P_double>:

// Returns pressure in Pa as double. Output value of “96386.2” equals 96386.2 Pa = 963.862 hPa
double bmp280_compensate_P_double(BMP280_S32_t adc_P)
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	double var1, var2, p;
	var1 = ((double)t_fine/2.0) - 64000.0;
 8001470:	4bc7      	ldr	r3, [pc, #796]	@ (8001790 <bmp280_compensate_P_double+0x328>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f855 	bl	8000524 <__aeabi_i2d>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001482:	f7ff f9e3 	bl	800084c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4bc0      	ldr	r3, [pc, #768]	@ (8001794 <bmp280_compensate_P_double+0x32c>)
 8001494:	f7fe fef8 	bl	8000288 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)dig_P6) / 32768.0;
 80014a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014a8:	f7ff f8a6 	bl	80005f8 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4614      	mov	r4, r2
 80014b2:	461d      	mov	r5, r3
 80014b4:	4bb8      	ldr	r3, [pc, #736]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f831 	bl	8000524 <__aeabi_i2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7ff f895 	bl	80005f8 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4bb0      	ldr	r3, [pc, #704]	@ (800179c <bmp280_compensate_P_double+0x334>)
 80014dc:	f7ff f9b6 	bl	800084c <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)dig_P5) * 2.0;
 80014e8:	4bab      	ldr	r3, [pc, #684]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f817 	bl	8000524 <__aeabi_i2d>
 80014f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014fa:	f7ff f87d 	bl	80005f8 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	f7fe febf 	bl	800028c <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001516:	f7fe feb9 	bl	800028c <__adddf3>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2/4.0)+(((double)dig_P4) * 65536.0);
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b9e      	ldr	r3, [pc, #632]	@ (80017a0 <bmp280_compensate_P_double+0x338>)
 8001528:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800152c:	f7ff f98e 	bl	800084c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4614      	mov	r4, r2
 8001536:	461d      	mov	r5, r3
 8001538:	4b97      	ldr	r3, [pc, #604]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ffef 	bl	8000524 <__aeabi_i2d>
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	4b96      	ldr	r3, [pc, #600]	@ (80017a4 <bmp280_compensate_P_double+0x33c>)
 800154c:	f7ff f854 	bl	80005f8 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7fe fe98 	bl	800028c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = (((double)dig_P3) * var1 * var1 / 524288.0 + ((double)dig_P2) * var1) / 524288.0;
 8001564:	4b8c      	ldr	r3, [pc, #560]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffd9 	bl	8000524 <__aeabi_i2d>
 8001572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001576:	f7ff f83f 	bl	80005f8 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001586:	f7ff f837 	bl	80005f8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b84      	ldr	r3, [pc, #528]	@ (80017a8 <bmp280_compensate_P_double+0x340>)
 8001598:	f7ff f958 	bl	800084c <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4614      	mov	r4, r2
 80015a2:	461d      	mov	r5, r3
 80015a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffb9 	bl	8000524 <__aeabi_i2d>
 80015b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015b6:	f7ff f81f 	bl	80005f8 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7fe fe63 	bl	800028c <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b75      	ldr	r3, [pc, #468]	@ (80017a8 <bmp280_compensate_P_double+0x340>)
 80015d4:	f7ff f93a 	bl	800084c <__aeabi_ddiv>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0)*((double)dig_P1);
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b6d      	ldr	r3, [pc, #436]	@ (800179c <bmp280_compensate_P_double+0x334>)
 80015e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015ea:	f7ff f92f 	bl	800084c <__aeabi_ddiv>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b6c      	ldr	r3, [pc, #432]	@ (80017ac <bmp280_compensate_P_double+0x344>)
 80015fc:	f7fe fe46 	bl	800028c <__adddf3>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4614      	mov	r4, r2
 8001606:	461d      	mov	r5, r3
 8001608:	4b63      	ldr	r3, [pc, #396]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	88db      	ldrh	r3, [r3, #6]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff78 	bl	8000504 <__aeabi_ui2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7fe ffec 	bl	80005f8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if (var1 == 0.0)
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001634:	f7ff fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <bmp280_compensate_P_double+0x1e0>
	{
	return 0; // avoid exception caused by division by zero
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	e093      	b.n	8001770 <bmp280_compensate_P_double+0x308>
	}
	p = 1048576.0 - (double)adc_P;
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7fe ff6b 	bl	8000524 <__aeabi_i2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	4956      	ldr	r1, [pc, #344]	@ (80017b0 <bmp280_compensate_P_double+0x348>)
 8001658:	f7fe fe16 	bl	8000288 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	e9c7 2302 	strd	r2, r3, [r7, #8]
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b52      	ldr	r3, [pc, #328]	@ (80017b4 <bmp280_compensate_P_double+0x34c>)
 800166a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800166e:	f7ff f8ed 	bl	800084c <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800167a:	f7fe fe05 	bl	8000288 <__aeabi_dsub>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	a340      	add	r3, pc, #256	@ (adr r3, 8001788 <bmp280_compensate_P_double+0x320>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffb4 	bl	80005f8 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800169c:	f7ff f8d6 	bl	800084c <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = ((double)dig_P9) * p * p / 2147483648.0;
 80016a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff37 	bl	8000524 <__aeabi_i2d>
 80016b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ba:	f7fe ff9d 	bl	80005f8 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ca:	f7fe ff95 	bl	80005f8 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <bmp280_compensate_P_double+0x350>)
 80016dc:	f7ff f8b6 	bl	800084c <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = p * ((double)dig_P8) / 32768.0;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff17 	bl	8000524 <__aeabi_i2d>
 80016f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016fa:	f7fe ff7d 	bl	80005f8 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <bmp280_compensate_P_double+0x334>)
 800170c:	f7ff f89e 	bl	800084c <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	e9c7 2304 	strd	r2, r3, [r7, #16]
	p = p + (var1 + var2 + ((double)dig_P7)) / 16.0;
 8001718:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800171c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001720:	f7fe fdb4 	bl	800028c <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4614      	mov	r4, r2
 800172a:	461d      	mov	r5, r3
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fef5 	bl	8000524 <__aeabi_i2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe fda3 	bl	800028c <__adddf3>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <bmp280_compensate_P_double+0x354>)
 8001754:	f7ff f87a 	bl	800084c <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001760:	f7fe fd94 	bl	800028c <__adddf3>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return p;
 800176c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001770:	ec43 2b17 	vmov	d7, r2, r3
 8001774:	eeb0 0a47 	vmov.f32	s0, s14
 8001778:	eef0 0a67 	vmov.f32	s1, s15
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bdb0      	pop	{r4, r5, r7, pc}
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	00000000 	.word	0x00000000
 800178c:	40b86a00 	.word	0x40b86a00
 8001790:	2000020c 	.word	0x2000020c
 8001794:	40ef4000 	.word	0x40ef4000
 8001798:	20000000 	.word	0x20000000
 800179c:	40e00000 	.word	0x40e00000
 80017a0:	40100000 	.word	0x40100000
 80017a4:	40f00000 	.word	0x40f00000
 80017a8:	41200000 	.word	0x41200000
 80017ac:	3ff00000 	.word	0x3ff00000
 80017b0:	41300000 	.word	0x41300000
 80017b4:	40b00000 	.word	0x40b00000
 80017b8:	41e00000 	.word	0x41e00000
 80017bc:	40300000 	.word	0x40300000

080017c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <MX_GPIO_Init+0x68>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a16      	ldr	r2, [pc, #88]	@ (8001828 <MX_GPIO_Init+0x68>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <MX_GPIO_Init+0x68>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <MX_GPIO_Init+0x68>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001828 <MX_GPIO_Init+0x68>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <MX_GPIO_Init+0x68>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <MX_GPIO_Init+0x68>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a08      	ldr	r2, [pc, #32]	@ (8001828 <MX_GPIO_Init+0x68>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_GPIO_Init+0x68>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <MX_I2C1_Init+0x54>)
 8001832:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <MX_I2C1_Init+0x58>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <MX_I2C1_Init+0x54>)
 8001838:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800183c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <MX_I2C1_Init+0x54>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <MX_I2C1_Init+0x54>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <MX_I2C1_Init+0x54>)
 800184c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001850:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <MX_I2C1_Init+0x54>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_I2C1_Init+0x54>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <MX_I2C1_Init+0x54>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_I2C1_Init+0x54>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	@ (8001880 <MX_I2C1_Init+0x54>)
 800186c:	f000 ff00 	bl	8002670 <HAL_I2C_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001876:	f000 f91f 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000210 	.word	0x20000210
 8001884:	40005400 	.word	0x40005400

08001888 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a21      	ldr	r2, [pc, #132]	@ (800192c <HAL_I2C_MspInit+0xa4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d13b      	bne.n	8001922 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <HAL_I2C_MspInit+0xa8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001930 <HAL_I2C_MspInit+0xa8>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <HAL_I2C_MspInit+0xa8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c6:	23c0      	movs	r3, #192	@ 0xc0
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ca:	2312      	movs	r3, #18
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018d6:	2304      	movs	r3, #4
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4814      	ldr	r0, [pc, #80]	@ (8001934 <HAL_I2C_MspInit+0xac>)
 80018e2:	f000 fd29 	bl	8002338 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <HAL_I2C_MspInit+0xa8>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a10      	ldr	r2, [pc, #64]	@ (8001930 <HAL_I2C_MspInit+0xa8>)
 80018f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_I2C_MspInit+0xa8>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	201f      	movs	r0, #31
 8001908:	f000 fc3f 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800190c:	201f      	movs	r0, #31
 800190e:	f000 fc58 	bl	80021c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2020      	movs	r0, #32
 8001918:	f000 fc37 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800191c:	2020      	movs	r0, #32
 800191e:	f000 fc50 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	@ 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40005400 	.word	0x40005400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020400 	.word	0x40020400

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b094      	sub	sp, #80	@ 0x50
 800193c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193e:	f000 fab3 	bl	8001ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001942:	f000 f85b 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001946:	f7ff ff3b 	bl	80017c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800194a:	f7ff ff6f 	bl	800182c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800194e:	f000 fa07 	bl	8001d60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char message[50];
  double Temperture,Pressure;

//  int Stuts;
  HAL_Delay(50);
 8001952:	2032      	movs	r0, #50	@ 0x32
 8001954:	f000 fb1a 	bl	8001f8c <HAL_Delay>
  BMP280_Init();
 8001958:	f7ff fad6 	bl	8000f08 <BMP280_Init>
  HAL_Delay(50);
 800195c:	2032      	movs	r0, #50	@ 0x32
 800195e:	f000 fb15 	bl	8001f8c <HAL_Delay>

  sprintf(message, "\r\nBMP280大气压传感器实验");
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4922      	ldr	r1, [pc, #136]	@ (80019f0 <main+0xb8>)
 8001966:	4618      	mov	r0, r3
 8001968:	f005 fd44 	bl	80073f4 <siprintf>
  HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fc7e 	bl	8000270 <strlen>
 8001974:	4603      	mov	r3, r0
 8001976:	b29a      	uxth	r2, r3
 8001978:	1d39      	adds	r1, r7, #4
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	481d      	ldr	r0, [pc, #116]	@ (80019f4 <main+0xbc>)
 8001980:	f004 f86c 	bl	8005a5c <HAL_UART_Transmit>
//  Stuts = BMP280_ReadID();
  HAL_Delay(2000);
 8001984:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001988:	f000 fb00 	bl	8001f8c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(BMP280_GetStatus(BMP280_MEASURING) != RESET);
 800198c:	bf00      	nop
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff fc1c 	bl	80011cc <BMP280_GetStatus>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f9      	bne.n	800198e <main+0x56>
	  while(BMP280_GetStatus(BMP280_IM_UPDATE) != RESET);
 800199a:	bf00      	nop
 800199c:	2008      	movs	r0, #8
 800199e:	f7ff fc15 	bl	80011cc <BMP280_GetStatus>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f9      	bne.n	800199c <main+0x64>
	  Temperture = BMP280_Get_Temperature();
 80019a8:	f7ff fc5b 	bl	8001262 <BMP280_Get_Temperature>
 80019ac:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	  Pressure = BMP280_Get_Pressure();
 80019b0:	f7ff fc23 	bl	80011fa <BMP280_Get_Pressure>
 80019b4:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	  sprintf(message, "温度: %f C, 压强: %f Pa\r\n", Temperture, Pressure);
 80019b8:	1d38      	adds	r0, r7, #4
 80019ba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019be:	e9cd 2300 	strd	r2, r3, [sp]
 80019c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80019c6:	490c      	ldr	r1, [pc, #48]	@ (80019f8 <main+0xc0>)
 80019c8:	f005 fd14 	bl	80073f4 <siprintf>
	  HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fc4e 	bl	8000270 <strlen>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	1d39      	adds	r1, r7, #4
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <main+0xbc>)
 80019e0:	f004 f83c 	bl	8005a5c <HAL_UART_Transmit>

	  HAL_Delay(500);
 80019e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019e8:	f000 fad0 	bl	8001f8c <HAL_Delay>
	  while(BMP280_GetStatus(BMP280_MEASURING) != RESET);
 80019ec:	e7ce      	b.n	800198c <main+0x54>
 80019ee:	bf00      	nop
 80019f0:	08009668 	.word	0x08009668
 80019f4:	20000268 	.word	0x20000268
 80019f8:	0800968c 	.word	0x0800968c

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b094      	sub	sp, #80	@ 0x50
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	2230      	movs	r2, #48	@ 0x30
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 fd55 	bl	80074ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <SystemClock_Config+0xb4>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	4a21      	ldr	r2, [pc, #132]	@ (8001ab0 <SystemClock_Config+0xb4>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a30:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <SystemClock_Config+0xb4>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <SystemClock_Config+0xb8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <SystemClock_Config+0xb8>)
 8001a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <SystemClock_Config+0xb8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a60:	2310      	movs	r3, #16
 8001a62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fb0d 	bl	800508c <HAL_RCC_OscConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a78:	f000 f81e 	bl	8001ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fd70 	bl	800557c <HAL_RCC_ClockConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001aa2:	f000 f809 	bl	8001ab8 <Error_Handler>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3750      	adds	r7, #80	@ 0x50
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <Error_Handler+0x8>

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ada:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a08      	ldr	r2, [pc, #32]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <NMI_Handler+0x4>

08001b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6a:	f000 f9ef 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <I2C1_EV_IRQHandler+0x10>)
 8001b7a:	f001 f9ff 	bl	8002f7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000210 	.word	0x20000210

08001b88 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <I2C1_ER_IRQHandler+0x10>)
 8001b8e:	f001 fb48 	bl	8003222 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000210 	.word	0x20000210

08001b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <USART1_IRQHandler+0x10>)
 8001ba2:	f003 ffe7 	bl	8005b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000268 	.word	0x20000268

08001bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_kill>:

int _kill(int pid, int sig)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bca:	f005 fcc9 	bl	8007560 <__errno>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2216      	movs	r2, #22
 8001bd2:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_exit>:

void _exit (int status)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ffe7 	bl	8001bc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf2:	bf00      	nop
 8001bf4:	e7fd      	b.n	8001bf2 <_exit+0x12>

08001bf6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e00a      	b.n	8001c1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c08:	f3af 8000 	nop.w
 8001c0c:	4601      	mov	r1, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	60ba      	str	r2, [r7, #8]
 8001c14:	b2ca      	uxtb	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbf0      	blt.n	8001c08 <_read+0x12>
  }

  return len;
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e009      	b.n	8001c56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	60ba      	str	r2, [r7, #8]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3301      	adds	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dbf1      	blt.n	8001c42 <_write+0x12>
  }
  return len;
 8001c5e:	687b      	ldr	r3, [r7, #4]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_close>:

int _close(int file)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c90:	605a      	str	r2, [r3, #4]
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_isatty>:

int _isatty(int file)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca8:	2301      	movs	r3, #1
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	@ (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f005 fc2e 	bl	8007560 <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20020000 	.word	0x20020000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	20000264 	.word	0x20000264
 8001d38:	20000400 	.word	0x20000400

08001d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <SystemInit+0x20>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <SystemInit+0x20>)
 8001d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <MX_USART1_UART_Init+0x4c>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	@ (8001db0 <MX_USART1_UART_Init+0x50>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <MX_USART1_UART_Init+0x4c>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <MX_USART1_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <MX_USART1_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <MX_USART1_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <MX_USART1_UART_Init+0x4c>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <MX_USART1_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <MX_USART1_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <MX_USART1_UART_Init+0x4c>)
 8001d98:	f003 fe10 	bl	80059bc <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001da2:	f7ff fe89 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000268 	.word	0x20000268
 8001db0:	40011000 	.word	0x40011000

08001db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <HAL_UART_MspInit+0x94>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d134      	bne.n	8001e40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_UART_MspInit+0x98>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	4a1b      	ldr	r2, [pc, #108]	@ (8001e4c <HAL_UART_MspInit+0x98>)
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_UART_MspInit+0x98>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_UART_MspInit+0x98>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a14      	ldr	r2, [pc, #80]	@ (8001e4c <HAL_UART_MspInit+0x98>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_UART_MspInit+0x98>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e0e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e20:	2307      	movs	r3, #7
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4809      	ldr	r0, [pc, #36]	@ (8001e50 <HAL_UART_MspInit+0x9c>)
 8001e2c:	f000 fa84 	bl	8002338 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	2025      	movs	r0, #37	@ 0x25
 8001e36:	f000 f9a8 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e3a:	2025      	movs	r0, #37	@ 0x25
 8001e3c:	f000 f9c1 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	@ 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40011000 	.word	0x40011000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e58:	f7ff ff70 	bl	8001d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e5c:	480c      	ldr	r0, [pc, #48]	@ (8001e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e5e:	490d      	ldr	r1, [pc, #52]	@ (8001e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e60:	4a0d      	ldr	r2, [pc, #52]	@ (8001e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e64:	e002      	b.n	8001e6c <LoopCopyDataInit>

08001e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6a:	3304      	adds	r3, #4

08001e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e70:	d3f9      	bcc.n	8001e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e74:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e78:	e001      	b.n	8001e7e <LoopFillZerobss>

08001e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e7c:	3204      	adds	r2, #4

08001e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e80:	d3fb      	bcc.n	8001e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e82:	f005 fb73 	bl	800756c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7ff fd57 	bl	8001938 <main>
  bx  lr    
 8001e8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e98:	08009a48 	.word	0x08009a48
  ldr r2, =_sbss
 8001e9c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ea0:	20000400 	.word	0x20000400

08001ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <HAL_Init+0x40>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <HAL_Init+0x40>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	@ (8001ee8 <HAL_Init+0x40>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 f94f 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed6:	200f      	movs	r0, #15
 8001ed8:	f000 f808 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001edc:	f7ff fdf2 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00

08001eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_InitTick+0x54>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_InitTick+0x58>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f967 	bl	80021de <HAL_SYSTICK_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00e      	b.n	8001f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d80a      	bhi.n	8001f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f000 f92f 	bl	800218a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <HAL_InitTick+0x5c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000004 	.word	0x20000004
 8001f44:	2000000c 	.word	0x2000000c
 8001f48:	20000008 	.word	0x20000008

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_IncTick+0x20>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	200002b0 	.word	0x200002b0

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	200002b0 	.word	0x200002b0

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff ffee 	bl	8001f74 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000000c 	.word	0x2000000c

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4907      	ldr	r1, [pc, #28]	@ (8002070 <__NVIC_EnableIRQ+0x38>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000e100 	.word	0xe000e100

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	@ (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	@ 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	210f      	movs	r1, #15
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ff8e 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff29 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219c:	f7ff ff3e 	bl	800201c <__NVIC_GetPriorityGrouping>
 80021a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7ff ff8e 	bl	80020c8 <NVIC_EncodePriority>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5d 	bl	8002074 <__NVIC_SetPriority>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff31 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffa2 	bl	8002130 <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff feb6 	bl	8001f74 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d008      	beq.n	8002228 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2280      	movs	r2, #128	@ 0x80
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e052      	b.n	80022ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0216 	bic.w	r2, r2, #22
 8002236:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002246:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <HAL_DMA_Abort+0x62>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0208 	bic.w	r2, r2, #8
 8002266:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002278:	e013      	b.n	80022a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800227a:	f7ff fe7b 	bl	8001f74 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b05      	cmp	r3, #5
 8002286:	d90c      	bls.n	80022a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2203      	movs	r2, #3
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e015      	b.n	80022ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e4      	bne.n	800227a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b4:	223f      	movs	r2, #63	@ 0x3f
 80022b6:	409a      	lsls	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d004      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2280      	movs	r2, #128	@ 0x80
 80022ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e00c      	b.n	800230e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2205      	movs	r2, #5
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002328:	b2db      	uxtb	r3, r3
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e16b      	b.n	800262c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 815a 	bne.w	8002626 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	2b02      	cmp	r3, #2
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d017      	beq.n	8002428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80b4 	beq.w	8002626 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b60      	ldr	r3, [pc, #384]	@ (8002644 <HAL_GPIO_Init+0x30c>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002644 <HAL_GPIO_Init+0x30c>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002644 <HAL_GPIO_Init+0x30c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024da:	4a5b      	ldr	r2, [pc, #364]	@ (8002648 <HAL_GPIO_Init+0x310>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a52      	ldr	r2, [pc, #328]	@ (800264c <HAL_GPIO_Init+0x314>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02b      	beq.n	800255e <HAL_GPIO_Init+0x226>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a51      	ldr	r2, [pc, #324]	@ (8002650 <HAL_GPIO_Init+0x318>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d025      	beq.n	800255a <HAL_GPIO_Init+0x222>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a50      	ldr	r2, [pc, #320]	@ (8002654 <HAL_GPIO_Init+0x31c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <HAL_GPIO_Init+0x21e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4f      	ldr	r2, [pc, #316]	@ (8002658 <HAL_GPIO_Init+0x320>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x21a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4e      	ldr	r2, [pc, #312]	@ (800265c <HAL_GPIO_Init+0x324>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x216>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4d      	ldr	r2, [pc, #308]	@ (8002660 <HAL_GPIO_Init+0x328>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x212>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4c      	ldr	r2, [pc, #304]	@ (8002664 <HAL_GPIO_Init+0x32c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x20e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4b      	ldr	r2, [pc, #300]	@ (8002668 <HAL_GPIO_Init+0x330>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x20a>
 800253e:	2307      	movs	r3, #7
 8002540:	e00e      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002542:	2308      	movs	r3, #8
 8002544:	e00c      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002546:	2306      	movs	r3, #6
 8002548:	e00a      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800254a:	2305      	movs	r3, #5
 800254c:	e008      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800254e:	2304      	movs	r3, #4
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002552:	2303      	movs	r3, #3
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002556:	2302      	movs	r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800255e:	2300      	movs	r3, #0
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002570:	4935      	ldr	r1, [pc, #212]	@ (8002648 <HAL_GPIO_Init+0x310>)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257e:	4b3b      	ldr	r3, [pc, #236]	@ (800266c <HAL_GPIO_Init+0x334>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a2:	4a32      	ldr	r2, [pc, #200]	@ (800266c <HAL_GPIO_Init+0x334>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a8:	4b30      	ldr	r3, [pc, #192]	@ (800266c <HAL_GPIO_Init+0x334>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025cc:	4a27      	ldr	r2, [pc, #156]	@ (800266c <HAL_GPIO_Init+0x334>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025d2:	4b26      	ldr	r3, [pc, #152]	@ (800266c <HAL_GPIO_Init+0x334>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f6:	4a1d      	ldr	r2, [pc, #116]	@ (800266c <HAL_GPIO_Init+0x334>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_GPIO_Init+0x334>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002620:	4a12      	ldr	r2, [pc, #72]	@ (800266c <HAL_GPIO_Init+0x334>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3301      	adds	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	f67f ae90 	bls.w	8002354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3724      	adds	r7, #36	@ 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	40013800 	.word	0x40013800
 800264c:	40020000 	.word	0x40020000
 8002650:	40020400 	.word	0x40020400
 8002654:	40020800 	.word	0x40020800
 8002658:	40020c00 	.word	0x40020c00
 800265c:	40021000 	.word	0x40021000
 8002660:	40021400 	.word	0x40021400
 8002664:	40021800 	.word	0x40021800
 8002668:	40021c00 	.word	0x40021c00
 800266c:	40013c00 	.word	0x40013c00

08002670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e12b      	b.n	80028da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff f8f6 	bl	8001888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	@ 0x24
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d4:	f003 f94a 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 80026d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a81      	ldr	r2, [pc, #516]	@ (80028e4 <HAL_I2C_Init+0x274>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d807      	bhi.n	80026f4 <HAL_I2C_Init+0x84>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a80      	ldr	r2, [pc, #512]	@ (80028e8 <HAL_I2C_Init+0x278>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	bf94      	ite	ls
 80026ec:	2301      	movls	r3, #1
 80026ee:	2300      	movhi	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e006      	b.n	8002702 <HAL_I2C_Init+0x92>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a7d      	ldr	r2, [pc, #500]	@ (80028ec <HAL_I2C_Init+0x27c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	bf94      	ite	ls
 80026fc:	2301      	movls	r3, #1
 80026fe:	2300      	movhi	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0e7      	b.n	80028da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a78      	ldr	r2, [pc, #480]	@ (80028f0 <HAL_I2C_Init+0x280>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0c9b      	lsrs	r3, r3, #18
 8002714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a6a      	ldr	r2, [pc, #424]	@ (80028e4 <HAL_I2C_Init+0x274>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d802      	bhi.n	8002744 <HAL_I2C_Init+0xd4>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3301      	adds	r3, #1
 8002742:	e009      	b.n	8002758 <HAL_I2C_Init+0xe8>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	4a69      	ldr	r2, [pc, #420]	@ (80028f4 <HAL_I2C_Init+0x284>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	3301      	adds	r3, #1
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	430b      	orrs	r3, r1
 800275e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800276a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	495c      	ldr	r1, [pc, #368]	@ (80028e4 <HAL_I2C_Init+0x274>)
 8002774:	428b      	cmp	r3, r1
 8002776:	d819      	bhi.n	80027ac <HAL_I2C_Init+0x13c>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e59      	subs	r1, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fbb1 f3f3 	udiv	r3, r1, r3
 8002786:	1c59      	adds	r1, r3, #1
 8002788:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800278c:	400b      	ands	r3, r1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_I2C_Init+0x138>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e59      	subs	r1, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a6:	e051      	b.n	800284c <HAL_I2C_Init+0x1dc>
 80027a8:	2304      	movs	r3, #4
 80027aa:	e04f      	b.n	800284c <HAL_I2C_Init+0x1dc>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d111      	bne.n	80027d8 <HAL_I2C_Init+0x168>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	440b      	add	r3, r1
 80027c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e012      	b.n	80027fe <HAL_I2C_Init+0x18e>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	0099      	lsls	r1, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Init+0x196>
 8002802:	2301      	movs	r3, #1
 8002804:	e022      	b.n	800284c <HAL_I2C_Init+0x1dc>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10e      	bne.n	800282c <HAL_I2C_Init+0x1bc>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e58      	subs	r0, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	440b      	add	r3, r1
 800281c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002820:	3301      	adds	r3, #1
 8002822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800282a:	e00f      	b.n	800284c <HAL_I2C_Init+0x1dc>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e58      	subs	r0, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	0099      	lsls	r1, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	6809      	ldr	r1, [r1, #0]
 8002850:	4313      	orrs	r3, r2
 8002852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800287a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6911      	ldr	r1, [r2, #16]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68d2      	ldr	r2, [r2, #12]
 8002886:	4311      	orrs	r1, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	430b      	orrs	r3, r1
 800288e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	000186a0 	.word	0x000186a0
 80028e8:	001e847f 	.word	0x001e847f
 80028ec:	003d08ff 	.word	0x003d08ff
 80028f0:	431bde83 	.word	0x431bde83
 80028f4:	10624dd3 	.word	0x10624dd3

080028f8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290a:	2b80      	cmp	r3, #128	@ 0x80
 800290c:	d103      	bne.n	8002916 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  }
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	817b      	strh	r3, [r7, #10]
 8002936:	460b      	mov	r3, r1
 8002938:	813b      	strh	r3, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800293e:	f7ff fb19 	bl	8001f74 <HAL_GetTick>
 8002942:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b20      	cmp	r3, #32
 800294e:	f040 80d9 	bne.w	8002b04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2319      	movs	r3, #25
 8002958:	2201      	movs	r2, #1
 800295a:	496d      	ldr	r1, [pc, #436]	@ (8002b10 <HAL_I2C_Mem_Write+0x1ec>)
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f002 f911 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
 800296a:	e0cc      	b.n	8002b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_I2C_Mem_Write+0x56>
 8002976:	2302      	movs	r3, #2
 8002978:	e0c5      	b.n	8002b06 <HAL_I2C_Mem_Write+0x1e2>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d007      	beq.n	80029a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2221      	movs	r2, #33	@ 0x21
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2240      	movs	r2, #64	@ 0x40
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a4d      	ldr	r2, [pc, #308]	@ (8002b14 <HAL_I2C_Mem_Write+0x1f0>)
 80029e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029e2:	88f8      	ldrh	r0, [r7, #6]
 80029e4:	893a      	ldrh	r2, [r7, #8]
 80029e6:	8979      	ldrh	r1, [r7, #10]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	4603      	mov	r3, r0
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f001 fea0 	bl	8004738 <I2C_RequestMemoryWrite>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d052      	beq.n	8002aa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e081      	b.n	8002b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f002 f9d6 	bl	8004db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00d      	beq.n	8002a2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d107      	bne.n	8002a2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e06b      	b.n	8002b06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_I2C_Mem_Write+0x180>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d017      	beq.n	8002aa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1aa      	bne.n	8002a02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f002 f9c9 	bl	8004e48 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d107      	bne.n	8002ad4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e016      	b.n	8002b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
  }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	00100002 	.word	0x00100002
 8002b14:	ffff0000 	.word	0xffff0000

08002b18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	@ 0x30
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	4608      	mov	r0, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	817b      	strh	r3, [r7, #10]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	813b      	strh	r3, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b32:	f7ff fa1f 	bl	8001f74 <HAL_GetTick>
 8002b36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	f040 8214 	bne.w	8002f6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2319      	movs	r3, #25
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	497b      	ldr	r1, [pc, #492]	@ (8002d3c <HAL_I2C_Mem_Read+0x224>)
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f002 f817 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e207      	b.n	8002f70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_I2C_Mem_Read+0x56>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e200      	b.n	8002f70 <HAL_I2C_Mem_Read+0x458>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d007      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2222      	movs	r2, #34	@ 0x22
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2240      	movs	r2, #64	@ 0x40
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d40 <HAL_I2C_Mem_Read+0x228>)
 8002bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bd6:	88f8      	ldrh	r0, [r7, #6]
 8002bd8:	893a      	ldrh	r2, [r7, #8]
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4603      	mov	r3, r0
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f001 fe3c 	bl	8004864 <I2C_RequestMemoryRead>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e1bc      	b.n	8002f70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d113      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e190      	b.n	8002f48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d11b      	bne.n	8002c66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e170      	b.n	8002f48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d11b      	bne.n	8002ca6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	e150      	b.n	8002f48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002cbc:	e144      	b.n	8002f48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	f200 80f1 	bhi.w	8002eaa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d123      	bne.n	8002d18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f002 f931 	bl	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e145      	b.n	8002f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d16:	e117      	b.n	8002f48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d14e      	bne.n	8002dbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d26:	2200      	movs	r2, #0
 8002d28:	4906      	ldr	r1, [pc, #24]	@ (8002d44 <HAL_I2C_Mem_Read+0x22c>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f001 ff2a 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e11a      	b.n	8002f70 <HAL_I2C_Mem_Read+0x458>
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000
 8002d44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dbc:	e0c4      	b.n	8002f48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	496c      	ldr	r1, [pc, #432]	@ (8002f78 <HAL_I2C_Mem_Read+0x460>)
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f001 fedb 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0cb      	b.n	8002f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	2200      	movs	r2, #0
 8002e22:	4955      	ldr	r1, [pc, #340]	@ (8002f78 <HAL_I2C_Mem_Read+0x460>)
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f001 fead 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e09d      	b.n	8002f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ea8:	e04e      	b.n	8002f48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f002 f844 	bl	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e058      	b.n	8002f70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d124      	bne.n	8002f48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d107      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f47f aeb6 	bne.w	8002cbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3728      	adds	r7, #40	@ 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	00010004 	.word	0x00010004

08002f7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d003      	beq.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x38>
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	f040 80b1 	bne.w	8003116 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10d      	bne.n	8002fea <HAL_I2C_EV_IRQHandler+0x6e>
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002fd4:	d003      	beq.n	8002fde <HAL_I2C_EV_IRQHandler+0x62>
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_EV_IRQHandler+0x66>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x68>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f000 8114 	beq.w	8003212 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_I2C_EV_IRQHandler+0x90>
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f002 f828 	bl	8005054 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fd7a 	bl	8003afe <I2C_Master_SB>
 800300a:	e083      	b.n	8003114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_I2C_EV_IRQHandler+0xac>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fdf2 	bl	8003c0a <I2C_Master_ADD10>
 8003026:	e075      	b.n	8003114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_I2C_EV_IRQHandler+0xc8>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fe0e 	bl	8003c5e <I2C_Master_ADDR>
 8003042:	e067      	b.n	8003114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d036      	beq.n	80030bc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800305c:	f000 80db 	beq.w	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <HAL_I2C_EV_IRQHandler+0x10a>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_I2C_EV_IRQHandler+0x10a>
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d103      	bne.n	8003086 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9d6 	bl	8003430 <I2C_MasterTransmit_TXE>
 8003084:	e046      	b.n	8003114 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80c2 	beq.w	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80bc 	beq.w	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800309e:	7bbb      	ldrb	r3, [r7, #14]
 80030a0:	2b21      	cmp	r3, #33	@ 0x21
 80030a2:	d103      	bne.n	80030ac <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fa5f 	bl	8003568 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030aa:	e0b4      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b40      	cmp	r3, #64	@ 0x40
 80030b0:	f040 80b1 	bne.w	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 facd 	bl	8003654 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ba:	e0ac      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ca:	f000 80a4 	beq.w	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <HAL_I2C_EV_IRQHandler+0x178>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_I2C_EV_IRQHandler+0x178>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d103      	bne.n	80030f4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb49 	bl	8003784 <I2C_MasterReceive_RXNE>
 80030f2:	e00f      	b.n	8003114 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 808b 	beq.w	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8085 	beq.w	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fc01 	bl	8003914 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003112:	e080      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
 8003114:	e07f      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e007      	b.n	8003138 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d011      	beq.n	8003166 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00c      	beq.n	8003166 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800315c:	69b9      	ldr	r1, [r7, #24]
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 ffcc 	bl	80040fc <I2C_Slave_ADDR>
 8003164:	e05a      	b.n	800321c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0x206>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f001 f806 	bl	800418c <I2C_Slave_STOPF>
 8003180:	e04c      	b.n	800321c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003182:	7bbb      	ldrb	r3, [r7, #14]
 8003184:	2b21      	cmp	r3, #33	@ 0x21
 8003186:	d002      	beq.n	800318e <HAL_I2C_EV_IRQHandler+0x212>
 8003188:	7bbb      	ldrb	r3, [r7, #14]
 800318a:	2b29      	cmp	r3, #41	@ 0x29
 800318c:	d120      	bne.n	80031d0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00d      	beq.n	80031b4 <HAL_I2C_EV_IRQHandler+0x238>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_I2C_EV_IRQHandler+0x238>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d103      	bne.n	80031b4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fee7 	bl	8003f80 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031b2:	e032      	b.n	800321a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d02d      	beq.n	800321a <HAL_I2C_EV_IRQHandler+0x29e>
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d028      	beq.n	800321a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 ff16 	bl	8003ffa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ce:	e024      	b.n	800321a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 ff24 	bl	800403c <I2C_SlaveReceive_RXNE>
 80031f4:	e012      	b.n	800321c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 ff54 	bl	80040b8 <I2C_SlaveReceive_BTF>
 8003210:	e004      	b.n	800321c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003212:	bf00      	nop
 8003214:	e002      	b.n	800321c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003216:	bf00      	nop
 8003218:	e000      	b.n	800321c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800321a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b08a      	sub	sp, #40	@ 0x28
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003244:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <HAL_I2C_ER_IRQHandler+0x4a>
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800326a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_I2C_ER_IRQHandler+0x70>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003290:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d03e      	beq.n	800331a <HAL_I2C_ER_IRQHandler+0xf8>
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d039      	beq.n	800331a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80032a6:	7efb      	ldrb	r3, [r7, #27]
 80032a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80032c0:	7ebb      	ldrb	r3, [r7, #26]
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d112      	bne.n	80032ec <HAL_I2C_ER_IRQHandler+0xca>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10f      	bne.n	80032ec <HAL_I2C_ER_IRQHandler+0xca>
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b21      	cmp	r3, #33	@ 0x21
 80032d0:	d008      	beq.n	80032e4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b29      	cmp	r3, #41	@ 0x29
 80032d6:	d005      	beq.n	80032e4 <HAL_I2C_ER_IRQHandler+0xc2>
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b28      	cmp	r3, #40	@ 0x28
 80032dc:	d106      	bne.n	80032ec <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b21      	cmp	r3, #33	@ 0x21
 80032e2:	d103      	bne.n	80032ec <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f001 f881 	bl	80043ec <I2C_Slave_AF>
 80032ea:	e016      	b.n	800331a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032fe:	7efb      	ldrb	r3, [r7, #27]
 8003300:	2b10      	cmp	r3, #16
 8003302:	d002      	beq.n	800330a <HAL_I2C_ER_IRQHandler+0xe8>
 8003304:	7efb      	ldrb	r3, [r7, #27]
 8003306:	2b40      	cmp	r3, #64	@ 0x40
 8003308:	d107      	bne.n	800331a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003318:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <HAL_I2C_ER_IRQHandler+0x11e>
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	f043 0308 	orr.w	r3, r3, #8
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800333e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f001 f8be 	bl	80044d4 <I2C_ITError>
  }
}
 8003358:	bf00      	nop
 800335a:	3728      	adds	r7, #40	@ 0x28
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
 80033bc:	4613      	mov	r3, r2
 80033be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003446:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	d150      	bne.n	80034f8 <I2C_MasterTransmit_TXE+0xc8>
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b21      	cmp	r3, #33	@ 0x21
 800345a:	d14d      	bne.n	80034f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b08      	cmp	r3, #8
 8003460:	d01d      	beq.n	800349e <I2C_MasterTransmit_TXE+0x6e>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b20      	cmp	r3, #32
 8003466:	d01a      	beq.n	800349e <I2C_MasterTransmit_TXE+0x6e>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800346e:	d016      	beq.n	800349e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800347e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2211      	movs	r2, #17
 8003484:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff ff62 	bl	8003360 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800349c:	e060      	b.n	8003560 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b40      	cmp	r3, #64	@ 0x40
 80034d6:	d107      	bne.n	80034e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff7d 	bl	80033e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034e6:	e03b      	b.n	8003560 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff ff35 	bl	8003360 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034f6:	e033      	b.n	8003560 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b21      	cmp	r3, #33	@ 0x21
 80034fc:	d005      	beq.n	800350a <I2C_MasterTransmit_TXE+0xda>
 80034fe:	7bbb      	ldrb	r3, [r7, #14]
 8003500:	2b40      	cmp	r3, #64	@ 0x40
 8003502:	d12d      	bne.n	8003560 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b22      	cmp	r3, #34	@ 0x22
 8003508:	d12a      	bne.n	8003560 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d108      	bne.n	8003526 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003522:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003524:	e01c      	b.n	8003560 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b40      	cmp	r3, #64	@ 0x40
 8003530:	d103      	bne.n	800353a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f88e 	bl	8003654 <I2C_MemoryTransmit_TXE_BTF>
}
 8003538:	e012      	b.n	8003560 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	781a      	ldrb	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800355e:	e7ff      	b.n	8003560 <I2C_MasterTransmit_TXE+0x130>
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b21      	cmp	r3, #33	@ 0x21
 8003580:	d164      	bne.n	800364c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80035b0:	e04c      	b.n	800364c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d01d      	beq.n	80035f4 <I2C_MasterTransmit_BTF+0x8c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d01a      	beq.n	80035f4 <I2C_MasterTransmit_BTF+0x8c>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035c4:	d016      	beq.n	80035f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2211      	movs	r2, #17
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff feb7 	bl	8003360 <HAL_I2C_MasterTxCpltCallback>
}
 80035f2:	e02b      	b.n	800364c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003602:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003612:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d107      	bne.n	800363e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fed2 	bl	80033e0 <HAL_I2C_MemTxCpltCallback>
}
 800363c:	e006      	b.n	800364c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff fe8a 	bl	8003360 <HAL_I2C_MasterTxCpltCallback>
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003662:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003668:	2b00      	cmp	r3, #0
 800366a:	d11d      	bne.n	80036a8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d10b      	bne.n	800368c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003678:	b2da      	uxtb	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003684:	1c9a      	adds	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800368a:	e077      	b.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003690:	b29b      	uxth	r3, r3
 8003692:	121b      	asrs	r3, r3, #8
 8003694:	b2da      	uxtb	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036a6:	e069      	b.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10b      	bne.n	80036c8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036c6:	e059      	b.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d152      	bne.n	8003776 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b22      	cmp	r3, #34	@ 0x22
 80036d4:	d10d      	bne.n	80036f2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036f0:	e044      	b.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b21      	cmp	r3, #33	@ 0x21
 8003700:	d112      	bne.n	8003728 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003726:	e029      	b.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d124      	bne.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b21      	cmp	r3, #33	@ 0x21
 8003736:	d121      	bne.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003746:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003756:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff fe36 	bl	80033e0 <HAL_I2C_MemTxCpltCallback>
}
 8003774:	e002      	b.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff f8be 	bl	80028f8 <I2C_Flush_DR>
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b22      	cmp	r3, #34	@ 0x22
 8003796:	f040 80b9 	bne.w	800390c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d921      	bls.n	80037f2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b03      	cmp	r3, #3
 80037dc:	f040 8096 	bne.w	800390c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ee:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80037f0:	e08c      	b.n	800390c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d07f      	beq.n	80038fa <I2C_MasterReceive_RXNE+0x176>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d002      	beq.n	8003806 <I2C_MasterReceive_RXNE+0x82>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d179      	bne.n	80038fa <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f001 fb66 	bl	8004ed8 <I2C_WaitOnSTOPRequestThroughIT>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d14c      	bne.n	80038ac <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003820:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003830:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b40      	cmp	r3, #64	@ 0x40
 800386a:	d10a      	bne.n	8003882 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff fdba 	bl	80033f4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003880:	e044      	b.n	800390c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d002      	beq.n	8003896 <I2C_MasterReceive_RXNE+0x112>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b20      	cmp	r3, #32
 8003894:	d103      	bne.n	800389e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
 800389c:	e002      	b.n	80038a4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2212      	movs	r2, #18
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fd65 	bl	8003374 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038aa:	e02f      	b.n	800390c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fd88 	bl	8003408 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038f8:	e008      	b.n	800390c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003908:	605a      	str	r2, [r3, #4]
}
 800390a:	e7ff      	b.n	800390c <I2C_MasterReceive_RXNE+0x188>
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b04      	cmp	r3, #4
 800392a:	d11b      	bne.n	8003964 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800393a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003962:	e0c8      	b.n	8003af6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b03      	cmp	r3, #3
 800396c:	d129      	bne.n	80039c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800397c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d00a      	beq.n	800399a <I2C_MasterReceive_BTF+0x86>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d007      	beq.n	800399a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003998:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80039c0:	e099      	b.n	8003af6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	f040 8081 	bne.w	8003ad0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d002      	beq.n	80039da <I2C_MasterReceive_BTF+0xc6>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d108      	bne.n	80039ec <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e019      	b.n	8003a20 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d002      	beq.n	80039f8 <I2C_MasterReceive_BTF+0xe4>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d108      	bne.n	8003a0a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e00a      	b.n	8003a20 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d007      	beq.n	8003a20 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b40      	cmp	r3, #64	@ 0x40
 8003a8e:	d10a      	bne.n	8003aa6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fca8 	bl	80033f4 <HAL_I2C_MemRxCpltCallback>
}
 8003aa4:	e027      	b.n	8003af6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d002      	beq.n	8003aba <I2C_MasterReceive_BTF+0x1a6>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d103      	bne.n	8003ac2 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ac0:	e002      	b.n	8003ac8 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2212      	movs	r2, #18
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fc53 	bl	8003374 <HAL_I2C_MasterRxCpltCallback>
}
 8003ace:	e012      	b.n	8003af6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b40      	cmp	r3, #64	@ 0x40
 8003b10:	d117      	bne.n	8003b42 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b2a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b2c:	e067      	b.n	8003bfe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]
}
 8003b40:	e05d      	b.n	8003bfe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b4a:	d133      	bne.n	8003bb4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b21      	cmp	r3, #33	@ 0x21
 8003b56:	d109      	bne.n	8003b6c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b68:	611a      	str	r2, [r3, #16]
 8003b6a:	e008      	b.n	8003b7e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <I2C_Master_SB+0x92>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d108      	bne.n	8003ba2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d032      	beq.n	8003bfe <I2C_Master_SB+0x100>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d02d      	beq.n	8003bfe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb0:	605a      	str	r2, [r3, #4]
}
 8003bb2:	e024      	b.n	8003bfe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10e      	bne.n	8003bda <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	11db      	asrs	r3, r3, #7
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0306 	and.w	r3, r3, #6
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f063 030f 	orn	r3, r3, #15
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]
}
 8003bd8:	e011      	b.n	8003bfe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10d      	bne.n	8003bfe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	11db      	asrs	r3, r3, #7
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 0306 	and.w	r3, r3, #6
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f063 030e 	orn	r3, r3, #14
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	611a      	str	r2, [r3, #16]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <I2C_Master_ADD10+0x26>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d108      	bne.n	8003c42 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00c      	beq.n	8003c52 <I2C_Master_ADD10+0x48>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c50:	605a      	str	r2, [r3, #4]
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b091      	sub	sp, #68	@ 0x44
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b22      	cmp	r3, #34	@ 0x22
 8003c86:	f040 8169 	bne.w	8003f5c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <I2C_Master_ADDR+0x54>
 8003c92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d10b      	bne.n	8003cb2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb0:	e160      	b.n	8003f74 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11d      	bne.n	8003cf6 <I2C_Master_ADDR+0x98>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003cc2:	d118      	bne.n	8003cf6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003cf4:	e13e      	b.n	8003f74 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d113      	bne.n	8003d28 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d00:	2300      	movs	r3, #0
 8003d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e115      	b.n	8003f54 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	f040 808a 	bne.w	8003e48 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d3a:	d137      	bne.n	8003dac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d4a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d5a:	d113      	bne.n	8003d84 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	e0e7      	b.n	8003f54 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d84:	2300      	movs	r3, #0
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e0d3      	b.n	8003f54 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d02e      	beq.n	8003e10 <I2C_Master_ADDR+0x1b2>
 8003db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d02b      	beq.n	8003e10 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dba:	2b12      	cmp	r3, #18
 8003dbc:	d102      	bne.n	8003dc4 <I2C_Master_ADDR+0x166>
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d125      	bne.n	8003e10 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d00e      	beq.n	8003de8 <I2C_Master_ADDR+0x18a>
 8003dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d00b      	beq.n	8003de8 <I2C_Master_ADDR+0x18a>
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d008      	beq.n	8003de8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e007      	b.n	8003df8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003df6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	e0a1      	b.n	8003f54 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e085      	b.n	8003f54 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d14d      	bne.n	8003eee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d016      	beq.n	8003e86 <I2C_Master_ADDR+0x228>
 8003e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d013      	beq.n	8003e86 <I2C_Master_ADDR+0x228>
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d010      	beq.n	8003e86 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e72:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e007      	b.n	8003e96 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e94:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea4:	d117      	bne.n	8003ed6 <I2C_Master_ADDR+0x278>
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003eac:	d00b      	beq.n	8003ec6 <I2C_Master_ADDR+0x268>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d008      	beq.n	8003ec6 <I2C_Master_ADDR+0x268>
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d005      	beq.n	8003ec6 <I2C_Master_ADDR+0x268>
 8003eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d002      	beq.n	8003ec6 <I2C_Master_ADDR+0x268>
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d107      	bne.n	8003ed6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ed4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	e032      	b.n	8003f54 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003efc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f0c:	d117      	bne.n	8003f3e <I2C_Master_ADDR+0x2e0>
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f14:	d00b      	beq.n	8003f2e <I2C_Master_ADDR+0x2d0>
 8003f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d008      	beq.n	8003f2e <I2C_Master_ADDR+0x2d0>
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d005      	beq.n	8003f2e <I2C_Master_ADDR+0x2d0>
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d002      	beq.n	8003f2e <I2C_Master_ADDR+0x2d0>
 8003f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d107      	bne.n	8003f3e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f3c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f5a:	e00b      	b.n	8003f74 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
}
 8003f72:	e7ff      	b.n	8003f74 <I2C_Master_ADDR+0x316>
 8003f74:	bf00      	nop
 8003f76:	3744      	adds	r7, #68	@ 0x44
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02b      	beq.n	8003ff2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d114      	bne.n	8003ff2 <I2C_SlaveTransmit_TXE+0x72>
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b29      	cmp	r3, #41	@ 0x29
 8003fcc:	d111      	bne.n	8003ff2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fdc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2221      	movs	r2, #33	@ 0x21
 8003fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2228      	movs	r2, #40	@ 0x28
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff f9cb 	bl	8003388 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d011      	beq.n	8004030 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d02c      	beq.n	80040b0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d114      	bne.n	80040b0 <I2C_SlaveReceive_RXNE+0x74>
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b2a      	cmp	r3, #42	@ 0x2a
 800408a:	d111      	bne.n	80040b0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2222      	movs	r2, #34	@ 0x22
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2228      	movs	r2, #40	@ 0x28
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff f976 	bl	800339c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d012      	beq.n	80040f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004116:	2b28      	cmp	r3, #40	@ 0x28
 8004118:	d125      	bne.n	8004166 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004128:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	81bb      	strh	r3, [r7, #12]
 8004148:	e002      	b.n	8004150 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004158:	89ba      	ldrh	r2, [r7, #12]
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff f926 	bl	80033b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004164:	e00e      	b.n	8004184 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800419a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041e8:	d172      	bne.n	80042d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b22      	cmp	r3, #34	@ 0x22
 80041ee:	d002      	beq.n	80041f6 <I2C_Slave_STOPF+0x6a>
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80041f4:	d135      	bne.n	8004262 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b29a      	uxth	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004228:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe f873 	bl	800231a <HAL_DMA_GetState>
 8004234:	4603      	mov	r3, r0
 8004236:	2b01      	cmp	r3, #1
 8004238:	d049      	beq.n	80042ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423e:	4a69      	ldr	r2, [pc, #420]	@ (80043e4 <I2C_Slave_STOPF+0x258>)
 8004240:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe f845 	bl	80022d6 <HAL_DMA_Abort_IT>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d03d      	beq.n	80042ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800425c:	4610      	mov	r0, r2
 800425e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004260:	e035      	b.n	80042ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	f043 0204 	orr.w	r2, r3, #4
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004294:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe f83d 	bl	800231a <HAL_DMA_GetState>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d014      	beq.n	80042d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042aa:	4a4e      	ldr	r2, [pc, #312]	@ (80043e4 <I2C_Slave_STOPF+0x258>)
 80042ac:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe f80f 	bl	80022d6 <HAL_DMA_Abort_IT>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042c8:	4610      	mov	r0, r2
 80042ca:	4798      	blx	r3
 80042cc:	e000      	b.n	80042d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03e      	beq.n	8004358 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d112      	bne.n	800430e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d112      	bne.n	8004342 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	f043 0204 	orr.w	r2, r3, #4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8b7 	bl	80044d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004366:	e039      	b.n	80043dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b2a      	cmp	r3, #42	@ 0x2a
 800436c:	d109      	bne.n	8004382 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2228      	movs	r2, #40	@ 0x28
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff f80d 	bl	800339c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b28      	cmp	r3, #40	@ 0x28
 800438c:	d111      	bne.n	80043b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a15      	ldr	r2, [pc, #84]	@ (80043e8 <I2C_Slave_STOPF+0x25c>)
 8004392:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff f80e 	bl	80033cc <HAL_I2C_ListenCpltCallback>
}
 80043b0:	e014      	b.n	80043dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	2b22      	cmp	r3, #34	@ 0x22
 80043b8:	d002      	beq.n	80043c0 <I2C_Slave_STOPF+0x234>
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b22      	cmp	r3, #34	@ 0x22
 80043be:	d10d      	bne.n	80043dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fe ffe0 	bl	800339c <HAL_I2C_SlaveRxCpltCallback>
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	08004a35 	.word	0x08004a35
 80043e8:	ffff0000 	.word	0xffff0000

080043ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d002      	beq.n	800440e <I2C_Slave_AF+0x22>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b20      	cmp	r3, #32
 800440c:	d129      	bne.n	8004462 <I2C_Slave_AF+0x76>
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b28      	cmp	r3, #40	@ 0x28
 8004412:	d126      	bne.n	8004462 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a2e      	ldr	r2, [pc, #184]	@ (80044d0 <I2C_Slave_AF+0xe4>)
 8004418:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004428:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004432:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004442:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fe ffb6 	bl	80033cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004460:	e031      	b.n	80044c6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b21      	cmp	r3, #33	@ 0x21
 8004466:	d129      	bne.n	80044bc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a19      	ldr	r2, [pc, #100]	@ (80044d0 <I2C_Slave_AF+0xe4>)
 800446c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2221      	movs	r2, #33	@ 0x21
 8004472:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004492:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800449c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ac:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fe fa22 	bl	80028f8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fe ff67 	bl	8003388 <HAL_I2C_SlaveTxCpltCallback>
}
 80044ba:	e004      	b.n	80044c6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044c4:	615a      	str	r2, [r3, #20]
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	ffff0000 	.word	0xffff0000

080044d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044ec:	7bbb      	ldrb	r3, [r7, #14]
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d002      	beq.n	80044f8 <I2C_ITError+0x24>
 80044f2:	7bbb      	ldrb	r3, [r7, #14]
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d10a      	bne.n	800450e <I2C_ITError+0x3a>
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b22      	cmp	r3, #34	@ 0x22
 80044fc:	d107      	bne.n	800450e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800450c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004514:	2b28      	cmp	r3, #40	@ 0x28
 8004516:	d107      	bne.n	8004528 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2228      	movs	r2, #40	@ 0x28
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004526:	e015      	b.n	8004554 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004536:	d00a      	beq.n	800454e <I2C_ITError+0x7a>
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b60      	cmp	r3, #96	@ 0x60
 800453c:	d007      	beq.n	800454e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800455e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004562:	d162      	bne.n	800462a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004572:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004578:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	d020      	beq.n	80045c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004586:	4a6a      	ldr	r2, [pc, #424]	@ (8004730 <I2C_ITError+0x25c>)
 8004588:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd fea1 	bl	80022d6 <HAL_DMA_Abort_IT>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8089 	beq.w	80046ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045be:	4610      	mov	r0, r2
 80045c0:	4798      	blx	r3
 80045c2:	e074      	b.n	80046ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	4a59      	ldr	r2, [pc, #356]	@ (8004730 <I2C_ITError+0x25c>)
 80045ca:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fd fe80 	bl	80022d6 <HAL_DMA_Abort_IT>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d068      	beq.n	80046ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e6:	2b40      	cmp	r3, #64	@ 0x40
 80045e8:	d10b      	bne.n	8004602 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004624:	4610      	mov	r0, r2
 8004626:	4798      	blx	r3
 8004628:	e041      	b.n	80046ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b60      	cmp	r3, #96	@ 0x60
 8004634:	d125      	bne.n	8004682 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464e:	2b40      	cmp	r3, #64	@ 0x40
 8004650:	d10b      	bne.n	800466a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fe fece 	bl	800341c <HAL_I2C_AbortCpltCallback>
 8004680:	e015      	b.n	80046ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468c:	2b40      	cmp	r3, #64	@ 0x40
 800468e:	d10b      	bne.n	80046a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fe fead 	bl	8003408 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10e      	bne.n	80046dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d109      	bne.n	80046dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d113      	bne.n	8004728 <I2C_ITError+0x254>
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b28      	cmp	r3, #40	@ 0x28
 8004704:	d110      	bne.n	8004728 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a0a      	ldr	r2, [pc, #40]	@ (8004734 <I2C_ITError+0x260>)
 800470a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fe fe52 	bl	80033cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	08004a35 	.word	0x08004a35
 8004734:	ffff0000 	.word	0xffff0000

08004738 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	4608      	mov	r0, r1
 8004742:	4611      	mov	r1, r2
 8004744:	461a      	mov	r2, r3
 8004746:	4603      	mov	r3, r0
 8004748:	817b      	strh	r3, [r7, #10]
 800474a:	460b      	mov	r3, r1
 800474c:	813b      	strh	r3, [r7, #8]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	2200      	movs	r2, #0
 800476a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa08 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004788:	d103      	bne.n	8004792 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004790:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e05f      	b.n	8004856 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	492d      	ldr	r1, [pc, #180]	@ (8004860 <I2C_RequestMemoryWrite+0x128>)
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fa63 	bl	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e04c      	b.n	8004856 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	6a39      	ldr	r1, [r7, #32]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 faee 	bl	8004db8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d107      	bne.n	80047fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e02b      	b.n	8004856 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004804:	893b      	ldrh	r3, [r7, #8]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]
 800480e:	e021      	b.n	8004854 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004810:	893b      	ldrh	r3, [r7, #8]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	b29b      	uxth	r3, r3
 8004816:	b2da      	uxtb	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004820:	6a39      	ldr	r1, [r7, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fac8 	bl	8004db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	2b04      	cmp	r3, #4
 8004834:	d107      	bne.n	8004846 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e005      	b.n	8004856 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800484a:	893b      	ldrh	r3, [r7, #8]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	00010002 	.word	0x00010002

08004864 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	4608      	mov	r0, r1
 800486e:	4611      	mov	r1, r2
 8004870:	461a      	mov	r2, r3
 8004872:	4603      	mov	r3, r0
 8004874:	817b      	strh	r3, [r7, #10]
 8004876:	460b      	mov	r3, r1
 8004878:	813b      	strh	r3, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800488c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800489c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f96a 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c4:	d103      	bne.n	80048ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e0aa      	b.n	8004a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048d2:	897b      	ldrh	r3, [r7, #10]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	4952      	ldr	r1, [pc, #328]	@ (8004a30 <I2C_RequestMemoryRead+0x1cc>)
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f9c5 	bl	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e097      	b.n	8004a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800490e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004910:	6a39      	ldr	r1, [r7, #32]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fa50 	bl	8004db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	2b04      	cmp	r3, #4
 8004924:	d107      	bne.n	8004936 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e076      	b.n	8004a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004940:	893b      	ldrh	r3, [r7, #8]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]
 800494a:	e021      	b.n	8004990 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800494c:	893b      	ldrh	r3, [r7, #8]
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	b29b      	uxth	r3, r3
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495c:	6a39      	ldr	r1, [r7, #32]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fa2a 	bl	8004db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	2b04      	cmp	r3, #4
 8004970:	d107      	bne.n	8004982 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004980:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e050      	b.n	8004a28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004986:	893b      	ldrh	r3, [r7, #8]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004992:	6a39      	ldr	r1, [r7, #32]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fa0f 	bl	8004db8 <I2C_WaitOnTXEFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d107      	bne.n	80049b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e035      	b.n	8004a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f8d3 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00d      	beq.n	8004a00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f2:	d103      	bne.n	80049fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e013      	b.n	8004a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a00:	897b      	ldrh	r3, [r7, #10]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	6a3a      	ldr	r2, [r7, #32]
 8004a14:	4906      	ldr	r1, [pc, #24]	@ (8004a30 <I2C_RequestMemoryRead+0x1cc>)
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f92e 	bl	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	00010002 	.word	0x00010002

08004a34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b7c <I2C_DMAAbort+0x148>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	08db      	lsrs	r3, r3, #3
 8004a54:	4a4a      	ldr	r2, [pc, #296]	@ (8004b80 <I2C_DMAAbort+0x14c>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0a1a      	lsrs	r2, r3, #8
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	00da      	lsls	r2, r3, #3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004a7a:	e00a      	b.n	8004a92 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a90:	d0ea      	beq.n	8004a68 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aae:	2200      	movs	r2, #0
 8004ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ac0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b60      	cmp	r3, #96	@ 0x60
 8004b02:	d10e      	bne.n	8004b22 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	f7fe fc7e 	bl	800341c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b20:	e027      	b.n	8004b72 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b22:	7cfb      	ldrb	r3, [r7, #19]
 8004b24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b28:	2b28      	cmp	r3, #40	@ 0x28
 8004b2a:	d117      	bne.n	8004b5c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2228      	movs	r2, #40	@ 0x28
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b5a:	e007      	b.n	8004b6c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b6c:	6978      	ldr	r0, [r7, #20]
 8004b6e:	f7fe fc4b 	bl	8003408 <HAL_I2C_ErrorCallback>
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000004 	.word	0x20000004
 8004b80:	14f8b589 	.word	0x14f8b589

08004b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	4613      	mov	r3, r2
 8004b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b94:	e048      	b.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d044      	beq.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9e:	f7fd f9e9 	bl	8001f74 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d302      	bcc.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d139      	bne.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	0c1b      	lsrs	r3, r3, #16
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10d      	bne.n	8004bda <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	e00c      	b.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	43da      	mvns	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d116      	bne.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e023      	b.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10d      	bne.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	e00c      	b.n	8004c68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d093      	beq.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c86:	e071      	b.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c96:	d123      	bne.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	f043 0204 	orr.w	r2, r3, #4
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e067      	b.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d041      	beq.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce8:	f7fd f944 	bl	8001f74 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d302      	bcc.n	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d136      	bne.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10c      	bne.n	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	43da      	mvns	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bf14      	ite	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	2300      	moveq	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	e00b      	b.n	8004d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	43da      	mvns	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d016      	beq.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e021      	b.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d10c      	bne.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	43da      	mvns	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4013      	ands	r3, r2
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e00b      	b.n	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f47f af6d 	bne.w	8004c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc4:	e034      	b.n	8004e30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f915 	bl	8004ff6 <I2C_IsAcknowledgeFailed>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e034      	b.n	8004e40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d028      	beq.n	8004e30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dde:	f7fd f8c9 	bl	8001f74 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11d      	bne.n	8004e30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfe:	2b80      	cmp	r3, #128	@ 0x80
 8004e00:	d016      	beq.n	8004e30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1c:	f043 0220 	orr.w	r2, r3, #32
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e007      	b.n	8004e40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3a:	2b80      	cmp	r3, #128	@ 0x80
 8004e3c:	d1c3      	bne.n	8004dc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e54:	e034      	b.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f8cd 	bl	8004ff6 <I2C_IsAcknowledgeFailed>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e034      	b.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d028      	beq.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fd f881 	bl	8001f74 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d11d      	bne.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d016      	beq.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e007      	b.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d1c3      	bne.n	8004e56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ee4:	4b13      	ldr	r3, [pc, #76]	@ (8004f34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	4a13      	ldr	r2, [pc, #76]	@ (8004f38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	0a1a      	lsrs	r2, r3, #8
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e008      	b.n	8004f28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f24:	d0e9      	beq.n	8004efa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000004 	.word	0x20000004
 8004f38:	14f8b589 	.word	0x14f8b589

08004f3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f48:	e049      	b.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d119      	bne.n	8004f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0210 	mvn.w	r2, #16
 8004f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e030      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8c:	f7fc fff2 	bl	8001f74 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11d      	bne.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fac:	2b40      	cmp	r3, #64	@ 0x40
 8004fae:	d016      	beq.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f043 0220 	orr.w	r2, r3, #32
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e007      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d1ae      	bne.n	8004f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500c:	d11b      	bne.n	8005046 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005016:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005064:	d103      	bne.n	800506e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800506c:	e007      	b.n	800507e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005076:	d102      	bne.n	800507e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2208      	movs	r2, #8
 800507c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e267      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d075      	beq.n	8005196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050aa:	4b88      	ldr	r3, [pc, #544]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d00c      	beq.n	80050d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b6:	4b85      	ldr	r3, [pc, #532]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d112      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c2:	4b82      	ldr	r3, [pc, #520]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ce:	d10b      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	4b7e      	ldr	r3, [pc, #504]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d05b      	beq.n	8005194 <HAL_RCC_OscConfig+0x108>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d157      	bne.n	8005194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e242      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f0:	d106      	bne.n	8005100 <HAL_RCC_OscConfig+0x74>
 80050f2:	4b76      	ldr	r3, [pc, #472]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a75      	ldr	r2, [pc, #468]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e01d      	b.n	800513c <HAL_RCC_OscConfig+0xb0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x98>
 800510a:	4b70      	ldr	r3, [pc, #448]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a6f      	ldr	r2, [pc, #444]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 8005110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4b6d      	ldr	r3, [pc, #436]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a6c      	ldr	r2, [pc, #432]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e00b      	b.n	800513c <HAL_RCC_OscConfig+0xb0>
 8005124:	4b69      	ldr	r3, [pc, #420]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a68      	ldr	r2, [pc, #416]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 800512a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4b66      	ldr	r3, [pc, #408]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a65      	ldr	r2, [pc, #404]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 8005136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800513a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d013      	beq.n	800516c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fc ff16 	bl	8001f74 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800514c:	f7fc ff12 	bl	8001f74 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	@ 0x64
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e207      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	4b5b      	ldr	r3, [pc, #364]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0xc0>
 800516a:	e014      	b.n	8005196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fc ff02 	bl	8001f74 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005174:	f7fc fefe 	bl	8001f74 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	@ 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e1f3      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	4b51      	ldr	r3, [pc, #324]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0xe8>
 8005192:	e000      	b.n	8005196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d063      	beq.n	800526a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051a2:	4b4a      	ldr	r3, [pc, #296]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ae:	4b47      	ldr	r3, [pc, #284]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d11c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ba:	4b44      	ldr	r3, [pc, #272]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d116      	bne.n	80051f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c6:	4b41      	ldr	r3, [pc, #260]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_RCC_OscConfig+0x152>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e1c7      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051de:	4b3b      	ldr	r3, [pc, #236]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4937      	ldr	r1, [pc, #220]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	e03a      	b.n	800526a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051fc:	4b34      	ldr	r3, [pc, #208]	@ (80052d0 <HAL_RCC_OscConfig+0x244>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fc feb7 	bl	8001f74 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800520a:	f7fc feb3 	bl	8001f74 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e1a8      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521c:	4b2b      	ldr	r3, [pc, #172]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005228:	4b28      	ldr	r3, [pc, #160]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4925      	ldr	r1, [pc, #148]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]
 800523c:	e015      	b.n	800526a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523e:	4b24      	ldr	r3, [pc, #144]	@ (80052d0 <HAL_RCC_OscConfig+0x244>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fc fe96 	bl	8001f74 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800524c:	f7fc fe92 	bl	8001f74 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e187      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	4b1b      	ldr	r3, [pc, #108]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d036      	beq.n	80052e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800527e:	4b15      	ldr	r3, [pc, #84]	@ (80052d4 <HAL_RCC_OscConfig+0x248>)
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fc fe76 	bl	8001f74 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800528c:	f7fc fe72 	bl	8001f74 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e167      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529e:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <HAL_RCC_OscConfig+0x240>)
 80052a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x200>
 80052aa:	e01b      	b.n	80052e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ac:	4b09      	ldr	r3, [pc, #36]	@ (80052d4 <HAL_RCC_OscConfig+0x248>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b2:	f7fc fe5f 	bl	8001f74 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b8:	e00e      	b.n	80052d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ba:	f7fc fe5b 	bl	8001f74 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d907      	bls.n	80052d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e150      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
 80052cc:	40023800 	.word	0x40023800
 80052d0:	42470000 	.word	0x42470000
 80052d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d8:	4b88      	ldr	r3, [pc, #544]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 80052da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1ea      	bne.n	80052ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8097 	beq.w	8005420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f2:	2300      	movs	r3, #0
 80052f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f6:	4b81      	ldr	r3, [pc, #516]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10f      	bne.n	8005322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	4b7d      	ldr	r3, [pc, #500]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	4a7c      	ldr	r2, [pc, #496]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005310:	6413      	str	r3, [r2, #64]	@ 0x40
 8005312:	4b7a      	ldr	r3, [pc, #488]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005322:	4b77      	ldr	r3, [pc, #476]	@ (8005500 <HAL_RCC_OscConfig+0x474>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532a:	2b00      	cmp	r3, #0
 800532c:	d118      	bne.n	8005360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800532e:	4b74      	ldr	r3, [pc, #464]	@ (8005500 <HAL_RCC_OscConfig+0x474>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a73      	ldr	r2, [pc, #460]	@ (8005500 <HAL_RCC_OscConfig+0x474>)
 8005334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800533a:	f7fc fe1b 	bl	8001f74 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005342:	f7fc fe17 	bl	8001f74 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e10c      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005354:	4b6a      	ldr	r3, [pc, #424]	@ (8005500 <HAL_RCC_OscConfig+0x474>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d106      	bne.n	8005376 <HAL_RCC_OscConfig+0x2ea>
 8005368:	4b64      	ldr	r3, [pc, #400]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536c:	4a63      	ldr	r2, [pc, #396]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	6713      	str	r3, [r2, #112]	@ 0x70
 8005374:	e01c      	b.n	80053b0 <HAL_RCC_OscConfig+0x324>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b05      	cmp	r3, #5
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0x30c>
 800537e:	4b5f      	ldr	r3, [pc, #380]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005382:	4a5e      	ldr	r2, [pc, #376]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 8005384:	f043 0304 	orr.w	r3, r3, #4
 8005388:	6713      	str	r3, [r2, #112]	@ 0x70
 800538a:	4b5c      	ldr	r3, [pc, #368]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538e:	4a5b      	ldr	r2, [pc, #364]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	6713      	str	r3, [r2, #112]	@ 0x70
 8005396:	e00b      	b.n	80053b0 <HAL_RCC_OscConfig+0x324>
 8005398:	4b58      	ldr	r3, [pc, #352]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539c:	4a57      	ldr	r2, [pc, #348]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a4:	4b55      	ldr	r3, [pc, #340]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a8:	4a54      	ldr	r2, [pc, #336]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 80053aa:	f023 0304 	bic.w	r3, r3, #4
 80053ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d015      	beq.n	80053e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fc fddc 	bl	8001f74 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c0:	f7fc fdd8 	bl	8001f74 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e0cb      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d6:	4b49      	ldr	r3, [pc, #292]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ee      	beq.n	80053c0 <HAL_RCC_OscConfig+0x334>
 80053e2:	e014      	b.n	800540e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e4:	f7fc fdc6 	bl	8001f74 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f7fc fdc2 	bl	8001f74 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e0b5      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005402:	4b3e      	ldr	r3, [pc, #248]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1ee      	bne.n	80053ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d105      	bne.n	8005420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005414:	4b39      	ldr	r3, [pc, #228]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	4a38      	ldr	r2, [pc, #224]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800541e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80a1 	beq.w	800556c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800542a:	4b34      	ldr	r3, [pc, #208]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	2b08      	cmp	r3, #8
 8005434:	d05c      	beq.n	80054f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d141      	bne.n	80054c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	4b31      	ldr	r3, [pc, #196]	@ (8005504 <HAL_RCC_OscConfig+0x478>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fc fd96 	bl	8001f74 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544c:	f7fc fd92 	bl	8001f74 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e087      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545e:	4b27      	ldr	r3, [pc, #156]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	019b      	lsls	r3, r3, #6
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	3b01      	subs	r3, #1
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	491b      	ldr	r1, [pc, #108]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005494:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <HAL_RCC_OscConfig+0x478>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7fc fd6b 	bl	8001f74 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a2:	f7fc fd67 	bl	8001f74 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e05c      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b4:	4b11      	ldr	r3, [pc, #68]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x416>
 80054c0:	e054      	b.n	800556c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b10      	ldr	r3, [pc, #64]	@ (8005504 <HAL_RCC_OscConfig+0x478>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fc fd54 	bl	8001f74 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fc fd50 	bl	8001f74 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e045      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_RCC_OscConfig+0x470>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x444>
 80054ee:	e03d      	b.n	800556c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e038      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
 80054fc:	40023800 	.word	0x40023800
 8005500:	40007000 	.word	0x40007000
 8005504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005508:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <HAL_RCC_OscConfig+0x4ec>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d028      	beq.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005520:	429a      	cmp	r2, r3
 8005522:	d121      	bne.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552e:	429a      	cmp	r2, r3
 8005530:	d11a      	bne.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800553e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005540:	4293      	cmp	r3, r2
 8005542:	d111      	bne.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	3b01      	subs	r3, #1
 8005552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005554:	429a      	cmp	r2, r3
 8005556:	d107      	bne.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800

0800557c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0cc      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005590:	4b68      	ldr	r3, [pc, #416]	@ (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d90c      	bls.n	80055b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b65      	ldr	r3, [pc, #404]	@ (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	4b63      	ldr	r3, [pc, #396]	@ (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0b8      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d020      	beq.n	8005606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d0:	4b59      	ldr	r3, [pc, #356]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a58      	ldr	r2, [pc, #352]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055e8:	4b53      	ldr	r3, [pc, #332]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4a52      	ldr	r2, [pc, #328]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f4:	4b50      	ldr	r3, [pc, #320]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	494d      	ldr	r1, [pc, #308]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d044      	beq.n	800569c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d107      	bne.n	800562a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561a:	4b47      	ldr	r3, [pc, #284]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d119      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e07f      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d003      	beq.n	800563a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005636:	2b03      	cmp	r3, #3
 8005638:	d107      	bne.n	800564a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563a:	4b3f      	ldr	r3, [pc, #252]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e06f      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564a:	4b3b      	ldr	r3, [pc, #236]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e067      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800565a:	4b37      	ldr	r3, [pc, #220]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 0203 	bic.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4934      	ldr	r1, [pc, #208]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800566c:	f7fc fc82 	bl	8001f74 <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	e00a      	b.n	800568a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005674:	f7fc fc7e 	bl	8001f74 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e04f      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	4b2b      	ldr	r3, [pc, #172]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 020c 	and.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	429a      	cmp	r2, r3
 800569a:	d1eb      	bne.n	8005674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800569c:	4b25      	ldr	r3, [pc, #148]	@ (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d20c      	bcs.n	80056c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b22      	ldr	r3, [pc, #136]	@ (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b20      	ldr	r3, [pc, #128]	@ (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e032      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d0:	4b19      	ldr	r3, [pc, #100]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4916      	ldr	r1, [pc, #88]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ee:	4b12      	ldr	r3, [pc, #72]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	490e      	ldr	r1, [pc, #56]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005702:	f000 f821 	bl	8005748 <HAL_RCC_GetSysClockFreq>
 8005706:	4602      	mov	r2, r0
 8005708:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	091b      	lsrs	r3, r3, #4
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	490a      	ldr	r1, [pc, #40]	@ (800573c <HAL_RCC_ClockConfig+0x1c0>)
 8005714:	5ccb      	ldrb	r3, [r1, r3]
 8005716:	fa22 f303 	lsr.w	r3, r2, r3
 800571a:	4a09      	ldr	r2, [pc, #36]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800571c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800571e:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7fc fbe2 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40023c00 	.word	0x40023c00
 8005738:	40023800 	.word	0x40023800
 800573c:	080096ac 	.word	0x080096ac
 8005740:	20000004 	.word	0x20000004
 8005744:	20000008 	.word	0x20000008

08005748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800574c:	b094      	sub	sp, #80	@ 0x50
 800574e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	647b      	str	r3, [r7, #68]	@ 0x44
 8005754:	2300      	movs	r3, #0
 8005756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005758:	2300      	movs	r3, #0
 800575a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005760:	4b79      	ldr	r3, [pc, #484]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 030c 	and.w	r3, r3, #12
 8005768:	2b08      	cmp	r3, #8
 800576a:	d00d      	beq.n	8005788 <HAL_RCC_GetSysClockFreq+0x40>
 800576c:	2b08      	cmp	r3, #8
 800576e:	f200 80e1 	bhi.w	8005934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0x34>
 8005776:	2b04      	cmp	r3, #4
 8005778:	d003      	beq.n	8005782 <HAL_RCC_GetSysClockFreq+0x3a>
 800577a:	e0db      	b.n	8005934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800577c:	4b73      	ldr	r3, [pc, #460]	@ (800594c <HAL_RCC_GetSysClockFreq+0x204>)
 800577e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005780:	e0db      	b.n	800593a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005782:	4b73      	ldr	r3, [pc, #460]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x208>)
 8005784:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005786:	e0d8      	b.n	800593a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005788:	4b6f      	ldr	r3, [pc, #444]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005790:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005792:	4b6d      	ldr	r3, [pc, #436]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d063      	beq.n	8005866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579e:	4b6a      	ldr	r3, [pc, #424]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	099b      	lsrs	r3, r3, #6
 80057a4:	2200      	movs	r2, #0
 80057a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057b2:	2300      	movs	r3, #0
 80057b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057ba:	4622      	mov	r2, r4
 80057bc:	462b      	mov	r3, r5
 80057be:	f04f 0000 	mov.w	r0, #0
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	0159      	lsls	r1, r3, #5
 80057c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057cc:	0150      	lsls	r0, r2, #5
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4621      	mov	r1, r4
 80057d4:	1a51      	subs	r1, r2, r1
 80057d6:	6139      	str	r1, [r7, #16]
 80057d8:	4629      	mov	r1, r5
 80057da:	eb63 0301 	sbc.w	r3, r3, r1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057ec:	4659      	mov	r1, fp
 80057ee:	018b      	lsls	r3, r1, #6
 80057f0:	4651      	mov	r1, sl
 80057f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057f6:	4651      	mov	r1, sl
 80057f8:	018a      	lsls	r2, r1, #6
 80057fa:	4651      	mov	r1, sl
 80057fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005800:	4659      	mov	r1, fp
 8005802:	eb63 0901 	sbc.w	r9, r3, r1
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800581a:	4690      	mov	r8, r2
 800581c:	4699      	mov	r9, r3
 800581e:	4623      	mov	r3, r4
 8005820:	eb18 0303 	adds.w	r3, r8, r3
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	462b      	mov	r3, r5
 8005828:	eb49 0303 	adc.w	r3, r9, r3
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800583a:	4629      	mov	r1, r5
 800583c:	024b      	lsls	r3, r1, #9
 800583e:	4621      	mov	r1, r4
 8005840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005844:	4621      	mov	r1, r4
 8005846:	024a      	lsls	r2, r1, #9
 8005848:	4610      	mov	r0, r2
 800584a:	4619      	mov	r1, r3
 800584c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800584e:	2200      	movs	r2, #0
 8005850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005858:	f7fb f9a6 	bl	8000ba8 <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4613      	mov	r3, r2
 8005862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005864:	e058      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005866:	4b38      	ldr	r3, [pc, #224]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	2200      	movs	r2, #0
 800586e:	4618      	mov	r0, r3
 8005870:	4611      	mov	r1, r2
 8005872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005876:	623b      	str	r3, [r7, #32]
 8005878:	2300      	movs	r3, #0
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
 800587c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005880:	4642      	mov	r2, r8
 8005882:	464b      	mov	r3, r9
 8005884:	f04f 0000 	mov.w	r0, #0
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	0159      	lsls	r1, r3, #5
 800588e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005892:	0150      	lsls	r0, r2, #5
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4641      	mov	r1, r8
 800589a:	ebb2 0a01 	subs.w	sl, r2, r1
 800589e:	4649      	mov	r1, r9
 80058a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058b8:	ebb2 040a 	subs.w	r4, r2, sl
 80058bc:	eb63 050b 	sbc.w	r5, r3, fp
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	00eb      	lsls	r3, r5, #3
 80058ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ce:	00e2      	lsls	r2, r4, #3
 80058d0:	4614      	mov	r4, r2
 80058d2:	461d      	mov	r5, r3
 80058d4:	4643      	mov	r3, r8
 80058d6:	18e3      	adds	r3, r4, r3
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	464b      	mov	r3, r9
 80058dc:	eb45 0303 	adc.w	r3, r5, r3
 80058e0:	607b      	str	r3, [r7, #4]
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058ee:	4629      	mov	r1, r5
 80058f0:	028b      	lsls	r3, r1, #10
 80058f2:	4621      	mov	r1, r4
 80058f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058f8:	4621      	mov	r1, r4
 80058fa:	028a      	lsls	r2, r1, #10
 80058fc:	4610      	mov	r0, r2
 80058fe:	4619      	mov	r1, r3
 8005900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005902:	2200      	movs	r2, #0
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	61fa      	str	r2, [r7, #28]
 8005908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800590c:	f7fb f94c 	bl	8000ba8 <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4613      	mov	r3, r2
 8005916:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005918:	4b0b      	ldr	r3, [pc, #44]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	3301      	adds	r3, #1
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800592a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005932:	e002      	b.n	800593a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005934:	4b05      	ldr	r3, [pc, #20]	@ (800594c <HAL_RCC_GetSysClockFreq+0x204>)
 8005936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800593a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800593c:	4618      	mov	r0, r3
 800593e:	3750      	adds	r7, #80	@ 0x50
 8005940:	46bd      	mov	sp, r7
 8005942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800
 800594c:	00f42400 	.word	0x00f42400
 8005950:	007a1200 	.word	0x007a1200

08005954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005958:	4b03      	ldr	r3, [pc, #12]	@ (8005968 <HAL_RCC_GetHCLKFreq+0x14>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000004 	.word	0x20000004

0800596c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005970:	f7ff fff0 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 8005974:	4602      	mov	r2, r0
 8005976:	4b05      	ldr	r3, [pc, #20]	@ (800598c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0a9b      	lsrs	r3, r3, #10
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4903      	ldr	r1, [pc, #12]	@ (8005990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005982:	5ccb      	ldrb	r3, [r1, r3]
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005988:	4618      	mov	r0, r3
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40023800 	.word	0x40023800
 8005990:	080096bc 	.word	0x080096bc

08005994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005998:	f7ff ffdc 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 800599c:	4602      	mov	r2, r0
 800599e:	4b05      	ldr	r3, [pc, #20]	@ (80059b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	0b5b      	lsrs	r3, r3, #13
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	4903      	ldr	r1, [pc, #12]	@ (80059b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059aa:	5ccb      	ldrb	r3, [r1, r3]
 80059ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40023800 	.word	0x40023800
 80059b8:	080096bc 	.word	0x080096bc

080059bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e042      	b.n	8005a54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fc f9e6 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2224      	movs	r2, #36	@ 0x24
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fd69 	bl	80064d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	@ 0x28
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d175      	bne.n	8005b68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_UART_Transmit+0x2c>
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e06e      	b.n	8005b6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2221      	movs	r2, #33	@ 0x21
 8005a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a9a:	f7fc fa6b 	bl	8001f74 <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	88fa      	ldrh	r2, [r7, #6]
 8005aaa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab4:	d108      	bne.n	8005ac8 <HAL_UART_Transmit+0x6c>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	e003      	b.n	8005ad0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ad0:	e02e      	b.n	8005b30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2180      	movs	r1, #128	@ 0x80
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fb05 	bl	80060ec <UART_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e03a      	b.n	8005b6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e007      	b.n	8005b22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	781a      	ldrb	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1cb      	bne.n	8005ad2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2200      	movs	r2, #0
 8005b42:	2140      	movs	r1, #64	@ 0x40
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fad1 	bl	80060ec <UART_WaitOnFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e006      	b.n	8005b6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e000      	b.n	8005b6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b68:	2302      	movs	r3, #2
  }
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b0ba      	sub	sp, #232	@ 0xe8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10f      	bne.n	8005bda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <HAL_UART_IRQHandler+0x66>
 8005bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fbc2 	bl	800635c <UART_Receive_IT>
      return;
 8005bd8:	e25b      	b.n	8006092 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 80de 	beq.w	8005da0 <HAL_UART_IRQHandler+0x22c>
 8005be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 80d1 	beq.w	8005da0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <HAL_UART_IRQHandler+0xae>
 8005c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1a:	f043 0201 	orr.w	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <HAL_UART_IRQHandler+0xd2>
 8005c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3e:	f043 0202 	orr.w	r2, r3, #2
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <HAL_UART_IRQHandler+0xf6>
 8005c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c62:	f043 0204 	orr.w	r2, r3, #4
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d011      	beq.n	8005c9a <HAL_UART_IRQHandler+0x126>
 8005c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d105      	bne.n	8005c8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c92:	f043 0208 	orr.w	r2, r3, #8
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 81f2 	beq.w	8006088 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x14e>
 8005cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fb4d 	bl	800635c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ccc:	2b40      	cmp	r3, #64	@ 0x40
 8005cce:	bf0c      	ite	eq
 8005cd0:	2301      	moveq	r3, #1
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <HAL_UART_IRQHandler+0x17a>
 8005ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d04f      	beq.n	8005d8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa55 	bl	800619e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfe:	2b40      	cmp	r3, #64	@ 0x40
 8005d00:	d141      	bne.n	8005d86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3314      	adds	r3, #20
 8005d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3314      	adds	r3, #20
 8005d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1d9      	bne.n	8005d02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d013      	beq.n	8005d7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f54 <HAL_UART_IRQHandler+0x3e0>)
 8005d5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fc fab7 	bl	80022d6 <HAL_DMA_Abort_IT>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d016      	beq.n	8005d9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	e00e      	b.n	8005d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f99e 	bl	80060c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d84:	e00a      	b.n	8005d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f99a 	bl	80060c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	e006      	b.n	8005d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f996 	bl	80060c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d9a:	e175      	b.n	8006088 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	bf00      	nop
    return;
 8005d9e:	e173      	b.n	8006088 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	f040 814f 	bne.w	8006048 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 8148 	beq.w	8006048 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8141 	beq.w	8006048 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de6:	2b40      	cmp	r3, #64	@ 0x40
 8005de8:	f040 80b6 	bne.w	8005f58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005df8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8145 	beq.w	800608c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	f080 813e 	bcs.w	800608c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e22:	f000 8088 	beq.w	8005f36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1d9      	bne.n	8005e26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3314      	adds	r3, #20
 8005e78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3314      	adds	r3, #20
 8005e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e1      	bne.n	8005e72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3314      	adds	r3, #20
 8005eb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3314      	adds	r3, #20
 8005ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ed8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e3      	bne.n	8005eae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f06:	f023 0310 	bic.w	r3, r3, #16
 8005f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e3      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fc f960 	bl	80021f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f8c1 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f52:	e09b      	b.n	800608c <HAL_UART_IRQHandler+0x518>
 8005f54:	08006265 	.word	0x08006265
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 808e 	beq.w	8006090 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8089 	beq.w	8006090 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005fa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e3      	bne.n	8005f7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3314      	adds	r3, #20
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	f023 0301 	bic.w	r3, r3, #1
 8005fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3314      	adds	r3, #20
 8005fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fda:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e3      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	60fb      	str	r3, [r7, #12]
   return(result);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0310 	bic.w	r3, r3, #16
 8006012:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	330c      	adds	r3, #12
 800601c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006020:	61fa      	str	r2, [r7, #28]
 8006022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	69b9      	ldr	r1, [r7, #24]
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	617b      	str	r3, [r7, #20]
   return(result);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e3      	bne.n	8005ffc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800603a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f847 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006046:	e023      	b.n	8006090 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <HAL_UART_IRQHandler+0x4f4>
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f913 	bl	800628c <UART_Transmit_IT>
    return;
 8006066:	e014      	b.n	8006092 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00e      	beq.n	8006092 <HAL_UART_IRQHandler+0x51e>
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f953 	bl	800632c <UART_EndTransmit_IT>
    return;
 8006086:	e004      	b.n	8006092 <HAL_UART_IRQHandler+0x51e>
    return;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <HAL_UART_IRQHandler+0x51e>
      return;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <HAL_UART_IRQHandler+0x51e>
      return;
 8006090:	bf00      	nop
  }
}
 8006092:	37e8      	adds	r7, #232	@ 0xe8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	4613      	mov	r3, r2
 80060fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fc:	e03b      	b.n	8006176 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d037      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006106:	f7fb ff35 	bl	8001f74 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	6a3a      	ldr	r2, [r7, #32]
 8006112:	429a      	cmp	r2, r3
 8006114:	d302      	bcc.n	800611c <UART_WaitOnFlagUntilTimeout+0x30>
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e03a      	b.n	8006196 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d023      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0x8a>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b80      	cmp	r3, #128	@ 0x80
 8006132:	d020      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	d01d      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b08      	cmp	r3, #8
 8006146:	d116      	bne.n	8006176 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f81d 	bl	800619e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2208      	movs	r2, #8
 8006168:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e00f      	b.n	8006196 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4013      	ands	r3, r2
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	bf0c      	ite	eq
 8006186:	2301      	moveq	r3, #1
 8006188:	2300      	movne	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	429a      	cmp	r2, r3
 8006192:	d0b4      	beq.n	80060fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800619e:	b480      	push	{r7}
 80061a0:	b095      	sub	sp, #84	@ 0x54
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e5      	bne.n	80061a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3314      	adds	r3, #20
 80061e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3314      	adds	r3, #20
 80061f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e5      	bne.n	80061da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006212:	2b01      	cmp	r3, #1
 8006214:	d119      	bne.n	800624a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	60bb      	str	r3, [r7, #8]
   return(result);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f023 0310 	bic.w	r3, r3, #16
 800622c:	647b      	str	r3, [r7, #68]	@ 0x44
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006236:	61ba      	str	r2, [r7, #24]
 8006238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6979      	ldr	r1, [r7, #20]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	613b      	str	r3, [r7, #16]
   return(result);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006258:	bf00      	nop
 800625a:	3754      	adds	r7, #84	@ 0x54
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006270:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7ff ff1e 	bl	80060c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b21      	cmp	r3, #33	@ 0x21
 800629e:	d13e      	bne.n	800631e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a8:	d114      	bne.n	80062d4 <UART_Transmit_IT+0x48>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d110      	bne.n	80062d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	1c9a      	adds	r2, r3, #2
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	621a      	str	r2, [r3, #32]
 80062d2:	e008      	b.n	80062e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	1c59      	adds	r1, r3, #1
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6211      	str	r1, [r2, #32]
 80062de:	781a      	ldrb	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4619      	mov	r1, r3
 80062f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10f      	bne.n	800631a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006308:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006318:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	e000      	b.n	8006320 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800631e:	2302      	movs	r3, #2
  }
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006342:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff fea3 	bl	8006098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08c      	sub	sp, #48	@ 0x30
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b22      	cmp	r3, #34	@ 0x22
 800636e:	f040 80ae 	bne.w	80064ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800637a:	d117      	bne.n	80063ac <UART_Receive_IT+0x50>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d113      	bne.n	80063ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006384:	2300      	movs	r3, #0
 8006386:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639a:	b29a      	uxth	r2, r3
 800639c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a4:	1c9a      	adds	r2, r3, #2
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80063aa:	e026      	b.n	80063fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063be:	d007      	beq.n	80063d0 <UART_Receive_IT+0x74>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <UART_Receive_IT+0x82>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d106      	bne.n	80063de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e008      	b.n	80063f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29b      	uxth	r3, r3
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4619      	mov	r1, r3
 8006408:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800640a:	2b00      	cmp	r3, #0
 800640c:	d15d      	bne.n	80064ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0220 	bic.w	r2, r2, #32
 800641c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800642c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006450:	2b01      	cmp	r3, #1
 8006452:	d135      	bne.n	80064c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	613b      	str	r3, [r7, #16]
   return(result);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f023 0310 	bic.w	r3, r3, #16
 8006470:	627b      	str	r3, [r7, #36]	@ 0x24
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800647a:	623a      	str	r2, [r7, #32]
 800647c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	69f9      	ldr	r1, [r7, #28]
 8006480:	6a3a      	ldr	r2, [r7, #32]
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	61bb      	str	r3, [r7, #24]
   return(result);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b10      	cmp	r3, #16
 800649a:	d10a      	bne.n	80064b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff fe0b 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
 80064be:	e002      	b.n	80064c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fdf3 	bl	80060ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e002      	b.n	80064d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e000      	b.n	80064d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
  }
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3730      	adds	r7, #48	@ 0x30
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064dc:	b0c0      	sub	sp, #256	@ 0x100
 80064de:	af00      	add	r7, sp, #0
 80064e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f4:	68d9      	ldr	r1, [r3, #12]
 80064f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	ea40 0301 	orr.w	r3, r0, r1
 8006500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	431a      	orrs	r2, r3
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	431a      	orrs	r2, r3
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006530:	f021 010c 	bic.w	r1, r1, #12
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800653e:	430b      	orrs	r3, r1
 8006540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800654e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006552:	6999      	ldr	r1, [r3, #24]
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	ea40 0301 	orr.w	r3, r0, r1
 800655e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b8f      	ldr	r3, [pc, #572]	@ (80067a4 <UART_SetConfig+0x2cc>)
 8006568:	429a      	cmp	r2, r3
 800656a:	d005      	beq.n	8006578 <UART_SetConfig+0xa0>
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4b8d      	ldr	r3, [pc, #564]	@ (80067a8 <UART_SetConfig+0x2d0>)
 8006574:	429a      	cmp	r2, r3
 8006576:	d104      	bne.n	8006582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006578:	f7ff fa0c 	bl	8005994 <HAL_RCC_GetPCLK2Freq>
 800657c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006580:	e003      	b.n	800658a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006582:	f7ff f9f3 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8006586:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006594:	f040 810c 	bne.w	80067b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800659c:	2200      	movs	r2, #0
 800659e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065aa:	4622      	mov	r2, r4
 80065ac:	462b      	mov	r3, r5
 80065ae:	1891      	adds	r1, r2, r2
 80065b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065b2:	415b      	adcs	r3, r3
 80065b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065ba:	4621      	mov	r1, r4
 80065bc:	eb12 0801 	adds.w	r8, r2, r1
 80065c0:	4629      	mov	r1, r5
 80065c2:	eb43 0901 	adc.w	r9, r3, r1
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065da:	4690      	mov	r8, r2
 80065dc:	4699      	mov	r9, r3
 80065de:	4623      	mov	r3, r4
 80065e0:	eb18 0303 	adds.w	r3, r8, r3
 80065e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065e8:	462b      	mov	r3, r5
 80065ea:	eb49 0303 	adc.w	r3, r9, r3
 80065ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006606:	460b      	mov	r3, r1
 8006608:	18db      	adds	r3, r3, r3
 800660a:	653b      	str	r3, [r7, #80]	@ 0x50
 800660c:	4613      	mov	r3, r2
 800660e:	eb42 0303 	adc.w	r3, r2, r3
 8006612:	657b      	str	r3, [r7, #84]	@ 0x54
 8006614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800661c:	f7fa fac4 	bl	8000ba8 <__aeabi_uldivmod>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4b61      	ldr	r3, [pc, #388]	@ (80067ac <UART_SetConfig+0x2d4>)
 8006626:	fba3 2302 	umull	r2, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	011c      	lsls	r4, r3, #4
 800662e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006632:	2200      	movs	r2, #0
 8006634:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006638:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800663c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006640:	4642      	mov	r2, r8
 8006642:	464b      	mov	r3, r9
 8006644:	1891      	adds	r1, r2, r2
 8006646:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006648:	415b      	adcs	r3, r3
 800664a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800664c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006650:	4641      	mov	r1, r8
 8006652:	eb12 0a01 	adds.w	sl, r2, r1
 8006656:	4649      	mov	r1, r9
 8006658:	eb43 0b01 	adc.w	fp, r3, r1
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800666c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006670:	4692      	mov	sl, r2
 8006672:	469b      	mov	fp, r3
 8006674:	4643      	mov	r3, r8
 8006676:	eb1a 0303 	adds.w	r3, sl, r3
 800667a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800667e:	464b      	mov	r3, r9
 8006680:	eb4b 0303 	adc.w	r3, fp, r3
 8006684:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006694:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800669c:	460b      	mov	r3, r1
 800669e:	18db      	adds	r3, r3, r3
 80066a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80066a2:	4613      	mov	r3, r2
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80066aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066b2:	f7fa fa79 	bl	8000ba8 <__aeabi_uldivmod>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4611      	mov	r1, r2
 80066bc:	4b3b      	ldr	r3, [pc, #236]	@ (80067ac <UART_SetConfig+0x2d4>)
 80066be:	fba3 2301 	umull	r2, r3, r3, r1
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	2264      	movs	r2, #100	@ 0x64
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	1acb      	subs	r3, r1, r3
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066d2:	4b36      	ldr	r3, [pc, #216]	@ (80067ac <UART_SetConfig+0x2d4>)
 80066d4:	fba3 2302 	umull	r2, r3, r3, r2
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066e0:	441c      	add	r4, r3
 80066e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80066f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	1891      	adds	r1, r2, r2
 80066fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066fc:	415b      	adcs	r3, r3
 80066fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006704:	4641      	mov	r1, r8
 8006706:	1851      	adds	r1, r2, r1
 8006708:	6339      	str	r1, [r7, #48]	@ 0x30
 800670a:	4649      	mov	r1, r9
 800670c:	414b      	adcs	r3, r1
 800670e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800671c:	4659      	mov	r1, fp
 800671e:	00cb      	lsls	r3, r1, #3
 8006720:	4651      	mov	r1, sl
 8006722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006726:	4651      	mov	r1, sl
 8006728:	00ca      	lsls	r2, r1, #3
 800672a:	4610      	mov	r0, r2
 800672c:	4619      	mov	r1, r3
 800672e:	4603      	mov	r3, r0
 8006730:	4642      	mov	r2, r8
 8006732:	189b      	adds	r3, r3, r2
 8006734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006738:	464b      	mov	r3, r9
 800673a:	460a      	mov	r2, r1
 800673c:	eb42 0303 	adc.w	r3, r2, r3
 8006740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006750:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006758:	460b      	mov	r3, r1
 800675a:	18db      	adds	r3, r3, r3
 800675c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800675e:	4613      	mov	r3, r2
 8006760:	eb42 0303 	adc.w	r3, r2, r3
 8006764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800676a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800676e:	f7fa fa1b 	bl	8000ba8 <__aeabi_uldivmod>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4b0d      	ldr	r3, [pc, #52]	@ (80067ac <UART_SetConfig+0x2d4>)
 8006778:	fba3 1302 	umull	r1, r3, r3, r2
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	2164      	movs	r1, #100	@ 0x64
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	3332      	adds	r3, #50	@ 0x32
 800678a:	4a08      	ldr	r2, [pc, #32]	@ (80067ac <UART_SetConfig+0x2d4>)
 800678c:	fba2 2303 	umull	r2, r3, r2, r3
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	f003 0207 	and.w	r2, r3, #7
 8006796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4422      	add	r2, r4
 800679e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067a0:	e106      	b.n	80069b0 <UART_SetConfig+0x4d8>
 80067a2:	bf00      	nop
 80067a4:	40011000 	.word	0x40011000
 80067a8:	40011400 	.word	0x40011400
 80067ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067c2:	4642      	mov	r2, r8
 80067c4:	464b      	mov	r3, r9
 80067c6:	1891      	adds	r1, r2, r2
 80067c8:	6239      	str	r1, [r7, #32]
 80067ca:	415b      	adcs	r3, r3
 80067cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067d2:	4641      	mov	r1, r8
 80067d4:	1854      	adds	r4, r2, r1
 80067d6:	4649      	mov	r1, r9
 80067d8:	eb43 0501 	adc.w	r5, r3, r1
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	00eb      	lsls	r3, r5, #3
 80067e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ea:	00e2      	lsls	r2, r4, #3
 80067ec:	4614      	mov	r4, r2
 80067ee:	461d      	mov	r5, r3
 80067f0:	4643      	mov	r3, r8
 80067f2:	18e3      	adds	r3, r4, r3
 80067f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067f8:	464b      	mov	r3, r9
 80067fa:	eb45 0303 	adc.w	r3, r5, r3
 80067fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800680e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800681e:	4629      	mov	r1, r5
 8006820:	008b      	lsls	r3, r1, #2
 8006822:	4621      	mov	r1, r4
 8006824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006828:	4621      	mov	r1, r4
 800682a:	008a      	lsls	r2, r1, #2
 800682c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006830:	f7fa f9ba 	bl	8000ba8 <__aeabi_uldivmod>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4b60      	ldr	r3, [pc, #384]	@ (80069bc <UART_SetConfig+0x4e4>)
 800683a:	fba3 2302 	umull	r2, r3, r3, r2
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	011c      	lsls	r4, r3, #4
 8006842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006846:	2200      	movs	r2, #0
 8006848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800684c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006854:	4642      	mov	r2, r8
 8006856:	464b      	mov	r3, r9
 8006858:	1891      	adds	r1, r2, r2
 800685a:	61b9      	str	r1, [r7, #24]
 800685c:	415b      	adcs	r3, r3
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006864:	4641      	mov	r1, r8
 8006866:	1851      	adds	r1, r2, r1
 8006868:	6139      	str	r1, [r7, #16]
 800686a:	4649      	mov	r1, r9
 800686c:	414b      	adcs	r3, r1
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800687c:	4659      	mov	r1, fp
 800687e:	00cb      	lsls	r3, r1, #3
 8006880:	4651      	mov	r1, sl
 8006882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006886:	4651      	mov	r1, sl
 8006888:	00ca      	lsls	r2, r1, #3
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	4603      	mov	r3, r0
 8006890:	4642      	mov	r2, r8
 8006892:	189b      	adds	r3, r3, r2
 8006894:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006898:	464b      	mov	r3, r9
 800689a:	460a      	mov	r2, r1
 800689c:	eb42 0303 	adc.w	r3, r2, r3
 80068a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068bc:	4649      	mov	r1, r9
 80068be:	008b      	lsls	r3, r1, #2
 80068c0:	4641      	mov	r1, r8
 80068c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c6:	4641      	mov	r1, r8
 80068c8:	008a      	lsls	r2, r1, #2
 80068ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068ce:	f7fa f96b 	bl	8000ba8 <__aeabi_uldivmod>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	4b38      	ldr	r3, [pc, #224]	@ (80069bc <UART_SetConfig+0x4e4>)
 80068da:	fba3 2301 	umull	r2, r3, r3, r1
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	2264      	movs	r2, #100	@ 0x64
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	1acb      	subs	r3, r1, r3
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	3332      	adds	r3, #50	@ 0x32
 80068ec:	4a33      	ldr	r2, [pc, #204]	@ (80069bc <UART_SetConfig+0x4e4>)
 80068ee:	fba2 2303 	umull	r2, r3, r2, r3
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068f8:	441c      	add	r4, r3
 80068fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068fe:	2200      	movs	r2, #0
 8006900:	673b      	str	r3, [r7, #112]	@ 0x70
 8006902:	677a      	str	r2, [r7, #116]	@ 0x74
 8006904:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006908:	4642      	mov	r2, r8
 800690a:	464b      	mov	r3, r9
 800690c:	1891      	adds	r1, r2, r2
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	415b      	adcs	r3, r3
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006918:	4641      	mov	r1, r8
 800691a:	1851      	adds	r1, r2, r1
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	4649      	mov	r1, r9
 8006920:	414b      	adcs	r3, r1
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006930:	4659      	mov	r1, fp
 8006932:	00cb      	lsls	r3, r1, #3
 8006934:	4651      	mov	r1, sl
 8006936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800693a:	4651      	mov	r1, sl
 800693c:	00ca      	lsls	r2, r1, #3
 800693e:	4610      	mov	r0, r2
 8006940:	4619      	mov	r1, r3
 8006942:	4603      	mov	r3, r0
 8006944:	4642      	mov	r2, r8
 8006946:	189b      	adds	r3, r3, r2
 8006948:	66bb      	str	r3, [r7, #104]	@ 0x68
 800694a:	464b      	mov	r3, r9
 800694c:	460a      	mov	r2, r1
 800694e:	eb42 0303 	adc.w	r3, r2, r3
 8006952:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	663b      	str	r3, [r7, #96]	@ 0x60
 800695e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800696c:	4649      	mov	r1, r9
 800696e:	008b      	lsls	r3, r1, #2
 8006970:	4641      	mov	r1, r8
 8006972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006976:	4641      	mov	r1, r8
 8006978:	008a      	lsls	r2, r1, #2
 800697a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800697e:	f7fa f913 	bl	8000ba8 <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4b0d      	ldr	r3, [pc, #52]	@ (80069bc <UART_SetConfig+0x4e4>)
 8006988:	fba3 1302 	umull	r1, r3, r3, r2
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	2164      	movs	r1, #100	@ 0x64
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	3332      	adds	r3, #50	@ 0x32
 800699a:	4a08      	ldr	r2, [pc, #32]	@ (80069bc <UART_SetConfig+0x4e4>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	f003 020f 	and.w	r2, r3, #15
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4422      	add	r2, r4
 80069ae:	609a      	str	r2, [r3, #8]
}
 80069b0:	bf00      	nop
 80069b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069b6:	46bd      	mov	sp, r7
 80069b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069bc:	51eb851f 	.word	0x51eb851f

080069c0 <__cvt>:
 80069c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c4:	ec57 6b10 	vmov	r6, r7, d0
 80069c8:	2f00      	cmp	r7, #0
 80069ca:	460c      	mov	r4, r1
 80069cc:	4619      	mov	r1, r3
 80069ce:	463b      	mov	r3, r7
 80069d0:	bfbb      	ittet	lt
 80069d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80069d6:	461f      	movlt	r7, r3
 80069d8:	2300      	movge	r3, #0
 80069da:	232d      	movlt	r3, #45	@ 0x2d
 80069dc:	700b      	strb	r3, [r1, #0]
 80069de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80069e4:	4691      	mov	r9, r2
 80069e6:	f023 0820 	bic.w	r8, r3, #32
 80069ea:	bfbc      	itt	lt
 80069ec:	4632      	movlt	r2, r6
 80069ee:	4616      	movlt	r6, r2
 80069f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069f4:	d005      	beq.n	8006a02 <__cvt+0x42>
 80069f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069fa:	d100      	bne.n	80069fe <__cvt+0x3e>
 80069fc:	3401      	adds	r4, #1
 80069fe:	2102      	movs	r1, #2
 8006a00:	e000      	b.n	8006a04 <__cvt+0x44>
 8006a02:	2103      	movs	r1, #3
 8006a04:	ab03      	add	r3, sp, #12
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	ab02      	add	r3, sp, #8
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	ec47 6b10 	vmov	d0, r6, r7
 8006a10:	4653      	mov	r3, sl
 8006a12:	4622      	mov	r2, r4
 8006a14:	f000 fe5c 	bl	80076d0 <_dtoa_r>
 8006a18:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	d119      	bne.n	8006a54 <__cvt+0x94>
 8006a20:	f019 0f01 	tst.w	r9, #1
 8006a24:	d00e      	beq.n	8006a44 <__cvt+0x84>
 8006a26:	eb00 0904 	add.w	r9, r0, r4
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4630      	mov	r0, r6
 8006a30:	4639      	mov	r1, r7
 8006a32:	f7fa f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a36:	b108      	cbz	r0, 8006a3c <__cvt+0x7c>
 8006a38:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a3c:	2230      	movs	r2, #48	@ 0x30
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	454b      	cmp	r3, r9
 8006a42:	d31e      	bcc.n	8006a82 <__cvt+0xc2>
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a48:	1b5b      	subs	r3, r3, r5
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	b004      	add	sp, #16
 8006a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a58:	eb00 0904 	add.w	r9, r0, r4
 8006a5c:	d1e5      	bne.n	8006a2a <__cvt+0x6a>
 8006a5e:	7803      	ldrb	r3, [r0, #0]
 8006a60:	2b30      	cmp	r3, #48	@ 0x30
 8006a62:	d10a      	bne.n	8006a7a <__cvt+0xba>
 8006a64:	2200      	movs	r2, #0
 8006a66:	2300      	movs	r3, #0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	f7fa f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a70:	b918      	cbnz	r0, 8006a7a <__cvt+0xba>
 8006a72:	f1c4 0401 	rsb	r4, r4, #1
 8006a76:	f8ca 4000 	str.w	r4, [sl]
 8006a7a:	f8da 3000 	ldr.w	r3, [sl]
 8006a7e:	4499      	add	r9, r3
 8006a80:	e7d3      	b.n	8006a2a <__cvt+0x6a>
 8006a82:	1c59      	adds	r1, r3, #1
 8006a84:	9103      	str	r1, [sp, #12]
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	e7d9      	b.n	8006a3e <__cvt+0x7e>

08006a8a <__exponent>:
 8006a8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	bfba      	itte	lt
 8006a90:	4249      	neglt	r1, r1
 8006a92:	232d      	movlt	r3, #45	@ 0x2d
 8006a94:	232b      	movge	r3, #43	@ 0x2b
 8006a96:	2909      	cmp	r1, #9
 8006a98:	7002      	strb	r2, [r0, #0]
 8006a9a:	7043      	strb	r3, [r0, #1]
 8006a9c:	dd29      	ble.n	8006af2 <__exponent+0x68>
 8006a9e:	f10d 0307 	add.w	r3, sp, #7
 8006aa2:	461d      	mov	r5, r3
 8006aa4:	270a      	movs	r7, #10
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006aac:	fb07 1416 	mls	r4, r7, r6, r1
 8006ab0:	3430      	adds	r4, #48	@ 0x30
 8006ab2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	2c63      	cmp	r4, #99	@ 0x63
 8006aba:	f103 33ff 	add.w	r3, r3, #4294967295
 8006abe:	4631      	mov	r1, r6
 8006ac0:	dcf1      	bgt.n	8006aa6 <__exponent+0x1c>
 8006ac2:	3130      	adds	r1, #48	@ 0x30
 8006ac4:	1e94      	subs	r4, r2, #2
 8006ac6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006aca:	1c41      	adds	r1, r0, #1
 8006acc:	4623      	mov	r3, r4
 8006ace:	42ab      	cmp	r3, r5
 8006ad0:	d30a      	bcc.n	8006ae8 <__exponent+0x5e>
 8006ad2:	f10d 0309 	add.w	r3, sp, #9
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	42ac      	cmp	r4, r5
 8006ada:	bf88      	it	hi
 8006adc:	2300      	movhi	r3, #0
 8006ade:	3302      	adds	r3, #2
 8006ae0:	4403      	add	r3, r0
 8006ae2:	1a18      	subs	r0, r3, r0
 8006ae4:	b003      	add	sp, #12
 8006ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006aec:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006af0:	e7ed      	b.n	8006ace <__exponent+0x44>
 8006af2:	2330      	movs	r3, #48	@ 0x30
 8006af4:	3130      	adds	r1, #48	@ 0x30
 8006af6:	7083      	strb	r3, [r0, #2]
 8006af8:	70c1      	strb	r1, [r0, #3]
 8006afa:	1d03      	adds	r3, r0, #4
 8006afc:	e7f1      	b.n	8006ae2 <__exponent+0x58>
	...

08006b00 <_printf_float>:
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	b08d      	sub	sp, #52	@ 0x34
 8006b06:	460c      	mov	r4, r1
 8006b08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	461f      	mov	r7, r3
 8006b10:	4605      	mov	r5, r0
 8006b12:	f000 fcdb 	bl	80074cc <_localeconv_r>
 8006b16:	6803      	ldr	r3, [r0, #0]
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7f9 fba8 	bl	8000270 <strlen>
 8006b20:	2300      	movs	r3, #0
 8006b22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b24:	f8d8 3000 	ldr.w	r3, [r8]
 8006b28:	9005      	str	r0, [sp, #20]
 8006b2a:	3307      	adds	r3, #7
 8006b2c:	f023 0307 	bic.w	r3, r3, #7
 8006b30:	f103 0208 	add.w	r2, r3, #8
 8006b34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b38:	f8d4 b000 	ldr.w	fp, [r4]
 8006b3c:	f8c8 2000 	str.w	r2, [r8]
 8006b40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b48:	9307      	str	r3, [sp, #28]
 8006b4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b56:	4b9c      	ldr	r3, [pc, #624]	@ (8006dc8 <_printf_float+0x2c8>)
 8006b58:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5c:	f7f9 ffe6 	bl	8000b2c <__aeabi_dcmpun>
 8006b60:	bb70      	cbnz	r0, 8006bc0 <_printf_float+0xc0>
 8006b62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b66:	4b98      	ldr	r3, [pc, #608]	@ (8006dc8 <_printf_float+0x2c8>)
 8006b68:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6c:	f7f9 ffc0 	bl	8000af0 <__aeabi_dcmple>
 8006b70:	bb30      	cbnz	r0, 8006bc0 <_printf_float+0xc0>
 8006b72:	2200      	movs	r2, #0
 8006b74:	2300      	movs	r3, #0
 8006b76:	4640      	mov	r0, r8
 8006b78:	4649      	mov	r1, r9
 8006b7a:	f7f9 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8006b7e:	b110      	cbz	r0, 8006b86 <_printf_float+0x86>
 8006b80:	232d      	movs	r3, #45	@ 0x2d
 8006b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b86:	4a91      	ldr	r2, [pc, #580]	@ (8006dcc <_printf_float+0x2cc>)
 8006b88:	4b91      	ldr	r3, [pc, #580]	@ (8006dd0 <_printf_float+0x2d0>)
 8006b8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b8e:	bf94      	ite	ls
 8006b90:	4690      	movls	r8, r2
 8006b92:	4698      	movhi	r8, r3
 8006b94:	2303      	movs	r3, #3
 8006b96:	6123      	str	r3, [r4, #16]
 8006b98:	f02b 0304 	bic.w	r3, fp, #4
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	f04f 0900 	mov.w	r9, #0
 8006ba2:	9700      	str	r7, [sp, #0]
 8006ba4:	4633      	mov	r3, r6
 8006ba6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 f9d2 	bl	8006f54 <_printf_common>
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	f040 808d 	bne.w	8006cd0 <_printf_float+0x1d0>
 8006bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bba:	b00d      	add	sp, #52	@ 0x34
 8006bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	f7f9 ffb0 	bl	8000b2c <__aeabi_dcmpun>
 8006bcc:	b140      	cbz	r0, 8006be0 <_printf_float+0xe0>
 8006bce:	464b      	mov	r3, r9
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bfbc      	itt	lt
 8006bd4:	232d      	movlt	r3, #45	@ 0x2d
 8006bd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bda:	4a7e      	ldr	r2, [pc, #504]	@ (8006dd4 <_printf_float+0x2d4>)
 8006bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8006dd8 <_printf_float+0x2d8>)
 8006bde:	e7d4      	b.n	8006b8a <_printf_float+0x8a>
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006be6:	9206      	str	r2, [sp, #24]
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	d13b      	bne.n	8006c64 <_printf_float+0x164>
 8006bec:	2306      	movs	r3, #6
 8006bee:	6063      	str	r3, [r4, #4]
 8006bf0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	9303      	str	r3, [sp, #12]
 8006bfa:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bfc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006c00:	ab09      	add	r3, sp, #36	@ 0x24
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	6861      	ldr	r1, [r4, #4]
 8006c06:	ec49 8b10 	vmov	d0, r8, r9
 8006c0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f7ff fed6 	bl	80069c0 <__cvt>
 8006c14:	9b06      	ldr	r3, [sp, #24]
 8006c16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c18:	2b47      	cmp	r3, #71	@ 0x47
 8006c1a:	4680      	mov	r8, r0
 8006c1c:	d129      	bne.n	8006c72 <_printf_float+0x172>
 8006c1e:	1cc8      	adds	r0, r1, #3
 8006c20:	db02      	blt.n	8006c28 <_printf_float+0x128>
 8006c22:	6863      	ldr	r3, [r4, #4]
 8006c24:	4299      	cmp	r1, r3
 8006c26:	dd41      	ble.n	8006cac <_printf_float+0x1ac>
 8006c28:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c2c:	fa5f fa8a 	uxtb.w	sl, sl
 8006c30:	3901      	subs	r1, #1
 8006c32:	4652      	mov	r2, sl
 8006c34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c38:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c3a:	f7ff ff26 	bl	8006a8a <__exponent>
 8006c3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c40:	1813      	adds	r3, r2, r0
 8006c42:	2a01      	cmp	r2, #1
 8006c44:	4681      	mov	r9, r0
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	dc02      	bgt.n	8006c50 <_printf_float+0x150>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	07d2      	lsls	r2, r2, #31
 8006c4e:	d501      	bpl.n	8006c54 <_printf_float+0x154>
 8006c50:	3301      	adds	r3, #1
 8006c52:	6123      	str	r3, [r4, #16]
 8006c54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0a2      	beq.n	8006ba2 <_printf_float+0xa2>
 8006c5c:	232d      	movs	r3, #45	@ 0x2d
 8006c5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c62:	e79e      	b.n	8006ba2 <_printf_float+0xa2>
 8006c64:	9a06      	ldr	r2, [sp, #24]
 8006c66:	2a47      	cmp	r2, #71	@ 0x47
 8006c68:	d1c2      	bne.n	8006bf0 <_printf_float+0xf0>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1c0      	bne.n	8006bf0 <_printf_float+0xf0>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e7bd      	b.n	8006bee <_printf_float+0xee>
 8006c72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c76:	d9db      	bls.n	8006c30 <_printf_float+0x130>
 8006c78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c7c:	d118      	bne.n	8006cb0 <_printf_float+0x1b0>
 8006c7e:	2900      	cmp	r1, #0
 8006c80:	6863      	ldr	r3, [r4, #4]
 8006c82:	dd0b      	ble.n	8006c9c <_printf_float+0x19c>
 8006c84:	6121      	str	r1, [r4, #16]
 8006c86:	b913      	cbnz	r3, 8006c8e <_printf_float+0x18e>
 8006c88:	6822      	ldr	r2, [r4, #0]
 8006c8a:	07d0      	lsls	r0, r2, #31
 8006c8c:	d502      	bpl.n	8006c94 <_printf_float+0x194>
 8006c8e:	3301      	adds	r3, #1
 8006c90:	440b      	add	r3, r1
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c96:	f04f 0900 	mov.w	r9, #0
 8006c9a:	e7db      	b.n	8006c54 <_printf_float+0x154>
 8006c9c:	b913      	cbnz	r3, 8006ca4 <_printf_float+0x1a4>
 8006c9e:	6822      	ldr	r2, [r4, #0]
 8006ca0:	07d2      	lsls	r2, r2, #31
 8006ca2:	d501      	bpl.n	8006ca8 <_printf_float+0x1a8>
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	e7f4      	b.n	8006c92 <_printf_float+0x192>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e7f2      	b.n	8006c92 <_printf_float+0x192>
 8006cac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006cb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb2:	4299      	cmp	r1, r3
 8006cb4:	db05      	blt.n	8006cc2 <_printf_float+0x1c2>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	6121      	str	r1, [r4, #16]
 8006cba:	07d8      	lsls	r0, r3, #31
 8006cbc:	d5ea      	bpl.n	8006c94 <_printf_float+0x194>
 8006cbe:	1c4b      	adds	r3, r1, #1
 8006cc0:	e7e7      	b.n	8006c92 <_printf_float+0x192>
 8006cc2:	2900      	cmp	r1, #0
 8006cc4:	bfd4      	ite	le
 8006cc6:	f1c1 0202 	rsble	r2, r1, #2
 8006cca:	2201      	movgt	r2, #1
 8006ccc:	4413      	add	r3, r2
 8006cce:	e7e0      	b.n	8006c92 <_printf_float+0x192>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	055a      	lsls	r2, r3, #21
 8006cd4:	d407      	bmi.n	8006ce6 <_printf_float+0x1e6>
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	4642      	mov	r2, r8
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d12b      	bne.n	8006d3c <_printf_float+0x23c>
 8006ce4:	e767      	b.n	8006bb6 <_printf_float+0xb6>
 8006ce6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cea:	f240 80dd 	bls.w	8006ea8 <_printf_float+0x3a8>
 8006cee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f7f9 fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d033      	beq.n	8006d66 <_printf_float+0x266>
 8006cfe:	4a37      	ldr	r2, [pc, #220]	@ (8006ddc <_printf_float+0x2dc>)
 8006d00:	2301      	movs	r3, #1
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	47b8      	blx	r7
 8006d08:	3001      	adds	r0, #1
 8006d0a:	f43f af54 	beq.w	8006bb6 <_printf_float+0xb6>
 8006d0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d12:	4543      	cmp	r3, r8
 8006d14:	db02      	blt.n	8006d1c <_printf_float+0x21c>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	07d8      	lsls	r0, r3, #31
 8006d1a:	d50f      	bpl.n	8006d3c <_printf_float+0x23c>
 8006d1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d20:	4631      	mov	r1, r6
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	f43f af45 	beq.w	8006bb6 <_printf_float+0xb6>
 8006d2c:	f04f 0900 	mov.w	r9, #0
 8006d30:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d34:	f104 0a1a 	add.w	sl, r4, #26
 8006d38:	45c8      	cmp	r8, r9
 8006d3a:	dc09      	bgt.n	8006d50 <_printf_float+0x250>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	079b      	lsls	r3, r3, #30
 8006d40:	f100 8103 	bmi.w	8006f4a <_printf_float+0x44a>
 8006d44:	68e0      	ldr	r0, [r4, #12]
 8006d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d48:	4298      	cmp	r0, r3
 8006d4a:	bfb8      	it	lt
 8006d4c:	4618      	movlt	r0, r3
 8006d4e:	e734      	b.n	8006bba <_printf_float+0xba>
 8006d50:	2301      	movs	r3, #1
 8006d52:	4652      	mov	r2, sl
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f43f af2b 	beq.w	8006bb6 <_printf_float+0xb6>
 8006d60:	f109 0901 	add.w	r9, r9, #1
 8006d64:	e7e8      	b.n	8006d38 <_printf_float+0x238>
 8006d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dc39      	bgt.n	8006de0 <_printf_float+0x2e0>
 8006d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006ddc <_printf_float+0x2dc>)
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4631      	mov	r1, r6
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b8      	blx	r7
 8006d76:	3001      	adds	r0, #1
 8006d78:	f43f af1d 	beq.w	8006bb6 <_printf_float+0xb6>
 8006d7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d80:	ea59 0303 	orrs.w	r3, r9, r3
 8006d84:	d102      	bne.n	8006d8c <_printf_float+0x28c>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	07d9      	lsls	r1, r3, #31
 8006d8a:	d5d7      	bpl.n	8006d3c <_printf_float+0x23c>
 8006d8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f af0d 	beq.w	8006bb6 <_printf_float+0xb6>
 8006d9c:	f04f 0a00 	mov.w	sl, #0
 8006da0:	f104 0b1a 	add.w	fp, r4, #26
 8006da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da6:	425b      	negs	r3, r3
 8006da8:	4553      	cmp	r3, sl
 8006daa:	dc01      	bgt.n	8006db0 <_printf_float+0x2b0>
 8006dac:	464b      	mov	r3, r9
 8006dae:	e793      	b.n	8006cd8 <_printf_float+0x1d8>
 8006db0:	2301      	movs	r3, #1
 8006db2:	465a      	mov	r2, fp
 8006db4:	4631      	mov	r1, r6
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	f43f aefb 	beq.w	8006bb6 <_printf_float+0xb6>
 8006dc0:	f10a 0a01 	add.w	sl, sl, #1
 8006dc4:	e7ee      	b.n	8006da4 <_printf_float+0x2a4>
 8006dc6:	bf00      	nop
 8006dc8:	7fefffff 	.word	0x7fefffff
 8006dcc:	080096c4 	.word	0x080096c4
 8006dd0:	080096c8 	.word	0x080096c8
 8006dd4:	080096cc 	.word	0x080096cc
 8006dd8:	080096d0 	.word	0x080096d0
 8006ddc:	080096d4 	.word	0x080096d4
 8006de0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006de2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006de6:	4553      	cmp	r3, sl
 8006de8:	bfa8      	it	ge
 8006dea:	4653      	movge	r3, sl
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	4699      	mov	r9, r3
 8006df0:	dc36      	bgt.n	8006e60 <_printf_float+0x360>
 8006df2:	f04f 0b00 	mov.w	fp, #0
 8006df6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dfa:	f104 021a 	add.w	r2, r4, #26
 8006dfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e00:	9306      	str	r3, [sp, #24]
 8006e02:	eba3 0309 	sub.w	r3, r3, r9
 8006e06:	455b      	cmp	r3, fp
 8006e08:	dc31      	bgt.n	8006e6e <_printf_float+0x36e>
 8006e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e0c:	459a      	cmp	sl, r3
 8006e0e:	dc3a      	bgt.n	8006e86 <_printf_float+0x386>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	07da      	lsls	r2, r3, #31
 8006e14:	d437      	bmi.n	8006e86 <_printf_float+0x386>
 8006e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e18:	ebaa 0903 	sub.w	r9, sl, r3
 8006e1c:	9b06      	ldr	r3, [sp, #24]
 8006e1e:	ebaa 0303 	sub.w	r3, sl, r3
 8006e22:	4599      	cmp	r9, r3
 8006e24:	bfa8      	it	ge
 8006e26:	4699      	movge	r9, r3
 8006e28:	f1b9 0f00 	cmp.w	r9, #0
 8006e2c:	dc33      	bgt.n	8006e96 <_printf_float+0x396>
 8006e2e:	f04f 0800 	mov.w	r8, #0
 8006e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e36:	f104 0b1a 	add.w	fp, r4, #26
 8006e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8006e40:	eba3 0309 	sub.w	r3, r3, r9
 8006e44:	4543      	cmp	r3, r8
 8006e46:	f77f af79 	ble.w	8006d3c <_printf_float+0x23c>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	465a      	mov	r2, fp
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f aeae 	beq.w	8006bb6 <_printf_float+0xb6>
 8006e5a:	f108 0801 	add.w	r8, r8, #1
 8006e5e:	e7ec      	b.n	8006e3a <_printf_float+0x33a>
 8006e60:	4642      	mov	r2, r8
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d1c2      	bne.n	8006df2 <_printf_float+0x2f2>
 8006e6c:	e6a3      	b.n	8006bb6 <_printf_float+0xb6>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4631      	mov	r1, r6
 8006e72:	4628      	mov	r0, r5
 8006e74:	9206      	str	r2, [sp, #24]
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	f43f ae9c 	beq.w	8006bb6 <_printf_float+0xb6>
 8006e7e:	9a06      	ldr	r2, [sp, #24]
 8006e80:	f10b 0b01 	add.w	fp, fp, #1
 8006e84:	e7bb      	b.n	8006dfe <_printf_float+0x2fe>
 8006e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b8      	blx	r7
 8006e90:	3001      	adds	r0, #1
 8006e92:	d1c0      	bne.n	8006e16 <_printf_float+0x316>
 8006e94:	e68f      	b.n	8006bb6 <_printf_float+0xb6>
 8006e96:	9a06      	ldr	r2, [sp, #24]
 8006e98:	464b      	mov	r3, r9
 8006e9a:	4442      	add	r2, r8
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d1c3      	bne.n	8006e2e <_printf_float+0x32e>
 8006ea6:	e686      	b.n	8006bb6 <_printf_float+0xb6>
 8006ea8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006eac:	f1ba 0f01 	cmp.w	sl, #1
 8006eb0:	dc01      	bgt.n	8006eb6 <_printf_float+0x3b6>
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d536      	bpl.n	8006f24 <_printf_float+0x424>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f43f ae78 	beq.w	8006bb6 <_printf_float+0xb6>
 8006ec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4628      	mov	r0, r5
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f43f ae70 	beq.w	8006bb6 <_printf_float+0xb6>
 8006ed6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006eda:	2200      	movs	r2, #0
 8006edc:	2300      	movs	r3, #0
 8006ede:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ee2:	f7f9 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ee6:	b9c0      	cbnz	r0, 8006f1a <_printf_float+0x41a>
 8006ee8:	4653      	mov	r3, sl
 8006eea:	f108 0201 	add.w	r2, r8, #1
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d10c      	bne.n	8006f12 <_printf_float+0x412>
 8006ef8:	e65d      	b.n	8006bb6 <_printf_float+0xb6>
 8006efa:	2301      	movs	r3, #1
 8006efc:	465a      	mov	r2, fp
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f ae56 	beq.w	8006bb6 <_printf_float+0xb6>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	45d0      	cmp	r8, sl
 8006f10:	dbf3      	blt.n	8006efa <_printf_float+0x3fa>
 8006f12:	464b      	mov	r3, r9
 8006f14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f18:	e6df      	b.n	8006cda <_printf_float+0x1da>
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	f104 0b1a 	add.w	fp, r4, #26
 8006f22:	e7f4      	b.n	8006f0e <_printf_float+0x40e>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4642      	mov	r2, r8
 8006f28:	e7e1      	b.n	8006eee <_printf_float+0x3ee>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	464a      	mov	r2, r9
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	f43f ae3e 	beq.w	8006bb6 <_printf_float+0xb6>
 8006f3a:	f108 0801 	add.w	r8, r8, #1
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f42:	1a5b      	subs	r3, r3, r1
 8006f44:	4543      	cmp	r3, r8
 8006f46:	dcf0      	bgt.n	8006f2a <_printf_float+0x42a>
 8006f48:	e6fc      	b.n	8006d44 <_printf_float+0x244>
 8006f4a:	f04f 0800 	mov.w	r8, #0
 8006f4e:	f104 0919 	add.w	r9, r4, #25
 8006f52:	e7f4      	b.n	8006f3e <_printf_float+0x43e>

08006f54 <_printf_common>:
 8006f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	4616      	mov	r6, r2
 8006f5a:	4698      	mov	r8, r3
 8006f5c:	688a      	ldr	r2, [r1, #8]
 8006f5e:	690b      	ldr	r3, [r1, #16]
 8006f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	bfb8      	it	lt
 8006f68:	4613      	movlt	r3, r2
 8006f6a:	6033      	str	r3, [r6, #0]
 8006f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f70:	4607      	mov	r7, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b10a      	cbz	r2, 8006f7a <_printf_common+0x26>
 8006f76:	3301      	adds	r3, #1
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	0699      	lsls	r1, r3, #26
 8006f7e:	bf42      	ittt	mi
 8006f80:	6833      	ldrmi	r3, [r6, #0]
 8006f82:	3302      	addmi	r3, #2
 8006f84:	6033      	strmi	r3, [r6, #0]
 8006f86:	6825      	ldr	r5, [r4, #0]
 8006f88:	f015 0506 	ands.w	r5, r5, #6
 8006f8c:	d106      	bne.n	8006f9c <_printf_common+0x48>
 8006f8e:	f104 0a19 	add.w	sl, r4, #25
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	6832      	ldr	r2, [r6, #0]
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dc26      	bgt.n	8006fea <_printf_common+0x96>
 8006f9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fa0:	6822      	ldr	r2, [r4, #0]
 8006fa2:	3b00      	subs	r3, #0
 8006fa4:	bf18      	it	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	0692      	lsls	r2, r2, #26
 8006faa:	d42b      	bmi.n	8007004 <_printf_common+0xb0>
 8006fac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	47c8      	blx	r9
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d01e      	beq.n	8006ff8 <_printf_common+0xa4>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	6922      	ldr	r2, [r4, #16]
 8006fbe:	f003 0306 	and.w	r3, r3, #6
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	bf02      	ittt	eq
 8006fc6:	68e5      	ldreq	r5, [r4, #12]
 8006fc8:	6833      	ldreq	r3, [r6, #0]
 8006fca:	1aed      	subeq	r5, r5, r3
 8006fcc:	68a3      	ldr	r3, [r4, #8]
 8006fce:	bf0c      	ite	eq
 8006fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd4:	2500      	movne	r5, #0
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	bfc4      	itt	gt
 8006fda:	1a9b      	subgt	r3, r3, r2
 8006fdc:	18ed      	addgt	r5, r5, r3
 8006fde:	2600      	movs	r6, #0
 8006fe0:	341a      	adds	r4, #26
 8006fe2:	42b5      	cmp	r5, r6
 8006fe4:	d11a      	bne.n	800701c <_printf_common+0xc8>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e008      	b.n	8006ffc <_printf_common+0xa8>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4652      	mov	r2, sl
 8006fee:	4641      	mov	r1, r8
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	47c8      	blx	r9
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d103      	bne.n	8007000 <_printf_common+0xac>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	3501      	adds	r5, #1
 8007002:	e7c6      	b.n	8006f92 <_printf_common+0x3e>
 8007004:	18e1      	adds	r1, r4, r3
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	2030      	movs	r0, #48	@ 0x30
 800700a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800700e:	4422      	add	r2, r4
 8007010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007018:	3302      	adds	r3, #2
 800701a:	e7c7      	b.n	8006fac <_printf_common+0x58>
 800701c:	2301      	movs	r3, #1
 800701e:	4622      	mov	r2, r4
 8007020:	4641      	mov	r1, r8
 8007022:	4638      	mov	r0, r7
 8007024:	47c8      	blx	r9
 8007026:	3001      	adds	r0, #1
 8007028:	d0e6      	beq.n	8006ff8 <_printf_common+0xa4>
 800702a:	3601      	adds	r6, #1
 800702c:	e7d9      	b.n	8006fe2 <_printf_common+0x8e>
	...

08007030 <_printf_i>:
 8007030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	7e0f      	ldrb	r7, [r1, #24]
 8007036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007038:	2f78      	cmp	r7, #120	@ 0x78
 800703a:	4691      	mov	r9, r2
 800703c:	4680      	mov	r8, r0
 800703e:	460c      	mov	r4, r1
 8007040:	469a      	mov	sl, r3
 8007042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007046:	d807      	bhi.n	8007058 <_printf_i+0x28>
 8007048:	2f62      	cmp	r7, #98	@ 0x62
 800704a:	d80a      	bhi.n	8007062 <_printf_i+0x32>
 800704c:	2f00      	cmp	r7, #0
 800704e:	f000 80d2 	beq.w	80071f6 <_printf_i+0x1c6>
 8007052:	2f58      	cmp	r7, #88	@ 0x58
 8007054:	f000 80b9 	beq.w	80071ca <_printf_i+0x19a>
 8007058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800705c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007060:	e03a      	b.n	80070d8 <_printf_i+0xa8>
 8007062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007066:	2b15      	cmp	r3, #21
 8007068:	d8f6      	bhi.n	8007058 <_printf_i+0x28>
 800706a:	a101      	add	r1, pc, #4	@ (adr r1, 8007070 <_printf_i+0x40>)
 800706c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007070:	080070c9 	.word	0x080070c9
 8007074:	080070dd 	.word	0x080070dd
 8007078:	08007059 	.word	0x08007059
 800707c:	08007059 	.word	0x08007059
 8007080:	08007059 	.word	0x08007059
 8007084:	08007059 	.word	0x08007059
 8007088:	080070dd 	.word	0x080070dd
 800708c:	08007059 	.word	0x08007059
 8007090:	08007059 	.word	0x08007059
 8007094:	08007059 	.word	0x08007059
 8007098:	08007059 	.word	0x08007059
 800709c:	080071dd 	.word	0x080071dd
 80070a0:	08007107 	.word	0x08007107
 80070a4:	08007197 	.word	0x08007197
 80070a8:	08007059 	.word	0x08007059
 80070ac:	08007059 	.word	0x08007059
 80070b0:	080071ff 	.word	0x080071ff
 80070b4:	08007059 	.word	0x08007059
 80070b8:	08007107 	.word	0x08007107
 80070bc:	08007059 	.word	0x08007059
 80070c0:	08007059 	.word	0x08007059
 80070c4:	0800719f 	.word	0x0800719f
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	1d1a      	adds	r2, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6032      	str	r2, [r6, #0]
 80070d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070d8:	2301      	movs	r3, #1
 80070da:	e09d      	b.n	8007218 <_printf_i+0x1e8>
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	6820      	ldr	r0, [r4, #0]
 80070e0:	1d19      	adds	r1, r3, #4
 80070e2:	6031      	str	r1, [r6, #0]
 80070e4:	0606      	lsls	r6, r0, #24
 80070e6:	d501      	bpl.n	80070ec <_printf_i+0xbc>
 80070e8:	681d      	ldr	r5, [r3, #0]
 80070ea:	e003      	b.n	80070f4 <_printf_i+0xc4>
 80070ec:	0645      	lsls	r5, r0, #25
 80070ee:	d5fb      	bpl.n	80070e8 <_printf_i+0xb8>
 80070f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	da03      	bge.n	8007100 <_printf_i+0xd0>
 80070f8:	232d      	movs	r3, #45	@ 0x2d
 80070fa:	426d      	negs	r5, r5
 80070fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007100:	4859      	ldr	r0, [pc, #356]	@ (8007268 <_printf_i+0x238>)
 8007102:	230a      	movs	r3, #10
 8007104:	e011      	b.n	800712a <_printf_i+0xfa>
 8007106:	6821      	ldr	r1, [r4, #0]
 8007108:	6833      	ldr	r3, [r6, #0]
 800710a:	0608      	lsls	r0, r1, #24
 800710c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007110:	d402      	bmi.n	8007118 <_printf_i+0xe8>
 8007112:	0649      	lsls	r1, r1, #25
 8007114:	bf48      	it	mi
 8007116:	b2ad      	uxthmi	r5, r5
 8007118:	2f6f      	cmp	r7, #111	@ 0x6f
 800711a:	4853      	ldr	r0, [pc, #332]	@ (8007268 <_printf_i+0x238>)
 800711c:	6033      	str	r3, [r6, #0]
 800711e:	bf14      	ite	ne
 8007120:	230a      	movne	r3, #10
 8007122:	2308      	moveq	r3, #8
 8007124:	2100      	movs	r1, #0
 8007126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800712a:	6866      	ldr	r6, [r4, #4]
 800712c:	60a6      	str	r6, [r4, #8]
 800712e:	2e00      	cmp	r6, #0
 8007130:	bfa2      	ittt	ge
 8007132:	6821      	ldrge	r1, [r4, #0]
 8007134:	f021 0104 	bicge.w	r1, r1, #4
 8007138:	6021      	strge	r1, [r4, #0]
 800713a:	b90d      	cbnz	r5, 8007140 <_printf_i+0x110>
 800713c:	2e00      	cmp	r6, #0
 800713e:	d04b      	beq.n	80071d8 <_printf_i+0x1a8>
 8007140:	4616      	mov	r6, r2
 8007142:	fbb5 f1f3 	udiv	r1, r5, r3
 8007146:	fb03 5711 	mls	r7, r3, r1, r5
 800714a:	5dc7      	ldrb	r7, [r0, r7]
 800714c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007150:	462f      	mov	r7, r5
 8007152:	42bb      	cmp	r3, r7
 8007154:	460d      	mov	r5, r1
 8007156:	d9f4      	bls.n	8007142 <_printf_i+0x112>
 8007158:	2b08      	cmp	r3, #8
 800715a:	d10b      	bne.n	8007174 <_printf_i+0x144>
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	07df      	lsls	r7, r3, #31
 8007160:	d508      	bpl.n	8007174 <_printf_i+0x144>
 8007162:	6923      	ldr	r3, [r4, #16]
 8007164:	6861      	ldr	r1, [r4, #4]
 8007166:	4299      	cmp	r1, r3
 8007168:	bfde      	ittt	le
 800716a:	2330      	movle	r3, #48	@ 0x30
 800716c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007170:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007174:	1b92      	subs	r2, r2, r6
 8007176:	6122      	str	r2, [r4, #16]
 8007178:	f8cd a000 	str.w	sl, [sp]
 800717c:	464b      	mov	r3, r9
 800717e:	aa03      	add	r2, sp, #12
 8007180:	4621      	mov	r1, r4
 8007182:	4640      	mov	r0, r8
 8007184:	f7ff fee6 	bl	8006f54 <_printf_common>
 8007188:	3001      	adds	r0, #1
 800718a:	d14a      	bne.n	8007222 <_printf_i+0x1f2>
 800718c:	f04f 30ff 	mov.w	r0, #4294967295
 8007190:	b004      	add	sp, #16
 8007192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	f043 0320 	orr.w	r3, r3, #32
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	4833      	ldr	r0, [pc, #204]	@ (800726c <_printf_i+0x23c>)
 80071a0:	2778      	movs	r7, #120	@ 0x78
 80071a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	6831      	ldr	r1, [r6, #0]
 80071aa:	061f      	lsls	r7, r3, #24
 80071ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80071b0:	d402      	bmi.n	80071b8 <_printf_i+0x188>
 80071b2:	065f      	lsls	r7, r3, #25
 80071b4:	bf48      	it	mi
 80071b6:	b2ad      	uxthmi	r5, r5
 80071b8:	6031      	str	r1, [r6, #0]
 80071ba:	07d9      	lsls	r1, r3, #31
 80071bc:	bf44      	itt	mi
 80071be:	f043 0320 	orrmi.w	r3, r3, #32
 80071c2:	6023      	strmi	r3, [r4, #0]
 80071c4:	b11d      	cbz	r5, 80071ce <_printf_i+0x19e>
 80071c6:	2310      	movs	r3, #16
 80071c8:	e7ac      	b.n	8007124 <_printf_i+0xf4>
 80071ca:	4827      	ldr	r0, [pc, #156]	@ (8007268 <_printf_i+0x238>)
 80071cc:	e7e9      	b.n	80071a2 <_printf_i+0x172>
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	f023 0320 	bic.w	r3, r3, #32
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	e7f6      	b.n	80071c6 <_printf_i+0x196>
 80071d8:	4616      	mov	r6, r2
 80071da:	e7bd      	b.n	8007158 <_printf_i+0x128>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	6825      	ldr	r5, [r4, #0]
 80071e0:	6961      	ldr	r1, [r4, #20]
 80071e2:	1d18      	adds	r0, r3, #4
 80071e4:	6030      	str	r0, [r6, #0]
 80071e6:	062e      	lsls	r6, r5, #24
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	d501      	bpl.n	80071f0 <_printf_i+0x1c0>
 80071ec:	6019      	str	r1, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <_printf_i+0x1c6>
 80071f0:	0668      	lsls	r0, r5, #25
 80071f2:	d5fb      	bpl.n	80071ec <_printf_i+0x1bc>
 80071f4:	8019      	strh	r1, [r3, #0]
 80071f6:	2300      	movs	r3, #0
 80071f8:	6123      	str	r3, [r4, #16]
 80071fa:	4616      	mov	r6, r2
 80071fc:	e7bc      	b.n	8007178 <_printf_i+0x148>
 80071fe:	6833      	ldr	r3, [r6, #0]
 8007200:	1d1a      	adds	r2, r3, #4
 8007202:	6032      	str	r2, [r6, #0]
 8007204:	681e      	ldr	r6, [r3, #0]
 8007206:	6862      	ldr	r2, [r4, #4]
 8007208:	2100      	movs	r1, #0
 800720a:	4630      	mov	r0, r6
 800720c:	f7f8 ffe0 	bl	80001d0 <memchr>
 8007210:	b108      	cbz	r0, 8007216 <_printf_i+0x1e6>
 8007212:	1b80      	subs	r0, r0, r6
 8007214:	6060      	str	r0, [r4, #4]
 8007216:	6863      	ldr	r3, [r4, #4]
 8007218:	6123      	str	r3, [r4, #16]
 800721a:	2300      	movs	r3, #0
 800721c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007220:	e7aa      	b.n	8007178 <_printf_i+0x148>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	4632      	mov	r2, r6
 8007226:	4649      	mov	r1, r9
 8007228:	4640      	mov	r0, r8
 800722a:	47d0      	blx	sl
 800722c:	3001      	adds	r0, #1
 800722e:	d0ad      	beq.n	800718c <_printf_i+0x15c>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	079b      	lsls	r3, r3, #30
 8007234:	d413      	bmi.n	800725e <_printf_i+0x22e>
 8007236:	68e0      	ldr	r0, [r4, #12]
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	4298      	cmp	r0, r3
 800723c:	bfb8      	it	lt
 800723e:	4618      	movlt	r0, r3
 8007240:	e7a6      	b.n	8007190 <_printf_i+0x160>
 8007242:	2301      	movs	r3, #1
 8007244:	4632      	mov	r2, r6
 8007246:	4649      	mov	r1, r9
 8007248:	4640      	mov	r0, r8
 800724a:	47d0      	blx	sl
 800724c:	3001      	adds	r0, #1
 800724e:	d09d      	beq.n	800718c <_printf_i+0x15c>
 8007250:	3501      	adds	r5, #1
 8007252:	68e3      	ldr	r3, [r4, #12]
 8007254:	9903      	ldr	r1, [sp, #12]
 8007256:	1a5b      	subs	r3, r3, r1
 8007258:	42ab      	cmp	r3, r5
 800725a:	dcf2      	bgt.n	8007242 <_printf_i+0x212>
 800725c:	e7eb      	b.n	8007236 <_printf_i+0x206>
 800725e:	2500      	movs	r5, #0
 8007260:	f104 0619 	add.w	r6, r4, #25
 8007264:	e7f5      	b.n	8007252 <_printf_i+0x222>
 8007266:	bf00      	nop
 8007268:	080096d6 	.word	0x080096d6
 800726c:	080096e7 	.word	0x080096e7

08007270 <std>:
 8007270:	2300      	movs	r3, #0
 8007272:	b510      	push	{r4, lr}
 8007274:	4604      	mov	r4, r0
 8007276:	e9c0 3300 	strd	r3, r3, [r0]
 800727a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727e:	6083      	str	r3, [r0, #8]
 8007280:	8181      	strh	r1, [r0, #12]
 8007282:	6643      	str	r3, [r0, #100]	@ 0x64
 8007284:	81c2      	strh	r2, [r0, #14]
 8007286:	6183      	str	r3, [r0, #24]
 8007288:	4619      	mov	r1, r3
 800728a:	2208      	movs	r2, #8
 800728c:	305c      	adds	r0, #92	@ 0x5c
 800728e:	f000 f914 	bl	80074ba <memset>
 8007292:	4b0d      	ldr	r3, [pc, #52]	@ (80072c8 <std+0x58>)
 8007294:	6263      	str	r3, [r4, #36]	@ 0x24
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <std+0x5c>)
 8007298:	62a3      	str	r3, [r4, #40]	@ 0x28
 800729a:	4b0d      	ldr	r3, [pc, #52]	@ (80072d0 <std+0x60>)
 800729c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800729e:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <std+0x64>)
 80072a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80072a2:	4b0d      	ldr	r3, [pc, #52]	@ (80072d8 <std+0x68>)
 80072a4:	6224      	str	r4, [r4, #32]
 80072a6:	429c      	cmp	r4, r3
 80072a8:	d006      	beq.n	80072b8 <std+0x48>
 80072aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072ae:	4294      	cmp	r4, r2
 80072b0:	d002      	beq.n	80072b8 <std+0x48>
 80072b2:	33d0      	adds	r3, #208	@ 0xd0
 80072b4:	429c      	cmp	r4, r3
 80072b6:	d105      	bne.n	80072c4 <std+0x54>
 80072b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c0:	f000 b978 	b.w	80075b4 <__retarget_lock_init_recursive>
 80072c4:	bd10      	pop	{r4, pc}
 80072c6:	bf00      	nop
 80072c8:	08007435 	.word	0x08007435
 80072cc:	08007457 	.word	0x08007457
 80072d0:	0800748f 	.word	0x0800748f
 80072d4:	080074b3 	.word	0x080074b3
 80072d8:	200002b4 	.word	0x200002b4

080072dc <stdio_exit_handler>:
 80072dc:	4a02      	ldr	r2, [pc, #8]	@ (80072e8 <stdio_exit_handler+0xc>)
 80072de:	4903      	ldr	r1, [pc, #12]	@ (80072ec <stdio_exit_handler+0x10>)
 80072e0:	4803      	ldr	r0, [pc, #12]	@ (80072f0 <stdio_exit_handler+0x14>)
 80072e2:	f000 b869 	b.w	80073b8 <_fwalk_sglue>
 80072e6:	bf00      	nop
 80072e8:	20000010 	.word	0x20000010
 80072ec:	08008f15 	.word	0x08008f15
 80072f0:	20000020 	.word	0x20000020

080072f4 <cleanup_stdio>:
 80072f4:	6841      	ldr	r1, [r0, #4]
 80072f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007328 <cleanup_stdio+0x34>)
 80072f8:	4299      	cmp	r1, r3
 80072fa:	b510      	push	{r4, lr}
 80072fc:	4604      	mov	r4, r0
 80072fe:	d001      	beq.n	8007304 <cleanup_stdio+0x10>
 8007300:	f001 fe08 	bl	8008f14 <_fflush_r>
 8007304:	68a1      	ldr	r1, [r4, #8]
 8007306:	4b09      	ldr	r3, [pc, #36]	@ (800732c <cleanup_stdio+0x38>)
 8007308:	4299      	cmp	r1, r3
 800730a:	d002      	beq.n	8007312 <cleanup_stdio+0x1e>
 800730c:	4620      	mov	r0, r4
 800730e:	f001 fe01 	bl	8008f14 <_fflush_r>
 8007312:	68e1      	ldr	r1, [r4, #12]
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <cleanup_stdio+0x3c>)
 8007316:	4299      	cmp	r1, r3
 8007318:	d004      	beq.n	8007324 <cleanup_stdio+0x30>
 800731a:	4620      	mov	r0, r4
 800731c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007320:	f001 bdf8 	b.w	8008f14 <_fflush_r>
 8007324:	bd10      	pop	{r4, pc}
 8007326:	bf00      	nop
 8007328:	200002b4 	.word	0x200002b4
 800732c:	2000031c 	.word	0x2000031c
 8007330:	20000384 	.word	0x20000384

08007334 <global_stdio_init.part.0>:
 8007334:	b510      	push	{r4, lr}
 8007336:	4b0b      	ldr	r3, [pc, #44]	@ (8007364 <global_stdio_init.part.0+0x30>)
 8007338:	4c0b      	ldr	r4, [pc, #44]	@ (8007368 <global_stdio_init.part.0+0x34>)
 800733a:	4a0c      	ldr	r2, [pc, #48]	@ (800736c <global_stdio_init.part.0+0x38>)
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	4620      	mov	r0, r4
 8007340:	2200      	movs	r2, #0
 8007342:	2104      	movs	r1, #4
 8007344:	f7ff ff94 	bl	8007270 <std>
 8007348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800734c:	2201      	movs	r2, #1
 800734e:	2109      	movs	r1, #9
 8007350:	f7ff ff8e 	bl	8007270 <std>
 8007354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007358:	2202      	movs	r2, #2
 800735a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735e:	2112      	movs	r1, #18
 8007360:	f7ff bf86 	b.w	8007270 <std>
 8007364:	200003ec 	.word	0x200003ec
 8007368:	200002b4 	.word	0x200002b4
 800736c:	080072dd 	.word	0x080072dd

08007370 <__sfp_lock_acquire>:
 8007370:	4801      	ldr	r0, [pc, #4]	@ (8007378 <__sfp_lock_acquire+0x8>)
 8007372:	f000 b920 	b.w	80075b6 <__retarget_lock_acquire_recursive>
 8007376:	bf00      	nop
 8007378:	200003f5 	.word	0x200003f5

0800737c <__sfp_lock_release>:
 800737c:	4801      	ldr	r0, [pc, #4]	@ (8007384 <__sfp_lock_release+0x8>)
 800737e:	f000 b91b 	b.w	80075b8 <__retarget_lock_release_recursive>
 8007382:	bf00      	nop
 8007384:	200003f5 	.word	0x200003f5

08007388 <__sinit>:
 8007388:	b510      	push	{r4, lr}
 800738a:	4604      	mov	r4, r0
 800738c:	f7ff fff0 	bl	8007370 <__sfp_lock_acquire>
 8007390:	6a23      	ldr	r3, [r4, #32]
 8007392:	b11b      	cbz	r3, 800739c <__sinit+0x14>
 8007394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007398:	f7ff bff0 	b.w	800737c <__sfp_lock_release>
 800739c:	4b04      	ldr	r3, [pc, #16]	@ (80073b0 <__sinit+0x28>)
 800739e:	6223      	str	r3, [r4, #32]
 80073a0:	4b04      	ldr	r3, [pc, #16]	@ (80073b4 <__sinit+0x2c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f5      	bne.n	8007394 <__sinit+0xc>
 80073a8:	f7ff ffc4 	bl	8007334 <global_stdio_init.part.0>
 80073ac:	e7f2      	b.n	8007394 <__sinit+0xc>
 80073ae:	bf00      	nop
 80073b0:	080072f5 	.word	0x080072f5
 80073b4:	200003ec 	.word	0x200003ec

080073b8 <_fwalk_sglue>:
 80073b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073bc:	4607      	mov	r7, r0
 80073be:	4688      	mov	r8, r1
 80073c0:	4614      	mov	r4, r2
 80073c2:	2600      	movs	r6, #0
 80073c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c8:	f1b9 0901 	subs.w	r9, r9, #1
 80073cc:	d505      	bpl.n	80073da <_fwalk_sglue+0x22>
 80073ce:	6824      	ldr	r4, [r4, #0]
 80073d0:	2c00      	cmp	r4, #0
 80073d2:	d1f7      	bne.n	80073c4 <_fwalk_sglue+0xc>
 80073d4:	4630      	mov	r0, r6
 80073d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073da:	89ab      	ldrh	r3, [r5, #12]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d907      	bls.n	80073f0 <_fwalk_sglue+0x38>
 80073e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e4:	3301      	adds	r3, #1
 80073e6:	d003      	beq.n	80073f0 <_fwalk_sglue+0x38>
 80073e8:	4629      	mov	r1, r5
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c0      	blx	r8
 80073ee:	4306      	orrs	r6, r0
 80073f0:	3568      	adds	r5, #104	@ 0x68
 80073f2:	e7e9      	b.n	80073c8 <_fwalk_sglue+0x10>

080073f4 <siprintf>:
 80073f4:	b40e      	push	{r1, r2, r3}
 80073f6:	b500      	push	{lr}
 80073f8:	b09c      	sub	sp, #112	@ 0x70
 80073fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80073fc:	9002      	str	r0, [sp, #8]
 80073fe:	9006      	str	r0, [sp, #24]
 8007400:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007404:	4809      	ldr	r0, [pc, #36]	@ (800742c <siprintf+0x38>)
 8007406:	9107      	str	r1, [sp, #28]
 8007408:	9104      	str	r1, [sp, #16]
 800740a:	4909      	ldr	r1, [pc, #36]	@ (8007430 <siprintf+0x3c>)
 800740c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007410:	9105      	str	r1, [sp, #20]
 8007412:	6800      	ldr	r0, [r0, #0]
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	a902      	add	r1, sp, #8
 8007418:	f001 fbfc 	bl	8008c14 <_svfiprintf_r>
 800741c:	9b02      	ldr	r3, [sp, #8]
 800741e:	2200      	movs	r2, #0
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	b01c      	add	sp, #112	@ 0x70
 8007424:	f85d eb04 	ldr.w	lr, [sp], #4
 8007428:	b003      	add	sp, #12
 800742a:	4770      	bx	lr
 800742c:	2000001c 	.word	0x2000001c
 8007430:	ffff0208 	.word	0xffff0208

08007434 <__sread>:
 8007434:	b510      	push	{r4, lr}
 8007436:	460c      	mov	r4, r1
 8007438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743c:	f000 f86c 	bl	8007518 <_read_r>
 8007440:	2800      	cmp	r0, #0
 8007442:	bfab      	itete	ge
 8007444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007446:	89a3      	ldrhlt	r3, [r4, #12]
 8007448:	181b      	addge	r3, r3, r0
 800744a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800744e:	bfac      	ite	ge
 8007450:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007452:	81a3      	strhlt	r3, [r4, #12]
 8007454:	bd10      	pop	{r4, pc}

08007456 <__swrite>:
 8007456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745a:	461f      	mov	r7, r3
 800745c:	898b      	ldrh	r3, [r1, #12]
 800745e:	05db      	lsls	r3, r3, #23
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
 8007464:	4616      	mov	r6, r2
 8007466:	d505      	bpl.n	8007474 <__swrite+0x1e>
 8007468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746c:	2302      	movs	r3, #2
 800746e:	2200      	movs	r2, #0
 8007470:	f000 f840 	bl	80074f4 <_lseek_r>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800747a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	4632      	mov	r2, r6
 8007482:	463b      	mov	r3, r7
 8007484:	4628      	mov	r0, r5
 8007486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800748a:	f000 b857 	b.w	800753c <_write_r>

0800748e <__sseek>:
 800748e:	b510      	push	{r4, lr}
 8007490:	460c      	mov	r4, r1
 8007492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007496:	f000 f82d 	bl	80074f4 <_lseek_r>
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	bf15      	itete	ne
 80074a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074aa:	81a3      	strheq	r3, [r4, #12]
 80074ac:	bf18      	it	ne
 80074ae:	81a3      	strhne	r3, [r4, #12]
 80074b0:	bd10      	pop	{r4, pc}

080074b2 <__sclose>:
 80074b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b6:	f000 b80d 	b.w	80074d4 <_close_r>

080074ba <memset>:
 80074ba:	4402      	add	r2, r0
 80074bc:	4603      	mov	r3, r0
 80074be:	4293      	cmp	r3, r2
 80074c0:	d100      	bne.n	80074c4 <memset+0xa>
 80074c2:	4770      	bx	lr
 80074c4:	f803 1b01 	strb.w	r1, [r3], #1
 80074c8:	e7f9      	b.n	80074be <memset+0x4>
	...

080074cc <_localeconv_r>:
 80074cc:	4800      	ldr	r0, [pc, #0]	@ (80074d0 <_localeconv_r+0x4>)
 80074ce:	4770      	bx	lr
 80074d0:	2000015c 	.word	0x2000015c

080074d4 <_close_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d06      	ldr	r5, [pc, #24]	@ (80074f0 <_close_r+0x1c>)
 80074d8:	2300      	movs	r3, #0
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	f7fa fbc2 	bl	8001c68 <_close>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_close_r+0x1a>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_close_r+0x1a>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	200003f0 	.word	0x200003f0

080074f4 <_lseek_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	@ (8007514 <_lseek_r+0x20>)
 80074f8:	4604      	mov	r4, r0
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	2200      	movs	r2, #0
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7fa fbd7 	bl	8001cb6 <_lseek>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_lseek_r+0x1e>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_lseek_r+0x1e>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	200003f0 	.word	0x200003f0

08007518 <_read_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d07      	ldr	r5, [pc, #28]	@ (8007538 <_read_r+0x20>)
 800751c:	4604      	mov	r4, r0
 800751e:	4608      	mov	r0, r1
 8007520:	4611      	mov	r1, r2
 8007522:	2200      	movs	r2, #0
 8007524:	602a      	str	r2, [r5, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	f7fa fb65 	bl	8001bf6 <_read>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_read_r+0x1e>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_read_r+0x1e>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	200003f0 	.word	0x200003f0

0800753c <_write_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d07      	ldr	r5, [pc, #28]	@ (800755c <_write_r+0x20>)
 8007540:	4604      	mov	r4, r0
 8007542:	4608      	mov	r0, r1
 8007544:	4611      	mov	r1, r2
 8007546:	2200      	movs	r2, #0
 8007548:	602a      	str	r2, [r5, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	f7fa fb70 	bl	8001c30 <_write>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_write_r+0x1e>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_write_r+0x1e>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	200003f0 	.word	0x200003f0

08007560 <__errno>:
 8007560:	4b01      	ldr	r3, [pc, #4]	@ (8007568 <__errno+0x8>)
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	2000001c 	.word	0x2000001c

0800756c <__libc_init_array>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4d0d      	ldr	r5, [pc, #52]	@ (80075a4 <__libc_init_array+0x38>)
 8007570:	4c0d      	ldr	r4, [pc, #52]	@ (80075a8 <__libc_init_array+0x3c>)
 8007572:	1b64      	subs	r4, r4, r5
 8007574:	10a4      	asrs	r4, r4, #2
 8007576:	2600      	movs	r6, #0
 8007578:	42a6      	cmp	r6, r4
 800757a:	d109      	bne.n	8007590 <__libc_init_array+0x24>
 800757c:	4d0b      	ldr	r5, [pc, #44]	@ (80075ac <__libc_init_array+0x40>)
 800757e:	4c0c      	ldr	r4, [pc, #48]	@ (80075b0 <__libc_init_array+0x44>)
 8007580:	f002 f866 	bl	8009650 <_init>
 8007584:	1b64      	subs	r4, r4, r5
 8007586:	10a4      	asrs	r4, r4, #2
 8007588:	2600      	movs	r6, #0
 800758a:	42a6      	cmp	r6, r4
 800758c:	d105      	bne.n	800759a <__libc_init_array+0x2e>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	f855 3b04 	ldr.w	r3, [r5], #4
 8007594:	4798      	blx	r3
 8007596:	3601      	adds	r6, #1
 8007598:	e7ee      	b.n	8007578 <__libc_init_array+0xc>
 800759a:	f855 3b04 	ldr.w	r3, [r5], #4
 800759e:	4798      	blx	r3
 80075a0:	3601      	adds	r6, #1
 80075a2:	e7f2      	b.n	800758a <__libc_init_array+0x1e>
 80075a4:	08009a40 	.word	0x08009a40
 80075a8:	08009a40 	.word	0x08009a40
 80075ac:	08009a40 	.word	0x08009a40
 80075b0:	08009a44 	.word	0x08009a44

080075b4 <__retarget_lock_init_recursive>:
 80075b4:	4770      	bx	lr

080075b6 <__retarget_lock_acquire_recursive>:
 80075b6:	4770      	bx	lr

080075b8 <__retarget_lock_release_recursive>:
 80075b8:	4770      	bx	lr

080075ba <quorem>:
 80075ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075be:	6903      	ldr	r3, [r0, #16]
 80075c0:	690c      	ldr	r4, [r1, #16]
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	4607      	mov	r7, r0
 80075c6:	db7e      	blt.n	80076c6 <quorem+0x10c>
 80075c8:	3c01      	subs	r4, #1
 80075ca:	f101 0814 	add.w	r8, r1, #20
 80075ce:	00a3      	lsls	r3, r4, #2
 80075d0:	f100 0514 	add.w	r5, r0, #20
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075e4:	3301      	adds	r3, #1
 80075e6:	429a      	cmp	r2, r3
 80075e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80075f0:	d32e      	bcc.n	8007650 <quorem+0x96>
 80075f2:	f04f 0a00 	mov.w	sl, #0
 80075f6:	46c4      	mov	ip, r8
 80075f8:	46ae      	mov	lr, r5
 80075fa:	46d3      	mov	fp, sl
 80075fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007600:	b298      	uxth	r0, r3
 8007602:	fb06 a000 	mla	r0, r6, r0, sl
 8007606:	0c02      	lsrs	r2, r0, #16
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	fb06 2303 	mla	r3, r6, r3, r2
 800760e:	f8de 2000 	ldr.w	r2, [lr]
 8007612:	b280      	uxth	r0, r0
 8007614:	b292      	uxth	r2, r2
 8007616:	1a12      	subs	r2, r2, r0
 8007618:	445a      	add	r2, fp
 800761a:	f8de 0000 	ldr.w	r0, [lr]
 800761e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007622:	b29b      	uxth	r3, r3
 8007624:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007628:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800762c:	b292      	uxth	r2, r2
 800762e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007632:	45e1      	cmp	r9, ip
 8007634:	f84e 2b04 	str.w	r2, [lr], #4
 8007638:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800763c:	d2de      	bcs.n	80075fc <quorem+0x42>
 800763e:	9b00      	ldr	r3, [sp, #0]
 8007640:	58eb      	ldr	r3, [r5, r3]
 8007642:	b92b      	cbnz	r3, 8007650 <quorem+0x96>
 8007644:	9b01      	ldr	r3, [sp, #4]
 8007646:	3b04      	subs	r3, #4
 8007648:	429d      	cmp	r5, r3
 800764a:	461a      	mov	r2, r3
 800764c:	d32f      	bcc.n	80076ae <quorem+0xf4>
 800764e:	613c      	str	r4, [r7, #16]
 8007650:	4638      	mov	r0, r7
 8007652:	f001 f97b 	bl	800894c <__mcmp>
 8007656:	2800      	cmp	r0, #0
 8007658:	db25      	blt.n	80076a6 <quorem+0xec>
 800765a:	4629      	mov	r1, r5
 800765c:	2000      	movs	r0, #0
 800765e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007662:	f8d1 c000 	ldr.w	ip, [r1]
 8007666:	fa1f fe82 	uxth.w	lr, r2
 800766a:	fa1f f38c 	uxth.w	r3, ip
 800766e:	eba3 030e 	sub.w	r3, r3, lr
 8007672:	4403      	add	r3, r0
 8007674:	0c12      	lsrs	r2, r2, #16
 8007676:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800767a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800767e:	b29b      	uxth	r3, r3
 8007680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007684:	45c1      	cmp	r9, r8
 8007686:	f841 3b04 	str.w	r3, [r1], #4
 800768a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800768e:	d2e6      	bcs.n	800765e <quorem+0xa4>
 8007690:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007694:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007698:	b922      	cbnz	r2, 80076a4 <quorem+0xea>
 800769a:	3b04      	subs	r3, #4
 800769c:	429d      	cmp	r5, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	d30b      	bcc.n	80076ba <quorem+0x100>
 80076a2:	613c      	str	r4, [r7, #16]
 80076a4:	3601      	adds	r6, #1
 80076a6:	4630      	mov	r0, r6
 80076a8:	b003      	add	sp, #12
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	3b04      	subs	r3, #4
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	d1cb      	bne.n	800764e <quorem+0x94>
 80076b6:	3c01      	subs	r4, #1
 80076b8:	e7c6      	b.n	8007648 <quorem+0x8e>
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	3b04      	subs	r3, #4
 80076be:	2a00      	cmp	r2, #0
 80076c0:	d1ef      	bne.n	80076a2 <quorem+0xe8>
 80076c2:	3c01      	subs	r4, #1
 80076c4:	e7ea      	b.n	800769c <quorem+0xe2>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e7ee      	b.n	80076a8 <quorem+0xee>
 80076ca:	0000      	movs	r0, r0
 80076cc:	0000      	movs	r0, r0
	...

080076d0 <_dtoa_r>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	69c7      	ldr	r7, [r0, #28]
 80076d6:	b099      	sub	sp, #100	@ 0x64
 80076d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80076dc:	ec55 4b10 	vmov	r4, r5, d0
 80076e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80076e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80076e4:	4683      	mov	fp, r0
 80076e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80076e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076ea:	b97f      	cbnz	r7, 800770c <_dtoa_r+0x3c>
 80076ec:	2010      	movs	r0, #16
 80076ee:	f000 fdfd 	bl	80082ec <malloc>
 80076f2:	4602      	mov	r2, r0
 80076f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80076f8:	b920      	cbnz	r0, 8007704 <_dtoa_r+0x34>
 80076fa:	4ba7      	ldr	r3, [pc, #668]	@ (8007998 <_dtoa_r+0x2c8>)
 80076fc:	21ef      	movs	r1, #239	@ 0xef
 80076fe:	48a7      	ldr	r0, [pc, #668]	@ (800799c <_dtoa_r+0x2cc>)
 8007700:	f001 fc68 	bl	8008fd4 <__assert_func>
 8007704:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007708:	6007      	str	r7, [r0, #0]
 800770a:	60c7      	str	r7, [r0, #12]
 800770c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007710:	6819      	ldr	r1, [r3, #0]
 8007712:	b159      	cbz	r1, 800772c <_dtoa_r+0x5c>
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	604a      	str	r2, [r1, #4]
 8007718:	2301      	movs	r3, #1
 800771a:	4093      	lsls	r3, r2
 800771c:	608b      	str	r3, [r1, #8]
 800771e:	4658      	mov	r0, fp
 8007720:	f000 feda 	bl	80084d8 <_Bfree>
 8007724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	1e2b      	subs	r3, r5, #0
 800772e:	bfb9      	ittee	lt
 8007730:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007734:	9303      	strlt	r3, [sp, #12]
 8007736:	2300      	movge	r3, #0
 8007738:	6033      	strge	r3, [r6, #0]
 800773a:	9f03      	ldr	r7, [sp, #12]
 800773c:	4b98      	ldr	r3, [pc, #608]	@ (80079a0 <_dtoa_r+0x2d0>)
 800773e:	bfbc      	itt	lt
 8007740:	2201      	movlt	r2, #1
 8007742:	6032      	strlt	r2, [r6, #0]
 8007744:	43bb      	bics	r3, r7
 8007746:	d112      	bne.n	800776e <_dtoa_r+0x9e>
 8007748:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800774a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007754:	4323      	orrs	r3, r4
 8007756:	f000 854d 	beq.w	80081f4 <_dtoa_r+0xb24>
 800775a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800775c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80079b4 <_dtoa_r+0x2e4>
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 854f 	beq.w	8008204 <_dtoa_r+0xb34>
 8007766:	f10a 0303 	add.w	r3, sl, #3
 800776a:	f000 bd49 	b.w	8008200 <_dtoa_r+0xb30>
 800776e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	ec51 0b17 	vmov	r0, r1, d7
 8007778:	2300      	movs	r3, #0
 800777a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800777e:	f7f9 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007782:	4680      	mov	r8, r0
 8007784:	b158      	cbz	r0, 800779e <_dtoa_r+0xce>
 8007786:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007788:	2301      	movs	r3, #1
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800778e:	b113      	cbz	r3, 8007796 <_dtoa_r+0xc6>
 8007790:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007792:	4b84      	ldr	r3, [pc, #528]	@ (80079a4 <_dtoa_r+0x2d4>)
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80079b8 <_dtoa_r+0x2e8>
 800779a:	f000 bd33 	b.w	8008204 <_dtoa_r+0xb34>
 800779e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80077a2:	aa16      	add	r2, sp, #88	@ 0x58
 80077a4:	a917      	add	r1, sp, #92	@ 0x5c
 80077a6:	4658      	mov	r0, fp
 80077a8:	f001 f980 	bl	8008aac <__d2b>
 80077ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80077b0:	4681      	mov	r9, r0
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d077      	beq.n	80078a6 <_dtoa_r+0x1d6>
 80077b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80077bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80077c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80077cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80077d0:	4619      	mov	r1, r3
 80077d2:	2200      	movs	r2, #0
 80077d4:	4b74      	ldr	r3, [pc, #464]	@ (80079a8 <_dtoa_r+0x2d8>)
 80077d6:	f7f8 fd57 	bl	8000288 <__aeabi_dsub>
 80077da:	a369      	add	r3, pc, #420	@ (adr r3, 8007980 <_dtoa_r+0x2b0>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f7f8 ff0a 	bl	80005f8 <__aeabi_dmul>
 80077e4:	a368      	add	r3, pc, #416	@ (adr r3, 8007988 <_dtoa_r+0x2b8>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f7f8 fd4f 	bl	800028c <__adddf3>
 80077ee:	4604      	mov	r4, r0
 80077f0:	4630      	mov	r0, r6
 80077f2:	460d      	mov	r5, r1
 80077f4:	f7f8 fe96 	bl	8000524 <__aeabi_i2d>
 80077f8:	a365      	add	r3, pc, #404	@ (adr r3, 8007990 <_dtoa_r+0x2c0>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f7f8 fefb 	bl	80005f8 <__aeabi_dmul>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4620      	mov	r0, r4
 8007808:	4629      	mov	r1, r5
 800780a:	f7f8 fd3f 	bl	800028c <__adddf3>
 800780e:	4604      	mov	r4, r0
 8007810:	460d      	mov	r5, r1
 8007812:	f7f9 f9a1 	bl	8000b58 <__aeabi_d2iz>
 8007816:	2200      	movs	r2, #0
 8007818:	4607      	mov	r7, r0
 800781a:	2300      	movs	r3, #0
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f9 f95c 	bl	8000adc <__aeabi_dcmplt>
 8007824:	b140      	cbz	r0, 8007838 <_dtoa_r+0x168>
 8007826:	4638      	mov	r0, r7
 8007828:	f7f8 fe7c 	bl	8000524 <__aeabi_i2d>
 800782c:	4622      	mov	r2, r4
 800782e:	462b      	mov	r3, r5
 8007830:	f7f9 f94a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007834:	b900      	cbnz	r0, 8007838 <_dtoa_r+0x168>
 8007836:	3f01      	subs	r7, #1
 8007838:	2f16      	cmp	r7, #22
 800783a:	d851      	bhi.n	80078e0 <_dtoa_r+0x210>
 800783c:	4b5b      	ldr	r3, [pc, #364]	@ (80079ac <_dtoa_r+0x2dc>)
 800783e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800784a:	f7f9 f947 	bl	8000adc <__aeabi_dcmplt>
 800784e:	2800      	cmp	r0, #0
 8007850:	d048      	beq.n	80078e4 <_dtoa_r+0x214>
 8007852:	3f01      	subs	r7, #1
 8007854:	2300      	movs	r3, #0
 8007856:	9312      	str	r3, [sp, #72]	@ 0x48
 8007858:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800785a:	1b9b      	subs	r3, r3, r6
 800785c:	1e5a      	subs	r2, r3, #1
 800785e:	bf44      	itt	mi
 8007860:	f1c3 0801 	rsbmi	r8, r3, #1
 8007864:	2300      	movmi	r3, #0
 8007866:	9208      	str	r2, [sp, #32]
 8007868:	bf54      	ite	pl
 800786a:	f04f 0800 	movpl.w	r8, #0
 800786e:	9308      	strmi	r3, [sp, #32]
 8007870:	2f00      	cmp	r7, #0
 8007872:	db39      	blt.n	80078e8 <_dtoa_r+0x218>
 8007874:	9b08      	ldr	r3, [sp, #32]
 8007876:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007878:	443b      	add	r3, r7
 800787a:	9308      	str	r3, [sp, #32]
 800787c:	2300      	movs	r3, #0
 800787e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007882:	2b09      	cmp	r3, #9
 8007884:	d864      	bhi.n	8007950 <_dtoa_r+0x280>
 8007886:	2b05      	cmp	r3, #5
 8007888:	bfc4      	itt	gt
 800788a:	3b04      	subgt	r3, #4
 800788c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800788e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007890:	f1a3 0302 	sub.w	r3, r3, #2
 8007894:	bfcc      	ite	gt
 8007896:	2400      	movgt	r4, #0
 8007898:	2401      	movle	r4, #1
 800789a:	2b03      	cmp	r3, #3
 800789c:	d863      	bhi.n	8007966 <_dtoa_r+0x296>
 800789e:	e8df f003 	tbb	[pc, r3]
 80078a2:	372a      	.short	0x372a
 80078a4:	5535      	.short	0x5535
 80078a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80078aa:	441e      	add	r6, r3
 80078ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	bfc1      	itttt	gt
 80078b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078b8:	409f      	lslgt	r7, r3
 80078ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80078be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80078c2:	bfd6      	itet	le
 80078c4:	f1c3 0320 	rsble	r3, r3, #32
 80078c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80078cc:	fa04 f003 	lslle.w	r0, r4, r3
 80078d0:	f7f8 fe18 	bl	8000504 <__aeabi_ui2d>
 80078d4:	2201      	movs	r2, #1
 80078d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80078da:	3e01      	subs	r6, #1
 80078dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80078de:	e777      	b.n	80077d0 <_dtoa_r+0x100>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e7b8      	b.n	8007856 <_dtoa_r+0x186>
 80078e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80078e6:	e7b7      	b.n	8007858 <_dtoa_r+0x188>
 80078e8:	427b      	negs	r3, r7
 80078ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80078ec:	2300      	movs	r3, #0
 80078ee:	eba8 0807 	sub.w	r8, r8, r7
 80078f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078f4:	e7c4      	b.n	8007880 <_dtoa_r+0x1b0>
 80078f6:	2300      	movs	r3, #0
 80078f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	dc35      	bgt.n	800796c <_dtoa_r+0x29c>
 8007900:	2301      	movs	r3, #1
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	9307      	str	r3, [sp, #28]
 8007906:	461a      	mov	r2, r3
 8007908:	920e      	str	r2, [sp, #56]	@ 0x38
 800790a:	e00b      	b.n	8007924 <_dtoa_r+0x254>
 800790c:	2301      	movs	r3, #1
 800790e:	e7f3      	b.n	80078f8 <_dtoa_r+0x228>
 8007910:	2300      	movs	r3, #0
 8007912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007916:	18fb      	adds	r3, r7, r3
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	3301      	adds	r3, #1
 800791c:	2b01      	cmp	r3, #1
 800791e:	9307      	str	r3, [sp, #28]
 8007920:	bfb8      	it	lt
 8007922:	2301      	movlt	r3, #1
 8007924:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007928:	2100      	movs	r1, #0
 800792a:	2204      	movs	r2, #4
 800792c:	f102 0514 	add.w	r5, r2, #20
 8007930:	429d      	cmp	r5, r3
 8007932:	d91f      	bls.n	8007974 <_dtoa_r+0x2a4>
 8007934:	6041      	str	r1, [r0, #4]
 8007936:	4658      	mov	r0, fp
 8007938:	f000 fd8e 	bl	8008458 <_Balloc>
 800793c:	4682      	mov	sl, r0
 800793e:	2800      	cmp	r0, #0
 8007940:	d13c      	bne.n	80079bc <_dtoa_r+0x2ec>
 8007942:	4b1b      	ldr	r3, [pc, #108]	@ (80079b0 <_dtoa_r+0x2e0>)
 8007944:	4602      	mov	r2, r0
 8007946:	f240 11af 	movw	r1, #431	@ 0x1af
 800794a:	e6d8      	b.n	80076fe <_dtoa_r+0x2e>
 800794c:	2301      	movs	r3, #1
 800794e:	e7e0      	b.n	8007912 <_dtoa_r+0x242>
 8007950:	2401      	movs	r4, #1
 8007952:	2300      	movs	r3, #0
 8007954:	9309      	str	r3, [sp, #36]	@ 0x24
 8007956:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007958:	f04f 33ff 	mov.w	r3, #4294967295
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	9307      	str	r3, [sp, #28]
 8007960:	2200      	movs	r2, #0
 8007962:	2312      	movs	r3, #18
 8007964:	e7d0      	b.n	8007908 <_dtoa_r+0x238>
 8007966:	2301      	movs	r3, #1
 8007968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800796a:	e7f5      	b.n	8007958 <_dtoa_r+0x288>
 800796c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	9307      	str	r3, [sp, #28]
 8007972:	e7d7      	b.n	8007924 <_dtoa_r+0x254>
 8007974:	3101      	adds	r1, #1
 8007976:	0052      	lsls	r2, r2, #1
 8007978:	e7d8      	b.n	800792c <_dtoa_r+0x25c>
 800797a:	bf00      	nop
 800797c:	f3af 8000 	nop.w
 8007980:	636f4361 	.word	0x636f4361
 8007984:	3fd287a7 	.word	0x3fd287a7
 8007988:	8b60c8b3 	.word	0x8b60c8b3
 800798c:	3fc68a28 	.word	0x3fc68a28
 8007990:	509f79fb 	.word	0x509f79fb
 8007994:	3fd34413 	.word	0x3fd34413
 8007998:	08009705 	.word	0x08009705
 800799c:	0800971c 	.word	0x0800971c
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	080096d5 	.word	0x080096d5
 80079a8:	3ff80000 	.word	0x3ff80000
 80079ac:	08009818 	.word	0x08009818
 80079b0:	08009774 	.word	0x08009774
 80079b4:	08009701 	.word	0x08009701
 80079b8:	080096d4 	.word	0x080096d4
 80079bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079c0:	6018      	str	r0, [r3, #0]
 80079c2:	9b07      	ldr	r3, [sp, #28]
 80079c4:	2b0e      	cmp	r3, #14
 80079c6:	f200 80a4 	bhi.w	8007b12 <_dtoa_r+0x442>
 80079ca:	2c00      	cmp	r4, #0
 80079cc:	f000 80a1 	beq.w	8007b12 <_dtoa_r+0x442>
 80079d0:	2f00      	cmp	r7, #0
 80079d2:	dd33      	ble.n	8007a3c <_dtoa_r+0x36c>
 80079d4:	4bad      	ldr	r3, [pc, #692]	@ (8007c8c <_dtoa_r+0x5bc>)
 80079d6:	f007 020f 	and.w	r2, r7, #15
 80079da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079de:	ed93 7b00 	vldr	d7, [r3]
 80079e2:	05f8      	lsls	r0, r7, #23
 80079e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80079e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80079ec:	d516      	bpl.n	8007a1c <_dtoa_r+0x34c>
 80079ee:	4ba8      	ldr	r3, [pc, #672]	@ (8007c90 <_dtoa_r+0x5c0>)
 80079f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079f8:	f7f8 ff28 	bl	800084c <__aeabi_ddiv>
 80079fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a00:	f004 040f 	and.w	r4, r4, #15
 8007a04:	2603      	movs	r6, #3
 8007a06:	4da2      	ldr	r5, [pc, #648]	@ (8007c90 <_dtoa_r+0x5c0>)
 8007a08:	b954      	cbnz	r4, 8007a20 <_dtoa_r+0x350>
 8007a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a12:	f7f8 ff1b 	bl	800084c <__aeabi_ddiv>
 8007a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a1a:	e028      	b.n	8007a6e <_dtoa_r+0x39e>
 8007a1c:	2602      	movs	r6, #2
 8007a1e:	e7f2      	b.n	8007a06 <_dtoa_r+0x336>
 8007a20:	07e1      	lsls	r1, r4, #31
 8007a22:	d508      	bpl.n	8007a36 <_dtoa_r+0x366>
 8007a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a2c:	f7f8 fde4 	bl	80005f8 <__aeabi_dmul>
 8007a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a34:	3601      	adds	r6, #1
 8007a36:	1064      	asrs	r4, r4, #1
 8007a38:	3508      	adds	r5, #8
 8007a3a:	e7e5      	b.n	8007a08 <_dtoa_r+0x338>
 8007a3c:	f000 80d2 	beq.w	8007be4 <_dtoa_r+0x514>
 8007a40:	427c      	negs	r4, r7
 8007a42:	4b92      	ldr	r3, [pc, #584]	@ (8007c8c <_dtoa_r+0x5bc>)
 8007a44:	4d92      	ldr	r5, [pc, #584]	@ (8007c90 <_dtoa_r+0x5c0>)
 8007a46:	f004 020f 	and.w	r2, r4, #15
 8007a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a56:	f7f8 fdcf 	bl	80005f8 <__aeabi_dmul>
 8007a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a5e:	1124      	asrs	r4, r4, #4
 8007a60:	2300      	movs	r3, #0
 8007a62:	2602      	movs	r6, #2
 8007a64:	2c00      	cmp	r4, #0
 8007a66:	f040 80b2 	bne.w	8007bce <_dtoa_r+0x4fe>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1d3      	bne.n	8007a16 <_dtoa_r+0x346>
 8007a6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80b7 	beq.w	8007be8 <_dtoa_r+0x518>
 8007a7a:	4b86      	ldr	r3, [pc, #536]	@ (8007c94 <_dtoa_r+0x5c4>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4620      	mov	r0, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7f9 f82b 	bl	8000adc <__aeabi_dcmplt>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	f000 80ae 	beq.w	8007be8 <_dtoa_r+0x518>
 8007a8c:	9b07      	ldr	r3, [sp, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80aa 	beq.w	8007be8 <_dtoa_r+0x518>
 8007a94:	9b00      	ldr	r3, [sp, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dd37      	ble.n	8007b0a <_dtoa_r+0x43a>
 8007a9a:	1e7b      	subs	r3, r7, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4b7d      	ldr	r3, [pc, #500]	@ (8007c98 <_dtoa_r+0x5c8>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f8 fda7 	bl	80005f8 <__aeabi_dmul>
 8007aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aae:	9c00      	ldr	r4, [sp, #0]
 8007ab0:	3601      	adds	r6, #1
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7f8 fd36 	bl	8000524 <__aeabi_i2d>
 8007ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007abc:	f7f8 fd9c 	bl	80005f8 <__aeabi_dmul>
 8007ac0:	4b76      	ldr	r3, [pc, #472]	@ (8007c9c <_dtoa_r+0x5cc>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f7f8 fbe2 	bl	800028c <__adddf3>
 8007ac8:	4605      	mov	r5, r0
 8007aca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ace:	2c00      	cmp	r4, #0
 8007ad0:	f040 808d 	bne.w	8007bee <_dtoa_r+0x51e>
 8007ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad8:	4b71      	ldr	r3, [pc, #452]	@ (8007ca0 <_dtoa_r+0x5d0>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	f7f8 fbd4 	bl	8000288 <__aeabi_dsub>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ae8:	462a      	mov	r2, r5
 8007aea:	4633      	mov	r3, r6
 8007aec:	f7f9 f814 	bl	8000b18 <__aeabi_dcmpgt>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f040 828b 	bne.w	800800c <_dtoa_r+0x93c>
 8007af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007afa:	462a      	mov	r2, r5
 8007afc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b00:	f7f8 ffec 	bl	8000adc <__aeabi_dcmplt>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	f040 8128 	bne.w	8007d5a <_dtoa_r+0x68a>
 8007b0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f2c0 815a 	blt.w	8007dce <_dtoa_r+0x6fe>
 8007b1a:	2f0e      	cmp	r7, #14
 8007b1c:	f300 8157 	bgt.w	8007dce <_dtoa_r+0x6fe>
 8007b20:	4b5a      	ldr	r3, [pc, #360]	@ (8007c8c <_dtoa_r+0x5bc>)
 8007b22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b26:	ed93 7b00 	vldr	d7, [r3]
 8007b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	ed8d 7b00 	vstr	d7, [sp]
 8007b32:	da03      	bge.n	8007b3c <_dtoa_r+0x46c>
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f340 8101 	ble.w	8007d3e <_dtoa_r+0x66e>
 8007b3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b40:	4656      	mov	r6, sl
 8007b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 fe7f 	bl	800084c <__aeabi_ddiv>
 8007b4e:	f7f9 f803 	bl	8000b58 <__aeabi_d2iz>
 8007b52:	4680      	mov	r8, r0
 8007b54:	f7f8 fce6 	bl	8000524 <__aeabi_i2d>
 8007b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b5c:	f7f8 fd4c 	bl	80005f8 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4620      	mov	r0, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007b6c:	f7f8 fb8c 	bl	8000288 <__aeabi_dsub>
 8007b70:	f806 4b01 	strb.w	r4, [r6], #1
 8007b74:	9d07      	ldr	r5, [sp, #28]
 8007b76:	eba6 040a 	sub.w	r4, r6, sl
 8007b7a:	42a5      	cmp	r5, r4
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	f040 8117 	bne.w	8007db2 <_dtoa_r+0x6e2>
 8007b84:	f7f8 fb82 	bl	800028c <__adddf3>
 8007b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	f7f8 ffc2 	bl	8000b18 <__aeabi_dcmpgt>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f040 80f9 	bne.w	8007d8c <_dtoa_r+0x6bc>
 8007b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 ff91 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ba6:	b118      	cbz	r0, 8007bb0 <_dtoa_r+0x4e0>
 8007ba8:	f018 0f01 	tst.w	r8, #1
 8007bac:	f040 80ee 	bne.w	8007d8c <_dtoa_r+0x6bc>
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f000 fc90 	bl	80084d8 <_Bfree>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	7033      	strb	r3, [r6, #0]
 8007bbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bbe:	3701      	adds	r7, #1
 8007bc0:	601f      	str	r7, [r3, #0]
 8007bc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 831d 	beq.w	8008204 <_dtoa_r+0xb34>
 8007bca:	601e      	str	r6, [r3, #0]
 8007bcc:	e31a      	b.n	8008204 <_dtoa_r+0xb34>
 8007bce:	07e2      	lsls	r2, r4, #31
 8007bd0:	d505      	bpl.n	8007bde <_dtoa_r+0x50e>
 8007bd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bd6:	f7f8 fd0f 	bl	80005f8 <__aeabi_dmul>
 8007bda:	3601      	adds	r6, #1
 8007bdc:	2301      	movs	r3, #1
 8007bde:	1064      	asrs	r4, r4, #1
 8007be0:	3508      	adds	r5, #8
 8007be2:	e73f      	b.n	8007a64 <_dtoa_r+0x394>
 8007be4:	2602      	movs	r6, #2
 8007be6:	e742      	b.n	8007a6e <_dtoa_r+0x39e>
 8007be8:	9c07      	ldr	r4, [sp, #28]
 8007bea:	9704      	str	r7, [sp, #16]
 8007bec:	e761      	b.n	8007ab2 <_dtoa_r+0x3e2>
 8007bee:	4b27      	ldr	r3, [pc, #156]	@ (8007c8c <_dtoa_r+0x5bc>)
 8007bf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bfa:	4454      	add	r4, sl
 8007bfc:	2900      	cmp	r1, #0
 8007bfe:	d053      	beq.n	8007ca8 <_dtoa_r+0x5d8>
 8007c00:	4928      	ldr	r1, [pc, #160]	@ (8007ca4 <_dtoa_r+0x5d4>)
 8007c02:	2000      	movs	r0, #0
 8007c04:	f7f8 fe22 	bl	800084c <__aeabi_ddiv>
 8007c08:	4633      	mov	r3, r6
 8007c0a:	462a      	mov	r2, r5
 8007c0c:	f7f8 fb3c 	bl	8000288 <__aeabi_dsub>
 8007c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c14:	4656      	mov	r6, sl
 8007c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c1a:	f7f8 ff9d 	bl	8000b58 <__aeabi_d2iz>
 8007c1e:	4605      	mov	r5, r0
 8007c20:	f7f8 fc80 	bl	8000524 <__aeabi_i2d>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2c:	f7f8 fb2c 	bl	8000288 <__aeabi_dsub>
 8007c30:	3530      	adds	r5, #48	@ 0x30
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c3a:	f806 5b01 	strb.w	r5, [r6], #1
 8007c3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c42:	f7f8 ff4b 	bl	8000adc <__aeabi_dcmplt>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d171      	bne.n	8007d2e <_dtoa_r+0x65e>
 8007c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c4e:	4911      	ldr	r1, [pc, #68]	@ (8007c94 <_dtoa_r+0x5c4>)
 8007c50:	2000      	movs	r0, #0
 8007c52:	f7f8 fb19 	bl	8000288 <__aeabi_dsub>
 8007c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c5a:	f7f8 ff3f 	bl	8000adc <__aeabi_dcmplt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f040 8095 	bne.w	8007d8e <_dtoa_r+0x6be>
 8007c64:	42a6      	cmp	r6, r4
 8007c66:	f43f af50 	beq.w	8007b0a <_dtoa_r+0x43a>
 8007c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <_dtoa_r+0x5c8>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	f7f8 fcc1 	bl	80005f8 <__aeabi_dmul>
 8007c76:	4b08      	ldr	r3, [pc, #32]	@ (8007c98 <_dtoa_r+0x5c8>)
 8007c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c82:	f7f8 fcb9 	bl	80005f8 <__aeabi_dmul>
 8007c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c8a:	e7c4      	b.n	8007c16 <_dtoa_r+0x546>
 8007c8c:	08009818 	.word	0x08009818
 8007c90:	080097f0 	.word	0x080097f0
 8007c94:	3ff00000 	.word	0x3ff00000
 8007c98:	40240000 	.word	0x40240000
 8007c9c:	401c0000 	.word	0x401c0000
 8007ca0:	40140000 	.word	0x40140000
 8007ca4:	3fe00000 	.word	0x3fe00000
 8007ca8:	4631      	mov	r1, r6
 8007caa:	4628      	mov	r0, r5
 8007cac:	f7f8 fca4 	bl	80005f8 <__aeabi_dmul>
 8007cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007cb6:	4656      	mov	r6, sl
 8007cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cbc:	f7f8 ff4c 	bl	8000b58 <__aeabi_d2iz>
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	f7f8 fc2f 	bl	8000524 <__aeabi_i2d>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cce:	f7f8 fadb 	bl	8000288 <__aeabi_dsub>
 8007cd2:	3530      	adds	r5, #48	@ 0x30
 8007cd4:	f806 5b01 	strb.w	r5, [r6], #1
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	42a6      	cmp	r6, r4
 8007cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ce2:	f04f 0200 	mov.w	r2, #0
 8007ce6:	d124      	bne.n	8007d32 <_dtoa_r+0x662>
 8007ce8:	4bac      	ldr	r3, [pc, #688]	@ (8007f9c <_dtoa_r+0x8cc>)
 8007cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cee:	f7f8 facd 	bl	800028c <__adddf3>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfa:	f7f8 ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d145      	bne.n	8007d8e <_dtoa_r+0x6be>
 8007d02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d06:	49a5      	ldr	r1, [pc, #660]	@ (8007f9c <_dtoa_r+0x8cc>)
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f7f8 fabd 	bl	8000288 <__aeabi_dsub>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d16:	f7f8 fee1 	bl	8000adc <__aeabi_dcmplt>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	f43f aef5 	beq.w	8007b0a <_dtoa_r+0x43a>
 8007d20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d22:	1e73      	subs	r3, r6, #1
 8007d24:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d2a:	2b30      	cmp	r3, #48	@ 0x30
 8007d2c:	d0f8      	beq.n	8007d20 <_dtoa_r+0x650>
 8007d2e:	9f04      	ldr	r7, [sp, #16]
 8007d30:	e73e      	b.n	8007bb0 <_dtoa_r+0x4e0>
 8007d32:	4b9b      	ldr	r3, [pc, #620]	@ (8007fa0 <_dtoa_r+0x8d0>)
 8007d34:	f7f8 fc60 	bl	80005f8 <__aeabi_dmul>
 8007d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d3c:	e7bc      	b.n	8007cb8 <_dtoa_r+0x5e8>
 8007d3e:	d10c      	bne.n	8007d5a <_dtoa_r+0x68a>
 8007d40:	4b98      	ldr	r3, [pc, #608]	@ (8007fa4 <_dtoa_r+0x8d4>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d48:	f7f8 fc56 	bl	80005f8 <__aeabi_dmul>
 8007d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d50:	f7f8 fed8 	bl	8000b04 <__aeabi_dcmpge>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	f000 8157 	beq.w	8008008 <_dtoa_r+0x938>
 8007d5a:	2400      	movs	r4, #0
 8007d5c:	4625      	mov	r5, r4
 8007d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d60:	43db      	mvns	r3, r3
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	4656      	mov	r6, sl
 8007d66:	2700      	movs	r7, #0
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4658      	mov	r0, fp
 8007d6c:	f000 fbb4 	bl	80084d8 <_Bfree>
 8007d70:	2d00      	cmp	r5, #0
 8007d72:	d0dc      	beq.n	8007d2e <_dtoa_r+0x65e>
 8007d74:	b12f      	cbz	r7, 8007d82 <_dtoa_r+0x6b2>
 8007d76:	42af      	cmp	r7, r5
 8007d78:	d003      	beq.n	8007d82 <_dtoa_r+0x6b2>
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	4658      	mov	r0, fp
 8007d7e:	f000 fbab 	bl	80084d8 <_Bfree>
 8007d82:	4629      	mov	r1, r5
 8007d84:	4658      	mov	r0, fp
 8007d86:	f000 fba7 	bl	80084d8 <_Bfree>
 8007d8a:	e7d0      	b.n	8007d2e <_dtoa_r+0x65e>
 8007d8c:	9704      	str	r7, [sp, #16]
 8007d8e:	4633      	mov	r3, r6
 8007d90:	461e      	mov	r6, r3
 8007d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d96:	2a39      	cmp	r2, #57	@ 0x39
 8007d98:	d107      	bne.n	8007daa <_dtoa_r+0x6da>
 8007d9a:	459a      	cmp	sl, r3
 8007d9c:	d1f8      	bne.n	8007d90 <_dtoa_r+0x6c0>
 8007d9e:	9a04      	ldr	r2, [sp, #16]
 8007da0:	3201      	adds	r2, #1
 8007da2:	9204      	str	r2, [sp, #16]
 8007da4:	2230      	movs	r2, #48	@ 0x30
 8007da6:	f88a 2000 	strb.w	r2, [sl]
 8007daa:	781a      	ldrb	r2, [r3, #0]
 8007dac:	3201      	adds	r2, #1
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	e7bd      	b.n	8007d2e <_dtoa_r+0x65e>
 8007db2:	4b7b      	ldr	r3, [pc, #492]	@ (8007fa0 <_dtoa_r+0x8d0>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	f7f8 fc1f 	bl	80005f8 <__aeabi_dmul>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	f7f8 fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f43f aebb 	beq.w	8007b42 <_dtoa_r+0x472>
 8007dcc:	e6f0      	b.n	8007bb0 <_dtoa_r+0x4e0>
 8007dce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007dd0:	2a00      	cmp	r2, #0
 8007dd2:	f000 80db 	beq.w	8007f8c <_dtoa_r+0x8bc>
 8007dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dd8:	2a01      	cmp	r2, #1
 8007dda:	f300 80bf 	bgt.w	8007f5c <_dtoa_r+0x88c>
 8007dde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	f000 80b7 	beq.w	8007f54 <_dtoa_r+0x884>
 8007de6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007dea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007dec:	4646      	mov	r6, r8
 8007dee:	9a08      	ldr	r2, [sp, #32]
 8007df0:	2101      	movs	r1, #1
 8007df2:	441a      	add	r2, r3
 8007df4:	4658      	mov	r0, fp
 8007df6:	4498      	add	r8, r3
 8007df8:	9208      	str	r2, [sp, #32]
 8007dfa:	f000 fc21 	bl	8008640 <__i2b>
 8007dfe:	4605      	mov	r5, r0
 8007e00:	b15e      	cbz	r6, 8007e1a <_dtoa_r+0x74a>
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd08      	ble.n	8007e1a <_dtoa_r+0x74a>
 8007e08:	42b3      	cmp	r3, r6
 8007e0a:	9a08      	ldr	r2, [sp, #32]
 8007e0c:	bfa8      	it	ge
 8007e0e:	4633      	movge	r3, r6
 8007e10:	eba8 0803 	sub.w	r8, r8, r3
 8007e14:	1af6      	subs	r6, r6, r3
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	9308      	str	r3, [sp, #32]
 8007e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e1c:	b1f3      	cbz	r3, 8007e5c <_dtoa_r+0x78c>
 8007e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 80b7 	beq.w	8007f94 <_dtoa_r+0x8c4>
 8007e26:	b18c      	cbz	r4, 8007e4c <_dtoa_r+0x77c>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	4658      	mov	r0, fp
 8007e2e:	f000 fcc7 	bl	80087c0 <__pow5mult>
 8007e32:	464a      	mov	r2, r9
 8007e34:	4601      	mov	r1, r0
 8007e36:	4605      	mov	r5, r0
 8007e38:	4658      	mov	r0, fp
 8007e3a:	f000 fc17 	bl	800866c <__multiply>
 8007e3e:	4649      	mov	r1, r9
 8007e40:	9004      	str	r0, [sp, #16]
 8007e42:	4658      	mov	r0, fp
 8007e44:	f000 fb48 	bl	80084d8 <_Bfree>
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	4699      	mov	r9, r3
 8007e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e4e:	1b1a      	subs	r2, r3, r4
 8007e50:	d004      	beq.n	8007e5c <_dtoa_r+0x78c>
 8007e52:	4649      	mov	r1, r9
 8007e54:	4658      	mov	r0, fp
 8007e56:	f000 fcb3 	bl	80087c0 <__pow5mult>
 8007e5a:	4681      	mov	r9, r0
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	4658      	mov	r0, fp
 8007e60:	f000 fbee 	bl	8008640 <__i2b>
 8007e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e66:	4604      	mov	r4, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 81cf 	beq.w	800820c <_dtoa_r+0xb3c>
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4601      	mov	r1, r0
 8007e72:	4658      	mov	r0, fp
 8007e74:	f000 fca4 	bl	80087c0 <__pow5mult>
 8007e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	f300 8095 	bgt.w	8007fac <_dtoa_r+0x8dc>
 8007e82:	9b02      	ldr	r3, [sp, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f040 8087 	bne.w	8007f98 <_dtoa_r+0x8c8>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f040 8089 	bne.w	8007fa8 <_dtoa_r+0x8d8>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e9c:	0d1b      	lsrs	r3, r3, #20
 8007e9e:	051b      	lsls	r3, r3, #20
 8007ea0:	b12b      	cbz	r3, 8007eae <_dtoa_r+0x7de>
 8007ea2:	9b08      	ldr	r3, [sp, #32]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	9308      	str	r3, [sp, #32]
 8007ea8:	f108 0801 	add.w	r8, r8, #1
 8007eac:	2301      	movs	r3, #1
 8007eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 81b0 	beq.w	8008218 <_dtoa_r+0xb48>
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ebe:	6918      	ldr	r0, [r3, #16]
 8007ec0:	f000 fb72 	bl	80085a8 <__hi0bits>
 8007ec4:	f1c0 0020 	rsb	r0, r0, #32
 8007ec8:	9b08      	ldr	r3, [sp, #32]
 8007eca:	4418      	add	r0, r3
 8007ecc:	f010 001f 	ands.w	r0, r0, #31
 8007ed0:	d077      	beq.n	8007fc2 <_dtoa_r+0x8f2>
 8007ed2:	f1c0 0320 	rsb	r3, r0, #32
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	dd6b      	ble.n	8007fb2 <_dtoa_r+0x8e2>
 8007eda:	9b08      	ldr	r3, [sp, #32]
 8007edc:	f1c0 001c 	rsb	r0, r0, #28
 8007ee0:	4403      	add	r3, r0
 8007ee2:	4480      	add	r8, r0
 8007ee4:	4406      	add	r6, r0
 8007ee6:	9308      	str	r3, [sp, #32]
 8007ee8:	f1b8 0f00 	cmp.w	r8, #0
 8007eec:	dd05      	ble.n	8007efa <_dtoa_r+0x82a>
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	4658      	mov	r0, fp
 8007ef4:	f000 fcbe 	bl	8008874 <__lshift>
 8007ef8:	4681      	mov	r9, r0
 8007efa:	9b08      	ldr	r3, [sp, #32]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd05      	ble.n	8007f0c <_dtoa_r+0x83c>
 8007f00:	4621      	mov	r1, r4
 8007f02:	461a      	mov	r2, r3
 8007f04:	4658      	mov	r0, fp
 8007f06:	f000 fcb5 	bl	8008874 <__lshift>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d059      	beq.n	8007fc6 <_dtoa_r+0x8f6>
 8007f12:	4621      	mov	r1, r4
 8007f14:	4648      	mov	r0, r9
 8007f16:	f000 fd19 	bl	800894c <__mcmp>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	da53      	bge.n	8007fc6 <_dtoa_r+0x8f6>
 8007f1e:	1e7b      	subs	r3, r7, #1
 8007f20:	9304      	str	r3, [sp, #16]
 8007f22:	4649      	mov	r1, r9
 8007f24:	2300      	movs	r3, #0
 8007f26:	220a      	movs	r2, #10
 8007f28:	4658      	mov	r0, fp
 8007f2a:	f000 faf7 	bl	800851c <__multadd>
 8007f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f30:	4681      	mov	r9, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8172 	beq.w	800821c <_dtoa_r+0xb4c>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	4658      	mov	r0, fp
 8007f40:	f000 faec 	bl	800851c <__multadd>
 8007f44:	9b00      	ldr	r3, [sp, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	4605      	mov	r5, r0
 8007f4a:	dc67      	bgt.n	800801c <_dtoa_r+0x94c>
 8007f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	dc41      	bgt.n	8007fd6 <_dtoa_r+0x906>
 8007f52:	e063      	b.n	800801c <_dtoa_r+0x94c>
 8007f54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f5a:	e746      	b.n	8007dea <_dtoa_r+0x71a>
 8007f5c:	9b07      	ldr	r3, [sp, #28]
 8007f5e:	1e5c      	subs	r4, r3, #1
 8007f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f62:	42a3      	cmp	r3, r4
 8007f64:	bfbf      	itttt	lt
 8007f66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007f68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007f6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007f6c:	1ae3      	sublt	r3, r4, r3
 8007f6e:	bfb4      	ite	lt
 8007f70:	18d2      	addlt	r2, r2, r3
 8007f72:	1b1c      	subge	r4, r3, r4
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	bfbc      	itt	lt
 8007f78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007f7a:	2400      	movlt	r4, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	bfb5      	itete	lt
 8007f80:	eba8 0603 	sublt.w	r6, r8, r3
 8007f84:	9b07      	ldrge	r3, [sp, #28]
 8007f86:	2300      	movlt	r3, #0
 8007f88:	4646      	movge	r6, r8
 8007f8a:	e730      	b.n	8007dee <_dtoa_r+0x71e>
 8007f8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007f90:	4646      	mov	r6, r8
 8007f92:	e735      	b.n	8007e00 <_dtoa_r+0x730>
 8007f94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f96:	e75c      	b.n	8007e52 <_dtoa_r+0x782>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e788      	b.n	8007eae <_dtoa_r+0x7de>
 8007f9c:	3fe00000 	.word	0x3fe00000
 8007fa0:	40240000 	.word	0x40240000
 8007fa4:	40140000 	.word	0x40140000
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	e780      	b.n	8007eae <_dtoa_r+0x7de>
 8007fac:	2300      	movs	r3, #0
 8007fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fb0:	e782      	b.n	8007eb8 <_dtoa_r+0x7e8>
 8007fb2:	d099      	beq.n	8007ee8 <_dtoa_r+0x818>
 8007fb4:	9a08      	ldr	r2, [sp, #32]
 8007fb6:	331c      	adds	r3, #28
 8007fb8:	441a      	add	r2, r3
 8007fba:	4498      	add	r8, r3
 8007fbc:	441e      	add	r6, r3
 8007fbe:	9208      	str	r2, [sp, #32]
 8007fc0:	e792      	b.n	8007ee8 <_dtoa_r+0x818>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	e7f6      	b.n	8007fb4 <_dtoa_r+0x8e4>
 8007fc6:	9b07      	ldr	r3, [sp, #28]
 8007fc8:	9704      	str	r7, [sp, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dc20      	bgt.n	8008010 <_dtoa_r+0x940>
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	dd1e      	ble.n	8008014 <_dtoa_r+0x944>
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f47f aec0 	bne.w	8007d5e <_dtoa_r+0x68e>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	2205      	movs	r2, #5
 8007fe2:	4658      	mov	r0, fp
 8007fe4:	f000 fa9a 	bl	800851c <__multadd>
 8007fe8:	4601      	mov	r1, r0
 8007fea:	4604      	mov	r4, r0
 8007fec:	4648      	mov	r0, r9
 8007fee:	f000 fcad 	bl	800894c <__mcmp>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f77f aeb3 	ble.w	8007d5e <_dtoa_r+0x68e>
 8007ff8:	4656      	mov	r6, sl
 8007ffa:	2331      	movs	r3, #49	@ 0x31
 8007ffc:	f806 3b01 	strb.w	r3, [r6], #1
 8008000:	9b04      	ldr	r3, [sp, #16]
 8008002:	3301      	adds	r3, #1
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	e6ae      	b.n	8007d66 <_dtoa_r+0x696>
 8008008:	9c07      	ldr	r4, [sp, #28]
 800800a:	9704      	str	r7, [sp, #16]
 800800c:	4625      	mov	r5, r4
 800800e:	e7f3      	b.n	8007ff8 <_dtoa_r+0x928>
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 8104 	beq.w	8008224 <_dtoa_r+0xb54>
 800801c:	2e00      	cmp	r6, #0
 800801e:	dd05      	ble.n	800802c <_dtoa_r+0x95c>
 8008020:	4629      	mov	r1, r5
 8008022:	4632      	mov	r2, r6
 8008024:	4658      	mov	r0, fp
 8008026:	f000 fc25 	bl	8008874 <__lshift>
 800802a:	4605      	mov	r5, r0
 800802c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800802e:	2b00      	cmp	r3, #0
 8008030:	d05a      	beq.n	80080e8 <_dtoa_r+0xa18>
 8008032:	6869      	ldr	r1, [r5, #4]
 8008034:	4658      	mov	r0, fp
 8008036:	f000 fa0f 	bl	8008458 <_Balloc>
 800803a:	4606      	mov	r6, r0
 800803c:	b928      	cbnz	r0, 800804a <_dtoa_r+0x97a>
 800803e:	4b84      	ldr	r3, [pc, #528]	@ (8008250 <_dtoa_r+0xb80>)
 8008040:	4602      	mov	r2, r0
 8008042:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008046:	f7ff bb5a 	b.w	80076fe <_dtoa_r+0x2e>
 800804a:	692a      	ldr	r2, [r5, #16]
 800804c:	3202      	adds	r2, #2
 800804e:	0092      	lsls	r2, r2, #2
 8008050:	f105 010c 	add.w	r1, r5, #12
 8008054:	300c      	adds	r0, #12
 8008056:	f000 ffaf 	bl	8008fb8 <memcpy>
 800805a:	2201      	movs	r2, #1
 800805c:	4631      	mov	r1, r6
 800805e:	4658      	mov	r0, fp
 8008060:	f000 fc08 	bl	8008874 <__lshift>
 8008064:	f10a 0301 	add.w	r3, sl, #1
 8008068:	9307      	str	r3, [sp, #28]
 800806a:	9b00      	ldr	r3, [sp, #0]
 800806c:	4453      	add	r3, sl
 800806e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008070:	9b02      	ldr	r3, [sp, #8]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	462f      	mov	r7, r5
 8008078:	930a      	str	r3, [sp, #40]	@ 0x28
 800807a:	4605      	mov	r5, r0
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	4621      	mov	r1, r4
 8008080:	3b01      	subs	r3, #1
 8008082:	4648      	mov	r0, r9
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	f7ff fa98 	bl	80075ba <quorem>
 800808a:	4639      	mov	r1, r7
 800808c:	9002      	str	r0, [sp, #8]
 800808e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008092:	4648      	mov	r0, r9
 8008094:	f000 fc5a 	bl	800894c <__mcmp>
 8008098:	462a      	mov	r2, r5
 800809a:	9008      	str	r0, [sp, #32]
 800809c:	4621      	mov	r1, r4
 800809e:	4658      	mov	r0, fp
 80080a0:	f000 fc70 	bl	8008984 <__mdiff>
 80080a4:	68c2      	ldr	r2, [r0, #12]
 80080a6:	4606      	mov	r6, r0
 80080a8:	bb02      	cbnz	r2, 80080ec <_dtoa_r+0xa1c>
 80080aa:	4601      	mov	r1, r0
 80080ac:	4648      	mov	r0, r9
 80080ae:	f000 fc4d 	bl	800894c <__mcmp>
 80080b2:	4602      	mov	r2, r0
 80080b4:	4631      	mov	r1, r6
 80080b6:	4658      	mov	r0, fp
 80080b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80080ba:	f000 fa0d 	bl	80084d8 <_Bfree>
 80080be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080c2:	9e07      	ldr	r6, [sp, #28]
 80080c4:	ea43 0102 	orr.w	r1, r3, r2
 80080c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ca:	4319      	orrs	r1, r3
 80080cc:	d110      	bne.n	80080f0 <_dtoa_r+0xa20>
 80080ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080d2:	d029      	beq.n	8008128 <_dtoa_r+0xa58>
 80080d4:	9b08      	ldr	r3, [sp, #32]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dd02      	ble.n	80080e0 <_dtoa_r+0xa10>
 80080da:	9b02      	ldr	r3, [sp, #8]
 80080dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80080e0:	9b00      	ldr	r3, [sp, #0]
 80080e2:	f883 8000 	strb.w	r8, [r3]
 80080e6:	e63f      	b.n	8007d68 <_dtoa_r+0x698>
 80080e8:	4628      	mov	r0, r5
 80080ea:	e7bb      	b.n	8008064 <_dtoa_r+0x994>
 80080ec:	2201      	movs	r2, #1
 80080ee:	e7e1      	b.n	80080b4 <_dtoa_r+0x9e4>
 80080f0:	9b08      	ldr	r3, [sp, #32]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	db04      	blt.n	8008100 <_dtoa_r+0xa30>
 80080f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080f8:	430b      	orrs	r3, r1
 80080fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080fc:	430b      	orrs	r3, r1
 80080fe:	d120      	bne.n	8008142 <_dtoa_r+0xa72>
 8008100:	2a00      	cmp	r2, #0
 8008102:	dded      	ble.n	80080e0 <_dtoa_r+0xa10>
 8008104:	4649      	mov	r1, r9
 8008106:	2201      	movs	r2, #1
 8008108:	4658      	mov	r0, fp
 800810a:	f000 fbb3 	bl	8008874 <__lshift>
 800810e:	4621      	mov	r1, r4
 8008110:	4681      	mov	r9, r0
 8008112:	f000 fc1b 	bl	800894c <__mcmp>
 8008116:	2800      	cmp	r0, #0
 8008118:	dc03      	bgt.n	8008122 <_dtoa_r+0xa52>
 800811a:	d1e1      	bne.n	80080e0 <_dtoa_r+0xa10>
 800811c:	f018 0f01 	tst.w	r8, #1
 8008120:	d0de      	beq.n	80080e0 <_dtoa_r+0xa10>
 8008122:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008126:	d1d8      	bne.n	80080da <_dtoa_r+0xa0a>
 8008128:	9a00      	ldr	r2, [sp, #0]
 800812a:	2339      	movs	r3, #57	@ 0x39
 800812c:	7013      	strb	r3, [r2, #0]
 800812e:	4633      	mov	r3, r6
 8008130:	461e      	mov	r6, r3
 8008132:	3b01      	subs	r3, #1
 8008134:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008138:	2a39      	cmp	r2, #57	@ 0x39
 800813a:	d052      	beq.n	80081e2 <_dtoa_r+0xb12>
 800813c:	3201      	adds	r2, #1
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	e612      	b.n	8007d68 <_dtoa_r+0x698>
 8008142:	2a00      	cmp	r2, #0
 8008144:	dd07      	ble.n	8008156 <_dtoa_r+0xa86>
 8008146:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800814a:	d0ed      	beq.n	8008128 <_dtoa_r+0xa58>
 800814c:	9a00      	ldr	r2, [sp, #0]
 800814e:	f108 0301 	add.w	r3, r8, #1
 8008152:	7013      	strb	r3, [r2, #0]
 8008154:	e608      	b.n	8007d68 <_dtoa_r+0x698>
 8008156:	9b07      	ldr	r3, [sp, #28]
 8008158:	9a07      	ldr	r2, [sp, #28]
 800815a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800815e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008160:	4293      	cmp	r3, r2
 8008162:	d028      	beq.n	80081b6 <_dtoa_r+0xae6>
 8008164:	4649      	mov	r1, r9
 8008166:	2300      	movs	r3, #0
 8008168:	220a      	movs	r2, #10
 800816a:	4658      	mov	r0, fp
 800816c:	f000 f9d6 	bl	800851c <__multadd>
 8008170:	42af      	cmp	r7, r5
 8008172:	4681      	mov	r9, r0
 8008174:	f04f 0300 	mov.w	r3, #0
 8008178:	f04f 020a 	mov.w	r2, #10
 800817c:	4639      	mov	r1, r7
 800817e:	4658      	mov	r0, fp
 8008180:	d107      	bne.n	8008192 <_dtoa_r+0xac2>
 8008182:	f000 f9cb 	bl	800851c <__multadd>
 8008186:	4607      	mov	r7, r0
 8008188:	4605      	mov	r5, r0
 800818a:	9b07      	ldr	r3, [sp, #28]
 800818c:	3301      	adds	r3, #1
 800818e:	9307      	str	r3, [sp, #28]
 8008190:	e774      	b.n	800807c <_dtoa_r+0x9ac>
 8008192:	f000 f9c3 	bl	800851c <__multadd>
 8008196:	4629      	mov	r1, r5
 8008198:	4607      	mov	r7, r0
 800819a:	2300      	movs	r3, #0
 800819c:	220a      	movs	r2, #10
 800819e:	4658      	mov	r0, fp
 80081a0:	f000 f9bc 	bl	800851c <__multadd>
 80081a4:	4605      	mov	r5, r0
 80081a6:	e7f0      	b.n	800818a <_dtoa_r+0xaba>
 80081a8:	9b00      	ldr	r3, [sp, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfcc      	ite	gt
 80081ae:	461e      	movgt	r6, r3
 80081b0:	2601      	movle	r6, #1
 80081b2:	4456      	add	r6, sl
 80081b4:	2700      	movs	r7, #0
 80081b6:	4649      	mov	r1, r9
 80081b8:	2201      	movs	r2, #1
 80081ba:	4658      	mov	r0, fp
 80081bc:	f000 fb5a 	bl	8008874 <__lshift>
 80081c0:	4621      	mov	r1, r4
 80081c2:	4681      	mov	r9, r0
 80081c4:	f000 fbc2 	bl	800894c <__mcmp>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	dcb0      	bgt.n	800812e <_dtoa_r+0xa5e>
 80081cc:	d102      	bne.n	80081d4 <_dtoa_r+0xb04>
 80081ce:	f018 0f01 	tst.w	r8, #1
 80081d2:	d1ac      	bne.n	800812e <_dtoa_r+0xa5e>
 80081d4:	4633      	mov	r3, r6
 80081d6:	461e      	mov	r6, r3
 80081d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081dc:	2a30      	cmp	r2, #48	@ 0x30
 80081de:	d0fa      	beq.n	80081d6 <_dtoa_r+0xb06>
 80081e0:	e5c2      	b.n	8007d68 <_dtoa_r+0x698>
 80081e2:	459a      	cmp	sl, r3
 80081e4:	d1a4      	bne.n	8008130 <_dtoa_r+0xa60>
 80081e6:	9b04      	ldr	r3, [sp, #16]
 80081e8:	3301      	adds	r3, #1
 80081ea:	9304      	str	r3, [sp, #16]
 80081ec:	2331      	movs	r3, #49	@ 0x31
 80081ee:	f88a 3000 	strb.w	r3, [sl]
 80081f2:	e5b9      	b.n	8007d68 <_dtoa_r+0x698>
 80081f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008254 <_dtoa_r+0xb84>
 80081fa:	b11b      	cbz	r3, 8008204 <_dtoa_r+0xb34>
 80081fc:	f10a 0308 	add.w	r3, sl, #8
 8008200:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	4650      	mov	r0, sl
 8008206:	b019      	add	sp, #100	@ 0x64
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800820e:	2b01      	cmp	r3, #1
 8008210:	f77f ae37 	ble.w	8007e82 <_dtoa_r+0x7b2>
 8008214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008216:	930a      	str	r3, [sp, #40]	@ 0x28
 8008218:	2001      	movs	r0, #1
 800821a:	e655      	b.n	8007ec8 <_dtoa_r+0x7f8>
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f77f aed6 	ble.w	8007fd0 <_dtoa_r+0x900>
 8008224:	4656      	mov	r6, sl
 8008226:	4621      	mov	r1, r4
 8008228:	4648      	mov	r0, r9
 800822a:	f7ff f9c6 	bl	80075ba <quorem>
 800822e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008232:	f806 8b01 	strb.w	r8, [r6], #1
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	eba6 020a 	sub.w	r2, r6, sl
 800823c:	4293      	cmp	r3, r2
 800823e:	ddb3      	ble.n	80081a8 <_dtoa_r+0xad8>
 8008240:	4649      	mov	r1, r9
 8008242:	2300      	movs	r3, #0
 8008244:	220a      	movs	r2, #10
 8008246:	4658      	mov	r0, fp
 8008248:	f000 f968 	bl	800851c <__multadd>
 800824c:	4681      	mov	r9, r0
 800824e:	e7ea      	b.n	8008226 <_dtoa_r+0xb56>
 8008250:	08009774 	.word	0x08009774
 8008254:	080096f8 	.word	0x080096f8

08008258 <_free_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4605      	mov	r5, r0
 800825c:	2900      	cmp	r1, #0
 800825e:	d041      	beq.n	80082e4 <_free_r+0x8c>
 8008260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008264:	1f0c      	subs	r4, r1, #4
 8008266:	2b00      	cmp	r3, #0
 8008268:	bfb8      	it	lt
 800826a:	18e4      	addlt	r4, r4, r3
 800826c:	f000 f8e8 	bl	8008440 <__malloc_lock>
 8008270:	4a1d      	ldr	r2, [pc, #116]	@ (80082e8 <_free_r+0x90>)
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	b933      	cbnz	r3, 8008284 <_free_r+0x2c>
 8008276:	6063      	str	r3, [r4, #4]
 8008278:	6014      	str	r4, [r2, #0]
 800827a:	4628      	mov	r0, r5
 800827c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008280:	f000 b8e4 	b.w	800844c <__malloc_unlock>
 8008284:	42a3      	cmp	r3, r4
 8008286:	d908      	bls.n	800829a <_free_r+0x42>
 8008288:	6820      	ldr	r0, [r4, #0]
 800828a:	1821      	adds	r1, r4, r0
 800828c:	428b      	cmp	r3, r1
 800828e:	bf01      	itttt	eq
 8008290:	6819      	ldreq	r1, [r3, #0]
 8008292:	685b      	ldreq	r3, [r3, #4]
 8008294:	1809      	addeq	r1, r1, r0
 8008296:	6021      	streq	r1, [r4, #0]
 8008298:	e7ed      	b.n	8008276 <_free_r+0x1e>
 800829a:	461a      	mov	r2, r3
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	b10b      	cbz	r3, 80082a4 <_free_r+0x4c>
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	d9fa      	bls.n	800829a <_free_r+0x42>
 80082a4:	6811      	ldr	r1, [r2, #0]
 80082a6:	1850      	adds	r0, r2, r1
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	d10b      	bne.n	80082c4 <_free_r+0x6c>
 80082ac:	6820      	ldr	r0, [r4, #0]
 80082ae:	4401      	add	r1, r0
 80082b0:	1850      	adds	r0, r2, r1
 80082b2:	4283      	cmp	r3, r0
 80082b4:	6011      	str	r1, [r2, #0]
 80082b6:	d1e0      	bne.n	800827a <_free_r+0x22>
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	6053      	str	r3, [r2, #4]
 80082be:	4408      	add	r0, r1
 80082c0:	6010      	str	r0, [r2, #0]
 80082c2:	e7da      	b.n	800827a <_free_r+0x22>
 80082c4:	d902      	bls.n	80082cc <_free_r+0x74>
 80082c6:	230c      	movs	r3, #12
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	e7d6      	b.n	800827a <_free_r+0x22>
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	1821      	adds	r1, r4, r0
 80082d0:	428b      	cmp	r3, r1
 80082d2:	bf04      	itt	eq
 80082d4:	6819      	ldreq	r1, [r3, #0]
 80082d6:	685b      	ldreq	r3, [r3, #4]
 80082d8:	6063      	str	r3, [r4, #4]
 80082da:	bf04      	itt	eq
 80082dc:	1809      	addeq	r1, r1, r0
 80082de:	6021      	streq	r1, [r4, #0]
 80082e0:	6054      	str	r4, [r2, #4]
 80082e2:	e7ca      	b.n	800827a <_free_r+0x22>
 80082e4:	bd38      	pop	{r3, r4, r5, pc}
 80082e6:	bf00      	nop
 80082e8:	200003fc 	.word	0x200003fc

080082ec <malloc>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	@ (80082f8 <malloc+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f000 b825 	b.w	8008340 <_malloc_r>
 80082f6:	bf00      	nop
 80082f8:	2000001c 	.word	0x2000001c

080082fc <sbrk_aligned>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	4e0f      	ldr	r6, [pc, #60]	@ (800833c <sbrk_aligned+0x40>)
 8008300:	460c      	mov	r4, r1
 8008302:	6831      	ldr	r1, [r6, #0]
 8008304:	4605      	mov	r5, r0
 8008306:	b911      	cbnz	r1, 800830e <sbrk_aligned+0x12>
 8008308:	f000 fe46 	bl	8008f98 <_sbrk_r>
 800830c:	6030      	str	r0, [r6, #0]
 800830e:	4621      	mov	r1, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f000 fe41 	bl	8008f98 <_sbrk_r>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d103      	bne.n	8008322 <sbrk_aligned+0x26>
 800831a:	f04f 34ff 	mov.w	r4, #4294967295
 800831e:	4620      	mov	r0, r4
 8008320:	bd70      	pop	{r4, r5, r6, pc}
 8008322:	1cc4      	adds	r4, r0, #3
 8008324:	f024 0403 	bic.w	r4, r4, #3
 8008328:	42a0      	cmp	r0, r4
 800832a:	d0f8      	beq.n	800831e <sbrk_aligned+0x22>
 800832c:	1a21      	subs	r1, r4, r0
 800832e:	4628      	mov	r0, r5
 8008330:	f000 fe32 	bl	8008f98 <_sbrk_r>
 8008334:	3001      	adds	r0, #1
 8008336:	d1f2      	bne.n	800831e <sbrk_aligned+0x22>
 8008338:	e7ef      	b.n	800831a <sbrk_aligned+0x1e>
 800833a:	bf00      	nop
 800833c:	200003f8 	.word	0x200003f8

08008340 <_malloc_r>:
 8008340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008344:	1ccd      	adds	r5, r1, #3
 8008346:	f025 0503 	bic.w	r5, r5, #3
 800834a:	3508      	adds	r5, #8
 800834c:	2d0c      	cmp	r5, #12
 800834e:	bf38      	it	cc
 8008350:	250c      	movcc	r5, #12
 8008352:	2d00      	cmp	r5, #0
 8008354:	4606      	mov	r6, r0
 8008356:	db01      	blt.n	800835c <_malloc_r+0x1c>
 8008358:	42a9      	cmp	r1, r5
 800835a:	d904      	bls.n	8008366 <_malloc_r+0x26>
 800835c:	230c      	movs	r3, #12
 800835e:	6033      	str	r3, [r6, #0]
 8008360:	2000      	movs	r0, #0
 8008362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800843c <_malloc_r+0xfc>
 800836a:	f000 f869 	bl	8008440 <__malloc_lock>
 800836e:	f8d8 3000 	ldr.w	r3, [r8]
 8008372:	461c      	mov	r4, r3
 8008374:	bb44      	cbnz	r4, 80083c8 <_malloc_r+0x88>
 8008376:	4629      	mov	r1, r5
 8008378:	4630      	mov	r0, r6
 800837a:	f7ff ffbf 	bl	80082fc <sbrk_aligned>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	4604      	mov	r4, r0
 8008382:	d158      	bne.n	8008436 <_malloc_r+0xf6>
 8008384:	f8d8 4000 	ldr.w	r4, [r8]
 8008388:	4627      	mov	r7, r4
 800838a:	2f00      	cmp	r7, #0
 800838c:	d143      	bne.n	8008416 <_malloc_r+0xd6>
 800838e:	2c00      	cmp	r4, #0
 8008390:	d04b      	beq.n	800842a <_malloc_r+0xea>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	4639      	mov	r1, r7
 8008396:	4630      	mov	r0, r6
 8008398:	eb04 0903 	add.w	r9, r4, r3
 800839c:	f000 fdfc 	bl	8008f98 <_sbrk_r>
 80083a0:	4581      	cmp	r9, r0
 80083a2:	d142      	bne.n	800842a <_malloc_r+0xea>
 80083a4:	6821      	ldr	r1, [r4, #0]
 80083a6:	1a6d      	subs	r5, r5, r1
 80083a8:	4629      	mov	r1, r5
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff ffa6 	bl	80082fc <sbrk_aligned>
 80083b0:	3001      	adds	r0, #1
 80083b2:	d03a      	beq.n	800842a <_malloc_r+0xea>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	442b      	add	r3, r5
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	f8d8 3000 	ldr.w	r3, [r8]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	bb62      	cbnz	r2, 800841c <_malloc_r+0xdc>
 80083c2:	f8c8 7000 	str.w	r7, [r8]
 80083c6:	e00f      	b.n	80083e8 <_malloc_r+0xa8>
 80083c8:	6822      	ldr	r2, [r4, #0]
 80083ca:	1b52      	subs	r2, r2, r5
 80083cc:	d420      	bmi.n	8008410 <_malloc_r+0xd0>
 80083ce:	2a0b      	cmp	r2, #11
 80083d0:	d917      	bls.n	8008402 <_malloc_r+0xc2>
 80083d2:	1961      	adds	r1, r4, r5
 80083d4:	42a3      	cmp	r3, r4
 80083d6:	6025      	str	r5, [r4, #0]
 80083d8:	bf18      	it	ne
 80083da:	6059      	strne	r1, [r3, #4]
 80083dc:	6863      	ldr	r3, [r4, #4]
 80083de:	bf08      	it	eq
 80083e0:	f8c8 1000 	streq.w	r1, [r8]
 80083e4:	5162      	str	r2, [r4, r5]
 80083e6:	604b      	str	r3, [r1, #4]
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 f82f 	bl	800844c <__malloc_unlock>
 80083ee:	f104 000b 	add.w	r0, r4, #11
 80083f2:	1d23      	adds	r3, r4, #4
 80083f4:	f020 0007 	bic.w	r0, r0, #7
 80083f8:	1ac2      	subs	r2, r0, r3
 80083fa:	bf1c      	itt	ne
 80083fc:	1a1b      	subne	r3, r3, r0
 80083fe:	50a3      	strne	r3, [r4, r2]
 8008400:	e7af      	b.n	8008362 <_malloc_r+0x22>
 8008402:	6862      	ldr	r2, [r4, #4]
 8008404:	42a3      	cmp	r3, r4
 8008406:	bf0c      	ite	eq
 8008408:	f8c8 2000 	streq.w	r2, [r8]
 800840c:	605a      	strne	r2, [r3, #4]
 800840e:	e7eb      	b.n	80083e8 <_malloc_r+0xa8>
 8008410:	4623      	mov	r3, r4
 8008412:	6864      	ldr	r4, [r4, #4]
 8008414:	e7ae      	b.n	8008374 <_malloc_r+0x34>
 8008416:	463c      	mov	r4, r7
 8008418:	687f      	ldr	r7, [r7, #4]
 800841a:	e7b6      	b.n	800838a <_malloc_r+0x4a>
 800841c:	461a      	mov	r2, r3
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	42a3      	cmp	r3, r4
 8008422:	d1fb      	bne.n	800841c <_malloc_r+0xdc>
 8008424:	2300      	movs	r3, #0
 8008426:	6053      	str	r3, [r2, #4]
 8008428:	e7de      	b.n	80083e8 <_malloc_r+0xa8>
 800842a:	230c      	movs	r3, #12
 800842c:	6033      	str	r3, [r6, #0]
 800842e:	4630      	mov	r0, r6
 8008430:	f000 f80c 	bl	800844c <__malloc_unlock>
 8008434:	e794      	b.n	8008360 <_malloc_r+0x20>
 8008436:	6005      	str	r5, [r0, #0]
 8008438:	e7d6      	b.n	80083e8 <_malloc_r+0xa8>
 800843a:	bf00      	nop
 800843c:	200003fc 	.word	0x200003fc

08008440 <__malloc_lock>:
 8008440:	4801      	ldr	r0, [pc, #4]	@ (8008448 <__malloc_lock+0x8>)
 8008442:	f7ff b8b8 	b.w	80075b6 <__retarget_lock_acquire_recursive>
 8008446:	bf00      	nop
 8008448:	200003f4 	.word	0x200003f4

0800844c <__malloc_unlock>:
 800844c:	4801      	ldr	r0, [pc, #4]	@ (8008454 <__malloc_unlock+0x8>)
 800844e:	f7ff b8b3 	b.w	80075b8 <__retarget_lock_release_recursive>
 8008452:	bf00      	nop
 8008454:	200003f4 	.word	0x200003f4

08008458 <_Balloc>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	69c6      	ldr	r6, [r0, #28]
 800845c:	4604      	mov	r4, r0
 800845e:	460d      	mov	r5, r1
 8008460:	b976      	cbnz	r6, 8008480 <_Balloc+0x28>
 8008462:	2010      	movs	r0, #16
 8008464:	f7ff ff42 	bl	80082ec <malloc>
 8008468:	4602      	mov	r2, r0
 800846a:	61e0      	str	r0, [r4, #28]
 800846c:	b920      	cbnz	r0, 8008478 <_Balloc+0x20>
 800846e:	4b18      	ldr	r3, [pc, #96]	@ (80084d0 <_Balloc+0x78>)
 8008470:	4818      	ldr	r0, [pc, #96]	@ (80084d4 <_Balloc+0x7c>)
 8008472:	216b      	movs	r1, #107	@ 0x6b
 8008474:	f000 fdae 	bl	8008fd4 <__assert_func>
 8008478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800847c:	6006      	str	r6, [r0, #0]
 800847e:	60c6      	str	r6, [r0, #12]
 8008480:	69e6      	ldr	r6, [r4, #28]
 8008482:	68f3      	ldr	r3, [r6, #12]
 8008484:	b183      	cbz	r3, 80084a8 <_Balloc+0x50>
 8008486:	69e3      	ldr	r3, [r4, #28]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800848e:	b9b8      	cbnz	r0, 80084c0 <_Balloc+0x68>
 8008490:	2101      	movs	r1, #1
 8008492:	fa01 f605 	lsl.w	r6, r1, r5
 8008496:	1d72      	adds	r2, r6, #5
 8008498:	0092      	lsls	r2, r2, #2
 800849a:	4620      	mov	r0, r4
 800849c:	f000 fdb8 	bl	8009010 <_calloc_r>
 80084a0:	b160      	cbz	r0, 80084bc <_Balloc+0x64>
 80084a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084a6:	e00e      	b.n	80084c6 <_Balloc+0x6e>
 80084a8:	2221      	movs	r2, #33	@ 0x21
 80084aa:	2104      	movs	r1, #4
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 fdaf 	bl	8009010 <_calloc_r>
 80084b2:	69e3      	ldr	r3, [r4, #28]
 80084b4:	60f0      	str	r0, [r6, #12]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e4      	bne.n	8008486 <_Balloc+0x2e>
 80084bc:	2000      	movs	r0, #0
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	6802      	ldr	r2, [r0, #0]
 80084c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084c6:	2300      	movs	r3, #0
 80084c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084cc:	e7f7      	b.n	80084be <_Balloc+0x66>
 80084ce:	bf00      	nop
 80084d0:	08009705 	.word	0x08009705
 80084d4:	08009785 	.word	0x08009785

080084d8 <_Bfree>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	69c6      	ldr	r6, [r0, #28]
 80084dc:	4605      	mov	r5, r0
 80084de:	460c      	mov	r4, r1
 80084e0:	b976      	cbnz	r6, 8008500 <_Bfree+0x28>
 80084e2:	2010      	movs	r0, #16
 80084e4:	f7ff ff02 	bl	80082ec <malloc>
 80084e8:	4602      	mov	r2, r0
 80084ea:	61e8      	str	r0, [r5, #28]
 80084ec:	b920      	cbnz	r0, 80084f8 <_Bfree+0x20>
 80084ee:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <_Bfree+0x3c>)
 80084f0:	4809      	ldr	r0, [pc, #36]	@ (8008518 <_Bfree+0x40>)
 80084f2:	218f      	movs	r1, #143	@ 0x8f
 80084f4:	f000 fd6e 	bl	8008fd4 <__assert_func>
 80084f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084fc:	6006      	str	r6, [r0, #0]
 80084fe:	60c6      	str	r6, [r0, #12]
 8008500:	b13c      	cbz	r4, 8008512 <_Bfree+0x3a>
 8008502:	69eb      	ldr	r3, [r5, #28]
 8008504:	6862      	ldr	r2, [r4, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800850c:	6021      	str	r1, [r4, #0]
 800850e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	08009705 	.word	0x08009705
 8008518:	08009785 	.word	0x08009785

0800851c <__multadd>:
 800851c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008520:	690d      	ldr	r5, [r1, #16]
 8008522:	4607      	mov	r7, r0
 8008524:	460c      	mov	r4, r1
 8008526:	461e      	mov	r6, r3
 8008528:	f101 0c14 	add.w	ip, r1, #20
 800852c:	2000      	movs	r0, #0
 800852e:	f8dc 3000 	ldr.w	r3, [ip]
 8008532:	b299      	uxth	r1, r3
 8008534:	fb02 6101 	mla	r1, r2, r1, r6
 8008538:	0c1e      	lsrs	r6, r3, #16
 800853a:	0c0b      	lsrs	r3, r1, #16
 800853c:	fb02 3306 	mla	r3, r2, r6, r3
 8008540:	b289      	uxth	r1, r1
 8008542:	3001      	adds	r0, #1
 8008544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008548:	4285      	cmp	r5, r0
 800854a:	f84c 1b04 	str.w	r1, [ip], #4
 800854e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008552:	dcec      	bgt.n	800852e <__multadd+0x12>
 8008554:	b30e      	cbz	r6, 800859a <__multadd+0x7e>
 8008556:	68a3      	ldr	r3, [r4, #8]
 8008558:	42ab      	cmp	r3, r5
 800855a:	dc19      	bgt.n	8008590 <__multadd+0x74>
 800855c:	6861      	ldr	r1, [r4, #4]
 800855e:	4638      	mov	r0, r7
 8008560:	3101      	adds	r1, #1
 8008562:	f7ff ff79 	bl	8008458 <_Balloc>
 8008566:	4680      	mov	r8, r0
 8008568:	b928      	cbnz	r0, 8008576 <__multadd+0x5a>
 800856a:	4602      	mov	r2, r0
 800856c:	4b0c      	ldr	r3, [pc, #48]	@ (80085a0 <__multadd+0x84>)
 800856e:	480d      	ldr	r0, [pc, #52]	@ (80085a4 <__multadd+0x88>)
 8008570:	21ba      	movs	r1, #186	@ 0xba
 8008572:	f000 fd2f 	bl	8008fd4 <__assert_func>
 8008576:	6922      	ldr	r2, [r4, #16]
 8008578:	3202      	adds	r2, #2
 800857a:	f104 010c 	add.w	r1, r4, #12
 800857e:	0092      	lsls	r2, r2, #2
 8008580:	300c      	adds	r0, #12
 8008582:	f000 fd19 	bl	8008fb8 <memcpy>
 8008586:	4621      	mov	r1, r4
 8008588:	4638      	mov	r0, r7
 800858a:	f7ff ffa5 	bl	80084d8 <_Bfree>
 800858e:	4644      	mov	r4, r8
 8008590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008594:	3501      	adds	r5, #1
 8008596:	615e      	str	r6, [r3, #20]
 8008598:	6125      	str	r5, [r4, #16]
 800859a:	4620      	mov	r0, r4
 800859c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a0:	08009774 	.word	0x08009774
 80085a4:	08009785 	.word	0x08009785

080085a8 <__hi0bits>:
 80085a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085ac:	4603      	mov	r3, r0
 80085ae:	bf36      	itet	cc
 80085b0:	0403      	lslcc	r3, r0, #16
 80085b2:	2000      	movcs	r0, #0
 80085b4:	2010      	movcc	r0, #16
 80085b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085ba:	bf3c      	itt	cc
 80085bc:	021b      	lslcc	r3, r3, #8
 80085be:	3008      	addcc	r0, #8
 80085c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085c4:	bf3c      	itt	cc
 80085c6:	011b      	lslcc	r3, r3, #4
 80085c8:	3004      	addcc	r0, #4
 80085ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ce:	bf3c      	itt	cc
 80085d0:	009b      	lslcc	r3, r3, #2
 80085d2:	3002      	addcc	r0, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	db05      	blt.n	80085e4 <__hi0bits+0x3c>
 80085d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085dc:	f100 0001 	add.w	r0, r0, #1
 80085e0:	bf08      	it	eq
 80085e2:	2020      	moveq	r0, #32
 80085e4:	4770      	bx	lr

080085e6 <__lo0bits>:
 80085e6:	6803      	ldr	r3, [r0, #0]
 80085e8:	4602      	mov	r2, r0
 80085ea:	f013 0007 	ands.w	r0, r3, #7
 80085ee:	d00b      	beq.n	8008608 <__lo0bits+0x22>
 80085f0:	07d9      	lsls	r1, r3, #31
 80085f2:	d421      	bmi.n	8008638 <__lo0bits+0x52>
 80085f4:	0798      	lsls	r0, r3, #30
 80085f6:	bf49      	itett	mi
 80085f8:	085b      	lsrmi	r3, r3, #1
 80085fa:	089b      	lsrpl	r3, r3, #2
 80085fc:	2001      	movmi	r0, #1
 80085fe:	6013      	strmi	r3, [r2, #0]
 8008600:	bf5c      	itt	pl
 8008602:	6013      	strpl	r3, [r2, #0]
 8008604:	2002      	movpl	r0, #2
 8008606:	4770      	bx	lr
 8008608:	b299      	uxth	r1, r3
 800860a:	b909      	cbnz	r1, 8008610 <__lo0bits+0x2a>
 800860c:	0c1b      	lsrs	r3, r3, #16
 800860e:	2010      	movs	r0, #16
 8008610:	b2d9      	uxtb	r1, r3
 8008612:	b909      	cbnz	r1, 8008618 <__lo0bits+0x32>
 8008614:	3008      	adds	r0, #8
 8008616:	0a1b      	lsrs	r3, r3, #8
 8008618:	0719      	lsls	r1, r3, #28
 800861a:	bf04      	itt	eq
 800861c:	091b      	lsreq	r3, r3, #4
 800861e:	3004      	addeq	r0, #4
 8008620:	0799      	lsls	r1, r3, #30
 8008622:	bf04      	itt	eq
 8008624:	089b      	lsreq	r3, r3, #2
 8008626:	3002      	addeq	r0, #2
 8008628:	07d9      	lsls	r1, r3, #31
 800862a:	d403      	bmi.n	8008634 <__lo0bits+0x4e>
 800862c:	085b      	lsrs	r3, r3, #1
 800862e:	f100 0001 	add.w	r0, r0, #1
 8008632:	d003      	beq.n	800863c <__lo0bits+0x56>
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	4770      	bx	lr
 8008638:	2000      	movs	r0, #0
 800863a:	4770      	bx	lr
 800863c:	2020      	movs	r0, #32
 800863e:	4770      	bx	lr

08008640 <__i2b>:
 8008640:	b510      	push	{r4, lr}
 8008642:	460c      	mov	r4, r1
 8008644:	2101      	movs	r1, #1
 8008646:	f7ff ff07 	bl	8008458 <_Balloc>
 800864a:	4602      	mov	r2, r0
 800864c:	b928      	cbnz	r0, 800865a <__i2b+0x1a>
 800864e:	4b05      	ldr	r3, [pc, #20]	@ (8008664 <__i2b+0x24>)
 8008650:	4805      	ldr	r0, [pc, #20]	@ (8008668 <__i2b+0x28>)
 8008652:	f240 1145 	movw	r1, #325	@ 0x145
 8008656:	f000 fcbd 	bl	8008fd4 <__assert_func>
 800865a:	2301      	movs	r3, #1
 800865c:	6144      	str	r4, [r0, #20]
 800865e:	6103      	str	r3, [r0, #16]
 8008660:	bd10      	pop	{r4, pc}
 8008662:	bf00      	nop
 8008664:	08009774 	.word	0x08009774
 8008668:	08009785 	.word	0x08009785

0800866c <__multiply>:
 800866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	4614      	mov	r4, r2
 8008672:	690a      	ldr	r2, [r1, #16]
 8008674:	6923      	ldr	r3, [r4, #16]
 8008676:	429a      	cmp	r2, r3
 8008678:	bfa8      	it	ge
 800867a:	4623      	movge	r3, r4
 800867c:	460f      	mov	r7, r1
 800867e:	bfa4      	itt	ge
 8008680:	460c      	movge	r4, r1
 8008682:	461f      	movge	r7, r3
 8008684:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008688:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800868c:	68a3      	ldr	r3, [r4, #8]
 800868e:	6861      	ldr	r1, [r4, #4]
 8008690:	eb0a 0609 	add.w	r6, sl, r9
 8008694:	42b3      	cmp	r3, r6
 8008696:	b085      	sub	sp, #20
 8008698:	bfb8      	it	lt
 800869a:	3101      	addlt	r1, #1
 800869c:	f7ff fedc 	bl	8008458 <_Balloc>
 80086a0:	b930      	cbnz	r0, 80086b0 <__multiply+0x44>
 80086a2:	4602      	mov	r2, r0
 80086a4:	4b44      	ldr	r3, [pc, #272]	@ (80087b8 <__multiply+0x14c>)
 80086a6:	4845      	ldr	r0, [pc, #276]	@ (80087bc <__multiply+0x150>)
 80086a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80086ac:	f000 fc92 	bl	8008fd4 <__assert_func>
 80086b0:	f100 0514 	add.w	r5, r0, #20
 80086b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086b8:	462b      	mov	r3, r5
 80086ba:	2200      	movs	r2, #0
 80086bc:	4543      	cmp	r3, r8
 80086be:	d321      	bcc.n	8008704 <__multiply+0x98>
 80086c0:	f107 0114 	add.w	r1, r7, #20
 80086c4:	f104 0214 	add.w	r2, r4, #20
 80086c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80086cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80086d0:	9302      	str	r3, [sp, #8]
 80086d2:	1b13      	subs	r3, r2, r4
 80086d4:	3b15      	subs	r3, #21
 80086d6:	f023 0303 	bic.w	r3, r3, #3
 80086da:	3304      	adds	r3, #4
 80086dc:	f104 0715 	add.w	r7, r4, #21
 80086e0:	42ba      	cmp	r2, r7
 80086e2:	bf38      	it	cc
 80086e4:	2304      	movcc	r3, #4
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	9b02      	ldr	r3, [sp, #8]
 80086ea:	9103      	str	r1, [sp, #12]
 80086ec:	428b      	cmp	r3, r1
 80086ee:	d80c      	bhi.n	800870a <__multiply+0x9e>
 80086f0:	2e00      	cmp	r6, #0
 80086f2:	dd03      	ble.n	80086fc <__multiply+0x90>
 80086f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d05b      	beq.n	80087b4 <__multiply+0x148>
 80086fc:	6106      	str	r6, [r0, #16]
 80086fe:	b005      	add	sp, #20
 8008700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008704:	f843 2b04 	str.w	r2, [r3], #4
 8008708:	e7d8      	b.n	80086bc <__multiply+0x50>
 800870a:	f8b1 a000 	ldrh.w	sl, [r1]
 800870e:	f1ba 0f00 	cmp.w	sl, #0
 8008712:	d024      	beq.n	800875e <__multiply+0xf2>
 8008714:	f104 0e14 	add.w	lr, r4, #20
 8008718:	46a9      	mov	r9, r5
 800871a:	f04f 0c00 	mov.w	ip, #0
 800871e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008722:	f8d9 3000 	ldr.w	r3, [r9]
 8008726:	fa1f fb87 	uxth.w	fp, r7
 800872a:	b29b      	uxth	r3, r3
 800872c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008730:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008734:	f8d9 7000 	ldr.w	r7, [r9]
 8008738:	4463      	add	r3, ip
 800873a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800873e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008742:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008746:	b29b      	uxth	r3, r3
 8008748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800874c:	4572      	cmp	r2, lr
 800874e:	f849 3b04 	str.w	r3, [r9], #4
 8008752:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008756:	d8e2      	bhi.n	800871e <__multiply+0xb2>
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	f845 c003 	str.w	ip, [r5, r3]
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008764:	3104      	adds	r1, #4
 8008766:	f1b9 0f00 	cmp.w	r9, #0
 800876a:	d021      	beq.n	80087b0 <__multiply+0x144>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	f104 0c14 	add.w	ip, r4, #20
 8008772:	46ae      	mov	lr, r5
 8008774:	f04f 0a00 	mov.w	sl, #0
 8008778:	f8bc b000 	ldrh.w	fp, [ip]
 800877c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008780:	fb09 770b 	mla	r7, r9, fp, r7
 8008784:	4457      	add	r7, sl
 8008786:	b29b      	uxth	r3, r3
 8008788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800878c:	f84e 3b04 	str.w	r3, [lr], #4
 8008790:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008794:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008798:	f8be 3000 	ldrh.w	r3, [lr]
 800879c:	fb09 330a 	mla	r3, r9, sl, r3
 80087a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80087a4:	4562      	cmp	r2, ip
 80087a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087aa:	d8e5      	bhi.n	8008778 <__multiply+0x10c>
 80087ac:	9f01      	ldr	r7, [sp, #4]
 80087ae:	51eb      	str	r3, [r5, r7]
 80087b0:	3504      	adds	r5, #4
 80087b2:	e799      	b.n	80086e8 <__multiply+0x7c>
 80087b4:	3e01      	subs	r6, #1
 80087b6:	e79b      	b.n	80086f0 <__multiply+0x84>
 80087b8:	08009774 	.word	0x08009774
 80087bc:	08009785 	.word	0x08009785

080087c0 <__pow5mult>:
 80087c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c4:	4615      	mov	r5, r2
 80087c6:	f012 0203 	ands.w	r2, r2, #3
 80087ca:	4607      	mov	r7, r0
 80087cc:	460e      	mov	r6, r1
 80087ce:	d007      	beq.n	80087e0 <__pow5mult+0x20>
 80087d0:	4c25      	ldr	r4, [pc, #148]	@ (8008868 <__pow5mult+0xa8>)
 80087d2:	3a01      	subs	r2, #1
 80087d4:	2300      	movs	r3, #0
 80087d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087da:	f7ff fe9f 	bl	800851c <__multadd>
 80087de:	4606      	mov	r6, r0
 80087e0:	10ad      	asrs	r5, r5, #2
 80087e2:	d03d      	beq.n	8008860 <__pow5mult+0xa0>
 80087e4:	69fc      	ldr	r4, [r7, #28]
 80087e6:	b97c      	cbnz	r4, 8008808 <__pow5mult+0x48>
 80087e8:	2010      	movs	r0, #16
 80087ea:	f7ff fd7f 	bl	80082ec <malloc>
 80087ee:	4602      	mov	r2, r0
 80087f0:	61f8      	str	r0, [r7, #28]
 80087f2:	b928      	cbnz	r0, 8008800 <__pow5mult+0x40>
 80087f4:	4b1d      	ldr	r3, [pc, #116]	@ (800886c <__pow5mult+0xac>)
 80087f6:	481e      	ldr	r0, [pc, #120]	@ (8008870 <__pow5mult+0xb0>)
 80087f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087fc:	f000 fbea 	bl	8008fd4 <__assert_func>
 8008800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008804:	6004      	str	r4, [r0, #0]
 8008806:	60c4      	str	r4, [r0, #12]
 8008808:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800880c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008810:	b94c      	cbnz	r4, 8008826 <__pow5mult+0x66>
 8008812:	f240 2171 	movw	r1, #625	@ 0x271
 8008816:	4638      	mov	r0, r7
 8008818:	f7ff ff12 	bl	8008640 <__i2b>
 800881c:	2300      	movs	r3, #0
 800881e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008822:	4604      	mov	r4, r0
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	f04f 0900 	mov.w	r9, #0
 800882a:	07eb      	lsls	r3, r5, #31
 800882c:	d50a      	bpl.n	8008844 <__pow5mult+0x84>
 800882e:	4631      	mov	r1, r6
 8008830:	4622      	mov	r2, r4
 8008832:	4638      	mov	r0, r7
 8008834:	f7ff ff1a 	bl	800866c <__multiply>
 8008838:	4631      	mov	r1, r6
 800883a:	4680      	mov	r8, r0
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff fe4b 	bl	80084d8 <_Bfree>
 8008842:	4646      	mov	r6, r8
 8008844:	106d      	asrs	r5, r5, #1
 8008846:	d00b      	beq.n	8008860 <__pow5mult+0xa0>
 8008848:	6820      	ldr	r0, [r4, #0]
 800884a:	b938      	cbnz	r0, 800885c <__pow5mult+0x9c>
 800884c:	4622      	mov	r2, r4
 800884e:	4621      	mov	r1, r4
 8008850:	4638      	mov	r0, r7
 8008852:	f7ff ff0b 	bl	800866c <__multiply>
 8008856:	6020      	str	r0, [r4, #0]
 8008858:	f8c0 9000 	str.w	r9, [r0]
 800885c:	4604      	mov	r4, r0
 800885e:	e7e4      	b.n	800882a <__pow5mult+0x6a>
 8008860:	4630      	mov	r0, r6
 8008862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008866:	bf00      	nop
 8008868:	080097e0 	.word	0x080097e0
 800886c:	08009705 	.word	0x08009705
 8008870:	08009785 	.word	0x08009785

08008874 <__lshift>:
 8008874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	460c      	mov	r4, r1
 800887a:	6849      	ldr	r1, [r1, #4]
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008882:	68a3      	ldr	r3, [r4, #8]
 8008884:	4607      	mov	r7, r0
 8008886:	4691      	mov	r9, r2
 8008888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800888c:	f108 0601 	add.w	r6, r8, #1
 8008890:	42b3      	cmp	r3, r6
 8008892:	db0b      	blt.n	80088ac <__lshift+0x38>
 8008894:	4638      	mov	r0, r7
 8008896:	f7ff fddf 	bl	8008458 <_Balloc>
 800889a:	4605      	mov	r5, r0
 800889c:	b948      	cbnz	r0, 80088b2 <__lshift+0x3e>
 800889e:	4602      	mov	r2, r0
 80088a0:	4b28      	ldr	r3, [pc, #160]	@ (8008944 <__lshift+0xd0>)
 80088a2:	4829      	ldr	r0, [pc, #164]	@ (8008948 <__lshift+0xd4>)
 80088a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80088a8:	f000 fb94 	bl	8008fd4 <__assert_func>
 80088ac:	3101      	adds	r1, #1
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	e7ee      	b.n	8008890 <__lshift+0x1c>
 80088b2:	2300      	movs	r3, #0
 80088b4:	f100 0114 	add.w	r1, r0, #20
 80088b8:	f100 0210 	add.w	r2, r0, #16
 80088bc:	4618      	mov	r0, r3
 80088be:	4553      	cmp	r3, sl
 80088c0:	db33      	blt.n	800892a <__lshift+0xb6>
 80088c2:	6920      	ldr	r0, [r4, #16]
 80088c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088c8:	f104 0314 	add.w	r3, r4, #20
 80088cc:	f019 091f 	ands.w	r9, r9, #31
 80088d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088d8:	d02b      	beq.n	8008932 <__lshift+0xbe>
 80088da:	f1c9 0e20 	rsb	lr, r9, #32
 80088de:	468a      	mov	sl, r1
 80088e0:	2200      	movs	r2, #0
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	fa00 f009 	lsl.w	r0, r0, r9
 80088e8:	4310      	orrs	r0, r2
 80088ea:	f84a 0b04 	str.w	r0, [sl], #4
 80088ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f2:	459c      	cmp	ip, r3
 80088f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80088f8:	d8f3      	bhi.n	80088e2 <__lshift+0x6e>
 80088fa:	ebac 0304 	sub.w	r3, ip, r4
 80088fe:	3b15      	subs	r3, #21
 8008900:	f023 0303 	bic.w	r3, r3, #3
 8008904:	3304      	adds	r3, #4
 8008906:	f104 0015 	add.w	r0, r4, #21
 800890a:	4584      	cmp	ip, r0
 800890c:	bf38      	it	cc
 800890e:	2304      	movcc	r3, #4
 8008910:	50ca      	str	r2, [r1, r3]
 8008912:	b10a      	cbz	r2, 8008918 <__lshift+0xa4>
 8008914:	f108 0602 	add.w	r6, r8, #2
 8008918:	3e01      	subs	r6, #1
 800891a:	4638      	mov	r0, r7
 800891c:	612e      	str	r6, [r5, #16]
 800891e:	4621      	mov	r1, r4
 8008920:	f7ff fdda 	bl	80084d8 <_Bfree>
 8008924:	4628      	mov	r0, r5
 8008926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892a:	f842 0f04 	str.w	r0, [r2, #4]!
 800892e:	3301      	adds	r3, #1
 8008930:	e7c5      	b.n	80088be <__lshift+0x4a>
 8008932:	3904      	subs	r1, #4
 8008934:	f853 2b04 	ldr.w	r2, [r3], #4
 8008938:	f841 2f04 	str.w	r2, [r1, #4]!
 800893c:	459c      	cmp	ip, r3
 800893e:	d8f9      	bhi.n	8008934 <__lshift+0xc0>
 8008940:	e7ea      	b.n	8008918 <__lshift+0xa4>
 8008942:	bf00      	nop
 8008944:	08009774 	.word	0x08009774
 8008948:	08009785 	.word	0x08009785

0800894c <__mcmp>:
 800894c:	690a      	ldr	r2, [r1, #16]
 800894e:	4603      	mov	r3, r0
 8008950:	6900      	ldr	r0, [r0, #16]
 8008952:	1a80      	subs	r0, r0, r2
 8008954:	b530      	push	{r4, r5, lr}
 8008956:	d10e      	bne.n	8008976 <__mcmp+0x2a>
 8008958:	3314      	adds	r3, #20
 800895a:	3114      	adds	r1, #20
 800895c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008960:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008964:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008968:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800896c:	4295      	cmp	r5, r2
 800896e:	d003      	beq.n	8008978 <__mcmp+0x2c>
 8008970:	d205      	bcs.n	800897e <__mcmp+0x32>
 8008972:	f04f 30ff 	mov.w	r0, #4294967295
 8008976:	bd30      	pop	{r4, r5, pc}
 8008978:	42a3      	cmp	r3, r4
 800897a:	d3f3      	bcc.n	8008964 <__mcmp+0x18>
 800897c:	e7fb      	b.n	8008976 <__mcmp+0x2a>
 800897e:	2001      	movs	r0, #1
 8008980:	e7f9      	b.n	8008976 <__mcmp+0x2a>
	...

08008984 <__mdiff>:
 8008984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	4689      	mov	r9, r1
 800898a:	4606      	mov	r6, r0
 800898c:	4611      	mov	r1, r2
 800898e:	4648      	mov	r0, r9
 8008990:	4614      	mov	r4, r2
 8008992:	f7ff ffdb 	bl	800894c <__mcmp>
 8008996:	1e05      	subs	r5, r0, #0
 8008998:	d112      	bne.n	80089c0 <__mdiff+0x3c>
 800899a:	4629      	mov	r1, r5
 800899c:	4630      	mov	r0, r6
 800899e:	f7ff fd5b 	bl	8008458 <_Balloc>
 80089a2:	4602      	mov	r2, r0
 80089a4:	b928      	cbnz	r0, 80089b2 <__mdiff+0x2e>
 80089a6:	4b3f      	ldr	r3, [pc, #252]	@ (8008aa4 <__mdiff+0x120>)
 80089a8:	f240 2137 	movw	r1, #567	@ 0x237
 80089ac:	483e      	ldr	r0, [pc, #248]	@ (8008aa8 <__mdiff+0x124>)
 80089ae:	f000 fb11 	bl	8008fd4 <__assert_func>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089b8:	4610      	mov	r0, r2
 80089ba:	b003      	add	sp, #12
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	bfbc      	itt	lt
 80089c2:	464b      	movlt	r3, r9
 80089c4:	46a1      	movlt	r9, r4
 80089c6:	4630      	mov	r0, r6
 80089c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089cc:	bfba      	itte	lt
 80089ce:	461c      	movlt	r4, r3
 80089d0:	2501      	movlt	r5, #1
 80089d2:	2500      	movge	r5, #0
 80089d4:	f7ff fd40 	bl	8008458 <_Balloc>
 80089d8:	4602      	mov	r2, r0
 80089da:	b918      	cbnz	r0, 80089e4 <__mdiff+0x60>
 80089dc:	4b31      	ldr	r3, [pc, #196]	@ (8008aa4 <__mdiff+0x120>)
 80089de:	f240 2145 	movw	r1, #581	@ 0x245
 80089e2:	e7e3      	b.n	80089ac <__mdiff+0x28>
 80089e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80089e8:	6926      	ldr	r6, [r4, #16]
 80089ea:	60c5      	str	r5, [r0, #12]
 80089ec:	f109 0310 	add.w	r3, r9, #16
 80089f0:	f109 0514 	add.w	r5, r9, #20
 80089f4:	f104 0e14 	add.w	lr, r4, #20
 80089f8:	f100 0b14 	add.w	fp, r0, #20
 80089fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	46d9      	mov	r9, fp
 8008a08:	f04f 0c00 	mov.w	ip, #0
 8008a0c:	9b01      	ldr	r3, [sp, #4]
 8008a0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	fa1f f38a 	uxth.w	r3, sl
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	b283      	uxth	r3, r0
 8008a20:	1acb      	subs	r3, r1, r3
 8008a22:	0c00      	lsrs	r0, r0, #16
 8008a24:	4463      	add	r3, ip
 8008a26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a34:	4576      	cmp	r6, lr
 8008a36:	f849 3b04 	str.w	r3, [r9], #4
 8008a3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a3e:	d8e5      	bhi.n	8008a0c <__mdiff+0x88>
 8008a40:	1b33      	subs	r3, r6, r4
 8008a42:	3b15      	subs	r3, #21
 8008a44:	f023 0303 	bic.w	r3, r3, #3
 8008a48:	3415      	adds	r4, #21
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	bf38      	it	cc
 8008a50:	2304      	movcc	r3, #4
 8008a52:	441d      	add	r5, r3
 8008a54:	445b      	add	r3, fp
 8008a56:	461e      	mov	r6, r3
 8008a58:	462c      	mov	r4, r5
 8008a5a:	4544      	cmp	r4, r8
 8008a5c:	d30e      	bcc.n	8008a7c <__mdiff+0xf8>
 8008a5e:	f108 0103 	add.w	r1, r8, #3
 8008a62:	1b49      	subs	r1, r1, r5
 8008a64:	f021 0103 	bic.w	r1, r1, #3
 8008a68:	3d03      	subs	r5, #3
 8008a6a:	45a8      	cmp	r8, r5
 8008a6c:	bf38      	it	cc
 8008a6e:	2100      	movcc	r1, #0
 8008a70:	440b      	add	r3, r1
 8008a72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a76:	b191      	cbz	r1, 8008a9e <__mdiff+0x11a>
 8008a78:	6117      	str	r7, [r2, #16]
 8008a7a:	e79d      	b.n	80089b8 <__mdiff+0x34>
 8008a7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a80:	46e6      	mov	lr, ip
 8008a82:	0c08      	lsrs	r0, r1, #16
 8008a84:	fa1c fc81 	uxtah	ip, ip, r1
 8008a88:	4471      	add	r1, lr
 8008a8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a8e:	b289      	uxth	r1, r1
 8008a90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a94:	f846 1b04 	str.w	r1, [r6], #4
 8008a98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a9c:	e7dd      	b.n	8008a5a <__mdiff+0xd6>
 8008a9e:	3f01      	subs	r7, #1
 8008aa0:	e7e7      	b.n	8008a72 <__mdiff+0xee>
 8008aa2:	bf00      	nop
 8008aa4:	08009774 	.word	0x08009774
 8008aa8:	08009785 	.word	0x08009785

08008aac <__d2b>:
 8008aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ab0:	460f      	mov	r7, r1
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	ec59 8b10 	vmov	r8, r9, d0
 8008ab8:	4616      	mov	r6, r2
 8008aba:	f7ff fccd 	bl	8008458 <_Balloc>
 8008abe:	4604      	mov	r4, r0
 8008ac0:	b930      	cbnz	r0, 8008ad0 <__d2b+0x24>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b23      	ldr	r3, [pc, #140]	@ (8008b54 <__d2b+0xa8>)
 8008ac6:	4824      	ldr	r0, [pc, #144]	@ (8008b58 <__d2b+0xac>)
 8008ac8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008acc:	f000 fa82 	bl	8008fd4 <__assert_func>
 8008ad0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ad4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ad8:	b10d      	cbz	r5, 8008ade <__d2b+0x32>
 8008ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	f1b8 0300 	subs.w	r3, r8, #0
 8008ae4:	d023      	beq.n	8008b2e <__d2b+0x82>
 8008ae6:	4668      	mov	r0, sp
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	f7ff fd7c 	bl	80085e6 <__lo0bits>
 8008aee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008af2:	b1d0      	cbz	r0, 8008b2a <__d2b+0x7e>
 8008af4:	f1c0 0320 	rsb	r3, r0, #32
 8008af8:	fa02 f303 	lsl.w	r3, r2, r3
 8008afc:	430b      	orrs	r3, r1
 8008afe:	40c2      	lsrs	r2, r0
 8008b00:	6163      	str	r3, [r4, #20]
 8008b02:	9201      	str	r2, [sp, #4]
 8008b04:	9b01      	ldr	r3, [sp, #4]
 8008b06:	61a3      	str	r3, [r4, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf0c      	ite	eq
 8008b0c:	2201      	moveq	r2, #1
 8008b0e:	2202      	movne	r2, #2
 8008b10:	6122      	str	r2, [r4, #16]
 8008b12:	b1a5      	cbz	r5, 8008b3e <__d2b+0x92>
 8008b14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b18:	4405      	add	r5, r0
 8008b1a:	603d      	str	r5, [r7, #0]
 8008b1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b20:	6030      	str	r0, [r6, #0]
 8008b22:	4620      	mov	r0, r4
 8008b24:	b003      	add	sp, #12
 8008b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b2a:	6161      	str	r1, [r4, #20]
 8008b2c:	e7ea      	b.n	8008b04 <__d2b+0x58>
 8008b2e:	a801      	add	r0, sp, #4
 8008b30:	f7ff fd59 	bl	80085e6 <__lo0bits>
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	6163      	str	r3, [r4, #20]
 8008b38:	3020      	adds	r0, #32
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	e7e8      	b.n	8008b10 <__d2b+0x64>
 8008b3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b46:	6038      	str	r0, [r7, #0]
 8008b48:	6918      	ldr	r0, [r3, #16]
 8008b4a:	f7ff fd2d 	bl	80085a8 <__hi0bits>
 8008b4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b52:	e7e5      	b.n	8008b20 <__d2b+0x74>
 8008b54:	08009774 	.word	0x08009774
 8008b58:	08009785 	.word	0x08009785

08008b5c <__ssputs_r>:
 8008b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	688e      	ldr	r6, [r1, #8]
 8008b62:	461f      	mov	r7, r3
 8008b64:	42be      	cmp	r6, r7
 8008b66:	680b      	ldr	r3, [r1, #0]
 8008b68:	4682      	mov	sl, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	4690      	mov	r8, r2
 8008b6e:	d82d      	bhi.n	8008bcc <__ssputs_r+0x70>
 8008b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b78:	d026      	beq.n	8008bc8 <__ssputs_r+0x6c>
 8008b7a:	6965      	ldr	r5, [r4, #20]
 8008b7c:	6909      	ldr	r1, [r1, #16]
 8008b7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b82:	eba3 0901 	sub.w	r9, r3, r1
 8008b86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b8a:	1c7b      	adds	r3, r7, #1
 8008b8c:	444b      	add	r3, r9
 8008b8e:	106d      	asrs	r5, r5, #1
 8008b90:	429d      	cmp	r5, r3
 8008b92:	bf38      	it	cc
 8008b94:	461d      	movcc	r5, r3
 8008b96:	0553      	lsls	r3, r2, #21
 8008b98:	d527      	bpl.n	8008bea <__ssputs_r+0x8e>
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	f7ff fbd0 	bl	8008340 <_malloc_r>
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	b360      	cbz	r0, 8008bfe <__ssputs_r+0xa2>
 8008ba4:	6921      	ldr	r1, [r4, #16]
 8008ba6:	464a      	mov	r2, r9
 8008ba8:	f000 fa06 	bl	8008fb8 <memcpy>
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	6126      	str	r6, [r4, #16]
 8008bba:	6165      	str	r5, [r4, #20]
 8008bbc:	444e      	add	r6, r9
 8008bbe:	eba5 0509 	sub.w	r5, r5, r9
 8008bc2:	6026      	str	r6, [r4, #0]
 8008bc4:	60a5      	str	r5, [r4, #8]
 8008bc6:	463e      	mov	r6, r7
 8008bc8:	42be      	cmp	r6, r7
 8008bca:	d900      	bls.n	8008bce <__ssputs_r+0x72>
 8008bcc:	463e      	mov	r6, r7
 8008bce:	6820      	ldr	r0, [r4, #0]
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	4641      	mov	r1, r8
 8008bd4:	f000 f9c6 	bl	8008f64 <memmove>
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	1b9b      	subs	r3, r3, r6
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	4433      	add	r3, r6
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	2000      	movs	r0, #0
 8008be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bea:	462a      	mov	r2, r5
 8008bec:	f000 fa36 	bl	800905c <_realloc_r>
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d1e0      	bne.n	8008bb8 <__ssputs_r+0x5c>
 8008bf6:	6921      	ldr	r1, [r4, #16]
 8008bf8:	4650      	mov	r0, sl
 8008bfa:	f7ff fb2d 	bl	8008258 <_free_r>
 8008bfe:	230c      	movs	r3, #12
 8008c00:	f8ca 3000 	str.w	r3, [sl]
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c10:	e7e9      	b.n	8008be6 <__ssputs_r+0x8a>
	...

08008c14 <_svfiprintf_r>:
 8008c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	4698      	mov	r8, r3
 8008c1a:	898b      	ldrh	r3, [r1, #12]
 8008c1c:	061b      	lsls	r3, r3, #24
 8008c1e:	b09d      	sub	sp, #116	@ 0x74
 8008c20:	4607      	mov	r7, r0
 8008c22:	460d      	mov	r5, r1
 8008c24:	4614      	mov	r4, r2
 8008c26:	d510      	bpl.n	8008c4a <_svfiprintf_r+0x36>
 8008c28:	690b      	ldr	r3, [r1, #16]
 8008c2a:	b973      	cbnz	r3, 8008c4a <_svfiprintf_r+0x36>
 8008c2c:	2140      	movs	r1, #64	@ 0x40
 8008c2e:	f7ff fb87 	bl	8008340 <_malloc_r>
 8008c32:	6028      	str	r0, [r5, #0]
 8008c34:	6128      	str	r0, [r5, #16]
 8008c36:	b930      	cbnz	r0, 8008c46 <_svfiprintf_r+0x32>
 8008c38:	230c      	movs	r3, #12
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	b01d      	add	sp, #116	@ 0x74
 8008c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c46:	2340      	movs	r3, #64	@ 0x40
 8008c48:	616b      	str	r3, [r5, #20]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c4e:	2320      	movs	r3, #32
 8008c50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c58:	2330      	movs	r3, #48	@ 0x30
 8008c5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008df8 <_svfiprintf_r+0x1e4>
 8008c5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c62:	f04f 0901 	mov.w	r9, #1
 8008c66:	4623      	mov	r3, r4
 8008c68:	469a      	mov	sl, r3
 8008c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c6e:	b10a      	cbz	r2, 8008c74 <_svfiprintf_r+0x60>
 8008c70:	2a25      	cmp	r2, #37	@ 0x25
 8008c72:	d1f9      	bne.n	8008c68 <_svfiprintf_r+0x54>
 8008c74:	ebba 0b04 	subs.w	fp, sl, r4
 8008c78:	d00b      	beq.n	8008c92 <_svfiprintf_r+0x7e>
 8008c7a:	465b      	mov	r3, fp
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7ff ff6b 	bl	8008b5c <__ssputs_r>
 8008c86:	3001      	adds	r0, #1
 8008c88:	f000 80a7 	beq.w	8008dda <_svfiprintf_r+0x1c6>
 8008c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c8e:	445a      	add	r2, fp
 8008c90:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c92:	f89a 3000 	ldrb.w	r3, [sl]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 809f 	beq.w	8008dda <_svfiprintf_r+0x1c6>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ca6:	f10a 0a01 	add.w	sl, sl, #1
 8008caa:	9304      	str	r3, [sp, #16]
 8008cac:	9307      	str	r3, [sp, #28]
 8008cae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cb4:	4654      	mov	r4, sl
 8008cb6:	2205      	movs	r2, #5
 8008cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cbc:	484e      	ldr	r0, [pc, #312]	@ (8008df8 <_svfiprintf_r+0x1e4>)
 8008cbe:	f7f7 fa87 	bl	80001d0 <memchr>
 8008cc2:	9a04      	ldr	r2, [sp, #16]
 8008cc4:	b9d8      	cbnz	r0, 8008cfe <_svfiprintf_r+0xea>
 8008cc6:	06d0      	lsls	r0, r2, #27
 8008cc8:	bf44      	itt	mi
 8008cca:	2320      	movmi	r3, #32
 8008ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cd0:	0711      	lsls	r1, r2, #28
 8008cd2:	bf44      	itt	mi
 8008cd4:	232b      	movmi	r3, #43	@ 0x2b
 8008cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cda:	f89a 3000 	ldrb.w	r3, [sl]
 8008cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ce0:	d015      	beq.n	8008d0e <_svfiprintf_r+0xfa>
 8008ce2:	9a07      	ldr	r2, [sp, #28]
 8008ce4:	4654      	mov	r4, sl
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	f04f 0c0a 	mov.w	ip, #10
 8008cec:	4621      	mov	r1, r4
 8008cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cf2:	3b30      	subs	r3, #48	@ 0x30
 8008cf4:	2b09      	cmp	r3, #9
 8008cf6:	d94b      	bls.n	8008d90 <_svfiprintf_r+0x17c>
 8008cf8:	b1b0      	cbz	r0, 8008d28 <_svfiprintf_r+0x114>
 8008cfa:	9207      	str	r2, [sp, #28]
 8008cfc:	e014      	b.n	8008d28 <_svfiprintf_r+0x114>
 8008cfe:	eba0 0308 	sub.w	r3, r0, r8
 8008d02:	fa09 f303 	lsl.w	r3, r9, r3
 8008d06:	4313      	orrs	r3, r2
 8008d08:	9304      	str	r3, [sp, #16]
 8008d0a:	46a2      	mov	sl, r4
 8008d0c:	e7d2      	b.n	8008cb4 <_svfiprintf_r+0xa0>
 8008d0e:	9b03      	ldr	r3, [sp, #12]
 8008d10:	1d19      	adds	r1, r3, #4
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	9103      	str	r1, [sp, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bfbb      	ittet	lt
 8008d1a:	425b      	neglt	r3, r3
 8008d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d20:	9307      	strge	r3, [sp, #28]
 8008d22:	9307      	strlt	r3, [sp, #28]
 8008d24:	bfb8      	it	lt
 8008d26:	9204      	strlt	r2, [sp, #16]
 8008d28:	7823      	ldrb	r3, [r4, #0]
 8008d2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d2c:	d10a      	bne.n	8008d44 <_svfiprintf_r+0x130>
 8008d2e:	7863      	ldrb	r3, [r4, #1]
 8008d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d32:	d132      	bne.n	8008d9a <_svfiprintf_r+0x186>
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	1d1a      	adds	r2, r3, #4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	9203      	str	r2, [sp, #12]
 8008d3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d40:	3402      	adds	r4, #2
 8008d42:	9305      	str	r3, [sp, #20]
 8008d44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e08 <_svfiprintf_r+0x1f4>
 8008d48:	7821      	ldrb	r1, [r4, #0]
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	4650      	mov	r0, sl
 8008d4e:	f7f7 fa3f 	bl	80001d0 <memchr>
 8008d52:	b138      	cbz	r0, 8008d64 <_svfiprintf_r+0x150>
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	eba0 000a 	sub.w	r0, r0, sl
 8008d5a:	2240      	movs	r2, #64	@ 0x40
 8008d5c:	4082      	lsls	r2, r0
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	3401      	adds	r4, #1
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d68:	4824      	ldr	r0, [pc, #144]	@ (8008dfc <_svfiprintf_r+0x1e8>)
 8008d6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d6e:	2206      	movs	r2, #6
 8008d70:	f7f7 fa2e 	bl	80001d0 <memchr>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d036      	beq.n	8008de6 <_svfiprintf_r+0x1d2>
 8008d78:	4b21      	ldr	r3, [pc, #132]	@ (8008e00 <_svfiprintf_r+0x1ec>)
 8008d7a:	bb1b      	cbnz	r3, 8008dc4 <_svfiprintf_r+0x1b0>
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	3307      	adds	r3, #7
 8008d80:	f023 0307 	bic.w	r3, r3, #7
 8008d84:	3308      	adds	r3, #8
 8008d86:	9303      	str	r3, [sp, #12]
 8008d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d8a:	4433      	add	r3, r6
 8008d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d8e:	e76a      	b.n	8008c66 <_svfiprintf_r+0x52>
 8008d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d94:	460c      	mov	r4, r1
 8008d96:	2001      	movs	r0, #1
 8008d98:	e7a8      	b.n	8008cec <_svfiprintf_r+0xd8>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	3401      	adds	r4, #1
 8008d9e:	9305      	str	r3, [sp, #20]
 8008da0:	4619      	mov	r1, r3
 8008da2:	f04f 0c0a 	mov.w	ip, #10
 8008da6:	4620      	mov	r0, r4
 8008da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dac:	3a30      	subs	r2, #48	@ 0x30
 8008dae:	2a09      	cmp	r2, #9
 8008db0:	d903      	bls.n	8008dba <_svfiprintf_r+0x1a6>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0c6      	beq.n	8008d44 <_svfiprintf_r+0x130>
 8008db6:	9105      	str	r1, [sp, #20]
 8008db8:	e7c4      	b.n	8008d44 <_svfiprintf_r+0x130>
 8008dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e7f0      	b.n	8008da6 <_svfiprintf_r+0x192>
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	462a      	mov	r2, r5
 8008dca:	4b0e      	ldr	r3, [pc, #56]	@ (8008e04 <_svfiprintf_r+0x1f0>)
 8008dcc:	a904      	add	r1, sp, #16
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f7fd fe96 	bl	8006b00 <_printf_float>
 8008dd4:	1c42      	adds	r2, r0, #1
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	d1d6      	bne.n	8008d88 <_svfiprintf_r+0x174>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	065b      	lsls	r3, r3, #25
 8008dde:	f53f af2d 	bmi.w	8008c3c <_svfiprintf_r+0x28>
 8008de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008de4:	e72c      	b.n	8008c40 <_svfiprintf_r+0x2c>
 8008de6:	ab03      	add	r3, sp, #12
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	462a      	mov	r2, r5
 8008dec:	4b05      	ldr	r3, [pc, #20]	@ (8008e04 <_svfiprintf_r+0x1f0>)
 8008dee:	a904      	add	r1, sp, #16
 8008df0:	4638      	mov	r0, r7
 8008df2:	f7fe f91d 	bl	8007030 <_printf_i>
 8008df6:	e7ed      	b.n	8008dd4 <_svfiprintf_r+0x1c0>
 8008df8:	080098e0 	.word	0x080098e0
 8008dfc:	080098ea 	.word	0x080098ea
 8008e00:	08006b01 	.word	0x08006b01
 8008e04:	08008b5d 	.word	0x08008b5d
 8008e08:	080098e6 	.word	0x080098e6

08008e0c <__sflush_r>:
 8008e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	0716      	lsls	r6, r2, #28
 8008e16:	4605      	mov	r5, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	d454      	bmi.n	8008ec6 <__sflush_r+0xba>
 8008e1c:	684b      	ldr	r3, [r1, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dc02      	bgt.n	8008e28 <__sflush_r+0x1c>
 8008e22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dd48      	ble.n	8008eba <__sflush_r+0xae>
 8008e28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e2a:	2e00      	cmp	r6, #0
 8008e2c:	d045      	beq.n	8008eba <__sflush_r+0xae>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e34:	682f      	ldr	r7, [r5, #0]
 8008e36:	6a21      	ldr	r1, [r4, #32]
 8008e38:	602b      	str	r3, [r5, #0]
 8008e3a:	d030      	beq.n	8008e9e <__sflush_r+0x92>
 8008e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	0759      	lsls	r1, r3, #29
 8008e42:	d505      	bpl.n	8008e50 <__sflush_r+0x44>
 8008e44:	6863      	ldr	r3, [r4, #4]
 8008e46:	1ad2      	subs	r2, r2, r3
 8008e48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e4a:	b10b      	cbz	r3, 8008e50 <__sflush_r+0x44>
 8008e4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e4e:	1ad2      	subs	r2, r2, r3
 8008e50:	2300      	movs	r3, #0
 8008e52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e54:	6a21      	ldr	r1, [r4, #32]
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b0      	blx	r6
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	d106      	bne.n	8008e6e <__sflush_r+0x62>
 8008e60:	6829      	ldr	r1, [r5, #0]
 8008e62:	291d      	cmp	r1, #29
 8008e64:	d82b      	bhi.n	8008ebe <__sflush_r+0xb2>
 8008e66:	4a2a      	ldr	r2, [pc, #168]	@ (8008f10 <__sflush_r+0x104>)
 8008e68:	410a      	asrs	r2, r1
 8008e6a:	07d6      	lsls	r6, r2, #31
 8008e6c:	d427      	bmi.n	8008ebe <__sflush_r+0xb2>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	6062      	str	r2, [r4, #4]
 8008e72:	04d9      	lsls	r1, r3, #19
 8008e74:	6922      	ldr	r2, [r4, #16]
 8008e76:	6022      	str	r2, [r4, #0]
 8008e78:	d504      	bpl.n	8008e84 <__sflush_r+0x78>
 8008e7a:	1c42      	adds	r2, r0, #1
 8008e7c:	d101      	bne.n	8008e82 <__sflush_r+0x76>
 8008e7e:	682b      	ldr	r3, [r5, #0]
 8008e80:	b903      	cbnz	r3, 8008e84 <__sflush_r+0x78>
 8008e82:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e86:	602f      	str	r7, [r5, #0]
 8008e88:	b1b9      	cbz	r1, 8008eba <__sflush_r+0xae>
 8008e8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e8e:	4299      	cmp	r1, r3
 8008e90:	d002      	beq.n	8008e98 <__sflush_r+0x8c>
 8008e92:	4628      	mov	r0, r5
 8008e94:	f7ff f9e0 	bl	8008258 <_free_r>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e9c:	e00d      	b.n	8008eba <__sflush_r+0xae>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b0      	blx	r6
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	1c50      	adds	r0, r2, #1
 8008ea8:	d1c9      	bne.n	8008e3e <__sflush_r+0x32>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0c6      	beq.n	8008e3e <__sflush_r+0x32>
 8008eb0:	2b1d      	cmp	r3, #29
 8008eb2:	d001      	beq.n	8008eb8 <__sflush_r+0xac>
 8008eb4:	2b16      	cmp	r3, #22
 8008eb6:	d11e      	bne.n	8008ef6 <__sflush_r+0xea>
 8008eb8:	602f      	str	r7, [r5, #0]
 8008eba:	2000      	movs	r0, #0
 8008ebc:	e022      	b.n	8008f04 <__sflush_r+0xf8>
 8008ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ec2:	b21b      	sxth	r3, r3
 8008ec4:	e01b      	b.n	8008efe <__sflush_r+0xf2>
 8008ec6:	690f      	ldr	r7, [r1, #16]
 8008ec8:	2f00      	cmp	r7, #0
 8008eca:	d0f6      	beq.n	8008eba <__sflush_r+0xae>
 8008ecc:	0793      	lsls	r3, r2, #30
 8008ece:	680e      	ldr	r6, [r1, #0]
 8008ed0:	bf08      	it	eq
 8008ed2:	694b      	ldreq	r3, [r1, #20]
 8008ed4:	600f      	str	r7, [r1, #0]
 8008ed6:	bf18      	it	ne
 8008ed8:	2300      	movne	r3, #0
 8008eda:	eba6 0807 	sub.w	r8, r6, r7
 8008ede:	608b      	str	r3, [r1, #8]
 8008ee0:	f1b8 0f00 	cmp.w	r8, #0
 8008ee4:	dde9      	ble.n	8008eba <__sflush_r+0xae>
 8008ee6:	6a21      	ldr	r1, [r4, #32]
 8008ee8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008eea:	4643      	mov	r3, r8
 8008eec:	463a      	mov	r2, r7
 8008eee:	4628      	mov	r0, r5
 8008ef0:	47b0      	blx	r6
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	dc08      	bgt.n	8008f08 <__sflush_r+0xfc>
 8008ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f08:	4407      	add	r7, r0
 8008f0a:	eba8 0800 	sub.w	r8, r8, r0
 8008f0e:	e7e7      	b.n	8008ee0 <__sflush_r+0xd4>
 8008f10:	dfbffffe 	.word	0xdfbffffe

08008f14 <_fflush_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	690b      	ldr	r3, [r1, #16]
 8008f18:	4605      	mov	r5, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b913      	cbnz	r3, 8008f24 <_fflush_r+0x10>
 8008f1e:	2500      	movs	r5, #0
 8008f20:	4628      	mov	r0, r5
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	b118      	cbz	r0, 8008f2e <_fflush_r+0x1a>
 8008f26:	6a03      	ldr	r3, [r0, #32]
 8008f28:	b90b      	cbnz	r3, 8008f2e <_fflush_r+0x1a>
 8008f2a:	f7fe fa2d 	bl	8007388 <__sinit>
 8008f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0f3      	beq.n	8008f1e <_fflush_r+0xa>
 8008f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f38:	07d0      	lsls	r0, r2, #31
 8008f3a:	d404      	bmi.n	8008f46 <_fflush_r+0x32>
 8008f3c:	0599      	lsls	r1, r3, #22
 8008f3e:	d402      	bmi.n	8008f46 <_fflush_r+0x32>
 8008f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f42:	f7fe fb38 	bl	80075b6 <__retarget_lock_acquire_recursive>
 8008f46:	4628      	mov	r0, r5
 8008f48:	4621      	mov	r1, r4
 8008f4a:	f7ff ff5f 	bl	8008e0c <__sflush_r>
 8008f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f50:	07da      	lsls	r2, r3, #31
 8008f52:	4605      	mov	r5, r0
 8008f54:	d4e4      	bmi.n	8008f20 <_fflush_r+0xc>
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	059b      	lsls	r3, r3, #22
 8008f5a:	d4e1      	bmi.n	8008f20 <_fflush_r+0xc>
 8008f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f5e:	f7fe fb2b 	bl	80075b8 <__retarget_lock_release_recursive>
 8008f62:	e7dd      	b.n	8008f20 <_fflush_r+0xc>

08008f64 <memmove>:
 8008f64:	4288      	cmp	r0, r1
 8008f66:	b510      	push	{r4, lr}
 8008f68:	eb01 0402 	add.w	r4, r1, r2
 8008f6c:	d902      	bls.n	8008f74 <memmove+0x10>
 8008f6e:	4284      	cmp	r4, r0
 8008f70:	4623      	mov	r3, r4
 8008f72:	d807      	bhi.n	8008f84 <memmove+0x20>
 8008f74:	1e43      	subs	r3, r0, #1
 8008f76:	42a1      	cmp	r1, r4
 8008f78:	d008      	beq.n	8008f8c <memmove+0x28>
 8008f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f82:	e7f8      	b.n	8008f76 <memmove+0x12>
 8008f84:	4402      	add	r2, r0
 8008f86:	4601      	mov	r1, r0
 8008f88:	428a      	cmp	r2, r1
 8008f8a:	d100      	bne.n	8008f8e <memmove+0x2a>
 8008f8c:	bd10      	pop	{r4, pc}
 8008f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f96:	e7f7      	b.n	8008f88 <memmove+0x24>

08008f98 <_sbrk_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4d06      	ldr	r5, [pc, #24]	@ (8008fb4 <_sbrk_r+0x1c>)
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	4608      	mov	r0, r1
 8008fa2:	602b      	str	r3, [r5, #0]
 8008fa4:	f7f8 fe94 	bl	8001cd0 <_sbrk>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_sbrk_r+0x1a>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_sbrk_r+0x1a>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	200003f0 	.word	0x200003f0

08008fb8 <memcpy>:
 8008fb8:	440a      	add	r2, r1
 8008fba:	4291      	cmp	r1, r2
 8008fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fc0:	d100      	bne.n	8008fc4 <memcpy+0xc>
 8008fc2:	4770      	bx	lr
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fce:	4291      	cmp	r1, r2
 8008fd0:	d1f9      	bne.n	8008fc6 <memcpy+0xe>
 8008fd2:	bd10      	pop	{r4, pc}

08008fd4 <__assert_func>:
 8008fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fd6:	4614      	mov	r4, r2
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4b09      	ldr	r3, [pc, #36]	@ (8009000 <__assert_func+0x2c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4605      	mov	r5, r0
 8008fe0:	68d8      	ldr	r0, [r3, #12]
 8008fe2:	b954      	cbnz	r4, 8008ffa <__assert_func+0x26>
 8008fe4:	4b07      	ldr	r3, [pc, #28]	@ (8009004 <__assert_func+0x30>)
 8008fe6:	461c      	mov	r4, r3
 8008fe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fec:	9100      	str	r1, [sp, #0]
 8008fee:	462b      	mov	r3, r5
 8008ff0:	4905      	ldr	r1, [pc, #20]	@ (8009008 <__assert_func+0x34>)
 8008ff2:	f000 f86f 	bl	80090d4 <fiprintf>
 8008ff6:	f000 f87f 	bl	80090f8 <abort>
 8008ffa:	4b04      	ldr	r3, [pc, #16]	@ (800900c <__assert_func+0x38>)
 8008ffc:	e7f4      	b.n	8008fe8 <__assert_func+0x14>
 8008ffe:	bf00      	nop
 8009000:	2000001c 	.word	0x2000001c
 8009004:	08009936 	.word	0x08009936
 8009008:	08009908 	.word	0x08009908
 800900c:	080098fb 	.word	0x080098fb

08009010 <_calloc_r>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	fba1 5402 	umull	r5, r4, r1, r2
 8009016:	b93c      	cbnz	r4, 8009028 <_calloc_r+0x18>
 8009018:	4629      	mov	r1, r5
 800901a:	f7ff f991 	bl	8008340 <_malloc_r>
 800901e:	4606      	mov	r6, r0
 8009020:	b928      	cbnz	r0, 800902e <_calloc_r+0x1e>
 8009022:	2600      	movs	r6, #0
 8009024:	4630      	mov	r0, r6
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	220c      	movs	r2, #12
 800902a:	6002      	str	r2, [r0, #0]
 800902c:	e7f9      	b.n	8009022 <_calloc_r+0x12>
 800902e:	462a      	mov	r2, r5
 8009030:	4621      	mov	r1, r4
 8009032:	f7fe fa42 	bl	80074ba <memset>
 8009036:	e7f5      	b.n	8009024 <_calloc_r+0x14>

08009038 <__ascii_mbtowc>:
 8009038:	b082      	sub	sp, #8
 800903a:	b901      	cbnz	r1, 800903e <__ascii_mbtowc+0x6>
 800903c:	a901      	add	r1, sp, #4
 800903e:	b142      	cbz	r2, 8009052 <__ascii_mbtowc+0x1a>
 8009040:	b14b      	cbz	r3, 8009056 <__ascii_mbtowc+0x1e>
 8009042:	7813      	ldrb	r3, [r2, #0]
 8009044:	600b      	str	r3, [r1, #0]
 8009046:	7812      	ldrb	r2, [r2, #0]
 8009048:	1e10      	subs	r0, r2, #0
 800904a:	bf18      	it	ne
 800904c:	2001      	movne	r0, #1
 800904e:	b002      	add	sp, #8
 8009050:	4770      	bx	lr
 8009052:	4610      	mov	r0, r2
 8009054:	e7fb      	b.n	800904e <__ascii_mbtowc+0x16>
 8009056:	f06f 0001 	mvn.w	r0, #1
 800905a:	e7f8      	b.n	800904e <__ascii_mbtowc+0x16>

0800905c <_realloc_r>:
 800905c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009060:	4680      	mov	r8, r0
 8009062:	4615      	mov	r5, r2
 8009064:	460c      	mov	r4, r1
 8009066:	b921      	cbnz	r1, 8009072 <_realloc_r+0x16>
 8009068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	4611      	mov	r1, r2
 800906e:	f7ff b967 	b.w	8008340 <_malloc_r>
 8009072:	b92a      	cbnz	r2, 8009080 <_realloc_r+0x24>
 8009074:	f7ff f8f0 	bl	8008258 <_free_r>
 8009078:	2400      	movs	r4, #0
 800907a:	4620      	mov	r0, r4
 800907c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009080:	f000 f841 	bl	8009106 <_malloc_usable_size_r>
 8009084:	4285      	cmp	r5, r0
 8009086:	4606      	mov	r6, r0
 8009088:	d802      	bhi.n	8009090 <_realloc_r+0x34>
 800908a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800908e:	d8f4      	bhi.n	800907a <_realloc_r+0x1e>
 8009090:	4629      	mov	r1, r5
 8009092:	4640      	mov	r0, r8
 8009094:	f7ff f954 	bl	8008340 <_malloc_r>
 8009098:	4607      	mov	r7, r0
 800909a:	2800      	cmp	r0, #0
 800909c:	d0ec      	beq.n	8009078 <_realloc_r+0x1c>
 800909e:	42b5      	cmp	r5, r6
 80090a0:	462a      	mov	r2, r5
 80090a2:	4621      	mov	r1, r4
 80090a4:	bf28      	it	cs
 80090a6:	4632      	movcs	r2, r6
 80090a8:	f7ff ff86 	bl	8008fb8 <memcpy>
 80090ac:	4621      	mov	r1, r4
 80090ae:	4640      	mov	r0, r8
 80090b0:	f7ff f8d2 	bl	8008258 <_free_r>
 80090b4:	463c      	mov	r4, r7
 80090b6:	e7e0      	b.n	800907a <_realloc_r+0x1e>

080090b8 <__ascii_wctomb>:
 80090b8:	4603      	mov	r3, r0
 80090ba:	4608      	mov	r0, r1
 80090bc:	b141      	cbz	r1, 80090d0 <__ascii_wctomb+0x18>
 80090be:	2aff      	cmp	r2, #255	@ 0xff
 80090c0:	d904      	bls.n	80090cc <__ascii_wctomb+0x14>
 80090c2:	228a      	movs	r2, #138	@ 0x8a
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	4770      	bx	lr
 80090cc:	700a      	strb	r2, [r1, #0]
 80090ce:	2001      	movs	r0, #1
 80090d0:	4770      	bx	lr
	...

080090d4 <fiprintf>:
 80090d4:	b40e      	push	{r1, r2, r3}
 80090d6:	b503      	push	{r0, r1, lr}
 80090d8:	4601      	mov	r1, r0
 80090da:	ab03      	add	r3, sp, #12
 80090dc:	4805      	ldr	r0, [pc, #20]	@ (80090f4 <fiprintf+0x20>)
 80090de:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e2:	6800      	ldr	r0, [r0, #0]
 80090e4:	9301      	str	r3, [sp, #4]
 80090e6:	f000 f83f 	bl	8009168 <_vfiprintf_r>
 80090ea:	b002      	add	sp, #8
 80090ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80090f0:	b003      	add	sp, #12
 80090f2:	4770      	bx	lr
 80090f4:	2000001c 	.word	0x2000001c

080090f8 <abort>:
 80090f8:	b508      	push	{r3, lr}
 80090fa:	2006      	movs	r0, #6
 80090fc:	f000 fa08 	bl	8009510 <raise>
 8009100:	2001      	movs	r0, #1
 8009102:	f7f8 fd6d 	bl	8001be0 <_exit>

08009106 <_malloc_usable_size_r>:
 8009106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800910a:	1f18      	subs	r0, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfbc      	itt	lt
 8009110:	580b      	ldrlt	r3, [r1, r0]
 8009112:	18c0      	addlt	r0, r0, r3
 8009114:	4770      	bx	lr

08009116 <__sfputc_r>:
 8009116:	6893      	ldr	r3, [r2, #8]
 8009118:	3b01      	subs	r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	b410      	push	{r4}
 800911e:	6093      	str	r3, [r2, #8]
 8009120:	da08      	bge.n	8009134 <__sfputc_r+0x1e>
 8009122:	6994      	ldr	r4, [r2, #24]
 8009124:	42a3      	cmp	r3, r4
 8009126:	db01      	blt.n	800912c <__sfputc_r+0x16>
 8009128:	290a      	cmp	r1, #10
 800912a:	d103      	bne.n	8009134 <__sfputc_r+0x1e>
 800912c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009130:	f000 b932 	b.w	8009398 <__swbuf_r>
 8009134:	6813      	ldr	r3, [r2, #0]
 8009136:	1c58      	adds	r0, r3, #1
 8009138:	6010      	str	r0, [r2, #0]
 800913a:	7019      	strb	r1, [r3, #0]
 800913c:	4608      	mov	r0, r1
 800913e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009142:	4770      	bx	lr

08009144 <__sfputs_r>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	4606      	mov	r6, r0
 8009148:	460f      	mov	r7, r1
 800914a:	4614      	mov	r4, r2
 800914c:	18d5      	adds	r5, r2, r3
 800914e:	42ac      	cmp	r4, r5
 8009150:	d101      	bne.n	8009156 <__sfputs_r+0x12>
 8009152:	2000      	movs	r0, #0
 8009154:	e007      	b.n	8009166 <__sfputs_r+0x22>
 8009156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800915a:	463a      	mov	r2, r7
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff ffda 	bl	8009116 <__sfputc_r>
 8009162:	1c43      	adds	r3, r0, #1
 8009164:	d1f3      	bne.n	800914e <__sfputs_r+0xa>
 8009166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009168 <_vfiprintf_r>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	460d      	mov	r5, r1
 800916e:	b09d      	sub	sp, #116	@ 0x74
 8009170:	4614      	mov	r4, r2
 8009172:	4698      	mov	r8, r3
 8009174:	4606      	mov	r6, r0
 8009176:	b118      	cbz	r0, 8009180 <_vfiprintf_r+0x18>
 8009178:	6a03      	ldr	r3, [r0, #32]
 800917a:	b90b      	cbnz	r3, 8009180 <_vfiprintf_r+0x18>
 800917c:	f7fe f904 	bl	8007388 <__sinit>
 8009180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009182:	07d9      	lsls	r1, r3, #31
 8009184:	d405      	bmi.n	8009192 <_vfiprintf_r+0x2a>
 8009186:	89ab      	ldrh	r3, [r5, #12]
 8009188:	059a      	lsls	r2, r3, #22
 800918a:	d402      	bmi.n	8009192 <_vfiprintf_r+0x2a>
 800918c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800918e:	f7fe fa12 	bl	80075b6 <__retarget_lock_acquire_recursive>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	071b      	lsls	r3, r3, #28
 8009196:	d501      	bpl.n	800919c <_vfiprintf_r+0x34>
 8009198:	692b      	ldr	r3, [r5, #16]
 800919a:	b99b      	cbnz	r3, 80091c4 <_vfiprintf_r+0x5c>
 800919c:	4629      	mov	r1, r5
 800919e:	4630      	mov	r0, r6
 80091a0:	f000 f938 	bl	8009414 <__swsetup_r>
 80091a4:	b170      	cbz	r0, 80091c4 <_vfiprintf_r+0x5c>
 80091a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091a8:	07dc      	lsls	r4, r3, #31
 80091aa:	d504      	bpl.n	80091b6 <_vfiprintf_r+0x4e>
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	b01d      	add	sp, #116	@ 0x74
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	89ab      	ldrh	r3, [r5, #12]
 80091b8:	0598      	lsls	r0, r3, #22
 80091ba:	d4f7      	bmi.n	80091ac <_vfiprintf_r+0x44>
 80091bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091be:	f7fe f9fb 	bl	80075b8 <__retarget_lock_release_recursive>
 80091c2:	e7f3      	b.n	80091ac <_vfiprintf_r+0x44>
 80091c4:	2300      	movs	r3, #0
 80091c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091c8:	2320      	movs	r3, #32
 80091ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80091d2:	2330      	movs	r3, #48	@ 0x30
 80091d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009384 <_vfiprintf_r+0x21c>
 80091d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091dc:	f04f 0901 	mov.w	r9, #1
 80091e0:	4623      	mov	r3, r4
 80091e2:	469a      	mov	sl, r3
 80091e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091e8:	b10a      	cbz	r2, 80091ee <_vfiprintf_r+0x86>
 80091ea:	2a25      	cmp	r2, #37	@ 0x25
 80091ec:	d1f9      	bne.n	80091e2 <_vfiprintf_r+0x7a>
 80091ee:	ebba 0b04 	subs.w	fp, sl, r4
 80091f2:	d00b      	beq.n	800920c <_vfiprintf_r+0xa4>
 80091f4:	465b      	mov	r3, fp
 80091f6:	4622      	mov	r2, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ffa2 	bl	8009144 <__sfputs_r>
 8009200:	3001      	adds	r0, #1
 8009202:	f000 80a7 	beq.w	8009354 <_vfiprintf_r+0x1ec>
 8009206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009208:	445a      	add	r2, fp
 800920a:	9209      	str	r2, [sp, #36]	@ 0x24
 800920c:	f89a 3000 	ldrb.w	r3, [sl]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 809f 	beq.w	8009354 <_vfiprintf_r+0x1ec>
 8009216:	2300      	movs	r3, #0
 8009218:	f04f 32ff 	mov.w	r2, #4294967295
 800921c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009220:	f10a 0a01 	add.w	sl, sl, #1
 8009224:	9304      	str	r3, [sp, #16]
 8009226:	9307      	str	r3, [sp, #28]
 8009228:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800922c:	931a      	str	r3, [sp, #104]	@ 0x68
 800922e:	4654      	mov	r4, sl
 8009230:	2205      	movs	r2, #5
 8009232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009236:	4853      	ldr	r0, [pc, #332]	@ (8009384 <_vfiprintf_r+0x21c>)
 8009238:	f7f6 ffca 	bl	80001d0 <memchr>
 800923c:	9a04      	ldr	r2, [sp, #16]
 800923e:	b9d8      	cbnz	r0, 8009278 <_vfiprintf_r+0x110>
 8009240:	06d1      	lsls	r1, r2, #27
 8009242:	bf44      	itt	mi
 8009244:	2320      	movmi	r3, #32
 8009246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800924a:	0713      	lsls	r3, r2, #28
 800924c:	bf44      	itt	mi
 800924e:	232b      	movmi	r3, #43	@ 0x2b
 8009250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009254:	f89a 3000 	ldrb.w	r3, [sl]
 8009258:	2b2a      	cmp	r3, #42	@ 0x2a
 800925a:	d015      	beq.n	8009288 <_vfiprintf_r+0x120>
 800925c:	9a07      	ldr	r2, [sp, #28]
 800925e:	4654      	mov	r4, sl
 8009260:	2000      	movs	r0, #0
 8009262:	f04f 0c0a 	mov.w	ip, #10
 8009266:	4621      	mov	r1, r4
 8009268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800926c:	3b30      	subs	r3, #48	@ 0x30
 800926e:	2b09      	cmp	r3, #9
 8009270:	d94b      	bls.n	800930a <_vfiprintf_r+0x1a2>
 8009272:	b1b0      	cbz	r0, 80092a2 <_vfiprintf_r+0x13a>
 8009274:	9207      	str	r2, [sp, #28]
 8009276:	e014      	b.n	80092a2 <_vfiprintf_r+0x13a>
 8009278:	eba0 0308 	sub.w	r3, r0, r8
 800927c:	fa09 f303 	lsl.w	r3, r9, r3
 8009280:	4313      	orrs	r3, r2
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	46a2      	mov	sl, r4
 8009286:	e7d2      	b.n	800922e <_vfiprintf_r+0xc6>
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	1d19      	adds	r1, r3, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	9103      	str	r1, [sp, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	bfbb      	ittet	lt
 8009294:	425b      	neglt	r3, r3
 8009296:	f042 0202 	orrlt.w	r2, r2, #2
 800929a:	9307      	strge	r3, [sp, #28]
 800929c:	9307      	strlt	r3, [sp, #28]
 800929e:	bfb8      	it	lt
 80092a0:	9204      	strlt	r2, [sp, #16]
 80092a2:	7823      	ldrb	r3, [r4, #0]
 80092a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80092a6:	d10a      	bne.n	80092be <_vfiprintf_r+0x156>
 80092a8:	7863      	ldrb	r3, [r4, #1]
 80092aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ac:	d132      	bne.n	8009314 <_vfiprintf_r+0x1ac>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	1d1a      	adds	r2, r3, #4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	9203      	str	r2, [sp, #12]
 80092b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092ba:	3402      	adds	r4, #2
 80092bc:	9305      	str	r3, [sp, #20]
 80092be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009394 <_vfiprintf_r+0x22c>
 80092c2:	7821      	ldrb	r1, [r4, #0]
 80092c4:	2203      	movs	r2, #3
 80092c6:	4650      	mov	r0, sl
 80092c8:	f7f6 ff82 	bl	80001d0 <memchr>
 80092cc:	b138      	cbz	r0, 80092de <_vfiprintf_r+0x176>
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	eba0 000a 	sub.w	r0, r0, sl
 80092d4:	2240      	movs	r2, #64	@ 0x40
 80092d6:	4082      	lsls	r2, r0
 80092d8:	4313      	orrs	r3, r2
 80092da:	3401      	adds	r4, #1
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e2:	4829      	ldr	r0, [pc, #164]	@ (8009388 <_vfiprintf_r+0x220>)
 80092e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092e8:	2206      	movs	r2, #6
 80092ea:	f7f6 ff71 	bl	80001d0 <memchr>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d03f      	beq.n	8009372 <_vfiprintf_r+0x20a>
 80092f2:	4b26      	ldr	r3, [pc, #152]	@ (800938c <_vfiprintf_r+0x224>)
 80092f4:	bb1b      	cbnz	r3, 800933e <_vfiprintf_r+0x1d6>
 80092f6:	9b03      	ldr	r3, [sp, #12]
 80092f8:	3307      	adds	r3, #7
 80092fa:	f023 0307 	bic.w	r3, r3, #7
 80092fe:	3308      	adds	r3, #8
 8009300:	9303      	str	r3, [sp, #12]
 8009302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009304:	443b      	add	r3, r7
 8009306:	9309      	str	r3, [sp, #36]	@ 0x24
 8009308:	e76a      	b.n	80091e0 <_vfiprintf_r+0x78>
 800930a:	fb0c 3202 	mla	r2, ip, r2, r3
 800930e:	460c      	mov	r4, r1
 8009310:	2001      	movs	r0, #1
 8009312:	e7a8      	b.n	8009266 <_vfiprintf_r+0xfe>
 8009314:	2300      	movs	r3, #0
 8009316:	3401      	adds	r4, #1
 8009318:	9305      	str	r3, [sp, #20]
 800931a:	4619      	mov	r1, r3
 800931c:	f04f 0c0a 	mov.w	ip, #10
 8009320:	4620      	mov	r0, r4
 8009322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009326:	3a30      	subs	r2, #48	@ 0x30
 8009328:	2a09      	cmp	r2, #9
 800932a:	d903      	bls.n	8009334 <_vfiprintf_r+0x1cc>
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0c6      	beq.n	80092be <_vfiprintf_r+0x156>
 8009330:	9105      	str	r1, [sp, #20]
 8009332:	e7c4      	b.n	80092be <_vfiprintf_r+0x156>
 8009334:	fb0c 2101 	mla	r1, ip, r1, r2
 8009338:	4604      	mov	r4, r0
 800933a:	2301      	movs	r3, #1
 800933c:	e7f0      	b.n	8009320 <_vfiprintf_r+0x1b8>
 800933e:	ab03      	add	r3, sp, #12
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	462a      	mov	r2, r5
 8009344:	4b12      	ldr	r3, [pc, #72]	@ (8009390 <_vfiprintf_r+0x228>)
 8009346:	a904      	add	r1, sp, #16
 8009348:	4630      	mov	r0, r6
 800934a:	f7fd fbd9 	bl	8006b00 <_printf_float>
 800934e:	4607      	mov	r7, r0
 8009350:	1c78      	adds	r0, r7, #1
 8009352:	d1d6      	bne.n	8009302 <_vfiprintf_r+0x19a>
 8009354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009356:	07d9      	lsls	r1, r3, #31
 8009358:	d405      	bmi.n	8009366 <_vfiprintf_r+0x1fe>
 800935a:	89ab      	ldrh	r3, [r5, #12]
 800935c:	059a      	lsls	r2, r3, #22
 800935e:	d402      	bmi.n	8009366 <_vfiprintf_r+0x1fe>
 8009360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009362:	f7fe f929 	bl	80075b8 <__retarget_lock_release_recursive>
 8009366:	89ab      	ldrh	r3, [r5, #12]
 8009368:	065b      	lsls	r3, r3, #25
 800936a:	f53f af1f 	bmi.w	80091ac <_vfiprintf_r+0x44>
 800936e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009370:	e71e      	b.n	80091b0 <_vfiprintf_r+0x48>
 8009372:	ab03      	add	r3, sp, #12
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	462a      	mov	r2, r5
 8009378:	4b05      	ldr	r3, [pc, #20]	@ (8009390 <_vfiprintf_r+0x228>)
 800937a:	a904      	add	r1, sp, #16
 800937c:	4630      	mov	r0, r6
 800937e:	f7fd fe57 	bl	8007030 <_printf_i>
 8009382:	e7e4      	b.n	800934e <_vfiprintf_r+0x1e6>
 8009384:	080098e0 	.word	0x080098e0
 8009388:	080098ea 	.word	0x080098ea
 800938c:	08006b01 	.word	0x08006b01
 8009390:	08009145 	.word	0x08009145
 8009394:	080098e6 	.word	0x080098e6

08009398 <__swbuf_r>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	460e      	mov	r6, r1
 800939c:	4614      	mov	r4, r2
 800939e:	4605      	mov	r5, r0
 80093a0:	b118      	cbz	r0, 80093aa <__swbuf_r+0x12>
 80093a2:	6a03      	ldr	r3, [r0, #32]
 80093a4:	b90b      	cbnz	r3, 80093aa <__swbuf_r+0x12>
 80093a6:	f7fd ffef 	bl	8007388 <__sinit>
 80093aa:	69a3      	ldr	r3, [r4, #24]
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	071a      	lsls	r2, r3, #28
 80093b2:	d501      	bpl.n	80093b8 <__swbuf_r+0x20>
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	b943      	cbnz	r3, 80093ca <__swbuf_r+0x32>
 80093b8:	4621      	mov	r1, r4
 80093ba:	4628      	mov	r0, r5
 80093bc:	f000 f82a 	bl	8009414 <__swsetup_r>
 80093c0:	b118      	cbz	r0, 80093ca <__swbuf_r+0x32>
 80093c2:	f04f 37ff 	mov.w	r7, #4294967295
 80093c6:	4638      	mov	r0, r7
 80093c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	6922      	ldr	r2, [r4, #16]
 80093ce:	1a98      	subs	r0, r3, r2
 80093d0:	6963      	ldr	r3, [r4, #20]
 80093d2:	b2f6      	uxtb	r6, r6
 80093d4:	4283      	cmp	r3, r0
 80093d6:	4637      	mov	r7, r6
 80093d8:	dc05      	bgt.n	80093e6 <__swbuf_r+0x4e>
 80093da:	4621      	mov	r1, r4
 80093dc:	4628      	mov	r0, r5
 80093de:	f7ff fd99 	bl	8008f14 <_fflush_r>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d1ed      	bne.n	80093c2 <__swbuf_r+0x2a>
 80093e6:	68a3      	ldr	r3, [r4, #8]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	60a3      	str	r3, [r4, #8]
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	6022      	str	r2, [r4, #0]
 80093f2:	701e      	strb	r6, [r3, #0]
 80093f4:	6962      	ldr	r2, [r4, #20]
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d004      	beq.n	8009406 <__swbuf_r+0x6e>
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	07db      	lsls	r3, r3, #31
 8009400:	d5e1      	bpl.n	80093c6 <__swbuf_r+0x2e>
 8009402:	2e0a      	cmp	r6, #10
 8009404:	d1df      	bne.n	80093c6 <__swbuf_r+0x2e>
 8009406:	4621      	mov	r1, r4
 8009408:	4628      	mov	r0, r5
 800940a:	f7ff fd83 	bl	8008f14 <_fflush_r>
 800940e:	2800      	cmp	r0, #0
 8009410:	d0d9      	beq.n	80093c6 <__swbuf_r+0x2e>
 8009412:	e7d6      	b.n	80093c2 <__swbuf_r+0x2a>

08009414 <__swsetup_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4b29      	ldr	r3, [pc, #164]	@ (80094bc <__swsetup_r+0xa8>)
 8009418:	4605      	mov	r5, r0
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	460c      	mov	r4, r1
 800941e:	b118      	cbz	r0, 8009428 <__swsetup_r+0x14>
 8009420:	6a03      	ldr	r3, [r0, #32]
 8009422:	b90b      	cbnz	r3, 8009428 <__swsetup_r+0x14>
 8009424:	f7fd ffb0 	bl	8007388 <__sinit>
 8009428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800942c:	0719      	lsls	r1, r3, #28
 800942e:	d422      	bmi.n	8009476 <__swsetup_r+0x62>
 8009430:	06da      	lsls	r2, r3, #27
 8009432:	d407      	bmi.n	8009444 <__swsetup_r+0x30>
 8009434:	2209      	movs	r2, #9
 8009436:	602a      	str	r2, [r5, #0]
 8009438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	f04f 30ff 	mov.w	r0, #4294967295
 8009442:	e033      	b.n	80094ac <__swsetup_r+0x98>
 8009444:	0758      	lsls	r0, r3, #29
 8009446:	d512      	bpl.n	800946e <__swsetup_r+0x5a>
 8009448:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800944a:	b141      	cbz	r1, 800945e <__swsetup_r+0x4a>
 800944c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009450:	4299      	cmp	r1, r3
 8009452:	d002      	beq.n	800945a <__swsetup_r+0x46>
 8009454:	4628      	mov	r0, r5
 8009456:	f7fe feff 	bl	8008258 <_free_r>
 800945a:	2300      	movs	r3, #0
 800945c:	6363      	str	r3, [r4, #52]	@ 0x34
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009464:	81a3      	strh	r3, [r4, #12]
 8009466:	2300      	movs	r3, #0
 8009468:	6063      	str	r3, [r4, #4]
 800946a:	6923      	ldr	r3, [r4, #16]
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	f043 0308 	orr.w	r3, r3, #8
 8009474:	81a3      	strh	r3, [r4, #12]
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	b94b      	cbnz	r3, 800948e <__swsetup_r+0x7a>
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009484:	d003      	beq.n	800948e <__swsetup_r+0x7a>
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 f883 	bl	8009594 <__smakebuf_r>
 800948e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009492:	f013 0201 	ands.w	r2, r3, #1
 8009496:	d00a      	beq.n	80094ae <__swsetup_r+0x9a>
 8009498:	2200      	movs	r2, #0
 800949a:	60a2      	str	r2, [r4, #8]
 800949c:	6962      	ldr	r2, [r4, #20]
 800949e:	4252      	negs	r2, r2
 80094a0:	61a2      	str	r2, [r4, #24]
 80094a2:	6922      	ldr	r2, [r4, #16]
 80094a4:	b942      	cbnz	r2, 80094b8 <__swsetup_r+0xa4>
 80094a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094aa:	d1c5      	bne.n	8009438 <__swsetup_r+0x24>
 80094ac:	bd38      	pop	{r3, r4, r5, pc}
 80094ae:	0799      	lsls	r1, r3, #30
 80094b0:	bf58      	it	pl
 80094b2:	6962      	ldrpl	r2, [r4, #20]
 80094b4:	60a2      	str	r2, [r4, #8]
 80094b6:	e7f4      	b.n	80094a2 <__swsetup_r+0x8e>
 80094b8:	2000      	movs	r0, #0
 80094ba:	e7f7      	b.n	80094ac <__swsetup_r+0x98>
 80094bc:	2000001c 	.word	0x2000001c

080094c0 <_raise_r>:
 80094c0:	291f      	cmp	r1, #31
 80094c2:	b538      	push	{r3, r4, r5, lr}
 80094c4:	4605      	mov	r5, r0
 80094c6:	460c      	mov	r4, r1
 80094c8:	d904      	bls.n	80094d4 <_raise_r+0x14>
 80094ca:	2316      	movs	r3, #22
 80094cc:	6003      	str	r3, [r0, #0]
 80094ce:	f04f 30ff 	mov.w	r0, #4294967295
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094d6:	b112      	cbz	r2, 80094de <_raise_r+0x1e>
 80094d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094dc:	b94b      	cbnz	r3, 80094f2 <_raise_r+0x32>
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f830 	bl	8009544 <_getpid_r>
 80094e4:	4622      	mov	r2, r4
 80094e6:	4601      	mov	r1, r0
 80094e8:	4628      	mov	r0, r5
 80094ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ee:	f000 b817 	b.w	8009520 <_kill_r>
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d00a      	beq.n	800950c <_raise_r+0x4c>
 80094f6:	1c59      	adds	r1, r3, #1
 80094f8:	d103      	bne.n	8009502 <_raise_r+0x42>
 80094fa:	2316      	movs	r3, #22
 80094fc:	6003      	str	r3, [r0, #0]
 80094fe:	2001      	movs	r0, #1
 8009500:	e7e7      	b.n	80094d2 <_raise_r+0x12>
 8009502:	2100      	movs	r1, #0
 8009504:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009508:	4620      	mov	r0, r4
 800950a:	4798      	blx	r3
 800950c:	2000      	movs	r0, #0
 800950e:	e7e0      	b.n	80094d2 <_raise_r+0x12>

08009510 <raise>:
 8009510:	4b02      	ldr	r3, [pc, #8]	@ (800951c <raise+0xc>)
 8009512:	4601      	mov	r1, r0
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	f7ff bfd3 	b.w	80094c0 <_raise_r>
 800951a:	bf00      	nop
 800951c:	2000001c 	.word	0x2000001c

08009520 <_kill_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d07      	ldr	r5, [pc, #28]	@ (8009540 <_kill_r+0x20>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	4611      	mov	r1, r2
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	f7f8 fb47 	bl	8001bc0 <_kill>
 8009532:	1c43      	adds	r3, r0, #1
 8009534:	d102      	bne.n	800953c <_kill_r+0x1c>
 8009536:	682b      	ldr	r3, [r5, #0]
 8009538:	b103      	cbz	r3, 800953c <_kill_r+0x1c>
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	bd38      	pop	{r3, r4, r5, pc}
 800953e:	bf00      	nop
 8009540:	200003f0 	.word	0x200003f0

08009544 <_getpid_r>:
 8009544:	f7f8 bb34 	b.w	8001bb0 <_getpid>

08009548 <__swhatbuf_r>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	460c      	mov	r4, r1
 800954c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009550:	2900      	cmp	r1, #0
 8009552:	b096      	sub	sp, #88	@ 0x58
 8009554:	4615      	mov	r5, r2
 8009556:	461e      	mov	r6, r3
 8009558:	da0d      	bge.n	8009576 <__swhatbuf_r+0x2e>
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009560:	f04f 0100 	mov.w	r1, #0
 8009564:	bf14      	ite	ne
 8009566:	2340      	movne	r3, #64	@ 0x40
 8009568:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800956c:	2000      	movs	r0, #0
 800956e:	6031      	str	r1, [r6, #0]
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	b016      	add	sp, #88	@ 0x58
 8009574:	bd70      	pop	{r4, r5, r6, pc}
 8009576:	466a      	mov	r2, sp
 8009578:	f000 f848 	bl	800960c <_fstat_r>
 800957c:	2800      	cmp	r0, #0
 800957e:	dbec      	blt.n	800955a <__swhatbuf_r+0x12>
 8009580:	9901      	ldr	r1, [sp, #4]
 8009582:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009586:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800958a:	4259      	negs	r1, r3
 800958c:	4159      	adcs	r1, r3
 800958e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009592:	e7eb      	b.n	800956c <__swhatbuf_r+0x24>

08009594 <__smakebuf_r>:
 8009594:	898b      	ldrh	r3, [r1, #12]
 8009596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009598:	079d      	lsls	r5, r3, #30
 800959a:	4606      	mov	r6, r0
 800959c:	460c      	mov	r4, r1
 800959e:	d507      	bpl.n	80095b0 <__smakebuf_r+0x1c>
 80095a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	6123      	str	r3, [r4, #16]
 80095a8:	2301      	movs	r3, #1
 80095aa:	6163      	str	r3, [r4, #20]
 80095ac:	b003      	add	sp, #12
 80095ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b0:	ab01      	add	r3, sp, #4
 80095b2:	466a      	mov	r2, sp
 80095b4:	f7ff ffc8 	bl	8009548 <__swhatbuf_r>
 80095b8:	9f00      	ldr	r7, [sp, #0]
 80095ba:	4605      	mov	r5, r0
 80095bc:	4639      	mov	r1, r7
 80095be:	4630      	mov	r0, r6
 80095c0:	f7fe febe 	bl	8008340 <_malloc_r>
 80095c4:	b948      	cbnz	r0, 80095da <__smakebuf_r+0x46>
 80095c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ca:	059a      	lsls	r2, r3, #22
 80095cc:	d4ee      	bmi.n	80095ac <__smakebuf_r+0x18>
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	f043 0302 	orr.w	r3, r3, #2
 80095d6:	81a3      	strh	r3, [r4, #12]
 80095d8:	e7e2      	b.n	80095a0 <__smakebuf_r+0xc>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	6020      	str	r0, [r4, #0]
 80095de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	9b01      	ldr	r3, [sp, #4]
 80095e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095ea:	b15b      	cbz	r3, 8009604 <__smakebuf_r+0x70>
 80095ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095f0:	4630      	mov	r0, r6
 80095f2:	f000 f81d 	bl	8009630 <_isatty_r>
 80095f6:	b128      	cbz	r0, 8009604 <__smakebuf_r+0x70>
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	f023 0303 	bic.w	r3, r3, #3
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	431d      	orrs	r5, r3
 8009608:	81a5      	strh	r5, [r4, #12]
 800960a:	e7cf      	b.n	80095ac <__smakebuf_r+0x18>

0800960c <_fstat_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d07      	ldr	r5, [pc, #28]	@ (800962c <_fstat_r+0x20>)
 8009610:	2300      	movs	r3, #0
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	4611      	mov	r1, r2
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	f7f8 fb31 	bl	8001c80 <_fstat>
 800961e:	1c43      	adds	r3, r0, #1
 8009620:	d102      	bne.n	8009628 <_fstat_r+0x1c>
 8009622:	682b      	ldr	r3, [r5, #0]
 8009624:	b103      	cbz	r3, 8009628 <_fstat_r+0x1c>
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	bd38      	pop	{r3, r4, r5, pc}
 800962a:	bf00      	nop
 800962c:	200003f0 	.word	0x200003f0

08009630 <_isatty_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d06      	ldr	r5, [pc, #24]	@ (800964c <_isatty_r+0x1c>)
 8009634:	2300      	movs	r3, #0
 8009636:	4604      	mov	r4, r0
 8009638:	4608      	mov	r0, r1
 800963a:	602b      	str	r3, [r5, #0]
 800963c:	f7f8 fb30 	bl	8001ca0 <_isatty>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d102      	bne.n	800964a <_isatty_r+0x1a>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	b103      	cbz	r3, 800964a <_isatty_r+0x1a>
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	200003f0 	.word	0x200003f0

08009650 <_init>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr

0800965c <_fini>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr
