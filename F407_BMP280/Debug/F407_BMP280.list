
F407_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08008c80  08008c80  00009c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009030  08009030  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009030  08009030  0000a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009038  08009038  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009038  08009038  0000a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800903c  0800903c  0000a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009040  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          00000214  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e8  200003e8  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6a7  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002121  00000000  00000000  000178ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  000199d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084a  00000000  00000000  0001a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d2c  00000000  00000000  0001acda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fff2  00000000  00000000  0003ca06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6ee9  00000000  00000000  0004c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001138e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c78  00000000  00000000  00113924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0011759c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c68 	.word	0x08008c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008c68 	.word	0x08008c68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMP280_Init>:
#define temp_msb 0xFA

uint8_t message[6];

void BMP280_Init()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8
//	BMP280_RESET();

	HAL_Delay(50);
 8000e9e:	2032      	movs	r0, #50	@ 0x32
 8000ea0:	f000 fbec 	bl	800167c <HAL_Delay>
	uint8_t Send[1] = {Idr};
 8000ea4:	23d0      	movs	r3, #208	@ 0xd0
 8000ea6:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, (BMP280_ADDRESS<<1)|0, Send, sizeof(Send), HAL_MAX_DELAY);
 8000ea8:	1d3a      	adds	r2, r7, #4
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	21ec      	movs	r1, #236	@ 0xec
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <BMP280_Init+0x2c>)
 8000eb6:	f001 f8ad 	bl	8002014 <HAL_I2C_Master_Transmit>
//	HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001f8 	.word	0x200001f8

08000ec8 <BMP280_ReadReg>:
	uint8_t Send[1] = {Reset};
	HAL_I2C_Master_Transmit(&hi2c1, (BMP280_ADDRESS<<1)|0, Send, sizeof(Send), HAL_MAX_DELAY);
}

void BMP280_ReadReg(float *Temperture, float *Humidity)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	uint32_t data;

	*Temperture = 0.1;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <BMP280_ReadReg+0x30>)
 8000ed6:	601a      	str	r2, [r3, #0]
	*Humidity = 0.1;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	4a07      	ldr	r2, [pc, #28]	@ (8000ef8 <BMP280_ReadReg+0x30>)
 8000edc:	601a      	str	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c1, (BMP280_ADDRESS<<1)|1, message, sizeof(message), HAL_MAX_DELAY);
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <BMP280_ReadReg+0x34>)
 8000ee8:	21ed      	movs	r1, #237	@ 0xed
 8000eea:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <BMP280_ReadReg+0x38>)
 8000eec:	f001 f990 	bl	8002210 <HAL_I2C_Master_Receive>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	3dcccccd 	.word	0x3dcccccd
 8000efc:	200001f0 	.word	0x200001f0
 8000f00:	200001f8 	.word	0x200001f8

08000f04 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <MX_GPIO_Init+0x4c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <MX_GPIO_Init+0x4c>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <MX_GPIO_Init+0x4c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MX_GPIO_Init+0x4c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <MX_GPIO_Init+0x4c>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_GPIO_Init+0x4c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f5a:	4a13      	ldr	r2, [pc, #76]	@ (8000fa8 <MX_I2C1_Init+0x54>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f60:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <MX_I2C1_Init+0x58>)
 8000f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <MX_I2C1_Init+0x50>)
 8000f92:	f000 fee5 	bl	8001d60 <HAL_I2C_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f9c:	f000 f904 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200001f8 	.word	0x200001f8
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	000186a0 	.word	0x000186a0

08000fb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a21      	ldr	r2, [pc, #132]	@ (8001054 <HAL_I2C_MspInit+0xa4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d13b      	bne.n	800104a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <HAL_I2C_MspInit+0xa8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a1f      	ldr	r2, [pc, #124]	@ (8001058 <HAL_I2C_MspInit+0xa8>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8001058 <HAL_I2C_MspInit+0xa8>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fee:	23c0      	movs	r3, #192	@ 0xc0
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff2:	2312      	movs	r3, #18
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ffe:	2304      	movs	r3, #4
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4814      	ldr	r0, [pc, #80]	@ (800105c <HAL_I2C_MspInit+0xac>)
 800100a:	f000 fd0d 	bl	8001a28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <HAL_I2C_MspInit+0xa8>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a10      	ldr	r2, [pc, #64]	@ (8001058 <HAL_I2C_MspInit+0xa8>)
 8001018:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_I2C_MspInit+0xa8>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	201f      	movs	r0, #31
 8001030:	f000 fc23 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001034:	201f      	movs	r0, #31
 8001036:	f000 fc3c 	bl	80018b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2020      	movs	r0, #32
 8001040:	f000 fc1b 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001044:	2020      	movs	r0, #32
 8001046:	f000 fc34 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	@ 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40005400 	.word	0x40005400
 8001058:	40023800 	.word	0x40023800
 800105c:	40020400 	.word	0x40020400

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001066:	f000 fa97 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106a:	f000 f83f 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106e:	f7ff ff49 	bl	8000f04 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001072:	f7ff ff6f 	bl	8000f54 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001076:	f000 f9eb 	bl	8001450 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char message[20];
  float Temperture, Humidity;

  BMP280_Init();
 800107a:	f7ff ff0d 	bl	8000e98 <BMP280_Init>
  HAL_Delay(50);
 800107e:	2032      	movs	r0, #50	@ 0x32
 8001080:	f000 fafc 	bl	800167c <HAL_Delay>
  BMP280_ReadReg(&Temperture, &Humidity);
 8001084:	1d3a      	adds	r2, r7, #4
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff1b 	bl	8000ec8 <BMP280_ReadReg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(message, "温度: %.lf ℃, 湿度: %.lf %%\r\n", Temperture, Humidity);
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa57 	bl	8000548 <__aeabi_f2d>
 800109a:	4604      	mov	r4, r0
 800109c:	460d      	mov	r5, r1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa51 	bl	8000548 <__aeabi_f2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	f107 000c 	add.w	r0, r7, #12
 80010ae:	e9cd 2300 	strd	r2, r3, [sp]
 80010b2:	4622      	mov	r2, r4
 80010b4:	462b      	mov	r3, r5
 80010b6:	490b      	ldr	r1, [pc, #44]	@ (80010e4 <main+0x84>)
 80010b8:	f005 fcaa 	bl	8006a10 <siprintf>
	  HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f8d5 	bl	8000270 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f107 010c 	add.w	r1, r7, #12
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <main+0x88>)
 80010d4:	f003 ffd0 	bl	8005078 <HAL_UART_Transmit>

	  HAL_Delay(500);
 80010d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010dc:	f000 face 	bl	800167c <HAL_Delay>
	  sprintf(message, "温度: %.lf ℃, 湿度: %.lf %%\r\n", Temperture, Humidity);
 80010e0:	bf00      	nop
 80010e2:	e7d6      	b.n	8001092 <main+0x32>
 80010e4:	08008c80 	.word	0x08008c80
 80010e8:	20000250 	.word	0x20000250

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	@ 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	@ 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fceb 	bl	8006ad6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <SystemClock_Config+0xb4>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	4a21      	ldr	r2, [pc, #132]	@ (80011a0 <SystemClock_Config+0xb4>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001120:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <SystemClock_Config+0xb4>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <SystemClock_Config+0xb8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1b      	ldr	r2, [pc, #108]	@ (80011a4 <SystemClock_Config+0xb8>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <SystemClock_Config+0xb8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2310      	movs	r3, #16
 8001152:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001154:	2300      	movs	r3, #0
 8001156:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fae3 	bl	8004728 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001168:	f000 f81e 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fd46 	bl	8004c18 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001192:	f000 f809 	bl	80011a8 <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3750      	adds	r7, #80	@ 0x50
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <Error_Handler+0x8>

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001200 <HAL_MspInit+0x4c>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <HAL_MspInit+0x4c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <NMI_Handler+0x4>

0800120c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <MemManage_Handler+0x4>

0800121c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <UsageFault_Handler+0x4>

0800122c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f000 f9ef 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <I2C1_EV_IRQHandler+0x10>)
 800126a:	f001 fa03 	bl	8002674 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200001f8 	.word	0x200001f8

08001278 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <I2C1_ER_IRQHandler+0x10>)
 800127e:	f001 fb4c 	bl	800291a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001f8 	.word	0x200001f8

0800128c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <USART1_IRQHandler+0x10>)
 8001292:	f003 ff7d 	bl	8005190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000250 	.word	0x20000250

080012a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return 1;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <_kill>:

int _kill(int pid, int sig)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ba:	f005 fc5f 	bl	8006b7c <__errno>
 80012be:	4603      	mov	r3, r0
 80012c0:	2216      	movs	r2, #22
 80012c2:	601a      	str	r2, [r3, #0]
  return -1;
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_exit>:

void _exit (int status)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ffe7 	bl	80012b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012e2:	bf00      	nop
 80012e4:	e7fd      	b.n	80012e2 <_exit+0x12>

080012e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e00a      	b.n	800130e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012f8:	f3af 8000 	nop.w
 80012fc:	4601      	mov	r1, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	60ba      	str	r2, [r7, #8]
 8001304:	b2ca      	uxtb	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	dbf0      	blt.n	80012f8 <_read+0x12>
  }

  return len;
 8001316:	687b      	ldr	r3, [r7, #4]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e009      	b.n	8001346 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	60ba      	str	r2, [r7, #8]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	dbf1      	blt.n	8001332 <_write+0x12>
  }
  return len;
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_close>:

int _close(int file)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001380:	605a      	str	r2, [r3, #4]
  return 0;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_isatty>:

int _isatty(int file)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c8:	4a14      	ldr	r2, [pc, #80]	@ (800141c <_sbrk+0x5c>)
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <_sbrk+0x60>)
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <_sbrk+0x64>)
 80013de:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <_sbrk+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d207      	bcs.n	8001400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f0:	f005 fbc4 	bl	8006b7c <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	220c      	movs	r2, #12
 80013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e009      	b.n	8001414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001406:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a05      	ldr	r2, [pc, #20]	@ (8001424 <_sbrk+0x64>)
 8001410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20020000 	.word	0x20020000
 8001420:	00000400 	.word	0x00000400
 8001424:	2000024c 	.word	0x2000024c
 8001428:	200003e8 	.word	0x200003e8

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_USART1_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <MX_USART1_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_USART1_UART_Init+0x4c>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_USART1_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_USART1_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_USART1_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_USART1_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_USART1_UART_Init+0x4c>)
 8001488:	f003 fda6 	bl	8004fd8 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f7ff fe89 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000250 	.word	0x20000250
 80014a0:	40011000 	.word	0x40011000

080014a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001538 <HAL_UART_MspInit+0x94>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d134      	bne.n	8001530 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a14      	ldr	r2, [pc, #80]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001510:	2307      	movs	r3, #7
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4809      	ldr	r0, [pc, #36]	@ (8001540 <HAL_UART_MspInit+0x9c>)
 800151c:	f000 fa84 	bl	8001a28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2025      	movs	r0, #37	@ 0x25
 8001526:	f000 f9a8 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800152a:	2025      	movs	r0, #37	@ 0x25
 800152c:	f000 f9c1 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	@ 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40011000 	.word	0x40011000
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800157c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001548:	f7ff ff70 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	@ (8001584 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	@ (8001590 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f005 fb09 	bl	8006b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff fd73 	bl	8001060 <main>
  bx  lr    
 800157a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800157c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001588:	08009040 	.word	0x08009040
  ldr r2, =_sbss
 800158c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001590:	200003e8 	.word	0x200003e8

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	@ (80015d8 <HAL_Init+0x40>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_Init+0x40>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <HAL_Init+0x40>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f94f 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fdf2 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f967 	bl	80018ce <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 f92f 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000000 	.word	0x20000000
 8001634:	20000008 	.word	0x20000008
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008
 8001660:	20000298 	.word	0x20000298

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000298 	.word	0x20000298

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	@ (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	@ (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	@ (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	@ 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff feb6 	bl	8001664 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d008      	beq.n	8001918 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2280      	movs	r2, #128	@ 0x80
 800190a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e052      	b.n	80019be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0216 	bic.w	r2, r2, #22
 8001926:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001936:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	d103      	bne.n	8001948 <HAL_DMA_Abort+0x62>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0208 	bic.w	r2, r2, #8
 8001956:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001968:	e013      	b.n	8001992 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196a:	f7ff fe7b 	bl	8001664 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b05      	cmp	r3, #5
 8001976:	d90c      	bls.n	8001992 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2220      	movs	r2, #32
 800197c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e015      	b.n	80019be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e4      	bne.n	800196a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a4:	223f      	movs	r2, #63	@ 0x3f
 80019a6:	409a      	lsls	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d004      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2280      	movs	r2, #128	@ 0x80
 80019de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e00c      	b.n	80019fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2205      	movs	r2, #5
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a18:	b2db      	uxtb	r3, r3
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e16b      	b.n	8001d1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 815a 	bne.w	8001d16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80b4 	beq.w	8001d16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b60      	ldr	r3, [pc, #384]	@ (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a5b      	ldr	r2, [pc, #364]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	@ (8001d3c <HAL_GPIO_Init+0x314>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x226>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	@ (8001d40 <HAL_GPIO_Init+0x318>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x222>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a50      	ldr	r2, [pc, #320]	@ (8001d44 <HAL_GPIO_Init+0x31c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x21e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	@ (8001d48 <HAL_GPIO_Init+0x320>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x21a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x216>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4d      	ldr	r2, [pc, #308]	@ (8001d50 <HAL_GPIO_Init+0x328>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x212>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4c      	ldr	r2, [pc, #304]	@ (8001d54 <HAL_GPIO_Init+0x32c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4b      	ldr	r2, [pc, #300]	@ (8001d58 <HAL_GPIO_Init+0x330>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x20a>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00e      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c32:	2308      	movs	r3, #8
 8001c34:	e00c      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c36:	2306      	movs	r3, #6
 8001c38:	e00a      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	e008      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e004      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f002 0203 	and.w	r2, r2, #3
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c60:	4935      	ldr	r1, [pc, #212]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c92:	4a32      	ldr	r2, [pc, #200]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c98:	4b30      	ldr	r3, [pc, #192]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cbc:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc2:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d10:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	f67f ae90 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40021400 	.word	0x40021400
 8001d54:	40021800 	.word	0x40021800
 8001d58:	40021c00 	.word	0x40021c00
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e12b      	b.n	8001fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff f912 	bl	8000fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	@ 0x24
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc4:	f003 f8e0 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a81      	ldr	r2, [pc, #516]	@ (8001fd4 <HAL_I2C_Init+0x274>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d807      	bhi.n	8001de4 <HAL_I2C_Init+0x84>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a80      	ldr	r2, [pc, #512]	@ (8001fd8 <HAL_I2C_Init+0x278>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf94      	ite	ls
 8001ddc:	2301      	movls	r3, #1
 8001dde:	2300      	movhi	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e006      	b.n	8001df2 <HAL_I2C_Init+0x92>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a7d      	ldr	r2, [pc, #500]	@ (8001fdc <HAL_I2C_Init+0x27c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0e7      	b.n	8001fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a78      	ldr	r2, [pc, #480]	@ (8001fe0 <HAL_I2C_Init+0x280>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a6a      	ldr	r2, [pc, #424]	@ (8001fd4 <HAL_I2C_Init+0x274>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d802      	bhi.n	8001e34 <HAL_I2C_Init+0xd4>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3301      	adds	r3, #1
 8001e32:	e009      	b.n	8001e48 <HAL_I2C_Init+0xe8>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4a69      	ldr	r2, [pc, #420]	@ (8001fe4 <HAL_I2C_Init+0x284>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	3301      	adds	r3, #1
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	495c      	ldr	r1, [pc, #368]	@ (8001fd4 <HAL_I2C_Init+0x274>)
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d819      	bhi.n	8001e9c <HAL_I2C_Init+0x13c>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e59      	subs	r1, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e76:	1c59      	adds	r1, r3, #1
 8001e78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_I2C_Init+0x138>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e59      	subs	r1, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e96:	e051      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e04f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <HAL_I2C_Init+0x168>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e012      	b.n	8001eee <HAL_I2C_Init+0x18e>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	0099      	lsls	r1, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Init+0x196>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e022      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10e      	bne.n	8001f1c <HAL_I2C_Init+0x1bc>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e58      	subs	r0, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	440b      	add	r3, r1
 8001f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f1a:	e00f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	6809      	ldr	r1, [r1, #0]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6911      	ldr	r1, [r2, #16]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68d2      	ldr	r2, [r2, #12]
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	000186a0 	.word	0x000186a0
 8001fd8:	001e847f 	.word	0x001e847f
 8001fdc:	003d08ff 	.word	0x003d08ff
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	10624dd3 	.word	0x10624dd3

08001fe8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffa:	2b80      	cmp	r3, #128	@ 0x80
 8001ffc:	d103      	bne.n	8002006 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	461a      	mov	r2, r3
 8002020:	460b      	mov	r3, r1
 8002022:	817b      	strh	r3, [r7, #10]
 8002024:	4613      	mov	r3, r2
 8002026:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff fb1c 	bl	8001664 <HAL_GetTick>
 800202c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b20      	cmp	r3, #32
 8002038:	f040 80e0 	bne.w	80021fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2319      	movs	r3, #25
 8002042:	2201      	movs	r2, #1
 8002044:	4970      	ldr	r1, [pc, #448]	@ (8002208 <HAL_I2C_Master_Transmit+0x1f4>)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f002 f8ea 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
 8002054:	e0d3      	b.n	80021fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_I2C_Master_Transmit+0x50>
 8002060:	2302      	movs	r3, #2
 8002062:	e0cc      	b.n	80021fe <HAL_I2C_Master_Transmit+0x1ea>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d007      	beq.n	800208a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002098:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2221      	movs	r2, #33	@ 0x21
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2210      	movs	r2, #16
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	893a      	ldrh	r2, [r7, #8]
 80020ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4a50      	ldr	r2, [pc, #320]	@ (800220c <HAL_I2C_Master_Transmit+0x1f8>)
 80020ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020cc:	8979      	ldrh	r1, [r7, #10]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	6a3a      	ldr	r2, [r7, #32]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f001 feac 	bl	8003e30 <I2C_MasterRequestWrite>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e08d      	b.n	80021fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020f8:	e066      	b.n	80021c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	6a39      	ldr	r1, [r7, #32]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f002 f9a8 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00d      	beq.n	8002126 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	2b04      	cmp	r3, #4
 8002110:	d107      	bne.n	8002122 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002120:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06b      	b.n	80021fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b04      	cmp	r3, #4
 8002162:	d11b      	bne.n	800219c <HAL_I2C_Master_Transmit+0x188>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002168:	2b00      	cmp	r3, #0
 800216a:	d017      	beq.n	800219c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	6a39      	ldr	r1, [r7, #32]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f002 f99f 	bl	80044e4 <I2C_WaitOnBTFFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00d      	beq.n	80021c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d107      	bne.n	80021c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e01a      	b.n	80021fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d194      	bne.n	80020fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e000      	b.n	80021fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021fc:	2302      	movs	r3, #2
  }
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	00100002 	.word	0x00100002
 800220c:	ffff0000 	.word	0xffff0000

08002210 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	@ 0x30
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	461a      	mov	r2, r3
 800221c:	460b      	mov	r3, r1
 800221e:	817b      	strh	r3, [r7, #10]
 8002220:	4613      	mov	r3, r2
 8002222:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff fa1e 	bl	8001664 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b20      	cmp	r3, #32
 8002234:	f040 8217 	bne.w	8002666 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2319      	movs	r3, #25
 800223e:	2201      	movs	r2, #1
 8002240:	497c      	ldr	r1, [pc, #496]	@ (8002434 <HAL_I2C_Master_Receive+0x224>)
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f001 ffec 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800224e:	2302      	movs	r3, #2
 8002250:	e20a      	b.n	8002668 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_I2C_Master_Receive+0x50>
 800225c:	2302      	movs	r3, #2
 800225e:	e203      	b.n	8002668 <HAL_I2C_Master_Receive+0x458>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d007      	beq.n	8002286 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002294:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2222      	movs	r2, #34	@ 0x22
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2210      	movs	r2, #16
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	893a      	ldrh	r2, [r7, #8]
 80022b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002438 <HAL_I2C_Master_Receive+0x228>)
 80022c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022c8:	8979      	ldrh	r1, [r7, #10]
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f001 fe30 	bl	8003f34 <I2C_MasterRequestRead>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e1c4      	b.n	8002668 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d113      	bne.n	800230e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	623b      	str	r3, [r7, #32]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e198      	b.n	8002640 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002312:	2b01      	cmp	r3, #1
 8002314:	d11b      	bne.n	800234e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e178      	b.n	8002640 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002352:	2b02      	cmp	r3, #2
 8002354:	d11b      	bne.n	800238e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002364:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	e158      	b.n	8002640 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800239c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023b4:	e144      	b.n	8002640 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	f200 80f1 	bhi.w	80025a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d123      	bne.n	8002410 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f002 f903 	bl	80045d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e145      	b.n	8002668 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800240e:	e117      	b.n	8002640 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	2b02      	cmp	r3, #2
 8002416:	d14e      	bne.n	80024b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241e:	2200      	movs	r2, #0
 8002420:	4906      	ldr	r1, [pc, #24]	@ (800243c <HAL_I2C_Master_Receive+0x22c>)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f001 fefc 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e11a      	b.n	8002668 <HAL_I2C_Master_Receive+0x458>
 8002432:	bf00      	nop
 8002434:	00100002 	.word	0x00100002
 8002438:	ffff0000 	.word	0xffff0000
 800243c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800244e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024b4:	e0c4      	b.n	8002640 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	2200      	movs	r2, #0
 80024be:	496c      	ldr	r1, [pc, #432]	@ (8002670 <HAL_I2C_Master_Receive+0x460>)
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f001 fead 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0cb      	b.n	8002668 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002518:	2200      	movs	r2, #0
 800251a:	4955      	ldr	r1, [pc, #340]	@ (8002670 <HAL_I2C_Master_Receive+0x460>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f001 fe7f 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e09d      	b.n	8002668 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025a0:	e04e      	b.n	8002640 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f002 f816 	bl	80045d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e058      	b.n	8002668 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d124      	bne.n	8002640 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d107      	bne.n	800260e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f aeb6 	bne.w	80023b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3728      	adds	r7, #40	@ 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	00010004 	.word	0x00010004

08002674 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002694:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800269c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d003      	beq.n	80026ac <HAL_I2C_EV_IRQHandler+0x38>
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b40      	cmp	r3, #64	@ 0x40
 80026a8:	f040 80b1 	bne.w	800280e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80026cc:	d003      	beq.n	80026d6 <HAL_I2C_EV_IRQHandler+0x62>
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80026d4:	d101      	bne.n	80026da <HAL_I2C_EV_IRQHandler+0x66>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x68>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b01      	cmp	r3, #1
 80026de:	f000 8114 	beq.w	800290a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00b      	beq.n	8002704 <HAL_I2C_EV_IRQHandler+0x90>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f001 fffa 	bl	80046f0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fd7a 	bl	80031f6 <I2C_Master_SB>
 8002702:	e083      	b.n	800280c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_I2C_EV_IRQHandler+0xac>
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fdf2 	bl	8003302 <I2C_Master_ADD10>
 800271e:	e075      	b.n	800280c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_I2C_EV_IRQHandler+0xc8>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fe0e 	bl	8003356 <I2C_Master_ADDR>
 800273a:	e067      	b.n	800280c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d036      	beq.n	80027b4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002754:	f000 80db 	beq.w	800290e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <HAL_I2C_EV_IRQHandler+0x10a>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_I2C_EV_IRQHandler+0x10a>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f9d6 	bl	8002b28 <I2C_MasterTransmit_TXE>
 800277c:	e046      	b.n	800280c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80c2 	beq.w	800290e <HAL_I2C_EV_IRQHandler+0x29a>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80bc 	beq.w	800290e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002796:	7bbb      	ldrb	r3, [r7, #14]
 8002798:	2b21      	cmp	r3, #33	@ 0x21
 800279a:	d103      	bne.n	80027a4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fa5f 	bl	8002c60 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027a2:	e0b4      	b.n	800290e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b40      	cmp	r3, #64	@ 0x40
 80027a8:	f040 80b1 	bne.w	800290e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 facd 	bl	8002d4c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027b2:	e0ac      	b.n	800290e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027c2:	f000 80a4 	beq.w	800290e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_I2C_EV_IRQHandler+0x178>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_I2C_EV_IRQHandler+0x178>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d103      	bne.n	80027ec <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fb49 	bl	8002e7c <I2C_MasterReceive_RXNE>
 80027ea:	e00f      	b.n	800280c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 808b 	beq.w	800290e <HAL_I2C_EV_IRQHandler+0x29a>
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8085 	beq.w	800290e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fc01 	bl	800300c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800280a:	e080      	b.n	800290e <HAL_I2C_EV_IRQHandler+0x29a>
 800280c:	e07f      	b.n	800290e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e007      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d011      	beq.n	800285e <HAL_I2C_EV_IRQHandler+0x1ea>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00c      	beq.n	800285e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002854:	69b9      	ldr	r1, [r7, #24]
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 ffcc 	bl	80037f4 <I2C_Slave_ADDR>
 800285c:	e05a      	b.n	8002914 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0x206>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f001 f806 	bl	8003884 <I2C_Slave_STOPF>
 8002878:	e04c      	b.n	8002914 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800287a:	7bbb      	ldrb	r3, [r7, #14]
 800287c:	2b21      	cmp	r3, #33	@ 0x21
 800287e:	d002      	beq.n	8002886 <HAL_I2C_EV_IRQHandler+0x212>
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	2b29      	cmp	r3, #41	@ 0x29
 8002884:	d120      	bne.n	80028c8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <HAL_I2C_EV_IRQHandler+0x238>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_I2C_EV_IRQHandler+0x238>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d103      	bne.n	80028ac <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fee7 	bl	8003678 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028aa:	e032      	b.n	8002912 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d02d      	beq.n	8002912 <HAL_I2C_EV_IRQHandler+0x29e>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d028      	beq.n	8002912 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 ff16 	bl	80036f2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028c6:	e024      	b.n	8002912 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00d      	beq.n	80028ee <HAL_I2C_EV_IRQHandler+0x27a>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_I2C_EV_IRQHandler+0x27a>
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 ff24 	bl	8003734 <I2C_SlaveReceive_RXNE>
 80028ec:	e012      	b.n	8002914 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0x2a0>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 ff54 	bl	80037b0 <I2C_SlaveReceive_BTF>
 8002908:	e004      	b.n	8002914 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800290a:	bf00      	nop
 800290c:	e002      	b.n	8002914 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002912:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b08a      	sub	sp, #40	@ 0x28
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800293c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <HAL_I2C_ER_IRQHandler+0x4a>
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002962:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <HAL_I2C_ER_IRQHandler+0x70>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002988:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d03e      	beq.n	8002a12 <HAL_I2C_ER_IRQHandler+0xf8>
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d039      	beq.n	8002a12 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800299e:	7efb      	ldrb	r3, [r7, #27]
 80029a0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80029b8:	7ebb      	ldrb	r3, [r7, #26]
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d112      	bne.n	80029e4 <HAL_I2C_ER_IRQHandler+0xca>
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10f      	bne.n	80029e4 <HAL_I2C_ER_IRQHandler+0xca>
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b21      	cmp	r3, #33	@ 0x21
 80029c8:	d008      	beq.n	80029dc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b29      	cmp	r3, #41	@ 0x29
 80029ce:	d005      	beq.n	80029dc <HAL_I2C_ER_IRQHandler+0xc2>
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	2b28      	cmp	r3, #40	@ 0x28
 80029d4:	d106      	bne.n	80029e4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b21      	cmp	r3, #33	@ 0x21
 80029da:	d103      	bne.n	80029e4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f001 f881 	bl	8003ae4 <I2C_Slave_AF>
 80029e2:	e016      	b.n	8002a12 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029ec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029f6:	7efb      	ldrb	r3, [r7, #27]
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d002      	beq.n	8002a02 <HAL_I2C_ER_IRQHandler+0xe8>
 80029fc:	7efb      	ldrb	r3, [r7, #27]
 80029fe:	2b40      	cmp	r3, #64	@ 0x40
 8002a00:	d107      	bne.n	8002a12 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a10:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <HAL_I2C_ER_IRQHandler+0x11e>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002a36:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f001 f8be 	bl	8003bcc <I2C_ITError>
  }
}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	@ 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d150      	bne.n	8002bf0 <I2C_MasterTransmit_TXE+0xc8>
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b21      	cmp	r3, #33	@ 0x21
 8002b52:	d14d      	bne.n	8002bf0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d01d      	beq.n	8002b96 <I2C_MasterTransmit_TXE+0x6e>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d01a      	beq.n	8002b96 <I2C_MasterTransmit_TXE+0x6e>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b66:	d016      	beq.n	8002b96 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b76:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2211      	movs	r2, #17
 8002b7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff62 	bl	8002a58 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b94:	e060      	b.n	8002c58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ba4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b40      	cmp	r3, #64	@ 0x40
 8002bce:	d107      	bne.n	8002be0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff7d 	bl	8002ad8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bde:	e03b      	b.n	8002c58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff35 	bl	8002a58 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bee:	e033      	b.n	8002c58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b21      	cmp	r3, #33	@ 0x21
 8002bf4:	d005      	beq.n	8002c02 <I2C_MasterTransmit_TXE+0xda>
 8002bf6:	7bbb      	ldrb	r3, [r7, #14]
 8002bf8:	2b40      	cmp	r3, #64	@ 0x40
 8002bfa:	d12d      	bne.n	8002c58 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b22      	cmp	r3, #34	@ 0x22
 8002c00:	d12a      	bne.n	8002c58 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d108      	bne.n	8002c1e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002c1c:	e01c      	b.n	8002c58 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b40      	cmp	r3, #64	@ 0x40
 8002c28:	d103      	bne.n	8002c32 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f88e 	bl	8002d4c <I2C_MemoryTransmit_TXE_BTF>
}
 8002c30:	e012      	b.n	8002c58 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	781a      	ldrb	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c56:	e7ff      	b.n	8002c58 <I2C_MasterTransmit_TXE+0x130>
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b21      	cmp	r3, #33	@ 0x21
 8002c78:	d164      	bne.n	8002d44 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d012      	beq.n	8002caa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ca8:	e04c      	b.n	8002d44 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d01d      	beq.n	8002cec <I2C_MasterTransmit_BTF+0x8c>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d01a      	beq.n	8002cec <I2C_MasterTransmit_BTF+0x8c>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cbc:	d016      	beq.n	8002cec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ccc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2211      	movs	r2, #17
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff feb7 	bl	8002a58 <HAL_I2C_MasterTxCpltCallback>
}
 8002cea:	e02b      	b.n	8002d44 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cfa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b40      	cmp	r3, #64	@ 0x40
 8002d24:	d107      	bne.n	8002d36 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fed2 	bl	8002ad8 <HAL_I2C_MemTxCpltCallback>
}
 8002d34:	e006      	b.n	8002d44 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fe8a 	bl	8002a58 <HAL_I2C_MasterTxCpltCallback>
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d11d      	bne.n	8002da0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10b      	bne.n	8002d84 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7c:	1c9a      	adds	r2, r3, #2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002d82:	e077      	b.n	8002e74 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	121b      	asrs	r3, r3, #8
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d9e:	e069      	b.n	8002e74 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d10b      	bne.n	8002dc0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002dbe:	e059      	b.n	8002e74 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d152      	bne.n	8002e6e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b22      	cmp	r3, #34	@ 0x22
 8002dcc:	d10d      	bne.n	8002dea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ddc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002de8:	e044      	b.n	8002e74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b21      	cmp	r3, #33	@ 0x21
 8002df8:	d112      	bne.n	8002e20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002e1e:	e029      	b.n	8002e74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d124      	bne.n	8002e74 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b21      	cmp	r3, #33	@ 0x21
 8002e2e:	d121      	bne.n	8002e74 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e3e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fe36 	bl	8002ad8 <HAL_I2C_MemTxCpltCallback>
}
 8002e6c:	e002      	b.n	8002e74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff f8ba 	bl	8001fe8 <I2C_Flush_DR>
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b22      	cmp	r3, #34	@ 0x22
 8002e8e:	f040 80b9 	bne.w	8003004 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d921      	bls.n	8002eea <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	f040 8096 	bne.w	8003004 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002ee8:	e08c      	b.n	8003004 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d07f      	beq.n	8002ff2 <I2C_MasterReceive_RXNE+0x176>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d002      	beq.n	8002efe <I2C_MasterReceive_RXNE+0x82>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d179      	bne.n	8002ff2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f001 fb38 	bl	8004574 <I2C_WaitOnSTOPRequestThroughIT>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d14c      	bne.n	8002fa4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f18:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b40      	cmp	r3, #64	@ 0x40
 8002f62:	d10a      	bne.n	8002f7a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fdba 	bl	8002aec <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f78:	e044      	b.n	8003004 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d002      	beq.n	8002f8e <I2C_MasterReceive_RXNE+0x112>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d103      	bne.n	8002f96 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f94:	e002      	b.n	8002f9c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2212      	movs	r2, #18
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fd65 	bl	8002a6c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002fa2:	e02f      	b.n	8003004 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fb2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fd88 	bl	8002b00 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ff0:	e008      	b.n	8003004 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003000:	605a      	str	r2, [r3, #4]
}
 8003002:	e7ff      	b.n	8003004 <I2C_MasterReceive_RXNE+0x188>
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b04      	cmp	r3, #4
 8003022:	d11b      	bne.n	800305c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003032:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800305a:	e0c8      	b.n	80031ee <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b03      	cmp	r3, #3
 8003064:	d129      	bne.n	80030ba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003074:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d00a      	beq.n	8003092 <I2C_MasterReceive_BTF+0x86>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d007      	beq.n	8003092 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003090:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80030b8:	e099      	b.n	80031ee <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	f040 8081 	bne.w	80031c8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d002      	beq.n	80030d2 <I2C_MasterReceive_BTF+0xc6>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d108      	bne.n	80030e4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e019      	b.n	8003118 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d002      	beq.n	80030f0 <I2C_MasterReceive_BTF+0xe4>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d108      	bne.n	8003102 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e00a      	b.n	8003118 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b10      	cmp	r3, #16
 8003106:	d007      	beq.n	8003118 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003116:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003172:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b40      	cmp	r3, #64	@ 0x40
 8003186:	d10a      	bne.n	800319e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fca8 	bl	8002aec <HAL_I2C_MemRxCpltCallback>
}
 800319c:	e027      	b.n	80031ee <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d002      	beq.n	80031b2 <I2C_MasterReceive_BTF+0x1a6>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d103      	bne.n	80031ba <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80031b8:	e002      	b.n	80031c0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2212      	movs	r2, #18
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fc53 	bl	8002a6c <HAL_I2C_MasterRxCpltCallback>
}
 80031c6:	e012      	b.n	80031ee <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b40      	cmp	r3, #64	@ 0x40
 8003208:	d117      	bne.n	800323a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003222:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003224:	e067      	b.n	80032f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]
}
 8003238:	e05d      	b.n	80032f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003242:	d133      	bne.n	80032ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b21      	cmp	r3, #33	@ 0x21
 800324e:	d109      	bne.n	8003264 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003260:	611a      	str	r2, [r3, #16]
 8003262:	e008      	b.n	8003276 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	b2da      	uxtb	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <I2C_Master_SB+0x92>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	2b00      	cmp	r3, #0
 800328e:	d032      	beq.n	80032f6 <I2C_Master_SB+0x100>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d02d      	beq.n	80032f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032a8:	605a      	str	r2, [r3, #4]
}
 80032aa:	e024      	b.n	80032f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10e      	bne.n	80032d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	11db      	asrs	r3, r3, #7
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f003 0306 	and.w	r3, r3, #6
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f063 030f 	orn	r3, r3, #15
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	611a      	str	r2, [r3, #16]
}
 80032d0:	e011      	b.n	80032f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d10d      	bne.n	80032f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	b29b      	uxth	r3, r3
 80032e0:	11db      	asrs	r3, r3, #7
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 0306 	and.w	r3, r3, #6
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f063 030e 	orn	r3, r3, #14
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	611a      	str	r2, [r3, #16]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	b2da      	uxtb	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <I2C_Master_ADD10+0x26>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d108      	bne.n	800333a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00c      	beq.n	800334a <I2C_Master_ADD10+0x48>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003348:	605a      	str	r2, [r3, #4]
  }
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003356:	b480      	push	{r7}
 8003358:	b091      	sub	sp, #68	@ 0x44
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003364:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b22      	cmp	r3, #34	@ 0x22
 800337e:	f040 8169 	bne.w	8003654 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <I2C_Master_ADDR+0x54>
 800338a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800338e:	2b40      	cmp	r3, #64	@ 0x40
 8003390:	d10b      	bne.n	80033aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003392:	2300      	movs	r3, #0
 8003394:	633b      	str	r3, [r7, #48]	@ 0x30
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	633b      	str	r3, [r7, #48]	@ 0x30
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a8:	e160      	b.n	800366c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11d      	bne.n	80033ee <I2C_Master_ADDR+0x98>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80033ba:	d118      	bne.n	80033ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80033ec:	e13e      	b.n	800366c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d113      	bne.n	8003420 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f8:	2300      	movs	r3, #0
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800340c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e115      	b.n	800364c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	f040 808a 	bne.w	8003540 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800342c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003432:	d137      	bne.n	80034a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003442:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800344e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003452:	d113      	bne.n	800347c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003462:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003464:	2300      	movs	r3, #0
 8003466:	627b      	str	r3, [r7, #36]	@ 0x24
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	e0e7      	b.n	800364c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347c:	2300      	movs	r3, #0
 800347e:	623b      	str	r3, [r7, #32]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e0d3      	b.n	800364c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80034a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d02e      	beq.n	8003508 <I2C_Master_ADDR+0x1b2>
 80034aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d02b      	beq.n	8003508 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80034b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b2:	2b12      	cmp	r3, #18
 80034b4:	d102      	bne.n	80034bc <I2C_Master_ADDR+0x166>
 80034b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d125      	bne.n	8003508 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d00e      	beq.n	80034e0 <I2C_Master_ADDR+0x18a>
 80034c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d00b      	beq.n	80034e0 <I2C_Master_ADDR+0x18a>
 80034c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d008      	beq.n	80034e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e007      	b.n	80034f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	e0a1      	b.n	800364c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003516:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e085      	b.n	800364c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d14d      	bne.n	80035e6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800354a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800354c:	2b04      	cmp	r3, #4
 800354e:	d016      	beq.n	800357e <I2C_Master_ADDR+0x228>
 8003550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003552:	2b02      	cmp	r3, #2
 8003554:	d013      	beq.n	800357e <I2C_Master_ADDR+0x228>
 8003556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003558:	2b10      	cmp	r3, #16
 800355a:	d010      	beq.n	800357e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e007      	b.n	800358e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800358c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800359c:	d117      	bne.n	80035ce <I2C_Master_ADDR+0x278>
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035a4:	d00b      	beq.n	80035be <I2C_Master_ADDR+0x268>
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d008      	beq.n	80035be <I2C_Master_ADDR+0x268>
 80035ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d005      	beq.n	80035be <I2C_Master_ADDR+0x268>
 80035b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d002      	beq.n	80035be <I2C_Master_ADDR+0x268>
 80035b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d107      	bne.n	80035ce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	e032      	b.n	800364c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003604:	d117      	bne.n	8003636 <I2C_Master_ADDR+0x2e0>
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800360c:	d00b      	beq.n	8003626 <I2C_Master_ADDR+0x2d0>
 800360e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003610:	2b01      	cmp	r3, #1
 8003612:	d008      	beq.n	8003626 <I2C_Master_ADDR+0x2d0>
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	2b08      	cmp	r3, #8
 8003618:	d005      	beq.n	8003626 <I2C_Master_ADDR+0x2d0>
 800361a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361c:	2b10      	cmp	r3, #16
 800361e:	d002      	beq.n	8003626 <I2C_Master_ADDR+0x2d0>
 8003620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003622:	2b20      	cmp	r3, #32
 8003624:	d107      	bne.n	8003636 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003634:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003652:	e00b      	b.n	800366c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
}
 800366a:	e7ff      	b.n	800366c <I2C_Master_ADDR+0x316>
 800366c:	bf00      	nop
 800366e:	3744      	adds	r7, #68	@ 0x44
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003686:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d02b      	beq.n	80036ea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d114      	bne.n	80036ea <I2C_SlaveTransmit_TXE+0x72>
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b29      	cmp	r3, #41	@ 0x29
 80036c4:	d111      	bne.n	80036ea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2221      	movs	r2, #33	@ 0x21
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2228      	movs	r2, #40	@ 0x28
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff f9cb 	bl	8002a80 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d011      	beq.n	8003728 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003742:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02c      	beq.n	80037a8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d114      	bne.n	80037a8 <I2C_SlaveReceive_RXNE+0x74>
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b2a      	cmp	r3, #42	@ 0x2a
 8003782:	d111      	bne.n	80037a8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003792:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2222      	movs	r2, #34	@ 0x22
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2228      	movs	r2, #40	@ 0x28
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff f976 	bl	8002a94 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d012      	beq.n	80037e8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800380e:	2b28      	cmp	r3, #40	@ 0x28
 8003810:	d125      	bne.n	800385e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003820:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	81bb      	strh	r3, [r7, #12]
 8003840:	e002      	b.n	8003848 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003850:	89ba      	ldrh	r2, [r7, #12]
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff f926 	bl	8002aa8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800385c:	e00e      	b.n	800387c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003892:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e0:	d172      	bne.n	80039c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b22      	cmp	r3, #34	@ 0x22
 80038e6:	d002      	beq.n	80038ee <I2C_Slave_STOPF+0x6a>
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80038ec:	d135      	bne.n	800395a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f043 0204 	orr.w	r2, r3, #4
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003920:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe f86f 	bl	8001a0a <HAL_DMA_GetState>
 800392c:	4603      	mov	r3, r0
 800392e:	2b01      	cmp	r3, #1
 8003930:	d049      	beq.n	80039c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	4a69      	ldr	r2, [pc, #420]	@ (8003adc <I2C_Slave_STOPF+0x258>)
 8003938:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe f841 	bl	80019c6 <HAL_DMA_Abort_IT>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d03d      	beq.n	80039c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003954:	4610      	mov	r0, r2
 8003956:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003958:	e035      	b.n	80039c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800398c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe f839 	bl	8001a0a <HAL_DMA_GetState>
 8003998:	4603      	mov	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d014      	beq.n	80039c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a2:	4a4e      	ldr	r2, [pc, #312]	@ (8003adc <I2C_Slave_STOPF+0x258>)
 80039a4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe f80b 	bl	80019c6 <HAL_DMA_Abort_IT>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039c0:	4610      	mov	r0, r2
 80039c2:	4798      	blx	r3
 80039c4:	e000      	b.n	80039c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d03e      	beq.n	8003a50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d112      	bne.n	8003a06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a10:	2b40      	cmp	r3, #64	@ 0x40
 8003a12:	d112      	bne.n	8003a3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	f043 0204 	orr.w	r2, r3, #4
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f8b7 	bl	8003bcc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003a5e:	e039      	b.n	8003ad4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a64:	d109      	bne.n	8003a7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2228      	movs	r2, #40	@ 0x28
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff f80d 	bl	8002a94 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b28      	cmp	r3, #40	@ 0x28
 8003a84:	d111      	bne.n	8003aaa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a15      	ldr	r2, [pc, #84]	@ (8003ae0 <I2C_Slave_STOPF+0x25c>)
 8003a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff f80e 	bl	8002ac4 <HAL_I2C_ListenCpltCallback>
}
 8003aa8:	e014      	b.n	8003ad4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	2b22      	cmp	r3, #34	@ 0x22
 8003ab0:	d002      	beq.n	8003ab8 <I2C_Slave_STOPF+0x234>
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b22      	cmp	r3, #34	@ 0x22
 8003ab6:	d10d      	bne.n	8003ad4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fe ffe0 	bl	8002a94 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	080040d1 	.word	0x080040d1
 8003ae0:	ffff0000 	.word	0xffff0000

08003ae4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d002      	beq.n	8003b06 <I2C_Slave_AF+0x22>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d129      	bne.n	8003b5a <I2C_Slave_AF+0x76>
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b28      	cmp	r3, #40	@ 0x28
 8003b0a:	d126      	bne.n	8003b5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc8 <I2C_Slave_AF+0xe4>)
 8003b10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fe ffb6 	bl	8002ac4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003b58:	e031      	b.n	8003bbe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b21      	cmp	r3, #33	@ 0x21
 8003b5e:	d129      	bne.n	8003bb4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a19      	ldr	r2, [pc, #100]	@ (8003bc8 <I2C_Slave_AF+0xe4>)
 8003b64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2221      	movs	r2, #33	@ 0x21
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe fa1e 	bl	8001fe8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fe ff67 	bl	8002a80 <HAL_I2C_SlaveTxCpltCallback>
}
 8003bb2:	e004      	b.n	8003bbe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bbc:	615a      	str	r2, [r3, #20]
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	ffff0000 	.word	0xffff0000

08003bcc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003be4:	7bbb      	ldrb	r3, [r7, #14]
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d002      	beq.n	8003bf0 <I2C_ITError+0x24>
 8003bea:	7bbb      	ldrb	r3, [r7, #14]
 8003bec:	2b40      	cmp	r3, #64	@ 0x40
 8003bee:	d10a      	bne.n	8003c06 <I2C_ITError+0x3a>
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b22      	cmp	r3, #34	@ 0x22
 8003bf4:	d107      	bne.n	8003c06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c0c:	2b28      	cmp	r3, #40	@ 0x28
 8003c0e:	d107      	bne.n	8003c20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2228      	movs	r2, #40	@ 0x28
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003c1e:	e015      	b.n	8003c4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c2e:	d00a      	beq.n	8003c46 <I2C_ITError+0x7a>
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b60      	cmp	r3, #96	@ 0x60
 8003c34:	d007      	beq.n	8003c46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c5a:	d162      	bne.n	8003d22 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d020      	beq.n	8003cbc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7e:	4a6a      	ldr	r2, [pc, #424]	@ (8003e28 <I2C_ITError+0x25c>)
 8003c80:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd fe9d 	bl	80019c6 <HAL_DMA_Abort_IT>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8089 	beq.w	8003da6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4798      	blx	r3
 8003cba:	e074      	b.n	8003da6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	4a59      	ldr	r2, [pc, #356]	@ (8003e28 <I2C_ITError+0x25c>)
 8003cc2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd fe7c 	bl	80019c6 <HAL_DMA_Abort_IT>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d068      	beq.n	8003da6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cde:	2b40      	cmp	r3, #64	@ 0x40
 8003ce0:	d10b      	bne.n	8003cfa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4798      	blx	r3
 8003d20:	e041      	b.n	8003da6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b60      	cmp	r3, #96	@ 0x60
 8003d2c:	d125      	bne.n	8003d7a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d46:	2b40      	cmp	r3, #64	@ 0x40
 8003d48:	d10b      	bne.n	8003d62 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fe fece 	bl	8002b14 <HAL_I2C_AbortCpltCallback>
 8003d78:	e015      	b.n	8003da6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d84:	2b40      	cmp	r3, #64	@ 0x40
 8003d86:	d10b      	bne.n	8003da0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fe fead 	bl	8002b00 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10e      	bne.n	8003dd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003de2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d113      	bne.n	8003e20 <I2C_ITError+0x254>
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b28      	cmp	r3, #40	@ 0x28
 8003dfc:	d110      	bne.n	8003e20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a0a      	ldr	r2, [pc, #40]	@ (8003e2c <I2C_ITError+0x260>)
 8003e02:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe fe52 	bl	8002ac4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	080040d1 	.word	0x080040d1
 8003e2c:	ffff0000 	.word	0xffff0000

08003e30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d006      	beq.n	8003e5a <I2C_MasterRequestWrite+0x2a>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d003      	beq.n	8003e5a <I2C_MasterRequestWrite+0x2a>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e58:	d108      	bne.n	8003e6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e00b      	b.n	8003e84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	2b12      	cmp	r3, #18
 8003e72:	d107      	bne.n	8003e84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f9c5 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eaa:	d103      	bne.n	8003eb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e035      	b.n	8003f24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec0:	d108      	bne.n	8003ed4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec2:	897b      	ldrh	r3, [r7, #10]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	e01b      	b.n	8003f0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ed4:	897b      	ldrh	r3, [r7, #10]
 8003ed6:	11db      	asrs	r3, r3, #7
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0306 	and.w	r3, r3, #6
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f063 030f 	orn	r3, r3, #15
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	490e      	ldr	r1, [pc, #56]	@ (8003f2c <I2C_MasterRequestWrite+0xfc>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fa0e 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e010      	b.n	8003f24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f02:	897b      	ldrh	r3, [r7, #10]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4907      	ldr	r1, [pc, #28]	@ (8003f30 <I2C_MasterRequestWrite+0x100>)
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f9fe 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	00010008 	.word	0x00010008
 8003f30:	00010002 	.word	0x00010002

08003f34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	460b      	mov	r3, r1
 8003f42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d006      	beq.n	8003f6e <I2C_MasterRequestRead+0x3a>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d003      	beq.n	8003f6e <I2C_MasterRequestRead+0x3a>
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f6c:	d108      	bne.n	8003f80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e00b      	b.n	8003f98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f84:	2b11      	cmp	r3, #17
 8003f86:	d107      	bne.n	8003f98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f93b 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fbe:	d103      	bne.n	8003fc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e079      	b.n	80040c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fd4:	d108      	bne.n	8003fe8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fd6:	897b      	ldrh	r3, [r7, #10]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	611a      	str	r2, [r3, #16]
 8003fe6:	e05f      	b.n	80040a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fe8:	897b      	ldrh	r3, [r7, #10]
 8003fea:	11db      	asrs	r3, r3, #7
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f003 0306 	and.w	r3, r3, #6
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f063 030f 	orn	r3, r3, #15
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4930      	ldr	r1, [pc, #192]	@ (80040c8 <I2C_MasterRequestRead+0x194>)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f984 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e054      	b.n	80040c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004016:	897b      	ldrh	r3, [r7, #10]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4929      	ldr	r1, [pc, #164]	@ (80040cc <I2C_MasterRequestRead+0x198>)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f974 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e044      	b.n	80040c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800405a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f8d9 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00d      	beq.n	8004090 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004082:	d103      	bne.n	800408c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e017      	b.n	80040c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004090:	897b      	ldrh	r3, [r7, #10]
 8004092:	11db      	asrs	r3, r3, #7
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0306 	and.w	r3, r3, #6
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f063 030e 	orn	r3, r3, #14
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4907      	ldr	r1, [pc, #28]	@ (80040cc <I2C_MasterRequestRead+0x198>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f930 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	00010008 	.word	0x00010008
 80040cc:	00010002 	.word	0x00010002

080040d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004218 <I2C_DMAAbort+0x148>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	4a4a      	ldr	r2, [pc, #296]	@ (800421c <I2C_DMAAbort+0x14c>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0a1a      	lsrs	r2, r3, #8
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	00da      	lsls	r2, r3, #3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f043 0220 	orr.w	r2, r3, #32
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004116:	e00a      	b.n	800412e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3b01      	subs	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412c:	d0ea      	beq.n	8004104 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413a:	2200      	movs	r2, #0
 800413c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414a:	2200      	movs	r2, #0
 800414c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2200      	movs	r2, #0
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004170:	2200      	movs	r2, #0
 8004172:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	2200      	movs	r2, #0
 8004182:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b60      	cmp	r3, #96	@ 0x60
 800419e:	d10e      	bne.n	80041be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7fe fcac 	bl	8002b14 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041bc:	e027      	b.n	800420e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041c4:	2b28      	cmp	r3, #40	@ 0x28
 80041c6:	d117      	bne.n	80041f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2228      	movs	r2, #40	@ 0x28
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041f6:	e007      	b.n	8004208 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004208:	6978      	ldr	r0, [r7, #20]
 800420a:	f7fe fc79 	bl	8002b00 <HAL_I2C_ErrorCallback>
}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000000 	.word	0x20000000
 800421c:	14f8b589 	.word	0x14f8b589

08004220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004230:	e048      	b.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d044      	beq.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fd fa13 	bl	8001664 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d139      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10d      	bne.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x56>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	43da      	mvns	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	e00c      	b.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	43da      	mvns	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4013      	ands	r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	429a      	cmp	r2, r3
 8004294:	d116      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e023      	b.n	800430c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10d      	bne.n	80042ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	e00c      	b.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	43da      	mvns	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	429a      	cmp	r2, r3
 8004308:	d093      	beq.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004322:	e071      	b.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004332:	d123      	bne.n	800437c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004342:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800434c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	f043 0204 	orr.w	r2, r3, #4
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e067      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d041      	beq.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004384:	f7fd f96e 	bl	8001664 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d136      	bne.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10c      	bne.n	80043be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e00b      	b.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	43da      	mvns	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e021      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10c      	bne.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e00b      	b.n	8004444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f af6d 	bne.w	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004460:	e034      	b.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f915 	bl	8004692 <I2C_IsAcknowledgeFailed>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e034      	b.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d028      	beq.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fd f8f3 	bl	8001664 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11d      	bne.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449a:	2b80      	cmp	r3, #128	@ 0x80
 800449c:	d016      	beq.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e007      	b.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d1c3      	bne.n	8004462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f0:	e034      	b.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f8cd 	bl	8004692 <I2C_IsAcknowledgeFailed>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e034      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d028      	beq.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fd f8ab 	bl	8001664 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11d      	bne.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d016      	beq.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e007      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b04      	cmp	r3, #4
 8004568:	d1c3      	bne.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004580:	4b13      	ldr	r3, [pc, #76]	@ (80045d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	4a13      	ldr	r2, [pc, #76]	@ (80045d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	0a1a      	lsrs	r2, r3, #8
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3b01      	subs	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d107      	bne.n	80045b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e008      	b.n	80045c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c0:	d0e9      	beq.n	8004596 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	20000000 	.word	0x20000000
 80045d4:	14f8b589 	.word	0x14f8b589

080045d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045e4:	e049      	b.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d119      	bne.n	8004628 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0210 	mvn.w	r2, #16
 80045fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e030      	b.n	800468a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004628:	f7fd f81c 	bl	8001664 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d302      	bcc.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11d      	bne.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004648:	2b40      	cmp	r3, #64	@ 0x40
 800464a:	d016      	beq.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e007      	b.n	800468a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d1ae      	bne.n	80045e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a8:	d11b      	bne.n	80046e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f043 0204 	orr.w	r2, r3, #4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004700:	d103      	bne.n	800470a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004708:	e007      	b.n	800471a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004712:	d102      	bne.n	800471a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2208      	movs	r2, #8
 8004718:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e267      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d075      	beq.n	8004832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004746:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d00c      	beq.n	800476c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4b85      	ldr	r3, [pc, #532]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800475a:	2b08      	cmp	r3, #8
 800475c:	d112      	bne.n	8004784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800475e:	4b82      	ldr	r3, [pc, #520]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800476a:	d10b      	bne.n	8004784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	4b7e      	ldr	r3, [pc, #504]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d05b      	beq.n	8004830 <HAL_RCC_OscConfig+0x108>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d157      	bne.n	8004830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e242      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800478c:	d106      	bne.n	800479c <HAL_RCC_OscConfig+0x74>
 800478e:	4b76      	ldr	r3, [pc, #472]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a75      	ldr	r2, [pc, #468]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e01d      	b.n	80047d8 <HAL_RCC_OscConfig+0xb0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x98>
 80047a6:	4b70      	ldr	r3, [pc, #448]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6f      	ldr	r2, [pc, #444]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a6c      	ldr	r2, [pc, #432]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0xb0>
 80047c0:	4b69      	ldr	r3, [pc, #420]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a68      	ldr	r2, [pc, #416]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b66      	ldr	r3, [pc, #408]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a65      	ldr	r2, [pc, #404]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fc ff40 	bl	8001664 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fc ff3c 	bl	8001664 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	@ 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e207      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0xc0>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fc ff2c 	bl	8001664 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004810:	f7fc ff28 	bl	8001664 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	@ 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1f3      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004822:	4b51      	ldr	r3, [pc, #324]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0xe8>
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d063      	beq.n	8004906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800483e:	4b4a      	ldr	r3, [pc, #296]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b47      	ldr	r3, [pc, #284]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004852:	2b08      	cmp	r3, #8
 8004854:	d11c      	bne.n	8004890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004856:	4b44      	ldr	r3, [pc, #272]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004862:	4b41      	ldr	r3, [pc, #260]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x152>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1c7      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	4b3b      	ldr	r3, [pc, #236]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4937      	ldr	r1, [pc, #220]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	e03a      	b.n	8004906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004898:	4b34      	ldr	r3, [pc, #208]	@ (800496c <HAL_RCC_OscConfig+0x244>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fc fee1 	bl	8001664 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a6:	f7fc fedd 	bl	8001664 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e1a8      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c4:	4b28      	ldr	r3, [pc, #160]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4925      	ldr	r1, [pc, #148]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]
 80048d8:	e015      	b.n	8004906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048da:	4b24      	ldr	r3, [pc, #144]	@ (800496c <HAL_RCC_OscConfig+0x244>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fc fec0 	bl	8001664 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048e8:	f7fc febc 	bl	8001664 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e187      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d036      	beq.n	8004980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d016      	beq.n	8004948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491a:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <HAL_RCC_OscConfig+0x248>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fc fea0 	bl	8001664 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004928:	f7fc fe9c 	bl	8001664 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e167      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800493c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x200>
 8004946:	e01b      	b.n	8004980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004948:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <HAL_RCC_OscConfig+0x248>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fc fe89 	bl	8001664 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004954:	e00e      	b.n	8004974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004956:	f7fc fe85 	bl	8001664 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d907      	bls.n	8004974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e150      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
 8004968:	40023800 	.word	0x40023800
 800496c:	42470000 	.word	0x42470000
 8004970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004974:	4b88      	ldr	r3, [pc, #544]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ea      	bne.n	8004956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8097 	beq.w	8004abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498e:	2300      	movs	r3, #0
 8004990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004992:	4b81      	ldr	r3, [pc, #516]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 80049a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049be:	4b77      	ldr	r3, [pc, #476]	@ (8004b9c <HAL_RCC_OscConfig+0x474>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d118      	bne.n	80049fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ca:	4b74      	ldr	r3, [pc, #464]	@ (8004b9c <HAL_RCC_OscConfig+0x474>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a73      	ldr	r2, [pc, #460]	@ (8004b9c <HAL_RCC_OscConfig+0x474>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d6:	f7fc fe45 	bl	8001664 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049de:	f7fc fe41 	bl	8001664 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e10c      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b9c <HAL_RCC_OscConfig+0x474>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_OscConfig+0x2ea>
 8004a04:	4b64      	ldr	r3, [pc, #400]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a08:	4a63      	ldr	r2, [pc, #396]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a10:	e01c      	b.n	8004a4c <HAL_RCC_OscConfig+0x324>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x30c>
 8004a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a20:	f043 0304 	orr.w	r3, r3, #4
 8004a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a26:	4b5c      	ldr	r3, [pc, #368]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0x324>
 8004a34:	4b58      	ldr	r3, [pc, #352]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	4a57      	ldr	r2, [pc, #348]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a40:	4b55      	ldr	r3, [pc, #340]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a44:	4a54      	ldr	r2, [pc, #336]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a46:	f023 0304 	bic.w	r3, r3, #4
 8004a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d015      	beq.n	8004a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fc fe06 	bl	8001664 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fc fe02 	bl	8001664 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e0cb      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a72:	4b49      	ldr	r3, [pc, #292]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0ee      	beq.n	8004a5c <HAL_RCC_OscConfig+0x334>
 8004a7e:	e014      	b.n	8004aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a80:	f7fc fdf0 	bl	8001664 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a88:	f7fc fdec 	bl	8001664 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0b5      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ee      	bne.n	8004a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab0:	4b39      	ldr	r3, [pc, #228]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	4a38      	ldr	r2, [pc, #224]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80a1 	beq.w	8004c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ac6:	4b34      	ldr	r3, [pc, #208]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d05c      	beq.n	8004b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d141      	bne.n	8004b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	4b31      	ldr	r3, [pc, #196]	@ (8004ba0 <HAL_RCC_OscConfig+0x478>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fc fdc0 	bl	8001664 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fc fdbc 	bl	8001664 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e087      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	019b      	lsls	r3, r3, #6
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	491b      	ldr	r1, [pc, #108]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba0 <HAL_RCC_OscConfig+0x478>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b36:	f7fc fd95 	bl	8001664 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fc fd91 	bl	8001664 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e05c      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b50:	4b11      	ldr	r3, [pc, #68]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x416>
 8004b5c:	e054      	b.n	8004c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <HAL_RCC_OscConfig+0x478>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fc fd7e 	bl	8001664 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fc fd7a 	bl	8001664 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e045      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7e:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x444>
 8004b8a:	e03d      	b.n	8004c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e038      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40007000 	.word	0x40007000
 8004ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c14 <HAL_RCC_OscConfig+0x4ec>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d028      	beq.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d121      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d11a      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d111      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	3b01      	subs	r3, #1
 8004bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800

08004c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0cc      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b68      	ldr	r3, [pc, #416]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d90c      	bls.n	8004c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b65      	ldr	r3, [pc, #404]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b63      	ldr	r3, [pc, #396]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0b8      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c6c:	4b59      	ldr	r3, [pc, #356]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a58      	ldr	r2, [pc, #352]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c84:	4b53      	ldr	r3, [pc, #332]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4a52      	ldr	r2, [pc, #328]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c90:	4b50      	ldr	r3, [pc, #320]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	494d      	ldr	r1, [pc, #308]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d044      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	4b47      	ldr	r3, [pc, #284]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d119      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e07f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e06f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e067      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf6:	4b37      	ldr	r3, [pc, #220]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f023 0203 	bic.w	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4934      	ldr	r1, [pc, #208]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d08:	f7fc fcac 	bl	8001664 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d10:	f7fc fca8 	bl	8001664 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e04f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 020c 	and.w	r2, r3, #12
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d1eb      	bne.n	8004d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d38:	4b25      	ldr	r3, [pc, #148]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d20c      	bcs.n	8004d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4e:	4b20      	ldr	r3, [pc, #128]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e032      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d6c:	4b19      	ldr	r3, [pc, #100]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4916      	ldr	r1, [pc, #88]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d8a:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	490e      	ldr	r1, [pc, #56]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d9e:	f000 f821 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8004da2:	4602      	mov	r2, r0
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	490a      	ldr	r1, [pc, #40]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004db0:	5ccb      	ldrb	r3, [r1, r3]
 8004db2:	fa22 f303 	lsr.w	r3, r2, r3
 8004db6:	4a09      	ldr	r2, [pc, #36]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dba:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fc fc0c 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023c00 	.word	0x40023c00
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	08008ca4 	.word	0x08008ca4
 8004ddc:	20000000 	.word	0x20000000
 8004de0:	20000004 	.word	0x20000004

08004de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de8:	b090      	sub	sp, #64	@ 0x40
 8004dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df0:	2300      	movs	r3, #0
 8004df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004df4:	2300      	movs	r3, #0
 8004df6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dfc:	4b59      	ldr	r3, [pc, #356]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d00d      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x40>
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	f200 80a1 	bhi.w	8004f50 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x34>
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d003      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e16:	e09b      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b53      	ldr	r3, [pc, #332]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004e1c:	e09b      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e1e:	4b53      	ldr	r3, [pc, #332]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e22:	e098      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e24:	4b4f      	ldr	r3, [pc, #316]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d028      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	2200      	movs	r2, #0
 8004e42:	623b      	str	r3, [r7, #32]
 8004e44:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4b47      	ldr	r3, [pc, #284]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e50:	fb03 f201 	mul.w	r2, r3, r1
 8004e54:	2300      	movs	r3, #0
 8004e56:	fb00 f303 	mul.w	r3, r0, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	4a43      	ldr	r2, [pc, #268]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8004e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e64:	460a      	mov	r2, r1
 8004e66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6a:	4413      	add	r3, r2
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e70:	2200      	movs	r2, #0
 8004e72:	61bb      	str	r3, [r7, #24]
 8004e74:	61fa      	str	r2, [r7, #28]
 8004e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e7e:	f7fb fe93 	bl	8000ba8 <__aeabi_uldivmod>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4613      	mov	r3, r2
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e8a:	e053      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8c:	4b35      	ldr	r3, [pc, #212]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	099b      	lsrs	r3, r3, #6
 8004e92:	2200      	movs	r2, #0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	617a      	str	r2, [r7, #20]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e9e:	f04f 0b00 	mov.w	fp, #0
 8004ea2:	4652      	mov	r2, sl
 8004ea4:	465b      	mov	r3, fp
 8004ea6:	f04f 0000 	mov.w	r0, #0
 8004eaa:	f04f 0100 	mov.w	r1, #0
 8004eae:	0159      	lsls	r1, r3, #5
 8004eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb4:	0150      	lsls	r0, r2, #5
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	ebb2 080a 	subs.w	r8, r2, sl
 8004ebe:	eb63 090b 	sbc.w	r9, r3, fp
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ece:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ed2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ed6:	ebb2 0408 	subs.w	r4, r2, r8
 8004eda:	eb63 0509 	sbc.w	r5, r3, r9
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	00eb      	lsls	r3, r5, #3
 8004ee8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eec:	00e2      	lsls	r2, r4, #3
 8004eee:	4614      	mov	r4, r2
 8004ef0:	461d      	mov	r5, r3
 8004ef2:	eb14 030a 	adds.w	r3, r4, sl
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	eb45 030b 	adc.w	r3, r5, fp
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	028b      	lsls	r3, r1, #10
 8004f0e:	4621      	mov	r1, r4
 8004f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f14:	4621      	mov	r1, r4
 8004f16:	028a      	lsls	r2, r1, #10
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1e:	2200      	movs	r2, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	60fa      	str	r2, [r7, #12]
 8004f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f28:	f7fb fe3e 	bl	8000ba8 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4613      	mov	r3, r2
 8004f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f34:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004f44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f4e:	e002      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f50:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3740      	adds	r7, #64	@ 0x40
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	017d7840 	.word	0x017d7840

08004f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f74:	4b03      	ldr	r3, [pc, #12]	@ (8004f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f76:	681b      	ldr	r3, [r3, #0]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000000 	.word	0x20000000

08004f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f8c:	f7ff fff0 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4b05      	ldr	r3, [pc, #20]	@ (8004fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0a9b      	lsrs	r3, r3, #10
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4903      	ldr	r1, [pc, #12]	@ (8004fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f9e:	5ccb      	ldrb	r3, [r1, r3]
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	08008cb4 	.word	0x08008cb4

08004fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fb4:	f7ff ffdc 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	0b5b      	lsrs	r3, r3, #13
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	4903      	ldr	r1, [pc, #12]	@ (8004fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc6:	5ccb      	ldrb	r3, [r1, r3]
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	08008cb4 	.word	0x08008cb4

08004fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e042      	b.n	8005070 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc fa50 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	@ 0x24
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800501a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fd69 	bl	8005af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	@ 0x28
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b20      	cmp	r3, #32
 8005096:	d175      	bne.n	8005184 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_UART_Transmit+0x2c>
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e06e      	b.n	8005186 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2221      	movs	r2, #33	@ 0x21
 80050b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b6:	f7fc fad5 	bl	8001664 <HAL_GetTick>
 80050ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d0:	d108      	bne.n	80050e4 <HAL_UART_Transmit+0x6c>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d104      	bne.n	80050e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	e003      	b.n	80050ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050ec:	e02e      	b.n	800514c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	2180      	movs	r1, #128	@ 0x80
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fb05 	bl	8005708 <UART_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e03a      	b.n	8005186 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	3302      	adds	r3, #2
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e007      	b.n	800513e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	3301      	adds	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1cb      	bne.n	80050ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2200      	movs	r2, #0
 800515e:	2140      	movs	r1, #64	@ 0x40
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fad1 	bl	8005708 <UART_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e006      	b.n	8005186 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e000      	b.n	8005186 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005184:	2302      	movs	r3, #2
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b0ba      	sub	sp, #232	@ 0xe8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80051ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <HAL_UART_IRQHandler+0x66>
 80051e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fbc2 	bl	8005978 <UART_Receive_IT>
      return;
 80051f4:	e25b      	b.n	80056ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80de 	beq.w	80053bc <HAL_UART_IRQHandler+0x22c>
 8005200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800520c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005210:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80d1 	beq.w	80053bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800521a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <HAL_UART_IRQHandler+0xae>
 8005226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800522a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005236:	f043 0201 	orr.w	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800523e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00b      	beq.n	8005262 <HAL_UART_IRQHandler+0xd2>
 800524a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525a:	f043 0202 	orr.w	r2, r3, #2
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <HAL_UART_IRQHandler+0xf6>
 800526e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d011      	beq.n	80052b6 <HAL_UART_IRQHandler+0x126>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d105      	bne.n	80052aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800529e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	f043 0208 	orr.w	r2, r3, #8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 81f2 	beq.w	80056a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_UART_IRQHandler+0x14e>
 80052cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fb4d 	bl	8005978 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e8:	2b40      	cmp	r3, #64	@ 0x40
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d103      	bne.n	800530a <HAL_UART_IRQHandler+0x17a>
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d04f      	beq.n	80053aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa55 	bl	80057ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531a:	2b40      	cmp	r3, #64	@ 0x40
 800531c:	d141      	bne.n	80053a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800533c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800534a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800534e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1d9      	bne.n	800531e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d013      	beq.n	800539a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005376:	4a7e      	ldr	r2, [pc, #504]	@ (8005570 <HAL_UART_IRQHandler+0x3e0>)
 8005378:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537e:	4618      	mov	r0, r3
 8005380:	f7fc fb21 	bl	80019c6 <HAL_DMA_Abort_IT>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	e00e      	b.n	80053b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f99e 	bl	80056dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	e00a      	b.n	80053b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f99a 	bl	80056dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	e006      	b.n	80053b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f996 	bl	80056dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80053b6:	e175      	b.n	80056a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b8:	bf00      	nop
    return;
 80053ba:	e173      	b.n	80056a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	f040 814f 	bne.w	8005664 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8148 	beq.w	8005664 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8141 	beq.w	8005664 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005402:	2b40      	cmp	r3, #64	@ 0x40
 8005404:	f040 80b6 	bne.w	8005574 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005414:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8145 	beq.w	80056a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005426:	429a      	cmp	r2, r3
 8005428:	f080 813e 	bcs.w	80056a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005432:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800543e:	f000 8088 	beq.w	8005552 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005458:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800545c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800546e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005472:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800547a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1d9      	bne.n	8005442 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800549e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3314      	adds	r3, #20
 80054ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80054b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80054c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e1      	bne.n	800548e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3314      	adds	r3, #20
 80054d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80054da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3314      	adds	r3, #20
 80054ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e3      	bne.n	80054ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005522:	f023 0310 	bic.w	r3, r3, #16
 8005526:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005534:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005536:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800553a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e3      	bne.n	8005510 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554c:	4618      	mov	r0, r3
 800554e:	f7fc f9ca 	bl	80018e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005560:	b29b      	uxth	r3, r3
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f8c1 	bl	80056f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800556e:	e09b      	b.n	80056a8 <HAL_UART_IRQHandler+0x518>
 8005570:	08005881 	.word	0x08005881
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800557c:	b29b      	uxth	r3, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 808e 	beq.w	80056ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8089 	beq.w	80056ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055be:	647a      	str	r2, [r7, #68]	@ 0x44
 80055c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e3      	bne.n	800559a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	623b      	str	r3, [r7, #32]
   return(result);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80055f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e3      	bne.n	80055d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	60fb      	str	r3, [r7, #12]
   return(result);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0310 	bic.w	r3, r3, #16
 800562e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800563c:	61fa      	str	r2, [r7, #28]
 800563e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	69b9      	ldr	r1, [r7, #24]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	617b      	str	r3, [r7, #20]
   return(result);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e3      	bne.n	8005618 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f847 	bl	80056f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005662:	e023      	b.n	80056ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <HAL_UART_IRQHandler+0x4f4>
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f913 	bl	80058a8 <UART_Transmit_IT>
    return;
 8005682:	e014      	b.n	80056ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00e      	beq.n	80056ae <HAL_UART_IRQHandler+0x51e>
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f953 	bl	8005948 <UART_EndTransmit_IT>
    return;
 80056a2:	e004      	b.n	80056ae <HAL_UART_IRQHandler+0x51e>
    return;
 80056a4:	bf00      	nop
 80056a6:	e002      	b.n	80056ae <HAL_UART_IRQHandler+0x51e>
      return;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <HAL_UART_IRQHandler+0x51e>
      return;
 80056ac:	bf00      	nop
  }
}
 80056ae:	37e8      	adds	r7, #232	@ 0xe8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005718:	e03b      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d037      	beq.n	8005792 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fb ff9f 	bl	8001664 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	6a3a      	ldr	r2, [r7, #32]
 800572e:	429a      	cmp	r2, r3
 8005730:	d302      	bcc.n	8005738 <UART_WaitOnFlagUntilTimeout+0x30>
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e03a      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d023      	beq.n	8005792 <UART_WaitOnFlagUntilTimeout+0x8a>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b80      	cmp	r3, #128	@ 0x80
 800574e:	d020      	beq.n	8005792 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b40      	cmp	r3, #64	@ 0x40
 8005754:	d01d      	beq.n	8005792 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d116      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f81d 	bl	80057ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2208      	movs	r2, #8
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e00f      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4013      	ands	r3, r2
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	429a      	cmp	r2, r3
 80057a0:	bf0c      	ite	eq
 80057a2:	2301      	moveq	r3, #1
 80057a4:	2300      	movne	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d0b4      	beq.n	800571a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b095      	sub	sp, #84	@ 0x54
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80057e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3314      	adds	r3, #20
 80057fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	61fb      	str	r3, [r7, #28]
   return(result);
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800581c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	2b01      	cmp	r3, #1
 8005830:	d119      	bne.n	8005866 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	330c      	adds	r3, #12
 8005838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	60bb      	str	r3, [r7, #8]
   return(result);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f023 0310 	bic.w	r3, r3, #16
 8005848:	647b      	str	r3, [r7, #68]	@ 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	330c      	adds	r3, #12
 8005850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005852:	61ba      	str	r2, [r7, #24]
 8005854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6979      	ldr	r1, [r7, #20]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	613b      	str	r3, [r7, #16]
   return(result);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e5      	bne.n	8005832 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005874:	bf00      	nop
 8005876:	3754      	adds	r7, #84	@ 0x54
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff ff1e 	bl	80056dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b21      	cmp	r3, #33	@ 0x21
 80058ba:	d13e      	bne.n	800593a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c4:	d114      	bne.n	80058f0 <UART_Transmit_IT+0x48>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d110      	bne.n	80058f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]
 80058ee:	e008      	b.n	8005902 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6211      	str	r1, [r2, #32]
 80058fa:	781a      	ldrb	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4619      	mov	r1, r3
 8005910:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005924:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005934:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	e000      	b.n	800593c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800593a:	2302      	movs	r3, #2
  }
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800595e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff fea3 	bl	80056b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08c      	sub	sp, #48	@ 0x30
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b22      	cmp	r3, #34	@ 0x22
 800598a:	f040 80ae 	bne.w	8005aea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005996:	d117      	bne.n	80059c8 <UART_Receive_IT+0x50>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d113      	bne.n	80059c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	1c9a      	adds	r2, r3, #2
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80059c6:	e026      	b.n	8005a16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059da:	d007      	beq.n	80059ec <UART_Receive_IT+0x74>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <UART_Receive_IT+0x82>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	e008      	b.n	8005a0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	4619      	mov	r1, r3
 8005a24:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d15d      	bne.n	8005ae6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0220 	bic.w	r2, r2, #32
 8005a38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d135      	bne.n	8005adc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	613b      	str	r3, [r7, #16]
   return(result);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f023 0310 	bic.w	r3, r3, #16
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a96:	623a      	str	r2, [r7, #32]
 8005a98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	69f9      	ldr	r1, [r7, #28]
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e5      	bne.n	8005a76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d10a      	bne.n	8005ace <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fe0b 	bl	80056f0 <HAL_UARTEx_RxEventCallback>
 8005ada:	e002      	b.n	8005ae2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff fdf3 	bl	80056c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e002      	b.n	8005aec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e000      	b.n	8005aec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
  }
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3730      	adds	r7, #48	@ 0x30
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af8:	b0c0      	sub	sp, #256	@ 0x100
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	68d9      	ldr	r1, [r3, #12]
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	ea40 0301 	orr.w	r3, r0, r1
 8005b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b4c:	f021 010c 	bic.w	r1, r1, #12
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6e:	6999      	ldr	r1, [r3, #24]
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	ea40 0301 	orr.w	r3, r0, r1
 8005b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b8f      	ldr	r3, [pc, #572]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d005      	beq.n	8005b94 <UART_SetConfig+0xa0>
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8005dc4 <UART_SetConfig+0x2d0>)
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d104      	bne.n	8005b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b94:	f7ff fa0c 	bl	8004fb0 <HAL_RCC_GetPCLK2Freq>
 8005b98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b9c:	e003      	b.n	8005ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b9e:	f7ff f9f3 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8005ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb0:	f040 810c 	bne.w	8005dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	462b      	mov	r3, r5
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	eb12 0801 	adds.w	r8, r2, r1
 8005bdc:	4629      	mov	r1, r5
 8005bde:	eb43 0901 	adc.w	r9, r3, r1
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bf6:	4690      	mov	r8, r2
 8005bf8:	4699      	mov	r9, r3
 8005bfa:	4623      	mov	r3, r4
 8005bfc:	eb18 0303 	adds.w	r3, r8, r3
 8005c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c04:	462b      	mov	r3, r5
 8005c06:	eb49 0303 	adc.w	r3, r9, r3
 8005c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c22:	460b      	mov	r3, r1
 8005c24:	18db      	adds	r3, r3, r3
 8005c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c28:	4613      	mov	r3, r2
 8005c2a:	eb42 0303 	adc.w	r3, r2, r3
 8005c2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c38:	f7fa ffb6 	bl	8000ba8 <__aeabi_uldivmod>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4b61      	ldr	r3, [pc, #388]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005c42:	fba3 2302 	umull	r2, r3, r3, r2
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	011c      	lsls	r4, r3, #4
 8005c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	464b      	mov	r3, r9
 8005c60:	1891      	adds	r1, r2, r2
 8005c62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c64:	415b      	adcs	r3, r3
 8005c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c72:	4649      	mov	r1, r9
 8005c74:	eb43 0b01 	adc.w	fp, r3, r1
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c8c:	4692      	mov	sl, r2
 8005c8e:	469b      	mov	fp, r3
 8005c90:	4643      	mov	r3, r8
 8005c92:	eb1a 0303 	adds.w	r3, sl, r3
 8005c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	18db      	adds	r3, r3, r3
 8005cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	eb42 0303 	adc.w	r3, r2, r3
 8005cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cce:	f7fa ff6b 	bl	8000ba8 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005cda:	fba3 2301 	umull	r2, r3, r3, r1
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	2264      	movs	r2, #100	@ 0x64
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	1acb      	subs	r3, r1, r3
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cee:	4b36      	ldr	r3, [pc, #216]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cfc:	441c      	add	r4, r3
 8005cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d10:	4642      	mov	r2, r8
 8005d12:	464b      	mov	r3, r9
 8005d14:	1891      	adds	r1, r2, r2
 8005d16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d18:	415b      	adcs	r3, r3
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d20:	4641      	mov	r1, r8
 8005d22:	1851      	adds	r1, r2, r1
 8005d24:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d26:	4649      	mov	r1, r9
 8005d28:	414b      	adcs	r3, r1
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d38:	4659      	mov	r1, fp
 8005d3a:	00cb      	lsls	r3, r1, #3
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d42:	4651      	mov	r1, sl
 8005d44:	00ca      	lsls	r2, r1, #3
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d54:	464b      	mov	r3, r9
 8005d56:	460a      	mov	r2, r1
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d74:	460b      	mov	r3, r1
 8005d76:	18db      	adds	r3, r3, r3
 8005d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	eb42 0303 	adc.w	r3, r2, r3
 8005d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d8a:	f7fa ff0d 	bl	8000ba8 <__aeabi_uldivmod>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005d94:	fba3 1302 	umull	r1, r3, r3, r2
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	2164      	movs	r1, #100	@ 0x64
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	3332      	adds	r3, #50	@ 0x32
 8005da6:	4a08      	ldr	r2, [pc, #32]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005da8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	f003 0207 	and.w	r2, r3, #7
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4422      	add	r2, r4
 8005dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dbc:	e106      	b.n	8005fcc <UART_SetConfig+0x4d8>
 8005dbe:	bf00      	nop
 8005dc0:	40011000 	.word	0x40011000
 8005dc4:	40011400 	.word	0x40011400
 8005dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dde:	4642      	mov	r2, r8
 8005de0:	464b      	mov	r3, r9
 8005de2:	1891      	adds	r1, r2, r2
 8005de4:	6239      	str	r1, [r7, #32]
 8005de6:	415b      	adcs	r3, r3
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dee:	4641      	mov	r1, r8
 8005df0:	1854      	adds	r4, r2, r1
 8005df2:	4649      	mov	r1, r9
 8005df4:	eb43 0501 	adc.w	r5, r3, r1
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	00eb      	lsls	r3, r5, #3
 8005e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e06:	00e2      	lsls	r2, r4, #3
 8005e08:	4614      	mov	r4, r2
 8005e0a:	461d      	mov	r5, r3
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	18e3      	adds	r3, r4, r3
 8005e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e14:	464b      	mov	r3, r9
 8005e16:	eb45 0303 	adc.w	r3, r5, r3
 8005e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	008b      	lsls	r3, r1, #2
 8005e3e:	4621      	mov	r1, r4
 8005e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e44:	4621      	mov	r1, r4
 8005e46:	008a      	lsls	r2, r1, #2
 8005e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e4c:	f7fa feac 	bl	8000ba8 <__aeabi_uldivmod>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4b60      	ldr	r3, [pc, #384]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005e56:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	011c      	lsls	r4, r3, #4
 8005e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	1891      	adds	r1, r2, r2
 8005e76:	61b9      	str	r1, [r7, #24]
 8005e78:	415b      	adcs	r3, r3
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e80:	4641      	mov	r1, r8
 8005e82:	1851      	adds	r1, r2, r1
 8005e84:	6139      	str	r1, [r7, #16]
 8005e86:	4649      	mov	r1, r9
 8005e88:	414b      	adcs	r3, r1
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e98:	4659      	mov	r1, fp
 8005e9a:	00cb      	lsls	r3, r1, #3
 8005e9c:	4651      	mov	r1, sl
 8005e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ea2:	4651      	mov	r1, sl
 8005ea4:	00ca      	lsls	r2, r1, #3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4642      	mov	r2, r8
 8005eae:	189b      	adds	r3, r3, r2
 8005eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	eb42 0303 	adc.w	r3, r2, r3
 8005ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ed8:	4649      	mov	r1, r9
 8005eda:	008b      	lsls	r3, r1, #2
 8005edc:	4641      	mov	r1, r8
 8005ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	008a      	lsls	r2, r1, #2
 8005ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005eea:	f7fa fe5d 	bl	8000ba8 <__aeabi_uldivmod>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4b38      	ldr	r3, [pc, #224]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2264      	movs	r2, #100	@ 0x64
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	1acb      	subs	r3, r1, r3
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	3332      	adds	r3, #50	@ 0x32
 8005f08:	4a33      	ldr	r2, [pc, #204]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f14:	441c      	add	r4, r3
 8005f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f24:	4642      	mov	r2, r8
 8005f26:	464b      	mov	r3, r9
 8005f28:	1891      	adds	r1, r2, r2
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	415b      	adcs	r3, r3
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f34:	4641      	mov	r1, r8
 8005f36:	1851      	adds	r1, r2, r1
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	414b      	adcs	r3, r1
 8005f3e:	607b      	str	r3, [r7, #4]
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	00cb      	lsls	r3, r1, #3
 8005f50:	4651      	mov	r1, sl
 8005f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f56:	4651      	mov	r1, sl
 8005f58:	00ca      	lsls	r2, r1, #3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4642      	mov	r2, r8
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f66:	464b      	mov	r3, r9
 8005f68:	460a      	mov	r2, r1
 8005f6a:	eb42 0303 	adc.w	r3, r2, r3
 8005f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f88:	4649      	mov	r1, r9
 8005f8a:	008b      	lsls	r3, r1, #2
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f92:	4641      	mov	r1, r8
 8005f94:	008a      	lsls	r2, r1, #2
 8005f96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f9a:	f7fa fe05 	bl	8000ba8 <__aeabi_uldivmod>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	2164      	movs	r1, #100	@ 0x64
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	3332      	adds	r3, #50	@ 0x32
 8005fb6:	4a08      	ldr	r2, [pc, #32]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4422      	add	r2, r4
 8005fca:	609a      	str	r2, [r3, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd8:	51eb851f 	.word	0x51eb851f

08005fdc <__cvt>:
 8005fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	ec57 6b10 	vmov	r6, r7, d0
 8005fe4:	2f00      	cmp	r7, #0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	4619      	mov	r1, r3
 8005fea:	463b      	mov	r3, r7
 8005fec:	bfbb      	ittet	lt
 8005fee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005ff2:	461f      	movlt	r7, r3
 8005ff4:	2300      	movge	r3, #0
 8005ff6:	232d      	movlt	r3, #45	@ 0x2d
 8005ff8:	700b      	strb	r3, [r1, #0]
 8005ffa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ffc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006000:	4691      	mov	r9, r2
 8006002:	f023 0820 	bic.w	r8, r3, #32
 8006006:	bfbc      	itt	lt
 8006008:	4632      	movlt	r2, r6
 800600a:	4616      	movlt	r6, r2
 800600c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006010:	d005      	beq.n	800601e <__cvt+0x42>
 8006012:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006016:	d100      	bne.n	800601a <__cvt+0x3e>
 8006018:	3401      	adds	r4, #1
 800601a:	2102      	movs	r1, #2
 800601c:	e000      	b.n	8006020 <__cvt+0x44>
 800601e:	2103      	movs	r1, #3
 8006020:	ab03      	add	r3, sp, #12
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	ab02      	add	r3, sp, #8
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	ec47 6b10 	vmov	d0, r6, r7
 800602c:	4653      	mov	r3, sl
 800602e:	4622      	mov	r2, r4
 8006030:	f000 fe5a 	bl	8006ce8 <_dtoa_r>
 8006034:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006038:	4605      	mov	r5, r0
 800603a:	d119      	bne.n	8006070 <__cvt+0x94>
 800603c:	f019 0f01 	tst.w	r9, #1
 8006040:	d00e      	beq.n	8006060 <__cvt+0x84>
 8006042:	eb00 0904 	add.w	r9, r0, r4
 8006046:	2200      	movs	r2, #0
 8006048:	2300      	movs	r3, #0
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006052:	b108      	cbz	r0, 8006058 <__cvt+0x7c>
 8006054:	f8cd 900c 	str.w	r9, [sp, #12]
 8006058:	2230      	movs	r2, #48	@ 0x30
 800605a:	9b03      	ldr	r3, [sp, #12]
 800605c:	454b      	cmp	r3, r9
 800605e:	d31e      	bcc.n	800609e <__cvt+0xc2>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006064:	1b5b      	subs	r3, r3, r5
 8006066:	4628      	mov	r0, r5
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	b004      	add	sp, #16
 800606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006070:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006074:	eb00 0904 	add.w	r9, r0, r4
 8006078:	d1e5      	bne.n	8006046 <__cvt+0x6a>
 800607a:	7803      	ldrb	r3, [r0, #0]
 800607c:	2b30      	cmp	r3, #48	@ 0x30
 800607e:	d10a      	bne.n	8006096 <__cvt+0xba>
 8006080:	2200      	movs	r2, #0
 8006082:	2300      	movs	r3, #0
 8006084:	4630      	mov	r0, r6
 8006086:	4639      	mov	r1, r7
 8006088:	f7fa fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800608c:	b918      	cbnz	r0, 8006096 <__cvt+0xba>
 800608e:	f1c4 0401 	rsb	r4, r4, #1
 8006092:	f8ca 4000 	str.w	r4, [sl]
 8006096:	f8da 3000 	ldr.w	r3, [sl]
 800609a:	4499      	add	r9, r3
 800609c:	e7d3      	b.n	8006046 <__cvt+0x6a>
 800609e:	1c59      	adds	r1, r3, #1
 80060a0:	9103      	str	r1, [sp, #12]
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	e7d9      	b.n	800605a <__cvt+0x7e>

080060a6 <__exponent>:
 80060a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a8:	2900      	cmp	r1, #0
 80060aa:	bfba      	itte	lt
 80060ac:	4249      	neglt	r1, r1
 80060ae:	232d      	movlt	r3, #45	@ 0x2d
 80060b0:	232b      	movge	r3, #43	@ 0x2b
 80060b2:	2909      	cmp	r1, #9
 80060b4:	7002      	strb	r2, [r0, #0]
 80060b6:	7043      	strb	r3, [r0, #1]
 80060b8:	dd29      	ble.n	800610e <__exponent+0x68>
 80060ba:	f10d 0307 	add.w	r3, sp, #7
 80060be:	461d      	mov	r5, r3
 80060c0:	270a      	movs	r7, #10
 80060c2:	461a      	mov	r2, r3
 80060c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80060c8:	fb07 1416 	mls	r4, r7, r6, r1
 80060cc:	3430      	adds	r4, #48	@ 0x30
 80060ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80060d2:	460c      	mov	r4, r1
 80060d4:	2c63      	cmp	r4, #99	@ 0x63
 80060d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80060da:	4631      	mov	r1, r6
 80060dc:	dcf1      	bgt.n	80060c2 <__exponent+0x1c>
 80060de:	3130      	adds	r1, #48	@ 0x30
 80060e0:	1e94      	subs	r4, r2, #2
 80060e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060e6:	1c41      	adds	r1, r0, #1
 80060e8:	4623      	mov	r3, r4
 80060ea:	42ab      	cmp	r3, r5
 80060ec:	d30a      	bcc.n	8006104 <__exponent+0x5e>
 80060ee:	f10d 0309 	add.w	r3, sp, #9
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	42ac      	cmp	r4, r5
 80060f6:	bf88      	it	hi
 80060f8:	2300      	movhi	r3, #0
 80060fa:	3302      	adds	r3, #2
 80060fc:	4403      	add	r3, r0
 80060fe:	1a18      	subs	r0, r3, r0
 8006100:	b003      	add	sp, #12
 8006102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006104:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006108:	f801 6f01 	strb.w	r6, [r1, #1]!
 800610c:	e7ed      	b.n	80060ea <__exponent+0x44>
 800610e:	2330      	movs	r3, #48	@ 0x30
 8006110:	3130      	adds	r1, #48	@ 0x30
 8006112:	7083      	strb	r3, [r0, #2]
 8006114:	70c1      	strb	r1, [r0, #3]
 8006116:	1d03      	adds	r3, r0, #4
 8006118:	e7f1      	b.n	80060fe <__exponent+0x58>
	...

0800611c <_printf_float>:
 800611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	b08d      	sub	sp, #52	@ 0x34
 8006122:	460c      	mov	r4, r1
 8006124:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006128:	4616      	mov	r6, r2
 800612a:	461f      	mov	r7, r3
 800612c:	4605      	mov	r5, r0
 800612e:	f000 fcdb 	bl	8006ae8 <_localeconv_r>
 8006132:	6803      	ldr	r3, [r0, #0]
 8006134:	9304      	str	r3, [sp, #16]
 8006136:	4618      	mov	r0, r3
 8006138:	f7fa f89a 	bl	8000270 <strlen>
 800613c:	2300      	movs	r3, #0
 800613e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006140:	f8d8 3000 	ldr.w	r3, [r8]
 8006144:	9005      	str	r0, [sp, #20]
 8006146:	3307      	adds	r3, #7
 8006148:	f023 0307 	bic.w	r3, r3, #7
 800614c:	f103 0208 	add.w	r2, r3, #8
 8006150:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006154:	f8d4 b000 	ldr.w	fp, [r4]
 8006158:	f8c8 2000 	str.w	r2, [r8]
 800615c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006160:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006164:	9307      	str	r3, [sp, #28]
 8006166:	f8cd 8018 	str.w	r8, [sp, #24]
 800616a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800616e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006172:	4b9c      	ldr	r3, [pc, #624]	@ (80063e4 <_printf_float+0x2c8>)
 8006174:	f04f 32ff 	mov.w	r2, #4294967295
 8006178:	f7fa fcd8 	bl	8000b2c <__aeabi_dcmpun>
 800617c:	bb70      	cbnz	r0, 80061dc <_printf_float+0xc0>
 800617e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006182:	4b98      	ldr	r3, [pc, #608]	@ (80063e4 <_printf_float+0x2c8>)
 8006184:	f04f 32ff 	mov.w	r2, #4294967295
 8006188:	f7fa fcb2 	bl	8000af0 <__aeabi_dcmple>
 800618c:	bb30      	cbnz	r0, 80061dc <_printf_float+0xc0>
 800618e:	2200      	movs	r2, #0
 8006190:	2300      	movs	r3, #0
 8006192:	4640      	mov	r0, r8
 8006194:	4649      	mov	r1, r9
 8006196:	f7fa fca1 	bl	8000adc <__aeabi_dcmplt>
 800619a:	b110      	cbz	r0, 80061a2 <_printf_float+0x86>
 800619c:	232d      	movs	r3, #45	@ 0x2d
 800619e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a2:	4a91      	ldr	r2, [pc, #580]	@ (80063e8 <_printf_float+0x2cc>)
 80061a4:	4b91      	ldr	r3, [pc, #580]	@ (80063ec <_printf_float+0x2d0>)
 80061a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80061aa:	bf94      	ite	ls
 80061ac:	4690      	movls	r8, r2
 80061ae:	4698      	movhi	r8, r3
 80061b0:	2303      	movs	r3, #3
 80061b2:	6123      	str	r3, [r4, #16]
 80061b4:	f02b 0304 	bic.w	r3, fp, #4
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	f04f 0900 	mov.w	r9, #0
 80061be:	9700      	str	r7, [sp, #0]
 80061c0:	4633      	mov	r3, r6
 80061c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80061c4:	4621      	mov	r1, r4
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 f9d2 	bl	8006570 <_printf_common>
 80061cc:	3001      	adds	r0, #1
 80061ce:	f040 808d 	bne.w	80062ec <_printf_float+0x1d0>
 80061d2:	f04f 30ff 	mov.w	r0, #4294967295
 80061d6:	b00d      	add	sp, #52	@ 0x34
 80061d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061dc:	4642      	mov	r2, r8
 80061de:	464b      	mov	r3, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	4649      	mov	r1, r9
 80061e4:	f7fa fca2 	bl	8000b2c <__aeabi_dcmpun>
 80061e8:	b140      	cbz	r0, 80061fc <_printf_float+0xe0>
 80061ea:	464b      	mov	r3, r9
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bfbc      	itt	lt
 80061f0:	232d      	movlt	r3, #45	@ 0x2d
 80061f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061f6:	4a7e      	ldr	r2, [pc, #504]	@ (80063f0 <_printf_float+0x2d4>)
 80061f8:	4b7e      	ldr	r3, [pc, #504]	@ (80063f4 <_printf_float+0x2d8>)
 80061fa:	e7d4      	b.n	80061a6 <_printf_float+0x8a>
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006202:	9206      	str	r2, [sp, #24]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	d13b      	bne.n	8006280 <_printf_float+0x164>
 8006208:	2306      	movs	r3, #6
 800620a:	6063      	str	r3, [r4, #4]
 800620c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006210:	2300      	movs	r3, #0
 8006212:	6022      	str	r2, [r4, #0]
 8006214:	9303      	str	r3, [sp, #12]
 8006216:	ab0a      	add	r3, sp, #40	@ 0x28
 8006218:	e9cd a301 	strd	sl, r3, [sp, #4]
 800621c:	ab09      	add	r3, sp, #36	@ 0x24
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	6861      	ldr	r1, [r4, #4]
 8006222:	ec49 8b10 	vmov	d0, r8, r9
 8006226:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800622a:	4628      	mov	r0, r5
 800622c:	f7ff fed6 	bl	8005fdc <__cvt>
 8006230:	9b06      	ldr	r3, [sp, #24]
 8006232:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006234:	2b47      	cmp	r3, #71	@ 0x47
 8006236:	4680      	mov	r8, r0
 8006238:	d129      	bne.n	800628e <_printf_float+0x172>
 800623a:	1cc8      	adds	r0, r1, #3
 800623c:	db02      	blt.n	8006244 <_printf_float+0x128>
 800623e:	6863      	ldr	r3, [r4, #4]
 8006240:	4299      	cmp	r1, r3
 8006242:	dd41      	ble.n	80062c8 <_printf_float+0x1ac>
 8006244:	f1aa 0a02 	sub.w	sl, sl, #2
 8006248:	fa5f fa8a 	uxtb.w	sl, sl
 800624c:	3901      	subs	r1, #1
 800624e:	4652      	mov	r2, sl
 8006250:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006254:	9109      	str	r1, [sp, #36]	@ 0x24
 8006256:	f7ff ff26 	bl	80060a6 <__exponent>
 800625a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800625c:	1813      	adds	r3, r2, r0
 800625e:	2a01      	cmp	r2, #1
 8006260:	4681      	mov	r9, r0
 8006262:	6123      	str	r3, [r4, #16]
 8006264:	dc02      	bgt.n	800626c <_printf_float+0x150>
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	07d2      	lsls	r2, r2, #31
 800626a:	d501      	bpl.n	8006270 <_printf_float+0x154>
 800626c:	3301      	adds	r3, #1
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0a2      	beq.n	80061be <_printf_float+0xa2>
 8006278:	232d      	movs	r3, #45	@ 0x2d
 800627a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800627e:	e79e      	b.n	80061be <_printf_float+0xa2>
 8006280:	9a06      	ldr	r2, [sp, #24]
 8006282:	2a47      	cmp	r2, #71	@ 0x47
 8006284:	d1c2      	bne.n	800620c <_printf_float+0xf0>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1c0      	bne.n	800620c <_printf_float+0xf0>
 800628a:	2301      	movs	r3, #1
 800628c:	e7bd      	b.n	800620a <_printf_float+0xee>
 800628e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006292:	d9db      	bls.n	800624c <_printf_float+0x130>
 8006294:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006298:	d118      	bne.n	80062cc <_printf_float+0x1b0>
 800629a:	2900      	cmp	r1, #0
 800629c:	6863      	ldr	r3, [r4, #4]
 800629e:	dd0b      	ble.n	80062b8 <_printf_float+0x19c>
 80062a0:	6121      	str	r1, [r4, #16]
 80062a2:	b913      	cbnz	r3, 80062aa <_printf_float+0x18e>
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	07d0      	lsls	r0, r2, #31
 80062a8:	d502      	bpl.n	80062b0 <_printf_float+0x194>
 80062aa:	3301      	adds	r3, #1
 80062ac:	440b      	add	r3, r1
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062b2:	f04f 0900 	mov.w	r9, #0
 80062b6:	e7db      	b.n	8006270 <_printf_float+0x154>
 80062b8:	b913      	cbnz	r3, 80062c0 <_printf_float+0x1a4>
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	07d2      	lsls	r2, r2, #31
 80062be:	d501      	bpl.n	80062c4 <_printf_float+0x1a8>
 80062c0:	3302      	adds	r3, #2
 80062c2:	e7f4      	b.n	80062ae <_printf_float+0x192>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e7f2      	b.n	80062ae <_printf_float+0x192>
 80062c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80062cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ce:	4299      	cmp	r1, r3
 80062d0:	db05      	blt.n	80062de <_printf_float+0x1c2>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	6121      	str	r1, [r4, #16]
 80062d6:	07d8      	lsls	r0, r3, #31
 80062d8:	d5ea      	bpl.n	80062b0 <_printf_float+0x194>
 80062da:	1c4b      	adds	r3, r1, #1
 80062dc:	e7e7      	b.n	80062ae <_printf_float+0x192>
 80062de:	2900      	cmp	r1, #0
 80062e0:	bfd4      	ite	le
 80062e2:	f1c1 0202 	rsble	r2, r1, #2
 80062e6:	2201      	movgt	r2, #1
 80062e8:	4413      	add	r3, r2
 80062ea:	e7e0      	b.n	80062ae <_printf_float+0x192>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	055a      	lsls	r2, r3, #21
 80062f0:	d407      	bmi.n	8006302 <_printf_float+0x1e6>
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	4642      	mov	r2, r8
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	d12b      	bne.n	8006358 <_printf_float+0x23c>
 8006300:	e767      	b.n	80061d2 <_printf_float+0xb6>
 8006302:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006306:	f240 80dd 	bls.w	80064c4 <_printf_float+0x3a8>
 800630a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800630e:	2200      	movs	r2, #0
 8006310:	2300      	movs	r3, #0
 8006312:	f7fa fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006316:	2800      	cmp	r0, #0
 8006318:	d033      	beq.n	8006382 <_printf_float+0x266>
 800631a:	4a37      	ldr	r2, [pc, #220]	@ (80063f8 <_printf_float+0x2dc>)
 800631c:	2301      	movs	r3, #1
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	f43f af54 	beq.w	80061d2 <_printf_float+0xb6>
 800632a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800632e:	4543      	cmp	r3, r8
 8006330:	db02      	blt.n	8006338 <_printf_float+0x21c>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	07d8      	lsls	r0, r3, #31
 8006336:	d50f      	bpl.n	8006358 <_printf_float+0x23c>
 8006338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f af45 	beq.w	80061d2 <_printf_float+0xb6>
 8006348:	f04f 0900 	mov.w	r9, #0
 800634c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006350:	f104 0a1a 	add.w	sl, r4, #26
 8006354:	45c8      	cmp	r8, r9
 8006356:	dc09      	bgt.n	800636c <_printf_float+0x250>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	079b      	lsls	r3, r3, #30
 800635c:	f100 8103 	bmi.w	8006566 <_printf_float+0x44a>
 8006360:	68e0      	ldr	r0, [r4, #12]
 8006362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006364:	4298      	cmp	r0, r3
 8006366:	bfb8      	it	lt
 8006368:	4618      	movlt	r0, r3
 800636a:	e734      	b.n	80061d6 <_printf_float+0xba>
 800636c:	2301      	movs	r3, #1
 800636e:	4652      	mov	r2, sl
 8006370:	4631      	mov	r1, r6
 8006372:	4628      	mov	r0, r5
 8006374:	47b8      	blx	r7
 8006376:	3001      	adds	r0, #1
 8006378:	f43f af2b 	beq.w	80061d2 <_printf_float+0xb6>
 800637c:	f109 0901 	add.w	r9, r9, #1
 8006380:	e7e8      	b.n	8006354 <_printf_float+0x238>
 8006382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	dc39      	bgt.n	80063fc <_printf_float+0x2e0>
 8006388:	4a1b      	ldr	r2, [pc, #108]	@ (80063f8 <_printf_float+0x2dc>)
 800638a:	2301      	movs	r3, #1
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	f43f af1d 	beq.w	80061d2 <_printf_float+0xb6>
 8006398:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800639c:	ea59 0303 	orrs.w	r3, r9, r3
 80063a0:	d102      	bne.n	80063a8 <_printf_float+0x28c>
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	07d9      	lsls	r1, r3, #31
 80063a6:	d5d7      	bpl.n	8006358 <_printf_float+0x23c>
 80063a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ac:	4631      	mov	r1, r6
 80063ae:	4628      	mov	r0, r5
 80063b0:	47b8      	blx	r7
 80063b2:	3001      	adds	r0, #1
 80063b4:	f43f af0d 	beq.w	80061d2 <_printf_float+0xb6>
 80063b8:	f04f 0a00 	mov.w	sl, #0
 80063bc:	f104 0b1a 	add.w	fp, r4, #26
 80063c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c2:	425b      	negs	r3, r3
 80063c4:	4553      	cmp	r3, sl
 80063c6:	dc01      	bgt.n	80063cc <_printf_float+0x2b0>
 80063c8:	464b      	mov	r3, r9
 80063ca:	e793      	b.n	80062f4 <_printf_float+0x1d8>
 80063cc:	2301      	movs	r3, #1
 80063ce:	465a      	mov	r2, fp
 80063d0:	4631      	mov	r1, r6
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	f43f aefb 	beq.w	80061d2 <_printf_float+0xb6>
 80063dc:	f10a 0a01 	add.w	sl, sl, #1
 80063e0:	e7ee      	b.n	80063c0 <_printf_float+0x2a4>
 80063e2:	bf00      	nop
 80063e4:	7fefffff 	.word	0x7fefffff
 80063e8:	08008cbc 	.word	0x08008cbc
 80063ec:	08008cc0 	.word	0x08008cc0
 80063f0:	08008cc4 	.word	0x08008cc4
 80063f4:	08008cc8 	.word	0x08008cc8
 80063f8:	08008ccc 	.word	0x08008ccc
 80063fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006402:	4553      	cmp	r3, sl
 8006404:	bfa8      	it	ge
 8006406:	4653      	movge	r3, sl
 8006408:	2b00      	cmp	r3, #0
 800640a:	4699      	mov	r9, r3
 800640c:	dc36      	bgt.n	800647c <_printf_float+0x360>
 800640e:	f04f 0b00 	mov.w	fp, #0
 8006412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006416:	f104 021a 	add.w	r2, r4, #26
 800641a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800641c:	9306      	str	r3, [sp, #24]
 800641e:	eba3 0309 	sub.w	r3, r3, r9
 8006422:	455b      	cmp	r3, fp
 8006424:	dc31      	bgt.n	800648a <_printf_float+0x36e>
 8006426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006428:	459a      	cmp	sl, r3
 800642a:	dc3a      	bgt.n	80064a2 <_printf_float+0x386>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	07da      	lsls	r2, r3, #31
 8006430:	d437      	bmi.n	80064a2 <_printf_float+0x386>
 8006432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006434:	ebaa 0903 	sub.w	r9, sl, r3
 8006438:	9b06      	ldr	r3, [sp, #24]
 800643a:	ebaa 0303 	sub.w	r3, sl, r3
 800643e:	4599      	cmp	r9, r3
 8006440:	bfa8      	it	ge
 8006442:	4699      	movge	r9, r3
 8006444:	f1b9 0f00 	cmp.w	r9, #0
 8006448:	dc33      	bgt.n	80064b2 <_printf_float+0x396>
 800644a:	f04f 0800 	mov.w	r8, #0
 800644e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006452:	f104 0b1a 	add.w	fp, r4, #26
 8006456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006458:	ebaa 0303 	sub.w	r3, sl, r3
 800645c:	eba3 0309 	sub.w	r3, r3, r9
 8006460:	4543      	cmp	r3, r8
 8006462:	f77f af79 	ble.w	8006358 <_printf_float+0x23c>
 8006466:	2301      	movs	r3, #1
 8006468:	465a      	mov	r2, fp
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	f43f aeae 	beq.w	80061d2 <_printf_float+0xb6>
 8006476:	f108 0801 	add.w	r8, r8, #1
 800647a:	e7ec      	b.n	8006456 <_printf_float+0x33a>
 800647c:	4642      	mov	r2, r8
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	d1c2      	bne.n	800640e <_printf_float+0x2f2>
 8006488:	e6a3      	b.n	80061d2 <_printf_float+0xb6>
 800648a:	2301      	movs	r3, #1
 800648c:	4631      	mov	r1, r6
 800648e:	4628      	mov	r0, r5
 8006490:	9206      	str	r2, [sp, #24]
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	f43f ae9c 	beq.w	80061d2 <_printf_float+0xb6>
 800649a:	9a06      	ldr	r2, [sp, #24]
 800649c:	f10b 0b01 	add.w	fp, fp, #1
 80064a0:	e7bb      	b.n	800641a <_printf_float+0x2fe>
 80064a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	d1c0      	bne.n	8006432 <_printf_float+0x316>
 80064b0:	e68f      	b.n	80061d2 <_printf_float+0xb6>
 80064b2:	9a06      	ldr	r2, [sp, #24]
 80064b4:	464b      	mov	r3, r9
 80064b6:	4442      	add	r2, r8
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	d1c3      	bne.n	800644a <_printf_float+0x32e>
 80064c2:	e686      	b.n	80061d2 <_printf_float+0xb6>
 80064c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064c8:	f1ba 0f01 	cmp.w	sl, #1
 80064cc:	dc01      	bgt.n	80064d2 <_printf_float+0x3b6>
 80064ce:	07db      	lsls	r3, r3, #31
 80064d0:	d536      	bpl.n	8006540 <_printf_float+0x424>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4642      	mov	r2, r8
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	f43f ae78 	beq.w	80061d2 <_printf_float+0xb6>
 80064e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064e6:	4631      	mov	r1, r6
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b8      	blx	r7
 80064ec:	3001      	adds	r0, #1
 80064ee:	f43f ae70 	beq.w	80061d2 <_printf_float+0xb6>
 80064f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064f6:	2200      	movs	r2, #0
 80064f8:	2300      	movs	r3, #0
 80064fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064fe:	f7fa fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006502:	b9c0      	cbnz	r0, 8006536 <_printf_float+0x41a>
 8006504:	4653      	mov	r3, sl
 8006506:	f108 0201 	add.w	r2, r8, #1
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	d10c      	bne.n	800652e <_printf_float+0x412>
 8006514:	e65d      	b.n	80061d2 <_printf_float+0xb6>
 8006516:	2301      	movs	r3, #1
 8006518:	465a      	mov	r2, fp
 800651a:	4631      	mov	r1, r6
 800651c:	4628      	mov	r0, r5
 800651e:	47b8      	blx	r7
 8006520:	3001      	adds	r0, #1
 8006522:	f43f ae56 	beq.w	80061d2 <_printf_float+0xb6>
 8006526:	f108 0801 	add.w	r8, r8, #1
 800652a:	45d0      	cmp	r8, sl
 800652c:	dbf3      	blt.n	8006516 <_printf_float+0x3fa>
 800652e:	464b      	mov	r3, r9
 8006530:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006534:	e6df      	b.n	80062f6 <_printf_float+0x1da>
 8006536:	f04f 0800 	mov.w	r8, #0
 800653a:	f104 0b1a 	add.w	fp, r4, #26
 800653e:	e7f4      	b.n	800652a <_printf_float+0x40e>
 8006540:	2301      	movs	r3, #1
 8006542:	4642      	mov	r2, r8
 8006544:	e7e1      	b.n	800650a <_printf_float+0x3ee>
 8006546:	2301      	movs	r3, #1
 8006548:	464a      	mov	r2, r9
 800654a:	4631      	mov	r1, r6
 800654c:	4628      	mov	r0, r5
 800654e:	47b8      	blx	r7
 8006550:	3001      	adds	r0, #1
 8006552:	f43f ae3e 	beq.w	80061d2 <_printf_float+0xb6>
 8006556:	f108 0801 	add.w	r8, r8, #1
 800655a:	68e3      	ldr	r3, [r4, #12]
 800655c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800655e:	1a5b      	subs	r3, r3, r1
 8006560:	4543      	cmp	r3, r8
 8006562:	dcf0      	bgt.n	8006546 <_printf_float+0x42a>
 8006564:	e6fc      	b.n	8006360 <_printf_float+0x244>
 8006566:	f04f 0800 	mov.w	r8, #0
 800656a:	f104 0919 	add.w	r9, r4, #25
 800656e:	e7f4      	b.n	800655a <_printf_float+0x43e>

08006570 <_printf_common>:
 8006570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	4616      	mov	r6, r2
 8006576:	4698      	mov	r8, r3
 8006578:	688a      	ldr	r2, [r1, #8]
 800657a:	690b      	ldr	r3, [r1, #16]
 800657c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006580:	4293      	cmp	r3, r2
 8006582:	bfb8      	it	lt
 8006584:	4613      	movlt	r3, r2
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800658c:	4607      	mov	r7, r0
 800658e:	460c      	mov	r4, r1
 8006590:	b10a      	cbz	r2, 8006596 <_printf_common+0x26>
 8006592:	3301      	adds	r3, #1
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	0699      	lsls	r1, r3, #26
 800659a:	bf42      	ittt	mi
 800659c:	6833      	ldrmi	r3, [r6, #0]
 800659e:	3302      	addmi	r3, #2
 80065a0:	6033      	strmi	r3, [r6, #0]
 80065a2:	6825      	ldr	r5, [r4, #0]
 80065a4:	f015 0506 	ands.w	r5, r5, #6
 80065a8:	d106      	bne.n	80065b8 <_printf_common+0x48>
 80065aa:	f104 0a19 	add.w	sl, r4, #25
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	6832      	ldr	r2, [r6, #0]
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	dc26      	bgt.n	8006606 <_printf_common+0x96>
 80065b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	3b00      	subs	r3, #0
 80065c0:	bf18      	it	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	0692      	lsls	r2, r2, #26
 80065c6:	d42b      	bmi.n	8006620 <_printf_common+0xb0>
 80065c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065cc:	4641      	mov	r1, r8
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c8      	blx	r9
 80065d2:	3001      	adds	r0, #1
 80065d4:	d01e      	beq.n	8006614 <_printf_common+0xa4>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	f003 0306 	and.w	r3, r3, #6
 80065de:	2b04      	cmp	r3, #4
 80065e0:	bf02      	ittt	eq
 80065e2:	68e5      	ldreq	r5, [r4, #12]
 80065e4:	6833      	ldreq	r3, [r6, #0]
 80065e6:	1aed      	subeq	r5, r5, r3
 80065e8:	68a3      	ldr	r3, [r4, #8]
 80065ea:	bf0c      	ite	eq
 80065ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065f0:	2500      	movne	r5, #0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	bfc4      	itt	gt
 80065f6:	1a9b      	subgt	r3, r3, r2
 80065f8:	18ed      	addgt	r5, r5, r3
 80065fa:	2600      	movs	r6, #0
 80065fc:	341a      	adds	r4, #26
 80065fe:	42b5      	cmp	r5, r6
 8006600:	d11a      	bne.n	8006638 <_printf_common+0xc8>
 8006602:	2000      	movs	r0, #0
 8006604:	e008      	b.n	8006618 <_printf_common+0xa8>
 8006606:	2301      	movs	r3, #1
 8006608:	4652      	mov	r2, sl
 800660a:	4641      	mov	r1, r8
 800660c:	4638      	mov	r0, r7
 800660e:	47c8      	blx	r9
 8006610:	3001      	adds	r0, #1
 8006612:	d103      	bne.n	800661c <_printf_common+0xac>
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661c:	3501      	adds	r5, #1
 800661e:	e7c6      	b.n	80065ae <_printf_common+0x3e>
 8006620:	18e1      	adds	r1, r4, r3
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	2030      	movs	r0, #48	@ 0x30
 8006626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800662a:	4422      	add	r2, r4
 800662c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006634:	3302      	adds	r3, #2
 8006636:	e7c7      	b.n	80065c8 <_printf_common+0x58>
 8006638:	2301      	movs	r3, #1
 800663a:	4622      	mov	r2, r4
 800663c:	4641      	mov	r1, r8
 800663e:	4638      	mov	r0, r7
 8006640:	47c8      	blx	r9
 8006642:	3001      	adds	r0, #1
 8006644:	d0e6      	beq.n	8006614 <_printf_common+0xa4>
 8006646:	3601      	adds	r6, #1
 8006648:	e7d9      	b.n	80065fe <_printf_common+0x8e>
	...

0800664c <_printf_i>:
 800664c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006650:	7e0f      	ldrb	r7, [r1, #24]
 8006652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006654:	2f78      	cmp	r7, #120	@ 0x78
 8006656:	4691      	mov	r9, r2
 8006658:	4680      	mov	r8, r0
 800665a:	460c      	mov	r4, r1
 800665c:	469a      	mov	sl, r3
 800665e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006662:	d807      	bhi.n	8006674 <_printf_i+0x28>
 8006664:	2f62      	cmp	r7, #98	@ 0x62
 8006666:	d80a      	bhi.n	800667e <_printf_i+0x32>
 8006668:	2f00      	cmp	r7, #0
 800666a:	f000 80d2 	beq.w	8006812 <_printf_i+0x1c6>
 800666e:	2f58      	cmp	r7, #88	@ 0x58
 8006670:	f000 80b9 	beq.w	80067e6 <_printf_i+0x19a>
 8006674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800667c:	e03a      	b.n	80066f4 <_printf_i+0xa8>
 800667e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006682:	2b15      	cmp	r3, #21
 8006684:	d8f6      	bhi.n	8006674 <_printf_i+0x28>
 8006686:	a101      	add	r1, pc, #4	@ (adr r1, 800668c <_printf_i+0x40>)
 8006688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800668c:	080066e5 	.word	0x080066e5
 8006690:	080066f9 	.word	0x080066f9
 8006694:	08006675 	.word	0x08006675
 8006698:	08006675 	.word	0x08006675
 800669c:	08006675 	.word	0x08006675
 80066a0:	08006675 	.word	0x08006675
 80066a4:	080066f9 	.word	0x080066f9
 80066a8:	08006675 	.word	0x08006675
 80066ac:	08006675 	.word	0x08006675
 80066b0:	08006675 	.word	0x08006675
 80066b4:	08006675 	.word	0x08006675
 80066b8:	080067f9 	.word	0x080067f9
 80066bc:	08006723 	.word	0x08006723
 80066c0:	080067b3 	.word	0x080067b3
 80066c4:	08006675 	.word	0x08006675
 80066c8:	08006675 	.word	0x08006675
 80066cc:	0800681b 	.word	0x0800681b
 80066d0:	08006675 	.word	0x08006675
 80066d4:	08006723 	.word	0x08006723
 80066d8:	08006675 	.word	0x08006675
 80066dc:	08006675 	.word	0x08006675
 80066e0:	080067bb 	.word	0x080067bb
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	1d1a      	adds	r2, r3, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6032      	str	r2, [r6, #0]
 80066ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066f4:	2301      	movs	r3, #1
 80066f6:	e09d      	b.n	8006834 <_printf_i+0x1e8>
 80066f8:	6833      	ldr	r3, [r6, #0]
 80066fa:	6820      	ldr	r0, [r4, #0]
 80066fc:	1d19      	adds	r1, r3, #4
 80066fe:	6031      	str	r1, [r6, #0]
 8006700:	0606      	lsls	r6, r0, #24
 8006702:	d501      	bpl.n	8006708 <_printf_i+0xbc>
 8006704:	681d      	ldr	r5, [r3, #0]
 8006706:	e003      	b.n	8006710 <_printf_i+0xc4>
 8006708:	0645      	lsls	r5, r0, #25
 800670a:	d5fb      	bpl.n	8006704 <_printf_i+0xb8>
 800670c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006710:	2d00      	cmp	r5, #0
 8006712:	da03      	bge.n	800671c <_printf_i+0xd0>
 8006714:	232d      	movs	r3, #45	@ 0x2d
 8006716:	426d      	negs	r5, r5
 8006718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800671c:	4859      	ldr	r0, [pc, #356]	@ (8006884 <_printf_i+0x238>)
 800671e:	230a      	movs	r3, #10
 8006720:	e011      	b.n	8006746 <_printf_i+0xfa>
 8006722:	6821      	ldr	r1, [r4, #0]
 8006724:	6833      	ldr	r3, [r6, #0]
 8006726:	0608      	lsls	r0, r1, #24
 8006728:	f853 5b04 	ldr.w	r5, [r3], #4
 800672c:	d402      	bmi.n	8006734 <_printf_i+0xe8>
 800672e:	0649      	lsls	r1, r1, #25
 8006730:	bf48      	it	mi
 8006732:	b2ad      	uxthmi	r5, r5
 8006734:	2f6f      	cmp	r7, #111	@ 0x6f
 8006736:	4853      	ldr	r0, [pc, #332]	@ (8006884 <_printf_i+0x238>)
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	bf14      	ite	ne
 800673c:	230a      	movne	r3, #10
 800673e:	2308      	moveq	r3, #8
 8006740:	2100      	movs	r1, #0
 8006742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006746:	6866      	ldr	r6, [r4, #4]
 8006748:	60a6      	str	r6, [r4, #8]
 800674a:	2e00      	cmp	r6, #0
 800674c:	bfa2      	ittt	ge
 800674e:	6821      	ldrge	r1, [r4, #0]
 8006750:	f021 0104 	bicge.w	r1, r1, #4
 8006754:	6021      	strge	r1, [r4, #0]
 8006756:	b90d      	cbnz	r5, 800675c <_printf_i+0x110>
 8006758:	2e00      	cmp	r6, #0
 800675a:	d04b      	beq.n	80067f4 <_printf_i+0x1a8>
 800675c:	4616      	mov	r6, r2
 800675e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006762:	fb03 5711 	mls	r7, r3, r1, r5
 8006766:	5dc7      	ldrb	r7, [r0, r7]
 8006768:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800676c:	462f      	mov	r7, r5
 800676e:	42bb      	cmp	r3, r7
 8006770:	460d      	mov	r5, r1
 8006772:	d9f4      	bls.n	800675e <_printf_i+0x112>
 8006774:	2b08      	cmp	r3, #8
 8006776:	d10b      	bne.n	8006790 <_printf_i+0x144>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	07df      	lsls	r7, r3, #31
 800677c:	d508      	bpl.n	8006790 <_printf_i+0x144>
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	6861      	ldr	r1, [r4, #4]
 8006782:	4299      	cmp	r1, r3
 8006784:	bfde      	ittt	le
 8006786:	2330      	movle	r3, #48	@ 0x30
 8006788:	f806 3c01 	strble.w	r3, [r6, #-1]
 800678c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006790:	1b92      	subs	r2, r2, r6
 8006792:	6122      	str	r2, [r4, #16]
 8006794:	f8cd a000 	str.w	sl, [sp]
 8006798:	464b      	mov	r3, r9
 800679a:	aa03      	add	r2, sp, #12
 800679c:	4621      	mov	r1, r4
 800679e:	4640      	mov	r0, r8
 80067a0:	f7ff fee6 	bl	8006570 <_printf_common>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d14a      	bne.n	800683e <_printf_i+0x1f2>
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	b004      	add	sp, #16
 80067ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	f043 0320 	orr.w	r3, r3, #32
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	4833      	ldr	r0, [pc, #204]	@ (8006888 <_printf_i+0x23c>)
 80067bc:	2778      	movs	r7, #120	@ 0x78
 80067be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	6831      	ldr	r1, [r6, #0]
 80067c6:	061f      	lsls	r7, r3, #24
 80067c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80067cc:	d402      	bmi.n	80067d4 <_printf_i+0x188>
 80067ce:	065f      	lsls	r7, r3, #25
 80067d0:	bf48      	it	mi
 80067d2:	b2ad      	uxthmi	r5, r5
 80067d4:	6031      	str	r1, [r6, #0]
 80067d6:	07d9      	lsls	r1, r3, #31
 80067d8:	bf44      	itt	mi
 80067da:	f043 0320 	orrmi.w	r3, r3, #32
 80067de:	6023      	strmi	r3, [r4, #0]
 80067e0:	b11d      	cbz	r5, 80067ea <_printf_i+0x19e>
 80067e2:	2310      	movs	r3, #16
 80067e4:	e7ac      	b.n	8006740 <_printf_i+0xf4>
 80067e6:	4827      	ldr	r0, [pc, #156]	@ (8006884 <_printf_i+0x238>)
 80067e8:	e7e9      	b.n	80067be <_printf_i+0x172>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	f023 0320 	bic.w	r3, r3, #32
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	e7f6      	b.n	80067e2 <_printf_i+0x196>
 80067f4:	4616      	mov	r6, r2
 80067f6:	e7bd      	b.n	8006774 <_printf_i+0x128>
 80067f8:	6833      	ldr	r3, [r6, #0]
 80067fa:	6825      	ldr	r5, [r4, #0]
 80067fc:	6961      	ldr	r1, [r4, #20]
 80067fe:	1d18      	adds	r0, r3, #4
 8006800:	6030      	str	r0, [r6, #0]
 8006802:	062e      	lsls	r6, r5, #24
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	d501      	bpl.n	800680c <_printf_i+0x1c0>
 8006808:	6019      	str	r1, [r3, #0]
 800680a:	e002      	b.n	8006812 <_printf_i+0x1c6>
 800680c:	0668      	lsls	r0, r5, #25
 800680e:	d5fb      	bpl.n	8006808 <_printf_i+0x1bc>
 8006810:	8019      	strh	r1, [r3, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	4616      	mov	r6, r2
 8006818:	e7bc      	b.n	8006794 <_printf_i+0x148>
 800681a:	6833      	ldr	r3, [r6, #0]
 800681c:	1d1a      	adds	r2, r3, #4
 800681e:	6032      	str	r2, [r6, #0]
 8006820:	681e      	ldr	r6, [r3, #0]
 8006822:	6862      	ldr	r2, [r4, #4]
 8006824:	2100      	movs	r1, #0
 8006826:	4630      	mov	r0, r6
 8006828:	f7f9 fcd2 	bl	80001d0 <memchr>
 800682c:	b108      	cbz	r0, 8006832 <_printf_i+0x1e6>
 800682e:	1b80      	subs	r0, r0, r6
 8006830:	6060      	str	r0, [r4, #4]
 8006832:	6863      	ldr	r3, [r4, #4]
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	2300      	movs	r3, #0
 8006838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800683c:	e7aa      	b.n	8006794 <_printf_i+0x148>
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	4632      	mov	r2, r6
 8006842:	4649      	mov	r1, r9
 8006844:	4640      	mov	r0, r8
 8006846:	47d0      	blx	sl
 8006848:	3001      	adds	r0, #1
 800684a:	d0ad      	beq.n	80067a8 <_printf_i+0x15c>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	079b      	lsls	r3, r3, #30
 8006850:	d413      	bmi.n	800687a <_printf_i+0x22e>
 8006852:	68e0      	ldr	r0, [r4, #12]
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	4298      	cmp	r0, r3
 8006858:	bfb8      	it	lt
 800685a:	4618      	movlt	r0, r3
 800685c:	e7a6      	b.n	80067ac <_printf_i+0x160>
 800685e:	2301      	movs	r3, #1
 8006860:	4632      	mov	r2, r6
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	47d0      	blx	sl
 8006868:	3001      	adds	r0, #1
 800686a:	d09d      	beq.n	80067a8 <_printf_i+0x15c>
 800686c:	3501      	adds	r5, #1
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	9903      	ldr	r1, [sp, #12]
 8006872:	1a5b      	subs	r3, r3, r1
 8006874:	42ab      	cmp	r3, r5
 8006876:	dcf2      	bgt.n	800685e <_printf_i+0x212>
 8006878:	e7eb      	b.n	8006852 <_printf_i+0x206>
 800687a:	2500      	movs	r5, #0
 800687c:	f104 0619 	add.w	r6, r4, #25
 8006880:	e7f5      	b.n	800686e <_printf_i+0x222>
 8006882:	bf00      	nop
 8006884:	08008cce 	.word	0x08008cce
 8006888:	08008cdf 	.word	0x08008cdf

0800688c <std>:
 800688c:	2300      	movs	r3, #0
 800688e:	b510      	push	{r4, lr}
 8006890:	4604      	mov	r4, r0
 8006892:	e9c0 3300 	strd	r3, r3, [r0]
 8006896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800689a:	6083      	str	r3, [r0, #8]
 800689c:	8181      	strh	r1, [r0, #12]
 800689e:	6643      	str	r3, [r0, #100]	@ 0x64
 80068a0:	81c2      	strh	r2, [r0, #14]
 80068a2:	6183      	str	r3, [r0, #24]
 80068a4:	4619      	mov	r1, r3
 80068a6:	2208      	movs	r2, #8
 80068a8:	305c      	adds	r0, #92	@ 0x5c
 80068aa:	f000 f914 	bl	8006ad6 <memset>
 80068ae:	4b0d      	ldr	r3, [pc, #52]	@ (80068e4 <std+0x58>)
 80068b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80068b2:	4b0d      	ldr	r3, [pc, #52]	@ (80068e8 <std+0x5c>)
 80068b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068b6:	4b0d      	ldr	r3, [pc, #52]	@ (80068ec <std+0x60>)
 80068b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068ba:	4b0d      	ldr	r3, [pc, #52]	@ (80068f0 <std+0x64>)
 80068bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <std+0x68>)
 80068c0:	6224      	str	r4, [r4, #32]
 80068c2:	429c      	cmp	r4, r3
 80068c4:	d006      	beq.n	80068d4 <std+0x48>
 80068c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068ca:	4294      	cmp	r4, r2
 80068cc:	d002      	beq.n	80068d4 <std+0x48>
 80068ce:	33d0      	adds	r3, #208	@ 0xd0
 80068d0:	429c      	cmp	r4, r3
 80068d2:	d105      	bne.n	80068e0 <std+0x54>
 80068d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	f000 b978 	b.w	8006bd0 <__retarget_lock_init_recursive>
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	bf00      	nop
 80068e4:	08006a51 	.word	0x08006a51
 80068e8:	08006a73 	.word	0x08006a73
 80068ec:	08006aab 	.word	0x08006aab
 80068f0:	08006acf 	.word	0x08006acf
 80068f4:	2000029c 	.word	0x2000029c

080068f8 <stdio_exit_handler>:
 80068f8:	4a02      	ldr	r2, [pc, #8]	@ (8006904 <stdio_exit_handler+0xc>)
 80068fa:	4903      	ldr	r1, [pc, #12]	@ (8006908 <stdio_exit_handler+0x10>)
 80068fc:	4803      	ldr	r0, [pc, #12]	@ (800690c <stdio_exit_handler+0x14>)
 80068fe:	f000 b869 	b.w	80069d4 <_fwalk_sglue>
 8006902:	bf00      	nop
 8006904:	2000000c 	.word	0x2000000c
 8006908:	0800852d 	.word	0x0800852d
 800690c:	2000001c 	.word	0x2000001c

08006910 <cleanup_stdio>:
 8006910:	6841      	ldr	r1, [r0, #4]
 8006912:	4b0c      	ldr	r3, [pc, #48]	@ (8006944 <cleanup_stdio+0x34>)
 8006914:	4299      	cmp	r1, r3
 8006916:	b510      	push	{r4, lr}
 8006918:	4604      	mov	r4, r0
 800691a:	d001      	beq.n	8006920 <cleanup_stdio+0x10>
 800691c:	f001 fe06 	bl	800852c <_fflush_r>
 8006920:	68a1      	ldr	r1, [r4, #8]
 8006922:	4b09      	ldr	r3, [pc, #36]	@ (8006948 <cleanup_stdio+0x38>)
 8006924:	4299      	cmp	r1, r3
 8006926:	d002      	beq.n	800692e <cleanup_stdio+0x1e>
 8006928:	4620      	mov	r0, r4
 800692a:	f001 fdff 	bl	800852c <_fflush_r>
 800692e:	68e1      	ldr	r1, [r4, #12]
 8006930:	4b06      	ldr	r3, [pc, #24]	@ (800694c <cleanup_stdio+0x3c>)
 8006932:	4299      	cmp	r1, r3
 8006934:	d004      	beq.n	8006940 <cleanup_stdio+0x30>
 8006936:	4620      	mov	r0, r4
 8006938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800693c:	f001 bdf6 	b.w	800852c <_fflush_r>
 8006940:	bd10      	pop	{r4, pc}
 8006942:	bf00      	nop
 8006944:	2000029c 	.word	0x2000029c
 8006948:	20000304 	.word	0x20000304
 800694c:	2000036c 	.word	0x2000036c

08006950 <global_stdio_init.part.0>:
 8006950:	b510      	push	{r4, lr}
 8006952:	4b0b      	ldr	r3, [pc, #44]	@ (8006980 <global_stdio_init.part.0+0x30>)
 8006954:	4c0b      	ldr	r4, [pc, #44]	@ (8006984 <global_stdio_init.part.0+0x34>)
 8006956:	4a0c      	ldr	r2, [pc, #48]	@ (8006988 <global_stdio_init.part.0+0x38>)
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	4620      	mov	r0, r4
 800695c:	2200      	movs	r2, #0
 800695e:	2104      	movs	r1, #4
 8006960:	f7ff ff94 	bl	800688c <std>
 8006964:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006968:	2201      	movs	r2, #1
 800696a:	2109      	movs	r1, #9
 800696c:	f7ff ff8e 	bl	800688c <std>
 8006970:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006974:	2202      	movs	r2, #2
 8006976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800697a:	2112      	movs	r1, #18
 800697c:	f7ff bf86 	b.w	800688c <std>
 8006980:	200003d4 	.word	0x200003d4
 8006984:	2000029c 	.word	0x2000029c
 8006988:	080068f9 	.word	0x080068f9

0800698c <__sfp_lock_acquire>:
 800698c:	4801      	ldr	r0, [pc, #4]	@ (8006994 <__sfp_lock_acquire+0x8>)
 800698e:	f000 b920 	b.w	8006bd2 <__retarget_lock_acquire_recursive>
 8006992:	bf00      	nop
 8006994:	200003dd 	.word	0x200003dd

08006998 <__sfp_lock_release>:
 8006998:	4801      	ldr	r0, [pc, #4]	@ (80069a0 <__sfp_lock_release+0x8>)
 800699a:	f000 b91b 	b.w	8006bd4 <__retarget_lock_release_recursive>
 800699e:	bf00      	nop
 80069a0:	200003dd 	.word	0x200003dd

080069a4 <__sinit>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4604      	mov	r4, r0
 80069a8:	f7ff fff0 	bl	800698c <__sfp_lock_acquire>
 80069ac:	6a23      	ldr	r3, [r4, #32]
 80069ae:	b11b      	cbz	r3, 80069b8 <__sinit+0x14>
 80069b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b4:	f7ff bff0 	b.w	8006998 <__sfp_lock_release>
 80069b8:	4b04      	ldr	r3, [pc, #16]	@ (80069cc <__sinit+0x28>)
 80069ba:	6223      	str	r3, [r4, #32]
 80069bc:	4b04      	ldr	r3, [pc, #16]	@ (80069d0 <__sinit+0x2c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1f5      	bne.n	80069b0 <__sinit+0xc>
 80069c4:	f7ff ffc4 	bl	8006950 <global_stdio_init.part.0>
 80069c8:	e7f2      	b.n	80069b0 <__sinit+0xc>
 80069ca:	bf00      	nop
 80069cc:	08006911 	.word	0x08006911
 80069d0:	200003d4 	.word	0x200003d4

080069d4 <_fwalk_sglue>:
 80069d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	4607      	mov	r7, r0
 80069da:	4688      	mov	r8, r1
 80069dc:	4614      	mov	r4, r2
 80069de:	2600      	movs	r6, #0
 80069e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e4:	f1b9 0901 	subs.w	r9, r9, #1
 80069e8:	d505      	bpl.n	80069f6 <_fwalk_sglue+0x22>
 80069ea:	6824      	ldr	r4, [r4, #0]
 80069ec:	2c00      	cmp	r4, #0
 80069ee:	d1f7      	bne.n	80069e0 <_fwalk_sglue+0xc>
 80069f0:	4630      	mov	r0, r6
 80069f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f6:	89ab      	ldrh	r3, [r5, #12]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d907      	bls.n	8006a0c <_fwalk_sglue+0x38>
 80069fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a00:	3301      	adds	r3, #1
 8006a02:	d003      	beq.n	8006a0c <_fwalk_sglue+0x38>
 8006a04:	4629      	mov	r1, r5
 8006a06:	4638      	mov	r0, r7
 8006a08:	47c0      	blx	r8
 8006a0a:	4306      	orrs	r6, r0
 8006a0c:	3568      	adds	r5, #104	@ 0x68
 8006a0e:	e7e9      	b.n	80069e4 <_fwalk_sglue+0x10>

08006a10 <siprintf>:
 8006a10:	b40e      	push	{r1, r2, r3}
 8006a12:	b500      	push	{lr}
 8006a14:	b09c      	sub	sp, #112	@ 0x70
 8006a16:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a18:	9002      	str	r0, [sp, #8]
 8006a1a:	9006      	str	r0, [sp, #24]
 8006a1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a20:	4809      	ldr	r0, [pc, #36]	@ (8006a48 <siprintf+0x38>)
 8006a22:	9107      	str	r1, [sp, #28]
 8006a24:	9104      	str	r1, [sp, #16]
 8006a26:	4909      	ldr	r1, [pc, #36]	@ (8006a4c <siprintf+0x3c>)
 8006a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2c:	9105      	str	r1, [sp, #20]
 8006a2e:	6800      	ldr	r0, [r0, #0]
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	a902      	add	r1, sp, #8
 8006a34:	f001 fbfa 	bl	800822c <_svfiprintf_r>
 8006a38:	9b02      	ldr	r3, [sp, #8]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	b01c      	add	sp, #112	@ 0x70
 8006a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a44:	b003      	add	sp, #12
 8006a46:	4770      	bx	lr
 8006a48:	20000018 	.word	0x20000018
 8006a4c:	ffff0208 	.word	0xffff0208

08006a50 <__sread>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	460c      	mov	r4, r1
 8006a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a58:	f000 f86c 	bl	8006b34 <_read_r>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	bfab      	itete	ge
 8006a60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a62:	89a3      	ldrhlt	r3, [r4, #12]
 8006a64:	181b      	addge	r3, r3, r0
 8006a66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a6a:	bfac      	ite	ge
 8006a6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a6e:	81a3      	strhlt	r3, [r4, #12]
 8006a70:	bd10      	pop	{r4, pc}

08006a72 <__swrite>:
 8006a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a76:	461f      	mov	r7, r3
 8006a78:	898b      	ldrh	r3, [r1, #12]
 8006a7a:	05db      	lsls	r3, r3, #23
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	4616      	mov	r6, r2
 8006a82:	d505      	bpl.n	8006a90 <__swrite+0x1e>
 8006a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a88:	2302      	movs	r3, #2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f000 f840 	bl	8006b10 <_lseek_r>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	f000 b857 	b.w	8006b58 <_write_r>

08006aaa <__sseek>:
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	460c      	mov	r4, r1
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 f82d 	bl	8006b10 <_lseek_r>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	bf15      	itete	ne
 8006abc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006abe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ac2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ac6:	81a3      	strheq	r3, [r4, #12]
 8006ac8:	bf18      	it	ne
 8006aca:	81a3      	strhne	r3, [r4, #12]
 8006acc:	bd10      	pop	{r4, pc}

08006ace <__sclose>:
 8006ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad2:	f000 b80d 	b.w	8006af0 <_close_r>

08006ad6 <memset>:
 8006ad6:	4402      	add	r2, r0
 8006ad8:	4603      	mov	r3, r0
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d100      	bne.n	8006ae0 <memset+0xa>
 8006ade:	4770      	bx	lr
 8006ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae4:	e7f9      	b.n	8006ada <memset+0x4>
	...

08006ae8 <_localeconv_r>:
 8006ae8:	4800      	ldr	r0, [pc, #0]	@ (8006aec <_localeconv_r+0x4>)
 8006aea:	4770      	bx	lr
 8006aec:	20000158 	.word	0x20000158

08006af0 <_close_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4d06      	ldr	r5, [pc, #24]	@ (8006b0c <_close_r+0x1c>)
 8006af4:	2300      	movs	r3, #0
 8006af6:	4604      	mov	r4, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	602b      	str	r3, [r5, #0]
 8006afc:	f7fa fc2c 	bl	8001358 <_close>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d102      	bne.n	8006b0a <_close_r+0x1a>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	b103      	cbz	r3, 8006b0a <_close_r+0x1a>
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	200003d8 	.word	0x200003d8

08006b10 <_lseek_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	@ (8006b30 <_lseek_r+0x20>)
 8006b14:	4604      	mov	r4, r0
 8006b16:	4608      	mov	r0, r1
 8006b18:	4611      	mov	r1, r2
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	602a      	str	r2, [r5, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f7fa fc41 	bl	80013a6 <_lseek>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	d102      	bne.n	8006b2e <_lseek_r+0x1e>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	b103      	cbz	r3, 8006b2e <_lseek_r+0x1e>
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	200003d8 	.word	0x200003d8

08006b34 <_read_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d07      	ldr	r5, [pc, #28]	@ (8006b54 <_read_r+0x20>)
 8006b38:	4604      	mov	r4, r0
 8006b3a:	4608      	mov	r0, r1
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	2200      	movs	r2, #0
 8006b40:	602a      	str	r2, [r5, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f7fa fbcf 	bl	80012e6 <_read>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_read_r+0x1e>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_read_r+0x1e>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	200003d8 	.word	0x200003d8

08006b58 <_write_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d07      	ldr	r5, [pc, #28]	@ (8006b78 <_write_r+0x20>)
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	4608      	mov	r0, r1
 8006b60:	4611      	mov	r1, r2
 8006b62:	2200      	movs	r2, #0
 8006b64:	602a      	str	r2, [r5, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f7fa fbda 	bl	8001320 <_write>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_write_r+0x1e>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_write_r+0x1e>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	200003d8 	.word	0x200003d8

08006b7c <__errno>:
 8006b7c:	4b01      	ldr	r3, [pc, #4]	@ (8006b84 <__errno+0x8>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000018 	.word	0x20000018

08006b88 <__libc_init_array>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8006bc0 <__libc_init_array+0x38>)
 8006b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8006bc4 <__libc_init_array+0x3c>)
 8006b8e:	1b64      	subs	r4, r4, r5
 8006b90:	10a4      	asrs	r4, r4, #2
 8006b92:	2600      	movs	r6, #0
 8006b94:	42a6      	cmp	r6, r4
 8006b96:	d109      	bne.n	8006bac <__libc_init_array+0x24>
 8006b98:	4d0b      	ldr	r5, [pc, #44]	@ (8006bc8 <__libc_init_array+0x40>)
 8006b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8006bcc <__libc_init_array+0x44>)
 8006b9c:	f002 f864 	bl	8008c68 <_init>
 8006ba0:	1b64      	subs	r4, r4, r5
 8006ba2:	10a4      	asrs	r4, r4, #2
 8006ba4:	2600      	movs	r6, #0
 8006ba6:	42a6      	cmp	r6, r4
 8006ba8:	d105      	bne.n	8006bb6 <__libc_init_array+0x2e>
 8006baa:	bd70      	pop	{r4, r5, r6, pc}
 8006bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb0:	4798      	blx	r3
 8006bb2:	3601      	adds	r6, #1
 8006bb4:	e7ee      	b.n	8006b94 <__libc_init_array+0xc>
 8006bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bba:	4798      	blx	r3
 8006bbc:	3601      	adds	r6, #1
 8006bbe:	e7f2      	b.n	8006ba6 <__libc_init_array+0x1e>
 8006bc0:	08009038 	.word	0x08009038
 8006bc4:	08009038 	.word	0x08009038
 8006bc8:	08009038 	.word	0x08009038
 8006bcc:	0800903c 	.word	0x0800903c

08006bd0 <__retarget_lock_init_recursive>:
 8006bd0:	4770      	bx	lr

08006bd2 <__retarget_lock_acquire_recursive>:
 8006bd2:	4770      	bx	lr

08006bd4 <__retarget_lock_release_recursive>:
 8006bd4:	4770      	bx	lr

08006bd6 <quorem>:
 8006bd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	6903      	ldr	r3, [r0, #16]
 8006bdc:	690c      	ldr	r4, [r1, #16]
 8006bde:	42a3      	cmp	r3, r4
 8006be0:	4607      	mov	r7, r0
 8006be2:	db7e      	blt.n	8006ce2 <quorem+0x10c>
 8006be4:	3c01      	subs	r4, #1
 8006be6:	f101 0814 	add.w	r8, r1, #20
 8006bea:	00a3      	lsls	r3, r4, #2
 8006bec:	f100 0514 	add.w	r5, r0, #20
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c00:	3301      	adds	r3, #1
 8006c02:	429a      	cmp	r2, r3
 8006c04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c08:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c0c:	d32e      	bcc.n	8006c6c <quorem+0x96>
 8006c0e:	f04f 0a00 	mov.w	sl, #0
 8006c12:	46c4      	mov	ip, r8
 8006c14:	46ae      	mov	lr, r5
 8006c16:	46d3      	mov	fp, sl
 8006c18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c1c:	b298      	uxth	r0, r3
 8006c1e:	fb06 a000 	mla	r0, r6, r0, sl
 8006c22:	0c02      	lsrs	r2, r0, #16
 8006c24:	0c1b      	lsrs	r3, r3, #16
 8006c26:	fb06 2303 	mla	r3, r6, r3, r2
 8006c2a:	f8de 2000 	ldr.w	r2, [lr]
 8006c2e:	b280      	uxth	r0, r0
 8006c30:	b292      	uxth	r2, r2
 8006c32:	1a12      	subs	r2, r2, r0
 8006c34:	445a      	add	r2, fp
 8006c36:	f8de 0000 	ldr.w	r0, [lr]
 8006c3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c48:	b292      	uxth	r2, r2
 8006c4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c4e:	45e1      	cmp	r9, ip
 8006c50:	f84e 2b04 	str.w	r2, [lr], #4
 8006c54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c58:	d2de      	bcs.n	8006c18 <quorem+0x42>
 8006c5a:	9b00      	ldr	r3, [sp, #0]
 8006c5c:	58eb      	ldr	r3, [r5, r3]
 8006c5e:	b92b      	cbnz	r3, 8006c6c <quorem+0x96>
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	3b04      	subs	r3, #4
 8006c64:	429d      	cmp	r5, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	d32f      	bcc.n	8006cca <quorem+0xf4>
 8006c6a:	613c      	str	r4, [r7, #16]
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	f001 f979 	bl	8007f64 <__mcmp>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	db25      	blt.n	8006cc2 <quorem+0xec>
 8006c76:	4629      	mov	r1, r5
 8006c78:	2000      	movs	r0, #0
 8006c7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c7e:	f8d1 c000 	ldr.w	ip, [r1]
 8006c82:	fa1f fe82 	uxth.w	lr, r2
 8006c86:	fa1f f38c 	uxth.w	r3, ip
 8006c8a:	eba3 030e 	sub.w	r3, r3, lr
 8006c8e:	4403      	add	r3, r0
 8006c90:	0c12      	lsrs	r2, r2, #16
 8006c92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ca0:	45c1      	cmp	r9, r8
 8006ca2:	f841 3b04 	str.w	r3, [r1], #4
 8006ca6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006caa:	d2e6      	bcs.n	8006c7a <quorem+0xa4>
 8006cac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cb4:	b922      	cbnz	r2, 8006cc0 <quorem+0xea>
 8006cb6:	3b04      	subs	r3, #4
 8006cb8:	429d      	cmp	r5, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	d30b      	bcc.n	8006cd6 <quorem+0x100>
 8006cbe:	613c      	str	r4, [r7, #16]
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	b003      	add	sp, #12
 8006cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cca:	6812      	ldr	r2, [r2, #0]
 8006ccc:	3b04      	subs	r3, #4
 8006cce:	2a00      	cmp	r2, #0
 8006cd0:	d1cb      	bne.n	8006c6a <quorem+0x94>
 8006cd2:	3c01      	subs	r4, #1
 8006cd4:	e7c6      	b.n	8006c64 <quorem+0x8e>
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	3b04      	subs	r3, #4
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	d1ef      	bne.n	8006cbe <quorem+0xe8>
 8006cde:	3c01      	subs	r4, #1
 8006ce0:	e7ea      	b.n	8006cb8 <quorem+0xe2>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e7ee      	b.n	8006cc4 <quorem+0xee>
	...

08006ce8 <_dtoa_r>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	69c7      	ldr	r7, [r0, #28]
 8006cee:	b099      	sub	sp, #100	@ 0x64
 8006cf0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006cf4:	ec55 4b10 	vmov	r4, r5, d0
 8006cf8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006cfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cfc:	4683      	mov	fp, r0
 8006cfe:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d02:	b97f      	cbnz	r7, 8006d24 <_dtoa_r+0x3c>
 8006d04:	2010      	movs	r0, #16
 8006d06:	f000 fdfd 	bl	8007904 <malloc>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d10:	b920      	cbnz	r0, 8006d1c <_dtoa_r+0x34>
 8006d12:	4ba7      	ldr	r3, [pc, #668]	@ (8006fb0 <_dtoa_r+0x2c8>)
 8006d14:	21ef      	movs	r1, #239	@ 0xef
 8006d16:	48a7      	ldr	r0, [pc, #668]	@ (8006fb4 <_dtoa_r+0x2cc>)
 8006d18:	f001 fc68 	bl	80085ec <__assert_func>
 8006d1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d20:	6007      	str	r7, [r0, #0]
 8006d22:	60c7      	str	r7, [r0, #12]
 8006d24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d28:	6819      	ldr	r1, [r3, #0]
 8006d2a:	b159      	cbz	r1, 8006d44 <_dtoa_r+0x5c>
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	604a      	str	r2, [r1, #4]
 8006d30:	2301      	movs	r3, #1
 8006d32:	4093      	lsls	r3, r2
 8006d34:	608b      	str	r3, [r1, #8]
 8006d36:	4658      	mov	r0, fp
 8006d38:	f000 feda 	bl	8007af0 <_Bfree>
 8006d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	1e2b      	subs	r3, r5, #0
 8006d46:	bfb9      	ittee	lt
 8006d48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d4c:	9303      	strlt	r3, [sp, #12]
 8006d4e:	2300      	movge	r3, #0
 8006d50:	6033      	strge	r3, [r6, #0]
 8006d52:	9f03      	ldr	r7, [sp, #12]
 8006d54:	4b98      	ldr	r3, [pc, #608]	@ (8006fb8 <_dtoa_r+0x2d0>)
 8006d56:	bfbc      	itt	lt
 8006d58:	2201      	movlt	r2, #1
 8006d5a:	6032      	strlt	r2, [r6, #0]
 8006d5c:	43bb      	bics	r3, r7
 8006d5e:	d112      	bne.n	8006d86 <_dtoa_r+0x9e>
 8006d60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d6c:	4323      	orrs	r3, r4
 8006d6e:	f000 854d 	beq.w	800780c <_dtoa_r+0xb24>
 8006d72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006fcc <_dtoa_r+0x2e4>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 854f 	beq.w	800781c <_dtoa_r+0xb34>
 8006d7e:	f10a 0303 	add.w	r3, sl, #3
 8006d82:	f000 bd49 	b.w	8007818 <_dtoa_r+0xb30>
 8006d86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	ec51 0b17 	vmov	r0, r1, d7
 8006d90:	2300      	movs	r3, #0
 8006d92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006d96:	f7f9 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	b158      	cbz	r0, 8006db6 <_dtoa_r+0xce>
 8006d9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006da0:	2301      	movs	r3, #1
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006da6:	b113      	cbz	r3, 8006dae <_dtoa_r+0xc6>
 8006da8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006daa:	4b84      	ldr	r3, [pc, #528]	@ (8006fbc <_dtoa_r+0x2d4>)
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006fd0 <_dtoa_r+0x2e8>
 8006db2:	f000 bd33 	b.w	800781c <_dtoa_r+0xb34>
 8006db6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006dba:	aa16      	add	r2, sp, #88	@ 0x58
 8006dbc:	a917      	add	r1, sp, #92	@ 0x5c
 8006dbe:	4658      	mov	r0, fp
 8006dc0:	f001 f980 	bl	80080c4 <__d2b>
 8006dc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006dc8:	4681      	mov	r9, r0
 8006dca:	2e00      	cmp	r6, #0
 8006dcc:	d077      	beq.n	8006ebe <_dtoa_r+0x1d6>
 8006dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ddc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006de0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006de4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006de8:	4619      	mov	r1, r3
 8006dea:	2200      	movs	r2, #0
 8006dec:	4b74      	ldr	r3, [pc, #464]	@ (8006fc0 <_dtoa_r+0x2d8>)
 8006dee:	f7f9 fa4b 	bl	8000288 <__aeabi_dsub>
 8006df2:	a369      	add	r3, pc, #420	@ (adr r3, 8006f98 <_dtoa_r+0x2b0>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f7f9 fbfe 	bl	80005f8 <__aeabi_dmul>
 8006dfc:	a368      	add	r3, pc, #416	@ (adr r3, 8006fa0 <_dtoa_r+0x2b8>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f7f9 fa43 	bl	800028c <__adddf3>
 8006e06:	4604      	mov	r4, r0
 8006e08:	4630      	mov	r0, r6
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	f7f9 fb8a 	bl	8000524 <__aeabi_i2d>
 8006e10:	a365      	add	r3, pc, #404	@ (adr r3, 8006fa8 <_dtoa_r+0x2c0>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f7f9 fbef 	bl	80005f8 <__aeabi_dmul>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4620      	mov	r0, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7f9 fa33 	bl	800028c <__adddf3>
 8006e26:	4604      	mov	r4, r0
 8006e28:	460d      	mov	r5, r1
 8006e2a:	f7f9 fe95 	bl	8000b58 <__aeabi_d2iz>
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4607      	mov	r7, r0
 8006e32:	2300      	movs	r3, #0
 8006e34:	4620      	mov	r0, r4
 8006e36:	4629      	mov	r1, r5
 8006e38:	f7f9 fe50 	bl	8000adc <__aeabi_dcmplt>
 8006e3c:	b140      	cbz	r0, 8006e50 <_dtoa_r+0x168>
 8006e3e:	4638      	mov	r0, r7
 8006e40:	f7f9 fb70 	bl	8000524 <__aeabi_i2d>
 8006e44:	4622      	mov	r2, r4
 8006e46:	462b      	mov	r3, r5
 8006e48:	f7f9 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e4c:	b900      	cbnz	r0, 8006e50 <_dtoa_r+0x168>
 8006e4e:	3f01      	subs	r7, #1
 8006e50:	2f16      	cmp	r7, #22
 8006e52:	d851      	bhi.n	8006ef8 <_dtoa_r+0x210>
 8006e54:	4b5b      	ldr	r3, [pc, #364]	@ (8006fc4 <_dtoa_r+0x2dc>)
 8006e56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e62:	f7f9 fe3b 	bl	8000adc <__aeabi_dcmplt>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d048      	beq.n	8006efc <_dtoa_r+0x214>
 8006e6a:	3f01      	subs	r7, #1
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e72:	1b9b      	subs	r3, r3, r6
 8006e74:	1e5a      	subs	r2, r3, #1
 8006e76:	bf44      	itt	mi
 8006e78:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e7c:	2300      	movmi	r3, #0
 8006e7e:	9208      	str	r2, [sp, #32]
 8006e80:	bf54      	ite	pl
 8006e82:	f04f 0800 	movpl.w	r8, #0
 8006e86:	9308      	strmi	r3, [sp, #32]
 8006e88:	2f00      	cmp	r7, #0
 8006e8a:	db39      	blt.n	8006f00 <_dtoa_r+0x218>
 8006e8c:	9b08      	ldr	r3, [sp, #32]
 8006e8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006e90:	443b      	add	r3, r7
 8006e92:	9308      	str	r3, [sp, #32]
 8006e94:	2300      	movs	r3, #0
 8006e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e9a:	2b09      	cmp	r3, #9
 8006e9c:	d864      	bhi.n	8006f68 <_dtoa_r+0x280>
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	bfc4      	itt	gt
 8006ea2:	3b04      	subgt	r3, #4
 8006ea4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea8:	f1a3 0302 	sub.w	r3, r3, #2
 8006eac:	bfcc      	ite	gt
 8006eae:	2400      	movgt	r4, #0
 8006eb0:	2401      	movle	r4, #1
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d863      	bhi.n	8006f7e <_dtoa_r+0x296>
 8006eb6:	e8df f003 	tbb	[pc, r3]
 8006eba:	372a      	.short	0x372a
 8006ebc:	5535      	.short	0x5535
 8006ebe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006ec2:	441e      	add	r6, r3
 8006ec4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	bfc1      	itttt	gt
 8006ecc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ed0:	409f      	lslgt	r7, r3
 8006ed2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ed6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006eda:	bfd6      	itet	le
 8006edc:	f1c3 0320 	rsble	r3, r3, #32
 8006ee0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006ee4:	fa04 f003 	lslle.w	r0, r4, r3
 8006ee8:	f7f9 fb0c 	bl	8000504 <__aeabi_ui2d>
 8006eec:	2201      	movs	r2, #1
 8006eee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ef2:	3e01      	subs	r6, #1
 8006ef4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ef6:	e777      	b.n	8006de8 <_dtoa_r+0x100>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e7b8      	b.n	8006e6e <_dtoa_r+0x186>
 8006efc:	9012      	str	r0, [sp, #72]	@ 0x48
 8006efe:	e7b7      	b.n	8006e70 <_dtoa_r+0x188>
 8006f00:	427b      	negs	r3, r7
 8006f02:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f04:	2300      	movs	r3, #0
 8006f06:	eba8 0807 	sub.w	r8, r8, r7
 8006f0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f0c:	e7c4      	b.n	8006e98 <_dtoa_r+0x1b0>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	dc35      	bgt.n	8006f84 <_dtoa_r+0x29c>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	9307      	str	r3, [sp, #28]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f22:	e00b      	b.n	8006f3c <_dtoa_r+0x254>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e7f3      	b.n	8006f10 <_dtoa_r+0x228>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f2e:	18fb      	adds	r3, r7, r3
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	3301      	adds	r3, #1
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	bfb8      	it	lt
 8006f3a:	2301      	movlt	r3, #1
 8006f3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f40:	2100      	movs	r1, #0
 8006f42:	2204      	movs	r2, #4
 8006f44:	f102 0514 	add.w	r5, r2, #20
 8006f48:	429d      	cmp	r5, r3
 8006f4a:	d91f      	bls.n	8006f8c <_dtoa_r+0x2a4>
 8006f4c:	6041      	str	r1, [r0, #4]
 8006f4e:	4658      	mov	r0, fp
 8006f50:	f000 fd8e 	bl	8007a70 <_Balloc>
 8006f54:	4682      	mov	sl, r0
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d13c      	bne.n	8006fd4 <_dtoa_r+0x2ec>
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc8 <_dtoa_r+0x2e0>)
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f62:	e6d8      	b.n	8006d16 <_dtoa_r+0x2e>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e7e0      	b.n	8006f2a <_dtoa_r+0x242>
 8006f68:	2401      	movs	r4, #1
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f70:	f04f 33ff 	mov.w	r3, #4294967295
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2312      	movs	r3, #18
 8006f7c:	e7d0      	b.n	8006f20 <_dtoa_r+0x238>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f82:	e7f5      	b.n	8006f70 <_dtoa_r+0x288>
 8006f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	9307      	str	r3, [sp, #28]
 8006f8a:	e7d7      	b.n	8006f3c <_dtoa_r+0x254>
 8006f8c:	3101      	adds	r1, #1
 8006f8e:	0052      	lsls	r2, r2, #1
 8006f90:	e7d8      	b.n	8006f44 <_dtoa_r+0x25c>
 8006f92:	bf00      	nop
 8006f94:	f3af 8000 	nop.w
 8006f98:	636f4361 	.word	0x636f4361
 8006f9c:	3fd287a7 	.word	0x3fd287a7
 8006fa0:	8b60c8b3 	.word	0x8b60c8b3
 8006fa4:	3fc68a28 	.word	0x3fc68a28
 8006fa8:	509f79fb 	.word	0x509f79fb
 8006fac:	3fd34413 	.word	0x3fd34413
 8006fb0:	08008cfd 	.word	0x08008cfd
 8006fb4:	08008d14 	.word	0x08008d14
 8006fb8:	7ff00000 	.word	0x7ff00000
 8006fbc:	08008ccd 	.word	0x08008ccd
 8006fc0:	3ff80000 	.word	0x3ff80000
 8006fc4:	08008e10 	.word	0x08008e10
 8006fc8:	08008d6c 	.word	0x08008d6c
 8006fcc:	08008cf9 	.word	0x08008cf9
 8006fd0:	08008ccc 	.word	0x08008ccc
 8006fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fd8:	6018      	str	r0, [r3, #0]
 8006fda:	9b07      	ldr	r3, [sp, #28]
 8006fdc:	2b0e      	cmp	r3, #14
 8006fde:	f200 80a4 	bhi.w	800712a <_dtoa_r+0x442>
 8006fe2:	2c00      	cmp	r4, #0
 8006fe4:	f000 80a1 	beq.w	800712a <_dtoa_r+0x442>
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	dd33      	ble.n	8007054 <_dtoa_r+0x36c>
 8006fec:	4bad      	ldr	r3, [pc, #692]	@ (80072a4 <_dtoa_r+0x5bc>)
 8006fee:	f007 020f 	and.w	r2, r7, #15
 8006ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ff6:	ed93 7b00 	vldr	d7, [r3]
 8006ffa:	05f8      	lsls	r0, r7, #23
 8006ffc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007000:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007004:	d516      	bpl.n	8007034 <_dtoa_r+0x34c>
 8007006:	4ba8      	ldr	r3, [pc, #672]	@ (80072a8 <_dtoa_r+0x5c0>)
 8007008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800700c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007010:	f7f9 fc1c 	bl	800084c <__aeabi_ddiv>
 8007014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007018:	f004 040f 	and.w	r4, r4, #15
 800701c:	2603      	movs	r6, #3
 800701e:	4da2      	ldr	r5, [pc, #648]	@ (80072a8 <_dtoa_r+0x5c0>)
 8007020:	b954      	cbnz	r4, 8007038 <_dtoa_r+0x350>
 8007022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800702a:	f7f9 fc0f 	bl	800084c <__aeabi_ddiv>
 800702e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007032:	e028      	b.n	8007086 <_dtoa_r+0x39e>
 8007034:	2602      	movs	r6, #2
 8007036:	e7f2      	b.n	800701e <_dtoa_r+0x336>
 8007038:	07e1      	lsls	r1, r4, #31
 800703a:	d508      	bpl.n	800704e <_dtoa_r+0x366>
 800703c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007040:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007044:	f7f9 fad8 	bl	80005f8 <__aeabi_dmul>
 8007048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800704c:	3601      	adds	r6, #1
 800704e:	1064      	asrs	r4, r4, #1
 8007050:	3508      	adds	r5, #8
 8007052:	e7e5      	b.n	8007020 <_dtoa_r+0x338>
 8007054:	f000 80d2 	beq.w	80071fc <_dtoa_r+0x514>
 8007058:	427c      	negs	r4, r7
 800705a:	4b92      	ldr	r3, [pc, #584]	@ (80072a4 <_dtoa_r+0x5bc>)
 800705c:	4d92      	ldr	r5, [pc, #584]	@ (80072a8 <_dtoa_r+0x5c0>)
 800705e:	f004 020f 	and.w	r2, r4, #15
 8007062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800706e:	f7f9 fac3 	bl	80005f8 <__aeabi_dmul>
 8007072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007076:	1124      	asrs	r4, r4, #4
 8007078:	2300      	movs	r3, #0
 800707a:	2602      	movs	r6, #2
 800707c:	2c00      	cmp	r4, #0
 800707e:	f040 80b2 	bne.w	80071e6 <_dtoa_r+0x4fe>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1d3      	bne.n	800702e <_dtoa_r+0x346>
 8007086:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007088:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80b7 	beq.w	8007200 <_dtoa_r+0x518>
 8007092:	4b86      	ldr	r3, [pc, #536]	@ (80072ac <_dtoa_r+0x5c4>)
 8007094:	2200      	movs	r2, #0
 8007096:	4620      	mov	r0, r4
 8007098:	4629      	mov	r1, r5
 800709a:	f7f9 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f000 80ae 	beq.w	8007200 <_dtoa_r+0x518>
 80070a4:	9b07      	ldr	r3, [sp, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 80aa 	beq.w	8007200 <_dtoa_r+0x518>
 80070ac:	9b00      	ldr	r3, [sp, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	dd37      	ble.n	8007122 <_dtoa_r+0x43a>
 80070b2:	1e7b      	subs	r3, r7, #1
 80070b4:	9304      	str	r3, [sp, #16]
 80070b6:	4620      	mov	r0, r4
 80070b8:	4b7d      	ldr	r3, [pc, #500]	@ (80072b0 <_dtoa_r+0x5c8>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	4629      	mov	r1, r5
 80070be:	f7f9 fa9b 	bl	80005f8 <__aeabi_dmul>
 80070c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c6:	9c00      	ldr	r4, [sp, #0]
 80070c8:	3601      	adds	r6, #1
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7f9 fa2a 	bl	8000524 <__aeabi_i2d>
 80070d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070d4:	f7f9 fa90 	bl	80005f8 <__aeabi_dmul>
 80070d8:	4b76      	ldr	r3, [pc, #472]	@ (80072b4 <_dtoa_r+0x5cc>)
 80070da:	2200      	movs	r2, #0
 80070dc:	f7f9 f8d6 	bl	800028c <__adddf3>
 80070e0:	4605      	mov	r5, r0
 80070e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070e6:	2c00      	cmp	r4, #0
 80070e8:	f040 808d 	bne.w	8007206 <_dtoa_r+0x51e>
 80070ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f0:	4b71      	ldr	r3, [pc, #452]	@ (80072b8 <_dtoa_r+0x5d0>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	f7f9 f8c8 	bl	8000288 <__aeabi_dsub>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007100:	462a      	mov	r2, r5
 8007102:	4633      	mov	r3, r6
 8007104:	f7f9 fd08 	bl	8000b18 <__aeabi_dcmpgt>
 8007108:	2800      	cmp	r0, #0
 800710a:	f040 828b 	bne.w	8007624 <_dtoa_r+0x93c>
 800710e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007112:	462a      	mov	r2, r5
 8007114:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007118:	f7f9 fce0 	bl	8000adc <__aeabi_dcmplt>
 800711c:	2800      	cmp	r0, #0
 800711e:	f040 8128 	bne.w	8007372 <_dtoa_r+0x68a>
 8007122:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007126:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800712a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800712c:	2b00      	cmp	r3, #0
 800712e:	f2c0 815a 	blt.w	80073e6 <_dtoa_r+0x6fe>
 8007132:	2f0e      	cmp	r7, #14
 8007134:	f300 8157 	bgt.w	80073e6 <_dtoa_r+0x6fe>
 8007138:	4b5a      	ldr	r3, [pc, #360]	@ (80072a4 <_dtoa_r+0x5bc>)
 800713a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800713e:	ed93 7b00 	vldr	d7, [r3]
 8007142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007144:	2b00      	cmp	r3, #0
 8007146:	ed8d 7b00 	vstr	d7, [sp]
 800714a:	da03      	bge.n	8007154 <_dtoa_r+0x46c>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f340 8101 	ble.w	8007356 <_dtoa_r+0x66e>
 8007154:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007158:	4656      	mov	r6, sl
 800715a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800715e:	4620      	mov	r0, r4
 8007160:	4629      	mov	r1, r5
 8007162:	f7f9 fb73 	bl	800084c <__aeabi_ddiv>
 8007166:	f7f9 fcf7 	bl	8000b58 <__aeabi_d2iz>
 800716a:	4680      	mov	r8, r0
 800716c:	f7f9 f9da 	bl	8000524 <__aeabi_i2d>
 8007170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007174:	f7f9 fa40 	bl	80005f8 <__aeabi_dmul>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4620      	mov	r0, r4
 800717e:	4629      	mov	r1, r5
 8007180:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007184:	f7f9 f880 	bl	8000288 <__aeabi_dsub>
 8007188:	f806 4b01 	strb.w	r4, [r6], #1
 800718c:	9d07      	ldr	r5, [sp, #28]
 800718e:	eba6 040a 	sub.w	r4, r6, sl
 8007192:	42a5      	cmp	r5, r4
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	f040 8117 	bne.w	80073ca <_dtoa_r+0x6e2>
 800719c:	f7f9 f876 	bl	800028c <__adddf3>
 80071a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071a4:	4604      	mov	r4, r0
 80071a6:	460d      	mov	r5, r1
 80071a8:	f7f9 fcb6 	bl	8000b18 <__aeabi_dcmpgt>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	f040 80f9 	bne.w	80073a4 <_dtoa_r+0x6bc>
 80071b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7f9 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 80071be:	b118      	cbz	r0, 80071c8 <_dtoa_r+0x4e0>
 80071c0:	f018 0f01 	tst.w	r8, #1
 80071c4:	f040 80ee 	bne.w	80073a4 <_dtoa_r+0x6bc>
 80071c8:	4649      	mov	r1, r9
 80071ca:	4658      	mov	r0, fp
 80071cc:	f000 fc90 	bl	8007af0 <_Bfree>
 80071d0:	2300      	movs	r3, #0
 80071d2:	7033      	strb	r3, [r6, #0]
 80071d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071d6:	3701      	adds	r7, #1
 80071d8:	601f      	str	r7, [r3, #0]
 80071da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 831d 	beq.w	800781c <_dtoa_r+0xb34>
 80071e2:	601e      	str	r6, [r3, #0]
 80071e4:	e31a      	b.n	800781c <_dtoa_r+0xb34>
 80071e6:	07e2      	lsls	r2, r4, #31
 80071e8:	d505      	bpl.n	80071f6 <_dtoa_r+0x50e>
 80071ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071ee:	f7f9 fa03 	bl	80005f8 <__aeabi_dmul>
 80071f2:	3601      	adds	r6, #1
 80071f4:	2301      	movs	r3, #1
 80071f6:	1064      	asrs	r4, r4, #1
 80071f8:	3508      	adds	r5, #8
 80071fa:	e73f      	b.n	800707c <_dtoa_r+0x394>
 80071fc:	2602      	movs	r6, #2
 80071fe:	e742      	b.n	8007086 <_dtoa_r+0x39e>
 8007200:	9c07      	ldr	r4, [sp, #28]
 8007202:	9704      	str	r7, [sp, #16]
 8007204:	e761      	b.n	80070ca <_dtoa_r+0x3e2>
 8007206:	4b27      	ldr	r3, [pc, #156]	@ (80072a4 <_dtoa_r+0x5bc>)
 8007208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800720a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800720e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007212:	4454      	add	r4, sl
 8007214:	2900      	cmp	r1, #0
 8007216:	d053      	beq.n	80072c0 <_dtoa_r+0x5d8>
 8007218:	4928      	ldr	r1, [pc, #160]	@ (80072bc <_dtoa_r+0x5d4>)
 800721a:	2000      	movs	r0, #0
 800721c:	f7f9 fb16 	bl	800084c <__aeabi_ddiv>
 8007220:	4633      	mov	r3, r6
 8007222:	462a      	mov	r2, r5
 8007224:	f7f9 f830 	bl	8000288 <__aeabi_dsub>
 8007228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800722c:	4656      	mov	r6, sl
 800722e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007232:	f7f9 fc91 	bl	8000b58 <__aeabi_d2iz>
 8007236:	4605      	mov	r5, r0
 8007238:	f7f9 f974 	bl	8000524 <__aeabi_i2d>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007244:	f7f9 f820 	bl	8000288 <__aeabi_dsub>
 8007248:	3530      	adds	r5, #48	@ 0x30
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007252:	f806 5b01 	strb.w	r5, [r6], #1
 8007256:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800725a:	f7f9 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800725e:	2800      	cmp	r0, #0
 8007260:	d171      	bne.n	8007346 <_dtoa_r+0x65e>
 8007262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007266:	4911      	ldr	r1, [pc, #68]	@ (80072ac <_dtoa_r+0x5c4>)
 8007268:	2000      	movs	r0, #0
 800726a:	f7f9 f80d 	bl	8000288 <__aeabi_dsub>
 800726e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007272:	f7f9 fc33 	bl	8000adc <__aeabi_dcmplt>
 8007276:	2800      	cmp	r0, #0
 8007278:	f040 8095 	bne.w	80073a6 <_dtoa_r+0x6be>
 800727c:	42a6      	cmp	r6, r4
 800727e:	f43f af50 	beq.w	8007122 <_dtoa_r+0x43a>
 8007282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007286:	4b0a      	ldr	r3, [pc, #40]	@ (80072b0 <_dtoa_r+0x5c8>)
 8007288:	2200      	movs	r2, #0
 800728a:	f7f9 f9b5 	bl	80005f8 <__aeabi_dmul>
 800728e:	4b08      	ldr	r3, [pc, #32]	@ (80072b0 <_dtoa_r+0x5c8>)
 8007290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007294:	2200      	movs	r2, #0
 8007296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800729a:	f7f9 f9ad 	bl	80005f8 <__aeabi_dmul>
 800729e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072a2:	e7c4      	b.n	800722e <_dtoa_r+0x546>
 80072a4:	08008e10 	.word	0x08008e10
 80072a8:	08008de8 	.word	0x08008de8
 80072ac:	3ff00000 	.word	0x3ff00000
 80072b0:	40240000 	.word	0x40240000
 80072b4:	401c0000 	.word	0x401c0000
 80072b8:	40140000 	.word	0x40140000
 80072bc:	3fe00000 	.word	0x3fe00000
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	f7f9 f998 	bl	80005f8 <__aeabi_dmul>
 80072c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80072ce:	4656      	mov	r6, sl
 80072d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d4:	f7f9 fc40 	bl	8000b58 <__aeabi_d2iz>
 80072d8:	4605      	mov	r5, r0
 80072da:	f7f9 f923 	bl	8000524 <__aeabi_i2d>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072e6:	f7f8 ffcf 	bl	8000288 <__aeabi_dsub>
 80072ea:	3530      	adds	r5, #48	@ 0x30
 80072ec:	f806 5b01 	strb.w	r5, [r6], #1
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	42a6      	cmp	r6, r4
 80072f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	d124      	bne.n	800734a <_dtoa_r+0x662>
 8007300:	4bac      	ldr	r3, [pc, #688]	@ (80075b4 <_dtoa_r+0x8cc>)
 8007302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007306:	f7f8 ffc1 	bl	800028c <__adddf3>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007312:	f7f9 fc01 	bl	8000b18 <__aeabi_dcmpgt>
 8007316:	2800      	cmp	r0, #0
 8007318:	d145      	bne.n	80073a6 <_dtoa_r+0x6be>
 800731a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800731e:	49a5      	ldr	r1, [pc, #660]	@ (80075b4 <_dtoa_r+0x8cc>)
 8007320:	2000      	movs	r0, #0
 8007322:	f7f8 ffb1 	bl	8000288 <__aeabi_dsub>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800732e:	f7f9 fbd5 	bl	8000adc <__aeabi_dcmplt>
 8007332:	2800      	cmp	r0, #0
 8007334:	f43f aef5 	beq.w	8007122 <_dtoa_r+0x43a>
 8007338:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800733a:	1e73      	subs	r3, r6, #1
 800733c:	9315      	str	r3, [sp, #84]	@ 0x54
 800733e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007342:	2b30      	cmp	r3, #48	@ 0x30
 8007344:	d0f8      	beq.n	8007338 <_dtoa_r+0x650>
 8007346:	9f04      	ldr	r7, [sp, #16]
 8007348:	e73e      	b.n	80071c8 <_dtoa_r+0x4e0>
 800734a:	4b9b      	ldr	r3, [pc, #620]	@ (80075b8 <_dtoa_r+0x8d0>)
 800734c:	f7f9 f954 	bl	80005f8 <__aeabi_dmul>
 8007350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007354:	e7bc      	b.n	80072d0 <_dtoa_r+0x5e8>
 8007356:	d10c      	bne.n	8007372 <_dtoa_r+0x68a>
 8007358:	4b98      	ldr	r3, [pc, #608]	@ (80075bc <_dtoa_r+0x8d4>)
 800735a:	2200      	movs	r2, #0
 800735c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007360:	f7f9 f94a 	bl	80005f8 <__aeabi_dmul>
 8007364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007368:	f7f9 fbcc 	bl	8000b04 <__aeabi_dcmpge>
 800736c:	2800      	cmp	r0, #0
 800736e:	f000 8157 	beq.w	8007620 <_dtoa_r+0x938>
 8007372:	2400      	movs	r4, #0
 8007374:	4625      	mov	r5, r4
 8007376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007378:	43db      	mvns	r3, r3
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	4656      	mov	r6, sl
 800737e:	2700      	movs	r7, #0
 8007380:	4621      	mov	r1, r4
 8007382:	4658      	mov	r0, fp
 8007384:	f000 fbb4 	bl	8007af0 <_Bfree>
 8007388:	2d00      	cmp	r5, #0
 800738a:	d0dc      	beq.n	8007346 <_dtoa_r+0x65e>
 800738c:	b12f      	cbz	r7, 800739a <_dtoa_r+0x6b2>
 800738e:	42af      	cmp	r7, r5
 8007390:	d003      	beq.n	800739a <_dtoa_r+0x6b2>
 8007392:	4639      	mov	r1, r7
 8007394:	4658      	mov	r0, fp
 8007396:	f000 fbab 	bl	8007af0 <_Bfree>
 800739a:	4629      	mov	r1, r5
 800739c:	4658      	mov	r0, fp
 800739e:	f000 fba7 	bl	8007af0 <_Bfree>
 80073a2:	e7d0      	b.n	8007346 <_dtoa_r+0x65e>
 80073a4:	9704      	str	r7, [sp, #16]
 80073a6:	4633      	mov	r3, r6
 80073a8:	461e      	mov	r6, r3
 80073aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073ae:	2a39      	cmp	r2, #57	@ 0x39
 80073b0:	d107      	bne.n	80073c2 <_dtoa_r+0x6da>
 80073b2:	459a      	cmp	sl, r3
 80073b4:	d1f8      	bne.n	80073a8 <_dtoa_r+0x6c0>
 80073b6:	9a04      	ldr	r2, [sp, #16]
 80073b8:	3201      	adds	r2, #1
 80073ba:	9204      	str	r2, [sp, #16]
 80073bc:	2230      	movs	r2, #48	@ 0x30
 80073be:	f88a 2000 	strb.w	r2, [sl]
 80073c2:	781a      	ldrb	r2, [r3, #0]
 80073c4:	3201      	adds	r2, #1
 80073c6:	701a      	strb	r2, [r3, #0]
 80073c8:	e7bd      	b.n	8007346 <_dtoa_r+0x65e>
 80073ca:	4b7b      	ldr	r3, [pc, #492]	@ (80075b8 <_dtoa_r+0x8d0>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	f7f9 f913 	bl	80005f8 <__aeabi_dmul>
 80073d2:	2200      	movs	r2, #0
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	460d      	mov	r5, r1
 80073da:	f7f9 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80073de:	2800      	cmp	r0, #0
 80073e0:	f43f aebb 	beq.w	800715a <_dtoa_r+0x472>
 80073e4:	e6f0      	b.n	80071c8 <_dtoa_r+0x4e0>
 80073e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	f000 80db 	beq.w	80075a4 <_dtoa_r+0x8bc>
 80073ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073f0:	2a01      	cmp	r2, #1
 80073f2:	f300 80bf 	bgt.w	8007574 <_dtoa_r+0x88c>
 80073f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80073f8:	2a00      	cmp	r2, #0
 80073fa:	f000 80b7 	beq.w	800756c <_dtoa_r+0x884>
 80073fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007402:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007404:	4646      	mov	r6, r8
 8007406:	9a08      	ldr	r2, [sp, #32]
 8007408:	2101      	movs	r1, #1
 800740a:	441a      	add	r2, r3
 800740c:	4658      	mov	r0, fp
 800740e:	4498      	add	r8, r3
 8007410:	9208      	str	r2, [sp, #32]
 8007412:	f000 fc21 	bl	8007c58 <__i2b>
 8007416:	4605      	mov	r5, r0
 8007418:	b15e      	cbz	r6, 8007432 <_dtoa_r+0x74a>
 800741a:	9b08      	ldr	r3, [sp, #32]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dd08      	ble.n	8007432 <_dtoa_r+0x74a>
 8007420:	42b3      	cmp	r3, r6
 8007422:	9a08      	ldr	r2, [sp, #32]
 8007424:	bfa8      	it	ge
 8007426:	4633      	movge	r3, r6
 8007428:	eba8 0803 	sub.w	r8, r8, r3
 800742c:	1af6      	subs	r6, r6, r3
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	9308      	str	r3, [sp, #32]
 8007432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007434:	b1f3      	cbz	r3, 8007474 <_dtoa_r+0x78c>
 8007436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 80b7 	beq.w	80075ac <_dtoa_r+0x8c4>
 800743e:	b18c      	cbz	r4, 8007464 <_dtoa_r+0x77c>
 8007440:	4629      	mov	r1, r5
 8007442:	4622      	mov	r2, r4
 8007444:	4658      	mov	r0, fp
 8007446:	f000 fcc7 	bl	8007dd8 <__pow5mult>
 800744a:	464a      	mov	r2, r9
 800744c:	4601      	mov	r1, r0
 800744e:	4605      	mov	r5, r0
 8007450:	4658      	mov	r0, fp
 8007452:	f000 fc17 	bl	8007c84 <__multiply>
 8007456:	4649      	mov	r1, r9
 8007458:	9004      	str	r0, [sp, #16]
 800745a:	4658      	mov	r0, fp
 800745c:	f000 fb48 	bl	8007af0 <_Bfree>
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	4699      	mov	r9, r3
 8007464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007466:	1b1a      	subs	r2, r3, r4
 8007468:	d004      	beq.n	8007474 <_dtoa_r+0x78c>
 800746a:	4649      	mov	r1, r9
 800746c:	4658      	mov	r0, fp
 800746e:	f000 fcb3 	bl	8007dd8 <__pow5mult>
 8007472:	4681      	mov	r9, r0
 8007474:	2101      	movs	r1, #1
 8007476:	4658      	mov	r0, fp
 8007478:	f000 fbee 	bl	8007c58 <__i2b>
 800747c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800747e:	4604      	mov	r4, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 81cf 	beq.w	8007824 <_dtoa_r+0xb3c>
 8007486:	461a      	mov	r2, r3
 8007488:	4601      	mov	r1, r0
 800748a:	4658      	mov	r0, fp
 800748c:	f000 fca4 	bl	8007dd8 <__pow5mult>
 8007490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007492:	2b01      	cmp	r3, #1
 8007494:	4604      	mov	r4, r0
 8007496:	f300 8095 	bgt.w	80075c4 <_dtoa_r+0x8dc>
 800749a:	9b02      	ldr	r3, [sp, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 8087 	bne.w	80075b0 <_dtoa_r+0x8c8>
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f040 8089 	bne.w	80075c0 <_dtoa_r+0x8d8>
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074b4:	0d1b      	lsrs	r3, r3, #20
 80074b6:	051b      	lsls	r3, r3, #20
 80074b8:	b12b      	cbz	r3, 80074c6 <_dtoa_r+0x7de>
 80074ba:	9b08      	ldr	r3, [sp, #32]
 80074bc:	3301      	adds	r3, #1
 80074be:	9308      	str	r3, [sp, #32]
 80074c0:	f108 0801 	add.w	r8, r8, #1
 80074c4:	2301      	movs	r3, #1
 80074c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 81b0 	beq.w	8007830 <_dtoa_r+0xb48>
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074d6:	6918      	ldr	r0, [r3, #16]
 80074d8:	f000 fb72 	bl	8007bc0 <__hi0bits>
 80074dc:	f1c0 0020 	rsb	r0, r0, #32
 80074e0:	9b08      	ldr	r3, [sp, #32]
 80074e2:	4418      	add	r0, r3
 80074e4:	f010 001f 	ands.w	r0, r0, #31
 80074e8:	d077      	beq.n	80075da <_dtoa_r+0x8f2>
 80074ea:	f1c0 0320 	rsb	r3, r0, #32
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	dd6b      	ble.n	80075ca <_dtoa_r+0x8e2>
 80074f2:	9b08      	ldr	r3, [sp, #32]
 80074f4:	f1c0 001c 	rsb	r0, r0, #28
 80074f8:	4403      	add	r3, r0
 80074fa:	4480      	add	r8, r0
 80074fc:	4406      	add	r6, r0
 80074fe:	9308      	str	r3, [sp, #32]
 8007500:	f1b8 0f00 	cmp.w	r8, #0
 8007504:	dd05      	ble.n	8007512 <_dtoa_r+0x82a>
 8007506:	4649      	mov	r1, r9
 8007508:	4642      	mov	r2, r8
 800750a:	4658      	mov	r0, fp
 800750c:	f000 fcbe 	bl	8007e8c <__lshift>
 8007510:	4681      	mov	r9, r0
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd05      	ble.n	8007524 <_dtoa_r+0x83c>
 8007518:	4621      	mov	r1, r4
 800751a:	461a      	mov	r2, r3
 800751c:	4658      	mov	r0, fp
 800751e:	f000 fcb5 	bl	8007e8c <__lshift>
 8007522:	4604      	mov	r4, r0
 8007524:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007526:	2b00      	cmp	r3, #0
 8007528:	d059      	beq.n	80075de <_dtoa_r+0x8f6>
 800752a:	4621      	mov	r1, r4
 800752c:	4648      	mov	r0, r9
 800752e:	f000 fd19 	bl	8007f64 <__mcmp>
 8007532:	2800      	cmp	r0, #0
 8007534:	da53      	bge.n	80075de <_dtoa_r+0x8f6>
 8007536:	1e7b      	subs	r3, r7, #1
 8007538:	9304      	str	r3, [sp, #16]
 800753a:	4649      	mov	r1, r9
 800753c:	2300      	movs	r3, #0
 800753e:	220a      	movs	r2, #10
 8007540:	4658      	mov	r0, fp
 8007542:	f000 faf7 	bl	8007b34 <__multadd>
 8007546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007548:	4681      	mov	r9, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8172 	beq.w	8007834 <_dtoa_r+0xb4c>
 8007550:	2300      	movs	r3, #0
 8007552:	4629      	mov	r1, r5
 8007554:	220a      	movs	r2, #10
 8007556:	4658      	mov	r0, fp
 8007558:	f000 faec 	bl	8007b34 <__multadd>
 800755c:	9b00      	ldr	r3, [sp, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	4605      	mov	r5, r0
 8007562:	dc67      	bgt.n	8007634 <_dtoa_r+0x94c>
 8007564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007566:	2b02      	cmp	r3, #2
 8007568:	dc41      	bgt.n	80075ee <_dtoa_r+0x906>
 800756a:	e063      	b.n	8007634 <_dtoa_r+0x94c>
 800756c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800756e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007572:	e746      	b.n	8007402 <_dtoa_r+0x71a>
 8007574:	9b07      	ldr	r3, [sp, #28]
 8007576:	1e5c      	subs	r4, r3, #1
 8007578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800757a:	42a3      	cmp	r3, r4
 800757c:	bfbf      	itttt	lt
 800757e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007580:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007582:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007584:	1ae3      	sublt	r3, r4, r3
 8007586:	bfb4      	ite	lt
 8007588:	18d2      	addlt	r2, r2, r3
 800758a:	1b1c      	subge	r4, r3, r4
 800758c:	9b07      	ldr	r3, [sp, #28]
 800758e:	bfbc      	itt	lt
 8007590:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007592:	2400      	movlt	r4, #0
 8007594:	2b00      	cmp	r3, #0
 8007596:	bfb5      	itete	lt
 8007598:	eba8 0603 	sublt.w	r6, r8, r3
 800759c:	9b07      	ldrge	r3, [sp, #28]
 800759e:	2300      	movlt	r3, #0
 80075a0:	4646      	movge	r6, r8
 80075a2:	e730      	b.n	8007406 <_dtoa_r+0x71e>
 80075a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80075a8:	4646      	mov	r6, r8
 80075aa:	e735      	b.n	8007418 <_dtoa_r+0x730>
 80075ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075ae:	e75c      	b.n	800746a <_dtoa_r+0x782>
 80075b0:	2300      	movs	r3, #0
 80075b2:	e788      	b.n	80074c6 <_dtoa_r+0x7de>
 80075b4:	3fe00000 	.word	0x3fe00000
 80075b8:	40240000 	.word	0x40240000
 80075bc:	40140000 	.word	0x40140000
 80075c0:	9b02      	ldr	r3, [sp, #8]
 80075c2:	e780      	b.n	80074c6 <_dtoa_r+0x7de>
 80075c4:	2300      	movs	r3, #0
 80075c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075c8:	e782      	b.n	80074d0 <_dtoa_r+0x7e8>
 80075ca:	d099      	beq.n	8007500 <_dtoa_r+0x818>
 80075cc:	9a08      	ldr	r2, [sp, #32]
 80075ce:	331c      	adds	r3, #28
 80075d0:	441a      	add	r2, r3
 80075d2:	4498      	add	r8, r3
 80075d4:	441e      	add	r6, r3
 80075d6:	9208      	str	r2, [sp, #32]
 80075d8:	e792      	b.n	8007500 <_dtoa_r+0x818>
 80075da:	4603      	mov	r3, r0
 80075dc:	e7f6      	b.n	80075cc <_dtoa_r+0x8e4>
 80075de:	9b07      	ldr	r3, [sp, #28]
 80075e0:	9704      	str	r7, [sp, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dc20      	bgt.n	8007628 <_dtoa_r+0x940>
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	dd1e      	ble.n	800762c <_dtoa_r+0x944>
 80075ee:	9b00      	ldr	r3, [sp, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f47f aec0 	bne.w	8007376 <_dtoa_r+0x68e>
 80075f6:	4621      	mov	r1, r4
 80075f8:	2205      	movs	r2, #5
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 fa9a 	bl	8007b34 <__multadd>
 8007600:	4601      	mov	r1, r0
 8007602:	4604      	mov	r4, r0
 8007604:	4648      	mov	r0, r9
 8007606:	f000 fcad 	bl	8007f64 <__mcmp>
 800760a:	2800      	cmp	r0, #0
 800760c:	f77f aeb3 	ble.w	8007376 <_dtoa_r+0x68e>
 8007610:	4656      	mov	r6, sl
 8007612:	2331      	movs	r3, #49	@ 0x31
 8007614:	f806 3b01 	strb.w	r3, [r6], #1
 8007618:	9b04      	ldr	r3, [sp, #16]
 800761a:	3301      	adds	r3, #1
 800761c:	9304      	str	r3, [sp, #16]
 800761e:	e6ae      	b.n	800737e <_dtoa_r+0x696>
 8007620:	9c07      	ldr	r4, [sp, #28]
 8007622:	9704      	str	r7, [sp, #16]
 8007624:	4625      	mov	r5, r4
 8007626:	e7f3      	b.n	8007610 <_dtoa_r+0x928>
 8007628:	9b07      	ldr	r3, [sp, #28]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8104 	beq.w	800783c <_dtoa_r+0xb54>
 8007634:	2e00      	cmp	r6, #0
 8007636:	dd05      	ble.n	8007644 <_dtoa_r+0x95c>
 8007638:	4629      	mov	r1, r5
 800763a:	4632      	mov	r2, r6
 800763c:	4658      	mov	r0, fp
 800763e:	f000 fc25 	bl	8007e8c <__lshift>
 8007642:	4605      	mov	r5, r0
 8007644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	d05a      	beq.n	8007700 <_dtoa_r+0xa18>
 800764a:	6869      	ldr	r1, [r5, #4]
 800764c:	4658      	mov	r0, fp
 800764e:	f000 fa0f 	bl	8007a70 <_Balloc>
 8007652:	4606      	mov	r6, r0
 8007654:	b928      	cbnz	r0, 8007662 <_dtoa_r+0x97a>
 8007656:	4b84      	ldr	r3, [pc, #528]	@ (8007868 <_dtoa_r+0xb80>)
 8007658:	4602      	mov	r2, r0
 800765a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800765e:	f7ff bb5a 	b.w	8006d16 <_dtoa_r+0x2e>
 8007662:	692a      	ldr	r2, [r5, #16]
 8007664:	3202      	adds	r2, #2
 8007666:	0092      	lsls	r2, r2, #2
 8007668:	f105 010c 	add.w	r1, r5, #12
 800766c:	300c      	adds	r0, #12
 800766e:	f000 ffaf 	bl	80085d0 <memcpy>
 8007672:	2201      	movs	r2, #1
 8007674:	4631      	mov	r1, r6
 8007676:	4658      	mov	r0, fp
 8007678:	f000 fc08 	bl	8007e8c <__lshift>
 800767c:	f10a 0301 	add.w	r3, sl, #1
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	9b00      	ldr	r3, [sp, #0]
 8007684:	4453      	add	r3, sl
 8007686:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007688:	9b02      	ldr	r3, [sp, #8]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	462f      	mov	r7, r5
 8007690:	930a      	str	r3, [sp, #40]	@ 0x28
 8007692:	4605      	mov	r5, r0
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	4621      	mov	r1, r4
 8007698:	3b01      	subs	r3, #1
 800769a:	4648      	mov	r0, r9
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	f7ff fa9a 	bl	8006bd6 <quorem>
 80076a2:	4639      	mov	r1, r7
 80076a4:	9002      	str	r0, [sp, #8]
 80076a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076aa:	4648      	mov	r0, r9
 80076ac:	f000 fc5a 	bl	8007f64 <__mcmp>
 80076b0:	462a      	mov	r2, r5
 80076b2:	9008      	str	r0, [sp, #32]
 80076b4:	4621      	mov	r1, r4
 80076b6:	4658      	mov	r0, fp
 80076b8:	f000 fc70 	bl	8007f9c <__mdiff>
 80076bc:	68c2      	ldr	r2, [r0, #12]
 80076be:	4606      	mov	r6, r0
 80076c0:	bb02      	cbnz	r2, 8007704 <_dtoa_r+0xa1c>
 80076c2:	4601      	mov	r1, r0
 80076c4:	4648      	mov	r0, r9
 80076c6:	f000 fc4d 	bl	8007f64 <__mcmp>
 80076ca:	4602      	mov	r2, r0
 80076cc:	4631      	mov	r1, r6
 80076ce:	4658      	mov	r0, fp
 80076d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80076d2:	f000 fa0d 	bl	8007af0 <_Bfree>
 80076d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076da:	9e07      	ldr	r6, [sp, #28]
 80076dc:	ea43 0102 	orr.w	r1, r3, r2
 80076e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076e2:	4319      	orrs	r1, r3
 80076e4:	d110      	bne.n	8007708 <_dtoa_r+0xa20>
 80076e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076ea:	d029      	beq.n	8007740 <_dtoa_r+0xa58>
 80076ec:	9b08      	ldr	r3, [sp, #32]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	dd02      	ble.n	80076f8 <_dtoa_r+0xa10>
 80076f2:	9b02      	ldr	r3, [sp, #8]
 80076f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076f8:	9b00      	ldr	r3, [sp, #0]
 80076fa:	f883 8000 	strb.w	r8, [r3]
 80076fe:	e63f      	b.n	8007380 <_dtoa_r+0x698>
 8007700:	4628      	mov	r0, r5
 8007702:	e7bb      	b.n	800767c <_dtoa_r+0x994>
 8007704:	2201      	movs	r2, #1
 8007706:	e7e1      	b.n	80076cc <_dtoa_r+0x9e4>
 8007708:	9b08      	ldr	r3, [sp, #32]
 800770a:	2b00      	cmp	r3, #0
 800770c:	db04      	blt.n	8007718 <_dtoa_r+0xa30>
 800770e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007710:	430b      	orrs	r3, r1
 8007712:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007714:	430b      	orrs	r3, r1
 8007716:	d120      	bne.n	800775a <_dtoa_r+0xa72>
 8007718:	2a00      	cmp	r2, #0
 800771a:	dded      	ble.n	80076f8 <_dtoa_r+0xa10>
 800771c:	4649      	mov	r1, r9
 800771e:	2201      	movs	r2, #1
 8007720:	4658      	mov	r0, fp
 8007722:	f000 fbb3 	bl	8007e8c <__lshift>
 8007726:	4621      	mov	r1, r4
 8007728:	4681      	mov	r9, r0
 800772a:	f000 fc1b 	bl	8007f64 <__mcmp>
 800772e:	2800      	cmp	r0, #0
 8007730:	dc03      	bgt.n	800773a <_dtoa_r+0xa52>
 8007732:	d1e1      	bne.n	80076f8 <_dtoa_r+0xa10>
 8007734:	f018 0f01 	tst.w	r8, #1
 8007738:	d0de      	beq.n	80076f8 <_dtoa_r+0xa10>
 800773a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800773e:	d1d8      	bne.n	80076f2 <_dtoa_r+0xa0a>
 8007740:	9a00      	ldr	r2, [sp, #0]
 8007742:	2339      	movs	r3, #57	@ 0x39
 8007744:	7013      	strb	r3, [r2, #0]
 8007746:	4633      	mov	r3, r6
 8007748:	461e      	mov	r6, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007750:	2a39      	cmp	r2, #57	@ 0x39
 8007752:	d052      	beq.n	80077fa <_dtoa_r+0xb12>
 8007754:	3201      	adds	r2, #1
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	e612      	b.n	8007380 <_dtoa_r+0x698>
 800775a:	2a00      	cmp	r2, #0
 800775c:	dd07      	ble.n	800776e <_dtoa_r+0xa86>
 800775e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007762:	d0ed      	beq.n	8007740 <_dtoa_r+0xa58>
 8007764:	9a00      	ldr	r2, [sp, #0]
 8007766:	f108 0301 	add.w	r3, r8, #1
 800776a:	7013      	strb	r3, [r2, #0]
 800776c:	e608      	b.n	8007380 <_dtoa_r+0x698>
 800776e:	9b07      	ldr	r3, [sp, #28]
 8007770:	9a07      	ldr	r2, [sp, #28]
 8007772:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007778:	4293      	cmp	r3, r2
 800777a:	d028      	beq.n	80077ce <_dtoa_r+0xae6>
 800777c:	4649      	mov	r1, r9
 800777e:	2300      	movs	r3, #0
 8007780:	220a      	movs	r2, #10
 8007782:	4658      	mov	r0, fp
 8007784:	f000 f9d6 	bl	8007b34 <__multadd>
 8007788:	42af      	cmp	r7, r5
 800778a:	4681      	mov	r9, r0
 800778c:	f04f 0300 	mov.w	r3, #0
 8007790:	f04f 020a 	mov.w	r2, #10
 8007794:	4639      	mov	r1, r7
 8007796:	4658      	mov	r0, fp
 8007798:	d107      	bne.n	80077aa <_dtoa_r+0xac2>
 800779a:	f000 f9cb 	bl	8007b34 <__multadd>
 800779e:	4607      	mov	r7, r0
 80077a0:	4605      	mov	r5, r0
 80077a2:	9b07      	ldr	r3, [sp, #28]
 80077a4:	3301      	adds	r3, #1
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	e774      	b.n	8007694 <_dtoa_r+0x9ac>
 80077aa:	f000 f9c3 	bl	8007b34 <__multadd>
 80077ae:	4629      	mov	r1, r5
 80077b0:	4607      	mov	r7, r0
 80077b2:	2300      	movs	r3, #0
 80077b4:	220a      	movs	r2, #10
 80077b6:	4658      	mov	r0, fp
 80077b8:	f000 f9bc 	bl	8007b34 <__multadd>
 80077bc:	4605      	mov	r5, r0
 80077be:	e7f0      	b.n	80077a2 <_dtoa_r+0xaba>
 80077c0:	9b00      	ldr	r3, [sp, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfcc      	ite	gt
 80077c6:	461e      	movgt	r6, r3
 80077c8:	2601      	movle	r6, #1
 80077ca:	4456      	add	r6, sl
 80077cc:	2700      	movs	r7, #0
 80077ce:	4649      	mov	r1, r9
 80077d0:	2201      	movs	r2, #1
 80077d2:	4658      	mov	r0, fp
 80077d4:	f000 fb5a 	bl	8007e8c <__lshift>
 80077d8:	4621      	mov	r1, r4
 80077da:	4681      	mov	r9, r0
 80077dc:	f000 fbc2 	bl	8007f64 <__mcmp>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	dcb0      	bgt.n	8007746 <_dtoa_r+0xa5e>
 80077e4:	d102      	bne.n	80077ec <_dtoa_r+0xb04>
 80077e6:	f018 0f01 	tst.w	r8, #1
 80077ea:	d1ac      	bne.n	8007746 <_dtoa_r+0xa5e>
 80077ec:	4633      	mov	r3, r6
 80077ee:	461e      	mov	r6, r3
 80077f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077f4:	2a30      	cmp	r2, #48	@ 0x30
 80077f6:	d0fa      	beq.n	80077ee <_dtoa_r+0xb06>
 80077f8:	e5c2      	b.n	8007380 <_dtoa_r+0x698>
 80077fa:	459a      	cmp	sl, r3
 80077fc:	d1a4      	bne.n	8007748 <_dtoa_r+0xa60>
 80077fe:	9b04      	ldr	r3, [sp, #16]
 8007800:	3301      	adds	r3, #1
 8007802:	9304      	str	r3, [sp, #16]
 8007804:	2331      	movs	r3, #49	@ 0x31
 8007806:	f88a 3000 	strb.w	r3, [sl]
 800780a:	e5b9      	b.n	8007380 <_dtoa_r+0x698>
 800780c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800780e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800786c <_dtoa_r+0xb84>
 8007812:	b11b      	cbz	r3, 800781c <_dtoa_r+0xb34>
 8007814:	f10a 0308 	add.w	r3, sl, #8
 8007818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	4650      	mov	r0, sl
 800781e:	b019      	add	sp, #100	@ 0x64
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007826:	2b01      	cmp	r3, #1
 8007828:	f77f ae37 	ble.w	800749a <_dtoa_r+0x7b2>
 800782c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800782e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007830:	2001      	movs	r0, #1
 8007832:	e655      	b.n	80074e0 <_dtoa_r+0x7f8>
 8007834:	9b00      	ldr	r3, [sp, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	f77f aed6 	ble.w	80075e8 <_dtoa_r+0x900>
 800783c:	4656      	mov	r6, sl
 800783e:	4621      	mov	r1, r4
 8007840:	4648      	mov	r0, r9
 8007842:	f7ff f9c8 	bl	8006bd6 <quorem>
 8007846:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800784a:	f806 8b01 	strb.w	r8, [r6], #1
 800784e:	9b00      	ldr	r3, [sp, #0]
 8007850:	eba6 020a 	sub.w	r2, r6, sl
 8007854:	4293      	cmp	r3, r2
 8007856:	ddb3      	ble.n	80077c0 <_dtoa_r+0xad8>
 8007858:	4649      	mov	r1, r9
 800785a:	2300      	movs	r3, #0
 800785c:	220a      	movs	r2, #10
 800785e:	4658      	mov	r0, fp
 8007860:	f000 f968 	bl	8007b34 <__multadd>
 8007864:	4681      	mov	r9, r0
 8007866:	e7ea      	b.n	800783e <_dtoa_r+0xb56>
 8007868:	08008d6c 	.word	0x08008d6c
 800786c:	08008cf0 	.word	0x08008cf0

08007870 <_free_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4605      	mov	r5, r0
 8007874:	2900      	cmp	r1, #0
 8007876:	d041      	beq.n	80078fc <_free_r+0x8c>
 8007878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800787c:	1f0c      	subs	r4, r1, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	bfb8      	it	lt
 8007882:	18e4      	addlt	r4, r4, r3
 8007884:	f000 f8e8 	bl	8007a58 <__malloc_lock>
 8007888:	4a1d      	ldr	r2, [pc, #116]	@ (8007900 <_free_r+0x90>)
 800788a:	6813      	ldr	r3, [r2, #0]
 800788c:	b933      	cbnz	r3, 800789c <_free_r+0x2c>
 800788e:	6063      	str	r3, [r4, #4]
 8007890:	6014      	str	r4, [r2, #0]
 8007892:	4628      	mov	r0, r5
 8007894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007898:	f000 b8e4 	b.w	8007a64 <__malloc_unlock>
 800789c:	42a3      	cmp	r3, r4
 800789e:	d908      	bls.n	80078b2 <_free_r+0x42>
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	1821      	adds	r1, r4, r0
 80078a4:	428b      	cmp	r3, r1
 80078a6:	bf01      	itttt	eq
 80078a8:	6819      	ldreq	r1, [r3, #0]
 80078aa:	685b      	ldreq	r3, [r3, #4]
 80078ac:	1809      	addeq	r1, r1, r0
 80078ae:	6021      	streq	r1, [r4, #0]
 80078b0:	e7ed      	b.n	800788e <_free_r+0x1e>
 80078b2:	461a      	mov	r2, r3
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	b10b      	cbz	r3, 80078bc <_free_r+0x4c>
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	d9fa      	bls.n	80078b2 <_free_r+0x42>
 80078bc:	6811      	ldr	r1, [r2, #0]
 80078be:	1850      	adds	r0, r2, r1
 80078c0:	42a0      	cmp	r0, r4
 80078c2:	d10b      	bne.n	80078dc <_free_r+0x6c>
 80078c4:	6820      	ldr	r0, [r4, #0]
 80078c6:	4401      	add	r1, r0
 80078c8:	1850      	adds	r0, r2, r1
 80078ca:	4283      	cmp	r3, r0
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	d1e0      	bne.n	8007892 <_free_r+0x22>
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	6053      	str	r3, [r2, #4]
 80078d6:	4408      	add	r0, r1
 80078d8:	6010      	str	r0, [r2, #0]
 80078da:	e7da      	b.n	8007892 <_free_r+0x22>
 80078dc:	d902      	bls.n	80078e4 <_free_r+0x74>
 80078de:	230c      	movs	r3, #12
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	e7d6      	b.n	8007892 <_free_r+0x22>
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	1821      	adds	r1, r4, r0
 80078e8:	428b      	cmp	r3, r1
 80078ea:	bf04      	itt	eq
 80078ec:	6819      	ldreq	r1, [r3, #0]
 80078ee:	685b      	ldreq	r3, [r3, #4]
 80078f0:	6063      	str	r3, [r4, #4]
 80078f2:	bf04      	itt	eq
 80078f4:	1809      	addeq	r1, r1, r0
 80078f6:	6021      	streq	r1, [r4, #0]
 80078f8:	6054      	str	r4, [r2, #4]
 80078fa:	e7ca      	b.n	8007892 <_free_r+0x22>
 80078fc:	bd38      	pop	{r3, r4, r5, pc}
 80078fe:	bf00      	nop
 8007900:	200003e4 	.word	0x200003e4

08007904 <malloc>:
 8007904:	4b02      	ldr	r3, [pc, #8]	@ (8007910 <malloc+0xc>)
 8007906:	4601      	mov	r1, r0
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	f000 b825 	b.w	8007958 <_malloc_r>
 800790e:	bf00      	nop
 8007910:	20000018 	.word	0x20000018

08007914 <sbrk_aligned>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	4e0f      	ldr	r6, [pc, #60]	@ (8007954 <sbrk_aligned+0x40>)
 8007918:	460c      	mov	r4, r1
 800791a:	6831      	ldr	r1, [r6, #0]
 800791c:	4605      	mov	r5, r0
 800791e:	b911      	cbnz	r1, 8007926 <sbrk_aligned+0x12>
 8007920:	f000 fe46 	bl	80085b0 <_sbrk_r>
 8007924:	6030      	str	r0, [r6, #0]
 8007926:	4621      	mov	r1, r4
 8007928:	4628      	mov	r0, r5
 800792a:	f000 fe41 	bl	80085b0 <_sbrk_r>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	d103      	bne.n	800793a <sbrk_aligned+0x26>
 8007932:	f04f 34ff 	mov.w	r4, #4294967295
 8007936:	4620      	mov	r0, r4
 8007938:	bd70      	pop	{r4, r5, r6, pc}
 800793a:	1cc4      	adds	r4, r0, #3
 800793c:	f024 0403 	bic.w	r4, r4, #3
 8007940:	42a0      	cmp	r0, r4
 8007942:	d0f8      	beq.n	8007936 <sbrk_aligned+0x22>
 8007944:	1a21      	subs	r1, r4, r0
 8007946:	4628      	mov	r0, r5
 8007948:	f000 fe32 	bl	80085b0 <_sbrk_r>
 800794c:	3001      	adds	r0, #1
 800794e:	d1f2      	bne.n	8007936 <sbrk_aligned+0x22>
 8007950:	e7ef      	b.n	8007932 <sbrk_aligned+0x1e>
 8007952:	bf00      	nop
 8007954:	200003e0 	.word	0x200003e0

08007958 <_malloc_r>:
 8007958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800795c:	1ccd      	adds	r5, r1, #3
 800795e:	f025 0503 	bic.w	r5, r5, #3
 8007962:	3508      	adds	r5, #8
 8007964:	2d0c      	cmp	r5, #12
 8007966:	bf38      	it	cc
 8007968:	250c      	movcc	r5, #12
 800796a:	2d00      	cmp	r5, #0
 800796c:	4606      	mov	r6, r0
 800796e:	db01      	blt.n	8007974 <_malloc_r+0x1c>
 8007970:	42a9      	cmp	r1, r5
 8007972:	d904      	bls.n	800797e <_malloc_r+0x26>
 8007974:	230c      	movs	r3, #12
 8007976:	6033      	str	r3, [r6, #0]
 8007978:	2000      	movs	r0, #0
 800797a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a54 <_malloc_r+0xfc>
 8007982:	f000 f869 	bl	8007a58 <__malloc_lock>
 8007986:	f8d8 3000 	ldr.w	r3, [r8]
 800798a:	461c      	mov	r4, r3
 800798c:	bb44      	cbnz	r4, 80079e0 <_malloc_r+0x88>
 800798e:	4629      	mov	r1, r5
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff ffbf 	bl	8007914 <sbrk_aligned>
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	4604      	mov	r4, r0
 800799a:	d158      	bne.n	8007a4e <_malloc_r+0xf6>
 800799c:	f8d8 4000 	ldr.w	r4, [r8]
 80079a0:	4627      	mov	r7, r4
 80079a2:	2f00      	cmp	r7, #0
 80079a4:	d143      	bne.n	8007a2e <_malloc_r+0xd6>
 80079a6:	2c00      	cmp	r4, #0
 80079a8:	d04b      	beq.n	8007a42 <_malloc_r+0xea>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	4639      	mov	r1, r7
 80079ae:	4630      	mov	r0, r6
 80079b0:	eb04 0903 	add.w	r9, r4, r3
 80079b4:	f000 fdfc 	bl	80085b0 <_sbrk_r>
 80079b8:	4581      	cmp	r9, r0
 80079ba:	d142      	bne.n	8007a42 <_malloc_r+0xea>
 80079bc:	6821      	ldr	r1, [r4, #0]
 80079be:	1a6d      	subs	r5, r5, r1
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ffa6 	bl	8007914 <sbrk_aligned>
 80079c8:	3001      	adds	r0, #1
 80079ca:	d03a      	beq.n	8007a42 <_malloc_r+0xea>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	442b      	add	r3, r5
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	f8d8 3000 	ldr.w	r3, [r8]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	bb62      	cbnz	r2, 8007a34 <_malloc_r+0xdc>
 80079da:	f8c8 7000 	str.w	r7, [r8]
 80079de:	e00f      	b.n	8007a00 <_malloc_r+0xa8>
 80079e0:	6822      	ldr	r2, [r4, #0]
 80079e2:	1b52      	subs	r2, r2, r5
 80079e4:	d420      	bmi.n	8007a28 <_malloc_r+0xd0>
 80079e6:	2a0b      	cmp	r2, #11
 80079e8:	d917      	bls.n	8007a1a <_malloc_r+0xc2>
 80079ea:	1961      	adds	r1, r4, r5
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	6025      	str	r5, [r4, #0]
 80079f0:	bf18      	it	ne
 80079f2:	6059      	strne	r1, [r3, #4]
 80079f4:	6863      	ldr	r3, [r4, #4]
 80079f6:	bf08      	it	eq
 80079f8:	f8c8 1000 	streq.w	r1, [r8]
 80079fc:	5162      	str	r2, [r4, r5]
 80079fe:	604b      	str	r3, [r1, #4]
 8007a00:	4630      	mov	r0, r6
 8007a02:	f000 f82f 	bl	8007a64 <__malloc_unlock>
 8007a06:	f104 000b 	add.w	r0, r4, #11
 8007a0a:	1d23      	adds	r3, r4, #4
 8007a0c:	f020 0007 	bic.w	r0, r0, #7
 8007a10:	1ac2      	subs	r2, r0, r3
 8007a12:	bf1c      	itt	ne
 8007a14:	1a1b      	subne	r3, r3, r0
 8007a16:	50a3      	strne	r3, [r4, r2]
 8007a18:	e7af      	b.n	800797a <_malloc_r+0x22>
 8007a1a:	6862      	ldr	r2, [r4, #4]
 8007a1c:	42a3      	cmp	r3, r4
 8007a1e:	bf0c      	ite	eq
 8007a20:	f8c8 2000 	streq.w	r2, [r8]
 8007a24:	605a      	strne	r2, [r3, #4]
 8007a26:	e7eb      	b.n	8007a00 <_malloc_r+0xa8>
 8007a28:	4623      	mov	r3, r4
 8007a2a:	6864      	ldr	r4, [r4, #4]
 8007a2c:	e7ae      	b.n	800798c <_malloc_r+0x34>
 8007a2e:	463c      	mov	r4, r7
 8007a30:	687f      	ldr	r7, [r7, #4]
 8007a32:	e7b6      	b.n	80079a2 <_malloc_r+0x4a>
 8007a34:	461a      	mov	r2, r3
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	d1fb      	bne.n	8007a34 <_malloc_r+0xdc>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6053      	str	r3, [r2, #4]
 8007a40:	e7de      	b.n	8007a00 <_malloc_r+0xa8>
 8007a42:	230c      	movs	r3, #12
 8007a44:	6033      	str	r3, [r6, #0]
 8007a46:	4630      	mov	r0, r6
 8007a48:	f000 f80c 	bl	8007a64 <__malloc_unlock>
 8007a4c:	e794      	b.n	8007978 <_malloc_r+0x20>
 8007a4e:	6005      	str	r5, [r0, #0]
 8007a50:	e7d6      	b.n	8007a00 <_malloc_r+0xa8>
 8007a52:	bf00      	nop
 8007a54:	200003e4 	.word	0x200003e4

08007a58 <__malloc_lock>:
 8007a58:	4801      	ldr	r0, [pc, #4]	@ (8007a60 <__malloc_lock+0x8>)
 8007a5a:	f7ff b8ba 	b.w	8006bd2 <__retarget_lock_acquire_recursive>
 8007a5e:	bf00      	nop
 8007a60:	200003dc 	.word	0x200003dc

08007a64 <__malloc_unlock>:
 8007a64:	4801      	ldr	r0, [pc, #4]	@ (8007a6c <__malloc_unlock+0x8>)
 8007a66:	f7ff b8b5 	b.w	8006bd4 <__retarget_lock_release_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	200003dc 	.word	0x200003dc

08007a70 <_Balloc>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	69c6      	ldr	r6, [r0, #28]
 8007a74:	4604      	mov	r4, r0
 8007a76:	460d      	mov	r5, r1
 8007a78:	b976      	cbnz	r6, 8007a98 <_Balloc+0x28>
 8007a7a:	2010      	movs	r0, #16
 8007a7c:	f7ff ff42 	bl	8007904 <malloc>
 8007a80:	4602      	mov	r2, r0
 8007a82:	61e0      	str	r0, [r4, #28]
 8007a84:	b920      	cbnz	r0, 8007a90 <_Balloc+0x20>
 8007a86:	4b18      	ldr	r3, [pc, #96]	@ (8007ae8 <_Balloc+0x78>)
 8007a88:	4818      	ldr	r0, [pc, #96]	@ (8007aec <_Balloc+0x7c>)
 8007a8a:	216b      	movs	r1, #107	@ 0x6b
 8007a8c:	f000 fdae 	bl	80085ec <__assert_func>
 8007a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a94:	6006      	str	r6, [r0, #0]
 8007a96:	60c6      	str	r6, [r0, #12]
 8007a98:	69e6      	ldr	r6, [r4, #28]
 8007a9a:	68f3      	ldr	r3, [r6, #12]
 8007a9c:	b183      	cbz	r3, 8007ac0 <_Balloc+0x50>
 8007a9e:	69e3      	ldr	r3, [r4, #28]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007aa6:	b9b8      	cbnz	r0, 8007ad8 <_Balloc+0x68>
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	fa01 f605 	lsl.w	r6, r1, r5
 8007aae:	1d72      	adds	r2, r6, #5
 8007ab0:	0092      	lsls	r2, r2, #2
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 fdb8 	bl	8008628 <_calloc_r>
 8007ab8:	b160      	cbz	r0, 8007ad4 <_Balloc+0x64>
 8007aba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007abe:	e00e      	b.n	8007ade <_Balloc+0x6e>
 8007ac0:	2221      	movs	r2, #33	@ 0x21
 8007ac2:	2104      	movs	r1, #4
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 fdaf 	bl	8008628 <_calloc_r>
 8007aca:	69e3      	ldr	r3, [r4, #28]
 8007acc:	60f0      	str	r0, [r6, #12]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e4      	bne.n	8007a9e <_Balloc+0x2e>
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	6802      	ldr	r2, [r0, #0]
 8007ada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ae4:	e7f7      	b.n	8007ad6 <_Balloc+0x66>
 8007ae6:	bf00      	nop
 8007ae8:	08008cfd 	.word	0x08008cfd
 8007aec:	08008d7d 	.word	0x08008d7d

08007af0 <_Bfree>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	69c6      	ldr	r6, [r0, #28]
 8007af4:	4605      	mov	r5, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	b976      	cbnz	r6, 8007b18 <_Bfree+0x28>
 8007afa:	2010      	movs	r0, #16
 8007afc:	f7ff ff02 	bl	8007904 <malloc>
 8007b00:	4602      	mov	r2, r0
 8007b02:	61e8      	str	r0, [r5, #28]
 8007b04:	b920      	cbnz	r0, 8007b10 <_Bfree+0x20>
 8007b06:	4b09      	ldr	r3, [pc, #36]	@ (8007b2c <_Bfree+0x3c>)
 8007b08:	4809      	ldr	r0, [pc, #36]	@ (8007b30 <_Bfree+0x40>)
 8007b0a:	218f      	movs	r1, #143	@ 0x8f
 8007b0c:	f000 fd6e 	bl	80085ec <__assert_func>
 8007b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b14:	6006      	str	r6, [r0, #0]
 8007b16:	60c6      	str	r6, [r0, #12]
 8007b18:	b13c      	cbz	r4, 8007b2a <_Bfree+0x3a>
 8007b1a:	69eb      	ldr	r3, [r5, #28]
 8007b1c:	6862      	ldr	r2, [r4, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b24:	6021      	str	r1, [r4, #0]
 8007b26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	08008cfd 	.word	0x08008cfd
 8007b30:	08008d7d 	.word	0x08008d7d

08007b34 <__multadd>:
 8007b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b38:	690d      	ldr	r5, [r1, #16]
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	461e      	mov	r6, r3
 8007b40:	f101 0c14 	add.w	ip, r1, #20
 8007b44:	2000      	movs	r0, #0
 8007b46:	f8dc 3000 	ldr.w	r3, [ip]
 8007b4a:	b299      	uxth	r1, r3
 8007b4c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b50:	0c1e      	lsrs	r6, r3, #16
 8007b52:	0c0b      	lsrs	r3, r1, #16
 8007b54:	fb02 3306 	mla	r3, r2, r6, r3
 8007b58:	b289      	uxth	r1, r1
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b60:	4285      	cmp	r5, r0
 8007b62:	f84c 1b04 	str.w	r1, [ip], #4
 8007b66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b6a:	dcec      	bgt.n	8007b46 <__multadd+0x12>
 8007b6c:	b30e      	cbz	r6, 8007bb2 <__multadd+0x7e>
 8007b6e:	68a3      	ldr	r3, [r4, #8]
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dc19      	bgt.n	8007ba8 <__multadd+0x74>
 8007b74:	6861      	ldr	r1, [r4, #4]
 8007b76:	4638      	mov	r0, r7
 8007b78:	3101      	adds	r1, #1
 8007b7a:	f7ff ff79 	bl	8007a70 <_Balloc>
 8007b7e:	4680      	mov	r8, r0
 8007b80:	b928      	cbnz	r0, 8007b8e <__multadd+0x5a>
 8007b82:	4602      	mov	r2, r0
 8007b84:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb8 <__multadd+0x84>)
 8007b86:	480d      	ldr	r0, [pc, #52]	@ (8007bbc <__multadd+0x88>)
 8007b88:	21ba      	movs	r1, #186	@ 0xba
 8007b8a:	f000 fd2f 	bl	80085ec <__assert_func>
 8007b8e:	6922      	ldr	r2, [r4, #16]
 8007b90:	3202      	adds	r2, #2
 8007b92:	f104 010c 	add.w	r1, r4, #12
 8007b96:	0092      	lsls	r2, r2, #2
 8007b98:	300c      	adds	r0, #12
 8007b9a:	f000 fd19 	bl	80085d0 <memcpy>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4638      	mov	r0, r7
 8007ba2:	f7ff ffa5 	bl	8007af0 <_Bfree>
 8007ba6:	4644      	mov	r4, r8
 8007ba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bac:	3501      	adds	r5, #1
 8007bae:	615e      	str	r6, [r3, #20]
 8007bb0:	6125      	str	r5, [r4, #16]
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb8:	08008d6c 	.word	0x08008d6c
 8007bbc:	08008d7d 	.word	0x08008d7d

08007bc0 <__hi0bits>:
 8007bc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	bf36      	itet	cc
 8007bc8:	0403      	lslcc	r3, r0, #16
 8007bca:	2000      	movcs	r0, #0
 8007bcc:	2010      	movcc	r0, #16
 8007bce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bd2:	bf3c      	itt	cc
 8007bd4:	021b      	lslcc	r3, r3, #8
 8007bd6:	3008      	addcc	r0, #8
 8007bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bdc:	bf3c      	itt	cc
 8007bde:	011b      	lslcc	r3, r3, #4
 8007be0:	3004      	addcc	r0, #4
 8007be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007be6:	bf3c      	itt	cc
 8007be8:	009b      	lslcc	r3, r3, #2
 8007bea:	3002      	addcc	r0, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db05      	blt.n	8007bfc <__hi0bits+0x3c>
 8007bf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007bf4:	f100 0001 	add.w	r0, r0, #1
 8007bf8:	bf08      	it	eq
 8007bfa:	2020      	moveq	r0, #32
 8007bfc:	4770      	bx	lr

08007bfe <__lo0bits>:
 8007bfe:	6803      	ldr	r3, [r0, #0]
 8007c00:	4602      	mov	r2, r0
 8007c02:	f013 0007 	ands.w	r0, r3, #7
 8007c06:	d00b      	beq.n	8007c20 <__lo0bits+0x22>
 8007c08:	07d9      	lsls	r1, r3, #31
 8007c0a:	d421      	bmi.n	8007c50 <__lo0bits+0x52>
 8007c0c:	0798      	lsls	r0, r3, #30
 8007c0e:	bf49      	itett	mi
 8007c10:	085b      	lsrmi	r3, r3, #1
 8007c12:	089b      	lsrpl	r3, r3, #2
 8007c14:	2001      	movmi	r0, #1
 8007c16:	6013      	strmi	r3, [r2, #0]
 8007c18:	bf5c      	itt	pl
 8007c1a:	6013      	strpl	r3, [r2, #0]
 8007c1c:	2002      	movpl	r0, #2
 8007c1e:	4770      	bx	lr
 8007c20:	b299      	uxth	r1, r3
 8007c22:	b909      	cbnz	r1, 8007c28 <__lo0bits+0x2a>
 8007c24:	0c1b      	lsrs	r3, r3, #16
 8007c26:	2010      	movs	r0, #16
 8007c28:	b2d9      	uxtb	r1, r3
 8007c2a:	b909      	cbnz	r1, 8007c30 <__lo0bits+0x32>
 8007c2c:	3008      	adds	r0, #8
 8007c2e:	0a1b      	lsrs	r3, r3, #8
 8007c30:	0719      	lsls	r1, r3, #28
 8007c32:	bf04      	itt	eq
 8007c34:	091b      	lsreq	r3, r3, #4
 8007c36:	3004      	addeq	r0, #4
 8007c38:	0799      	lsls	r1, r3, #30
 8007c3a:	bf04      	itt	eq
 8007c3c:	089b      	lsreq	r3, r3, #2
 8007c3e:	3002      	addeq	r0, #2
 8007c40:	07d9      	lsls	r1, r3, #31
 8007c42:	d403      	bmi.n	8007c4c <__lo0bits+0x4e>
 8007c44:	085b      	lsrs	r3, r3, #1
 8007c46:	f100 0001 	add.w	r0, r0, #1
 8007c4a:	d003      	beq.n	8007c54 <__lo0bits+0x56>
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	4770      	bx	lr
 8007c50:	2000      	movs	r0, #0
 8007c52:	4770      	bx	lr
 8007c54:	2020      	movs	r0, #32
 8007c56:	4770      	bx	lr

08007c58 <__i2b>:
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	f7ff ff07 	bl	8007a70 <_Balloc>
 8007c62:	4602      	mov	r2, r0
 8007c64:	b928      	cbnz	r0, 8007c72 <__i2b+0x1a>
 8007c66:	4b05      	ldr	r3, [pc, #20]	@ (8007c7c <__i2b+0x24>)
 8007c68:	4805      	ldr	r0, [pc, #20]	@ (8007c80 <__i2b+0x28>)
 8007c6a:	f240 1145 	movw	r1, #325	@ 0x145
 8007c6e:	f000 fcbd 	bl	80085ec <__assert_func>
 8007c72:	2301      	movs	r3, #1
 8007c74:	6144      	str	r4, [r0, #20]
 8007c76:	6103      	str	r3, [r0, #16]
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	bf00      	nop
 8007c7c:	08008d6c 	.word	0x08008d6c
 8007c80:	08008d7d 	.word	0x08008d7d

08007c84 <__multiply>:
 8007c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	4614      	mov	r4, r2
 8007c8a:	690a      	ldr	r2, [r1, #16]
 8007c8c:	6923      	ldr	r3, [r4, #16]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	bfa8      	it	ge
 8007c92:	4623      	movge	r3, r4
 8007c94:	460f      	mov	r7, r1
 8007c96:	bfa4      	itt	ge
 8007c98:	460c      	movge	r4, r1
 8007c9a:	461f      	movge	r7, r3
 8007c9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ca0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ca4:	68a3      	ldr	r3, [r4, #8]
 8007ca6:	6861      	ldr	r1, [r4, #4]
 8007ca8:	eb0a 0609 	add.w	r6, sl, r9
 8007cac:	42b3      	cmp	r3, r6
 8007cae:	b085      	sub	sp, #20
 8007cb0:	bfb8      	it	lt
 8007cb2:	3101      	addlt	r1, #1
 8007cb4:	f7ff fedc 	bl	8007a70 <_Balloc>
 8007cb8:	b930      	cbnz	r0, 8007cc8 <__multiply+0x44>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	4b44      	ldr	r3, [pc, #272]	@ (8007dd0 <__multiply+0x14c>)
 8007cbe:	4845      	ldr	r0, [pc, #276]	@ (8007dd4 <__multiply+0x150>)
 8007cc0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007cc4:	f000 fc92 	bl	80085ec <__assert_func>
 8007cc8:	f100 0514 	add.w	r5, r0, #20
 8007ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cd0:	462b      	mov	r3, r5
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4543      	cmp	r3, r8
 8007cd6:	d321      	bcc.n	8007d1c <__multiply+0x98>
 8007cd8:	f107 0114 	add.w	r1, r7, #20
 8007cdc:	f104 0214 	add.w	r2, r4, #20
 8007ce0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ce4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ce8:	9302      	str	r3, [sp, #8]
 8007cea:	1b13      	subs	r3, r2, r4
 8007cec:	3b15      	subs	r3, #21
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	f104 0715 	add.w	r7, r4, #21
 8007cf8:	42ba      	cmp	r2, r7
 8007cfa:	bf38      	it	cc
 8007cfc:	2304      	movcc	r3, #4
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	9103      	str	r1, [sp, #12]
 8007d04:	428b      	cmp	r3, r1
 8007d06:	d80c      	bhi.n	8007d22 <__multiply+0x9e>
 8007d08:	2e00      	cmp	r6, #0
 8007d0a:	dd03      	ble.n	8007d14 <__multiply+0x90>
 8007d0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d05b      	beq.n	8007dcc <__multiply+0x148>
 8007d14:	6106      	str	r6, [r0, #16]
 8007d16:	b005      	add	sp, #20
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	f843 2b04 	str.w	r2, [r3], #4
 8007d20:	e7d8      	b.n	8007cd4 <__multiply+0x50>
 8007d22:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d26:	f1ba 0f00 	cmp.w	sl, #0
 8007d2a:	d024      	beq.n	8007d76 <__multiply+0xf2>
 8007d2c:	f104 0e14 	add.w	lr, r4, #20
 8007d30:	46a9      	mov	r9, r5
 8007d32:	f04f 0c00 	mov.w	ip, #0
 8007d36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d3a:	f8d9 3000 	ldr.w	r3, [r9]
 8007d3e:	fa1f fb87 	uxth.w	fp, r7
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d4c:	f8d9 7000 	ldr.w	r7, [r9]
 8007d50:	4463      	add	r3, ip
 8007d52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d56:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d64:	4572      	cmp	r2, lr
 8007d66:	f849 3b04 	str.w	r3, [r9], #4
 8007d6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d6e:	d8e2      	bhi.n	8007d36 <__multiply+0xb2>
 8007d70:	9b01      	ldr	r3, [sp, #4]
 8007d72:	f845 c003 	str.w	ip, [r5, r3]
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d7c:	3104      	adds	r1, #4
 8007d7e:	f1b9 0f00 	cmp.w	r9, #0
 8007d82:	d021      	beq.n	8007dc8 <__multiply+0x144>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	f104 0c14 	add.w	ip, r4, #20
 8007d8a:	46ae      	mov	lr, r5
 8007d8c:	f04f 0a00 	mov.w	sl, #0
 8007d90:	f8bc b000 	ldrh.w	fp, [ip]
 8007d94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d98:	fb09 770b 	mla	r7, r9, fp, r7
 8007d9c:	4457      	add	r7, sl
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007da4:	f84e 3b04 	str.w	r3, [lr], #4
 8007da8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007db0:	f8be 3000 	ldrh.w	r3, [lr]
 8007db4:	fb09 330a 	mla	r3, r9, sl, r3
 8007db8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007dbc:	4562      	cmp	r2, ip
 8007dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dc2:	d8e5      	bhi.n	8007d90 <__multiply+0x10c>
 8007dc4:	9f01      	ldr	r7, [sp, #4]
 8007dc6:	51eb      	str	r3, [r5, r7]
 8007dc8:	3504      	adds	r5, #4
 8007dca:	e799      	b.n	8007d00 <__multiply+0x7c>
 8007dcc:	3e01      	subs	r6, #1
 8007dce:	e79b      	b.n	8007d08 <__multiply+0x84>
 8007dd0:	08008d6c 	.word	0x08008d6c
 8007dd4:	08008d7d 	.word	0x08008d7d

08007dd8 <__pow5mult>:
 8007dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ddc:	4615      	mov	r5, r2
 8007dde:	f012 0203 	ands.w	r2, r2, #3
 8007de2:	4607      	mov	r7, r0
 8007de4:	460e      	mov	r6, r1
 8007de6:	d007      	beq.n	8007df8 <__pow5mult+0x20>
 8007de8:	4c25      	ldr	r4, [pc, #148]	@ (8007e80 <__pow5mult+0xa8>)
 8007dea:	3a01      	subs	r2, #1
 8007dec:	2300      	movs	r3, #0
 8007dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007df2:	f7ff fe9f 	bl	8007b34 <__multadd>
 8007df6:	4606      	mov	r6, r0
 8007df8:	10ad      	asrs	r5, r5, #2
 8007dfa:	d03d      	beq.n	8007e78 <__pow5mult+0xa0>
 8007dfc:	69fc      	ldr	r4, [r7, #28]
 8007dfe:	b97c      	cbnz	r4, 8007e20 <__pow5mult+0x48>
 8007e00:	2010      	movs	r0, #16
 8007e02:	f7ff fd7f 	bl	8007904 <malloc>
 8007e06:	4602      	mov	r2, r0
 8007e08:	61f8      	str	r0, [r7, #28]
 8007e0a:	b928      	cbnz	r0, 8007e18 <__pow5mult+0x40>
 8007e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007e84 <__pow5mult+0xac>)
 8007e0e:	481e      	ldr	r0, [pc, #120]	@ (8007e88 <__pow5mult+0xb0>)
 8007e10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e14:	f000 fbea 	bl	80085ec <__assert_func>
 8007e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e1c:	6004      	str	r4, [r0, #0]
 8007e1e:	60c4      	str	r4, [r0, #12]
 8007e20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e28:	b94c      	cbnz	r4, 8007e3e <__pow5mult+0x66>
 8007e2a:	f240 2171 	movw	r1, #625	@ 0x271
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f7ff ff12 	bl	8007c58 <__i2b>
 8007e34:	2300      	movs	r3, #0
 8007e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	6003      	str	r3, [r0, #0]
 8007e3e:	f04f 0900 	mov.w	r9, #0
 8007e42:	07eb      	lsls	r3, r5, #31
 8007e44:	d50a      	bpl.n	8007e5c <__pow5mult+0x84>
 8007e46:	4631      	mov	r1, r6
 8007e48:	4622      	mov	r2, r4
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	f7ff ff1a 	bl	8007c84 <__multiply>
 8007e50:	4631      	mov	r1, r6
 8007e52:	4680      	mov	r8, r0
 8007e54:	4638      	mov	r0, r7
 8007e56:	f7ff fe4b 	bl	8007af0 <_Bfree>
 8007e5a:	4646      	mov	r6, r8
 8007e5c:	106d      	asrs	r5, r5, #1
 8007e5e:	d00b      	beq.n	8007e78 <__pow5mult+0xa0>
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	b938      	cbnz	r0, 8007e74 <__pow5mult+0x9c>
 8007e64:	4622      	mov	r2, r4
 8007e66:	4621      	mov	r1, r4
 8007e68:	4638      	mov	r0, r7
 8007e6a:	f7ff ff0b 	bl	8007c84 <__multiply>
 8007e6e:	6020      	str	r0, [r4, #0]
 8007e70:	f8c0 9000 	str.w	r9, [r0]
 8007e74:	4604      	mov	r4, r0
 8007e76:	e7e4      	b.n	8007e42 <__pow5mult+0x6a>
 8007e78:	4630      	mov	r0, r6
 8007e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7e:	bf00      	nop
 8007e80:	08008dd8 	.word	0x08008dd8
 8007e84:	08008cfd 	.word	0x08008cfd
 8007e88:	08008d7d 	.word	0x08008d7d

08007e8c <__lshift>:
 8007e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e90:	460c      	mov	r4, r1
 8007e92:	6849      	ldr	r1, [r1, #4]
 8007e94:	6923      	ldr	r3, [r4, #16]
 8007e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	4691      	mov	r9, r2
 8007ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ea4:	f108 0601 	add.w	r6, r8, #1
 8007ea8:	42b3      	cmp	r3, r6
 8007eaa:	db0b      	blt.n	8007ec4 <__lshift+0x38>
 8007eac:	4638      	mov	r0, r7
 8007eae:	f7ff fddf 	bl	8007a70 <_Balloc>
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	b948      	cbnz	r0, 8007eca <__lshift+0x3e>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4b28      	ldr	r3, [pc, #160]	@ (8007f5c <__lshift+0xd0>)
 8007eba:	4829      	ldr	r0, [pc, #164]	@ (8007f60 <__lshift+0xd4>)
 8007ebc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ec0:	f000 fb94 	bl	80085ec <__assert_func>
 8007ec4:	3101      	adds	r1, #1
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	e7ee      	b.n	8007ea8 <__lshift+0x1c>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f100 0114 	add.w	r1, r0, #20
 8007ed0:	f100 0210 	add.w	r2, r0, #16
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	4553      	cmp	r3, sl
 8007ed8:	db33      	blt.n	8007f42 <__lshift+0xb6>
 8007eda:	6920      	ldr	r0, [r4, #16]
 8007edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ee0:	f104 0314 	add.w	r3, r4, #20
 8007ee4:	f019 091f 	ands.w	r9, r9, #31
 8007ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007eec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ef0:	d02b      	beq.n	8007f4a <__lshift+0xbe>
 8007ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ef6:	468a      	mov	sl, r1
 8007ef8:	2200      	movs	r2, #0
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	fa00 f009 	lsl.w	r0, r0, r9
 8007f00:	4310      	orrs	r0, r2
 8007f02:	f84a 0b04 	str.w	r0, [sl], #4
 8007f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0a:	459c      	cmp	ip, r3
 8007f0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f10:	d8f3      	bhi.n	8007efa <__lshift+0x6e>
 8007f12:	ebac 0304 	sub.w	r3, ip, r4
 8007f16:	3b15      	subs	r3, #21
 8007f18:	f023 0303 	bic.w	r3, r3, #3
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	f104 0015 	add.w	r0, r4, #21
 8007f22:	4584      	cmp	ip, r0
 8007f24:	bf38      	it	cc
 8007f26:	2304      	movcc	r3, #4
 8007f28:	50ca      	str	r2, [r1, r3]
 8007f2a:	b10a      	cbz	r2, 8007f30 <__lshift+0xa4>
 8007f2c:	f108 0602 	add.w	r6, r8, #2
 8007f30:	3e01      	subs	r6, #1
 8007f32:	4638      	mov	r0, r7
 8007f34:	612e      	str	r6, [r5, #16]
 8007f36:	4621      	mov	r1, r4
 8007f38:	f7ff fdda 	bl	8007af0 <_Bfree>
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f46:	3301      	adds	r3, #1
 8007f48:	e7c5      	b.n	8007ed6 <__lshift+0x4a>
 8007f4a:	3904      	subs	r1, #4
 8007f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f50:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f54:	459c      	cmp	ip, r3
 8007f56:	d8f9      	bhi.n	8007f4c <__lshift+0xc0>
 8007f58:	e7ea      	b.n	8007f30 <__lshift+0xa4>
 8007f5a:	bf00      	nop
 8007f5c:	08008d6c 	.word	0x08008d6c
 8007f60:	08008d7d 	.word	0x08008d7d

08007f64 <__mcmp>:
 8007f64:	690a      	ldr	r2, [r1, #16]
 8007f66:	4603      	mov	r3, r0
 8007f68:	6900      	ldr	r0, [r0, #16]
 8007f6a:	1a80      	subs	r0, r0, r2
 8007f6c:	b530      	push	{r4, r5, lr}
 8007f6e:	d10e      	bne.n	8007f8e <__mcmp+0x2a>
 8007f70:	3314      	adds	r3, #20
 8007f72:	3114      	adds	r1, #20
 8007f74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f84:	4295      	cmp	r5, r2
 8007f86:	d003      	beq.n	8007f90 <__mcmp+0x2c>
 8007f88:	d205      	bcs.n	8007f96 <__mcmp+0x32>
 8007f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8e:	bd30      	pop	{r4, r5, pc}
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d3f3      	bcc.n	8007f7c <__mcmp+0x18>
 8007f94:	e7fb      	b.n	8007f8e <__mcmp+0x2a>
 8007f96:	2001      	movs	r0, #1
 8007f98:	e7f9      	b.n	8007f8e <__mcmp+0x2a>
	...

08007f9c <__mdiff>:
 8007f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	4689      	mov	r9, r1
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4648      	mov	r0, r9
 8007fa8:	4614      	mov	r4, r2
 8007faa:	f7ff ffdb 	bl	8007f64 <__mcmp>
 8007fae:	1e05      	subs	r5, r0, #0
 8007fb0:	d112      	bne.n	8007fd8 <__mdiff+0x3c>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7ff fd5b 	bl	8007a70 <_Balloc>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	b928      	cbnz	r0, 8007fca <__mdiff+0x2e>
 8007fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80080bc <__mdiff+0x120>)
 8007fc0:	f240 2137 	movw	r1, #567	@ 0x237
 8007fc4:	483e      	ldr	r0, [pc, #248]	@ (80080c0 <__mdiff+0x124>)
 8007fc6:	f000 fb11 	bl	80085ec <__assert_func>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	b003      	add	sp, #12
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	bfbc      	itt	lt
 8007fda:	464b      	movlt	r3, r9
 8007fdc:	46a1      	movlt	r9, r4
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007fe4:	bfba      	itte	lt
 8007fe6:	461c      	movlt	r4, r3
 8007fe8:	2501      	movlt	r5, #1
 8007fea:	2500      	movge	r5, #0
 8007fec:	f7ff fd40 	bl	8007a70 <_Balloc>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	b918      	cbnz	r0, 8007ffc <__mdiff+0x60>
 8007ff4:	4b31      	ldr	r3, [pc, #196]	@ (80080bc <__mdiff+0x120>)
 8007ff6:	f240 2145 	movw	r1, #581	@ 0x245
 8007ffa:	e7e3      	b.n	8007fc4 <__mdiff+0x28>
 8007ffc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008000:	6926      	ldr	r6, [r4, #16]
 8008002:	60c5      	str	r5, [r0, #12]
 8008004:	f109 0310 	add.w	r3, r9, #16
 8008008:	f109 0514 	add.w	r5, r9, #20
 800800c:	f104 0e14 	add.w	lr, r4, #20
 8008010:	f100 0b14 	add.w	fp, r0, #20
 8008014:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008018:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	46d9      	mov	r9, fp
 8008020:	f04f 0c00 	mov.w	ip, #0
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	f85e 0b04 	ldr.w	r0, [lr], #4
 800802a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	fa1f f38a 	uxth.w	r3, sl
 8008034:	4619      	mov	r1, r3
 8008036:	b283      	uxth	r3, r0
 8008038:	1acb      	subs	r3, r1, r3
 800803a:	0c00      	lsrs	r0, r0, #16
 800803c:	4463      	add	r3, ip
 800803e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008042:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008046:	b29b      	uxth	r3, r3
 8008048:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800804c:	4576      	cmp	r6, lr
 800804e:	f849 3b04 	str.w	r3, [r9], #4
 8008052:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008056:	d8e5      	bhi.n	8008024 <__mdiff+0x88>
 8008058:	1b33      	subs	r3, r6, r4
 800805a:	3b15      	subs	r3, #21
 800805c:	f023 0303 	bic.w	r3, r3, #3
 8008060:	3415      	adds	r4, #21
 8008062:	3304      	adds	r3, #4
 8008064:	42a6      	cmp	r6, r4
 8008066:	bf38      	it	cc
 8008068:	2304      	movcc	r3, #4
 800806a:	441d      	add	r5, r3
 800806c:	445b      	add	r3, fp
 800806e:	461e      	mov	r6, r3
 8008070:	462c      	mov	r4, r5
 8008072:	4544      	cmp	r4, r8
 8008074:	d30e      	bcc.n	8008094 <__mdiff+0xf8>
 8008076:	f108 0103 	add.w	r1, r8, #3
 800807a:	1b49      	subs	r1, r1, r5
 800807c:	f021 0103 	bic.w	r1, r1, #3
 8008080:	3d03      	subs	r5, #3
 8008082:	45a8      	cmp	r8, r5
 8008084:	bf38      	it	cc
 8008086:	2100      	movcc	r1, #0
 8008088:	440b      	add	r3, r1
 800808a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800808e:	b191      	cbz	r1, 80080b6 <__mdiff+0x11a>
 8008090:	6117      	str	r7, [r2, #16]
 8008092:	e79d      	b.n	8007fd0 <__mdiff+0x34>
 8008094:	f854 1b04 	ldr.w	r1, [r4], #4
 8008098:	46e6      	mov	lr, ip
 800809a:	0c08      	lsrs	r0, r1, #16
 800809c:	fa1c fc81 	uxtah	ip, ip, r1
 80080a0:	4471      	add	r1, lr
 80080a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80080a6:	b289      	uxth	r1, r1
 80080a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080ac:	f846 1b04 	str.w	r1, [r6], #4
 80080b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080b4:	e7dd      	b.n	8008072 <__mdiff+0xd6>
 80080b6:	3f01      	subs	r7, #1
 80080b8:	e7e7      	b.n	800808a <__mdiff+0xee>
 80080ba:	bf00      	nop
 80080bc:	08008d6c 	.word	0x08008d6c
 80080c0:	08008d7d 	.word	0x08008d7d

080080c4 <__d2b>:
 80080c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080c8:	460f      	mov	r7, r1
 80080ca:	2101      	movs	r1, #1
 80080cc:	ec59 8b10 	vmov	r8, r9, d0
 80080d0:	4616      	mov	r6, r2
 80080d2:	f7ff fccd 	bl	8007a70 <_Balloc>
 80080d6:	4604      	mov	r4, r0
 80080d8:	b930      	cbnz	r0, 80080e8 <__d2b+0x24>
 80080da:	4602      	mov	r2, r0
 80080dc:	4b23      	ldr	r3, [pc, #140]	@ (800816c <__d2b+0xa8>)
 80080de:	4824      	ldr	r0, [pc, #144]	@ (8008170 <__d2b+0xac>)
 80080e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80080e4:	f000 fa82 	bl	80085ec <__assert_func>
 80080e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080f0:	b10d      	cbz	r5, 80080f6 <__d2b+0x32>
 80080f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	f1b8 0300 	subs.w	r3, r8, #0
 80080fc:	d023      	beq.n	8008146 <__d2b+0x82>
 80080fe:	4668      	mov	r0, sp
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	f7ff fd7c 	bl	8007bfe <__lo0bits>
 8008106:	e9dd 1200 	ldrd	r1, r2, [sp]
 800810a:	b1d0      	cbz	r0, 8008142 <__d2b+0x7e>
 800810c:	f1c0 0320 	rsb	r3, r0, #32
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	430b      	orrs	r3, r1
 8008116:	40c2      	lsrs	r2, r0
 8008118:	6163      	str	r3, [r4, #20]
 800811a:	9201      	str	r2, [sp, #4]
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	61a3      	str	r3, [r4, #24]
 8008120:	2b00      	cmp	r3, #0
 8008122:	bf0c      	ite	eq
 8008124:	2201      	moveq	r2, #1
 8008126:	2202      	movne	r2, #2
 8008128:	6122      	str	r2, [r4, #16]
 800812a:	b1a5      	cbz	r5, 8008156 <__d2b+0x92>
 800812c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008130:	4405      	add	r5, r0
 8008132:	603d      	str	r5, [r7, #0]
 8008134:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008138:	6030      	str	r0, [r6, #0]
 800813a:	4620      	mov	r0, r4
 800813c:	b003      	add	sp, #12
 800813e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008142:	6161      	str	r1, [r4, #20]
 8008144:	e7ea      	b.n	800811c <__d2b+0x58>
 8008146:	a801      	add	r0, sp, #4
 8008148:	f7ff fd59 	bl	8007bfe <__lo0bits>
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	6163      	str	r3, [r4, #20]
 8008150:	3020      	adds	r0, #32
 8008152:	2201      	movs	r2, #1
 8008154:	e7e8      	b.n	8008128 <__d2b+0x64>
 8008156:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800815a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800815e:	6038      	str	r0, [r7, #0]
 8008160:	6918      	ldr	r0, [r3, #16]
 8008162:	f7ff fd2d 	bl	8007bc0 <__hi0bits>
 8008166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800816a:	e7e5      	b.n	8008138 <__d2b+0x74>
 800816c:	08008d6c 	.word	0x08008d6c
 8008170:	08008d7d 	.word	0x08008d7d

08008174 <__ssputs_r>:
 8008174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	688e      	ldr	r6, [r1, #8]
 800817a:	461f      	mov	r7, r3
 800817c:	42be      	cmp	r6, r7
 800817e:	680b      	ldr	r3, [r1, #0]
 8008180:	4682      	mov	sl, r0
 8008182:	460c      	mov	r4, r1
 8008184:	4690      	mov	r8, r2
 8008186:	d82d      	bhi.n	80081e4 <__ssputs_r+0x70>
 8008188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800818c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008190:	d026      	beq.n	80081e0 <__ssputs_r+0x6c>
 8008192:	6965      	ldr	r5, [r4, #20]
 8008194:	6909      	ldr	r1, [r1, #16]
 8008196:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800819a:	eba3 0901 	sub.w	r9, r3, r1
 800819e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081a2:	1c7b      	adds	r3, r7, #1
 80081a4:	444b      	add	r3, r9
 80081a6:	106d      	asrs	r5, r5, #1
 80081a8:	429d      	cmp	r5, r3
 80081aa:	bf38      	it	cc
 80081ac:	461d      	movcc	r5, r3
 80081ae:	0553      	lsls	r3, r2, #21
 80081b0:	d527      	bpl.n	8008202 <__ssputs_r+0x8e>
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7ff fbd0 	bl	8007958 <_malloc_r>
 80081b8:	4606      	mov	r6, r0
 80081ba:	b360      	cbz	r0, 8008216 <__ssputs_r+0xa2>
 80081bc:	6921      	ldr	r1, [r4, #16]
 80081be:	464a      	mov	r2, r9
 80081c0:	f000 fa06 	bl	80085d0 <memcpy>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	6126      	str	r6, [r4, #16]
 80081d2:	6165      	str	r5, [r4, #20]
 80081d4:	444e      	add	r6, r9
 80081d6:	eba5 0509 	sub.w	r5, r5, r9
 80081da:	6026      	str	r6, [r4, #0]
 80081dc:	60a5      	str	r5, [r4, #8]
 80081de:	463e      	mov	r6, r7
 80081e0:	42be      	cmp	r6, r7
 80081e2:	d900      	bls.n	80081e6 <__ssputs_r+0x72>
 80081e4:	463e      	mov	r6, r7
 80081e6:	6820      	ldr	r0, [r4, #0]
 80081e8:	4632      	mov	r2, r6
 80081ea:	4641      	mov	r1, r8
 80081ec:	f000 f9c6 	bl	800857c <memmove>
 80081f0:	68a3      	ldr	r3, [r4, #8]
 80081f2:	1b9b      	subs	r3, r3, r6
 80081f4:	60a3      	str	r3, [r4, #8]
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	4433      	add	r3, r6
 80081fa:	6023      	str	r3, [r4, #0]
 80081fc:	2000      	movs	r0, #0
 80081fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008202:	462a      	mov	r2, r5
 8008204:	f000 fa36 	bl	8008674 <_realloc_r>
 8008208:	4606      	mov	r6, r0
 800820a:	2800      	cmp	r0, #0
 800820c:	d1e0      	bne.n	80081d0 <__ssputs_r+0x5c>
 800820e:	6921      	ldr	r1, [r4, #16]
 8008210:	4650      	mov	r0, sl
 8008212:	f7ff fb2d 	bl	8007870 <_free_r>
 8008216:	230c      	movs	r3, #12
 8008218:	f8ca 3000 	str.w	r3, [sl]
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	e7e9      	b.n	80081fe <__ssputs_r+0x8a>
	...

0800822c <_svfiprintf_r>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	4698      	mov	r8, r3
 8008232:	898b      	ldrh	r3, [r1, #12]
 8008234:	061b      	lsls	r3, r3, #24
 8008236:	b09d      	sub	sp, #116	@ 0x74
 8008238:	4607      	mov	r7, r0
 800823a:	460d      	mov	r5, r1
 800823c:	4614      	mov	r4, r2
 800823e:	d510      	bpl.n	8008262 <_svfiprintf_r+0x36>
 8008240:	690b      	ldr	r3, [r1, #16]
 8008242:	b973      	cbnz	r3, 8008262 <_svfiprintf_r+0x36>
 8008244:	2140      	movs	r1, #64	@ 0x40
 8008246:	f7ff fb87 	bl	8007958 <_malloc_r>
 800824a:	6028      	str	r0, [r5, #0]
 800824c:	6128      	str	r0, [r5, #16]
 800824e:	b930      	cbnz	r0, 800825e <_svfiprintf_r+0x32>
 8008250:	230c      	movs	r3, #12
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	b01d      	add	sp, #116	@ 0x74
 800825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825e:	2340      	movs	r3, #64	@ 0x40
 8008260:	616b      	str	r3, [r5, #20]
 8008262:	2300      	movs	r3, #0
 8008264:	9309      	str	r3, [sp, #36]	@ 0x24
 8008266:	2320      	movs	r3, #32
 8008268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800826c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008270:	2330      	movs	r3, #48	@ 0x30
 8008272:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008410 <_svfiprintf_r+0x1e4>
 8008276:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800827a:	f04f 0901 	mov.w	r9, #1
 800827e:	4623      	mov	r3, r4
 8008280:	469a      	mov	sl, r3
 8008282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008286:	b10a      	cbz	r2, 800828c <_svfiprintf_r+0x60>
 8008288:	2a25      	cmp	r2, #37	@ 0x25
 800828a:	d1f9      	bne.n	8008280 <_svfiprintf_r+0x54>
 800828c:	ebba 0b04 	subs.w	fp, sl, r4
 8008290:	d00b      	beq.n	80082aa <_svfiprintf_r+0x7e>
 8008292:	465b      	mov	r3, fp
 8008294:	4622      	mov	r2, r4
 8008296:	4629      	mov	r1, r5
 8008298:	4638      	mov	r0, r7
 800829a:	f7ff ff6b 	bl	8008174 <__ssputs_r>
 800829e:	3001      	adds	r0, #1
 80082a0:	f000 80a7 	beq.w	80083f2 <_svfiprintf_r+0x1c6>
 80082a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082a6:	445a      	add	r2, fp
 80082a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80082aa:	f89a 3000 	ldrb.w	r3, [sl]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 809f 	beq.w	80083f2 <_svfiprintf_r+0x1c6>
 80082b4:	2300      	movs	r3, #0
 80082b6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082be:	f10a 0a01 	add.w	sl, sl, #1
 80082c2:	9304      	str	r3, [sp, #16]
 80082c4:	9307      	str	r3, [sp, #28]
 80082c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80082cc:	4654      	mov	r4, sl
 80082ce:	2205      	movs	r2, #5
 80082d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d4:	484e      	ldr	r0, [pc, #312]	@ (8008410 <_svfiprintf_r+0x1e4>)
 80082d6:	f7f7 ff7b 	bl	80001d0 <memchr>
 80082da:	9a04      	ldr	r2, [sp, #16]
 80082dc:	b9d8      	cbnz	r0, 8008316 <_svfiprintf_r+0xea>
 80082de:	06d0      	lsls	r0, r2, #27
 80082e0:	bf44      	itt	mi
 80082e2:	2320      	movmi	r3, #32
 80082e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082e8:	0711      	lsls	r1, r2, #28
 80082ea:	bf44      	itt	mi
 80082ec:	232b      	movmi	r3, #43	@ 0x2b
 80082ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082f2:	f89a 3000 	ldrb.w	r3, [sl]
 80082f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082f8:	d015      	beq.n	8008326 <_svfiprintf_r+0xfa>
 80082fa:	9a07      	ldr	r2, [sp, #28]
 80082fc:	4654      	mov	r4, sl
 80082fe:	2000      	movs	r0, #0
 8008300:	f04f 0c0a 	mov.w	ip, #10
 8008304:	4621      	mov	r1, r4
 8008306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800830a:	3b30      	subs	r3, #48	@ 0x30
 800830c:	2b09      	cmp	r3, #9
 800830e:	d94b      	bls.n	80083a8 <_svfiprintf_r+0x17c>
 8008310:	b1b0      	cbz	r0, 8008340 <_svfiprintf_r+0x114>
 8008312:	9207      	str	r2, [sp, #28]
 8008314:	e014      	b.n	8008340 <_svfiprintf_r+0x114>
 8008316:	eba0 0308 	sub.w	r3, r0, r8
 800831a:	fa09 f303 	lsl.w	r3, r9, r3
 800831e:	4313      	orrs	r3, r2
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	46a2      	mov	sl, r4
 8008324:	e7d2      	b.n	80082cc <_svfiprintf_r+0xa0>
 8008326:	9b03      	ldr	r3, [sp, #12]
 8008328:	1d19      	adds	r1, r3, #4
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	9103      	str	r1, [sp, #12]
 800832e:	2b00      	cmp	r3, #0
 8008330:	bfbb      	ittet	lt
 8008332:	425b      	neglt	r3, r3
 8008334:	f042 0202 	orrlt.w	r2, r2, #2
 8008338:	9307      	strge	r3, [sp, #28]
 800833a:	9307      	strlt	r3, [sp, #28]
 800833c:	bfb8      	it	lt
 800833e:	9204      	strlt	r2, [sp, #16]
 8008340:	7823      	ldrb	r3, [r4, #0]
 8008342:	2b2e      	cmp	r3, #46	@ 0x2e
 8008344:	d10a      	bne.n	800835c <_svfiprintf_r+0x130>
 8008346:	7863      	ldrb	r3, [r4, #1]
 8008348:	2b2a      	cmp	r3, #42	@ 0x2a
 800834a:	d132      	bne.n	80083b2 <_svfiprintf_r+0x186>
 800834c:	9b03      	ldr	r3, [sp, #12]
 800834e:	1d1a      	adds	r2, r3, #4
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	9203      	str	r2, [sp, #12]
 8008354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008358:	3402      	adds	r4, #2
 800835a:	9305      	str	r3, [sp, #20]
 800835c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008420 <_svfiprintf_r+0x1f4>
 8008360:	7821      	ldrb	r1, [r4, #0]
 8008362:	2203      	movs	r2, #3
 8008364:	4650      	mov	r0, sl
 8008366:	f7f7 ff33 	bl	80001d0 <memchr>
 800836a:	b138      	cbz	r0, 800837c <_svfiprintf_r+0x150>
 800836c:	9b04      	ldr	r3, [sp, #16]
 800836e:	eba0 000a 	sub.w	r0, r0, sl
 8008372:	2240      	movs	r2, #64	@ 0x40
 8008374:	4082      	lsls	r2, r0
 8008376:	4313      	orrs	r3, r2
 8008378:	3401      	adds	r4, #1
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008380:	4824      	ldr	r0, [pc, #144]	@ (8008414 <_svfiprintf_r+0x1e8>)
 8008382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008386:	2206      	movs	r2, #6
 8008388:	f7f7 ff22 	bl	80001d0 <memchr>
 800838c:	2800      	cmp	r0, #0
 800838e:	d036      	beq.n	80083fe <_svfiprintf_r+0x1d2>
 8008390:	4b21      	ldr	r3, [pc, #132]	@ (8008418 <_svfiprintf_r+0x1ec>)
 8008392:	bb1b      	cbnz	r3, 80083dc <_svfiprintf_r+0x1b0>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	3307      	adds	r3, #7
 8008398:	f023 0307 	bic.w	r3, r3, #7
 800839c:	3308      	adds	r3, #8
 800839e:	9303      	str	r3, [sp, #12]
 80083a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a2:	4433      	add	r3, r6
 80083a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083a6:	e76a      	b.n	800827e <_svfiprintf_r+0x52>
 80083a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ac:	460c      	mov	r4, r1
 80083ae:	2001      	movs	r0, #1
 80083b0:	e7a8      	b.n	8008304 <_svfiprintf_r+0xd8>
 80083b2:	2300      	movs	r3, #0
 80083b4:	3401      	adds	r4, #1
 80083b6:	9305      	str	r3, [sp, #20]
 80083b8:	4619      	mov	r1, r3
 80083ba:	f04f 0c0a 	mov.w	ip, #10
 80083be:	4620      	mov	r0, r4
 80083c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083c4:	3a30      	subs	r2, #48	@ 0x30
 80083c6:	2a09      	cmp	r2, #9
 80083c8:	d903      	bls.n	80083d2 <_svfiprintf_r+0x1a6>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0c6      	beq.n	800835c <_svfiprintf_r+0x130>
 80083ce:	9105      	str	r1, [sp, #20]
 80083d0:	e7c4      	b.n	800835c <_svfiprintf_r+0x130>
 80083d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083d6:	4604      	mov	r4, r0
 80083d8:	2301      	movs	r3, #1
 80083da:	e7f0      	b.n	80083be <_svfiprintf_r+0x192>
 80083dc:	ab03      	add	r3, sp, #12
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	462a      	mov	r2, r5
 80083e2:	4b0e      	ldr	r3, [pc, #56]	@ (800841c <_svfiprintf_r+0x1f0>)
 80083e4:	a904      	add	r1, sp, #16
 80083e6:	4638      	mov	r0, r7
 80083e8:	f7fd fe98 	bl	800611c <_printf_float>
 80083ec:	1c42      	adds	r2, r0, #1
 80083ee:	4606      	mov	r6, r0
 80083f0:	d1d6      	bne.n	80083a0 <_svfiprintf_r+0x174>
 80083f2:	89ab      	ldrh	r3, [r5, #12]
 80083f4:	065b      	lsls	r3, r3, #25
 80083f6:	f53f af2d 	bmi.w	8008254 <_svfiprintf_r+0x28>
 80083fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083fc:	e72c      	b.n	8008258 <_svfiprintf_r+0x2c>
 80083fe:	ab03      	add	r3, sp, #12
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	462a      	mov	r2, r5
 8008404:	4b05      	ldr	r3, [pc, #20]	@ (800841c <_svfiprintf_r+0x1f0>)
 8008406:	a904      	add	r1, sp, #16
 8008408:	4638      	mov	r0, r7
 800840a:	f7fe f91f 	bl	800664c <_printf_i>
 800840e:	e7ed      	b.n	80083ec <_svfiprintf_r+0x1c0>
 8008410:	08008ed8 	.word	0x08008ed8
 8008414:	08008ee2 	.word	0x08008ee2
 8008418:	0800611d 	.word	0x0800611d
 800841c:	08008175 	.word	0x08008175
 8008420:	08008ede 	.word	0x08008ede

08008424 <__sflush_r>:
 8008424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842c:	0716      	lsls	r6, r2, #28
 800842e:	4605      	mov	r5, r0
 8008430:	460c      	mov	r4, r1
 8008432:	d454      	bmi.n	80084de <__sflush_r+0xba>
 8008434:	684b      	ldr	r3, [r1, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	dc02      	bgt.n	8008440 <__sflush_r+0x1c>
 800843a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	dd48      	ble.n	80084d2 <__sflush_r+0xae>
 8008440:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008442:	2e00      	cmp	r6, #0
 8008444:	d045      	beq.n	80084d2 <__sflush_r+0xae>
 8008446:	2300      	movs	r3, #0
 8008448:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800844c:	682f      	ldr	r7, [r5, #0]
 800844e:	6a21      	ldr	r1, [r4, #32]
 8008450:	602b      	str	r3, [r5, #0]
 8008452:	d030      	beq.n	80084b6 <__sflush_r+0x92>
 8008454:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	0759      	lsls	r1, r3, #29
 800845a:	d505      	bpl.n	8008468 <__sflush_r+0x44>
 800845c:	6863      	ldr	r3, [r4, #4]
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008462:	b10b      	cbz	r3, 8008468 <__sflush_r+0x44>
 8008464:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008466:	1ad2      	subs	r2, r2, r3
 8008468:	2300      	movs	r3, #0
 800846a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800846c:	6a21      	ldr	r1, [r4, #32]
 800846e:	4628      	mov	r0, r5
 8008470:	47b0      	blx	r6
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	d106      	bne.n	8008486 <__sflush_r+0x62>
 8008478:	6829      	ldr	r1, [r5, #0]
 800847a:	291d      	cmp	r1, #29
 800847c:	d82b      	bhi.n	80084d6 <__sflush_r+0xb2>
 800847e:	4a2a      	ldr	r2, [pc, #168]	@ (8008528 <__sflush_r+0x104>)
 8008480:	410a      	asrs	r2, r1
 8008482:	07d6      	lsls	r6, r2, #31
 8008484:	d427      	bmi.n	80084d6 <__sflush_r+0xb2>
 8008486:	2200      	movs	r2, #0
 8008488:	6062      	str	r2, [r4, #4]
 800848a:	04d9      	lsls	r1, r3, #19
 800848c:	6922      	ldr	r2, [r4, #16]
 800848e:	6022      	str	r2, [r4, #0]
 8008490:	d504      	bpl.n	800849c <__sflush_r+0x78>
 8008492:	1c42      	adds	r2, r0, #1
 8008494:	d101      	bne.n	800849a <__sflush_r+0x76>
 8008496:	682b      	ldr	r3, [r5, #0]
 8008498:	b903      	cbnz	r3, 800849c <__sflush_r+0x78>
 800849a:	6560      	str	r0, [r4, #84]	@ 0x54
 800849c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800849e:	602f      	str	r7, [r5, #0]
 80084a0:	b1b9      	cbz	r1, 80084d2 <__sflush_r+0xae>
 80084a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084a6:	4299      	cmp	r1, r3
 80084a8:	d002      	beq.n	80084b0 <__sflush_r+0x8c>
 80084aa:	4628      	mov	r0, r5
 80084ac:	f7ff f9e0 	bl	8007870 <_free_r>
 80084b0:	2300      	movs	r3, #0
 80084b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80084b4:	e00d      	b.n	80084d2 <__sflush_r+0xae>
 80084b6:	2301      	movs	r3, #1
 80084b8:	4628      	mov	r0, r5
 80084ba:	47b0      	blx	r6
 80084bc:	4602      	mov	r2, r0
 80084be:	1c50      	adds	r0, r2, #1
 80084c0:	d1c9      	bne.n	8008456 <__sflush_r+0x32>
 80084c2:	682b      	ldr	r3, [r5, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0c6      	beq.n	8008456 <__sflush_r+0x32>
 80084c8:	2b1d      	cmp	r3, #29
 80084ca:	d001      	beq.n	80084d0 <__sflush_r+0xac>
 80084cc:	2b16      	cmp	r3, #22
 80084ce:	d11e      	bne.n	800850e <__sflush_r+0xea>
 80084d0:	602f      	str	r7, [r5, #0]
 80084d2:	2000      	movs	r0, #0
 80084d4:	e022      	b.n	800851c <__sflush_r+0xf8>
 80084d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084da:	b21b      	sxth	r3, r3
 80084dc:	e01b      	b.n	8008516 <__sflush_r+0xf2>
 80084de:	690f      	ldr	r7, [r1, #16]
 80084e0:	2f00      	cmp	r7, #0
 80084e2:	d0f6      	beq.n	80084d2 <__sflush_r+0xae>
 80084e4:	0793      	lsls	r3, r2, #30
 80084e6:	680e      	ldr	r6, [r1, #0]
 80084e8:	bf08      	it	eq
 80084ea:	694b      	ldreq	r3, [r1, #20]
 80084ec:	600f      	str	r7, [r1, #0]
 80084ee:	bf18      	it	ne
 80084f0:	2300      	movne	r3, #0
 80084f2:	eba6 0807 	sub.w	r8, r6, r7
 80084f6:	608b      	str	r3, [r1, #8]
 80084f8:	f1b8 0f00 	cmp.w	r8, #0
 80084fc:	dde9      	ble.n	80084d2 <__sflush_r+0xae>
 80084fe:	6a21      	ldr	r1, [r4, #32]
 8008500:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008502:	4643      	mov	r3, r8
 8008504:	463a      	mov	r2, r7
 8008506:	4628      	mov	r0, r5
 8008508:	47b0      	blx	r6
 800850a:	2800      	cmp	r0, #0
 800850c:	dc08      	bgt.n	8008520 <__sflush_r+0xfc>
 800850e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008516:	81a3      	strh	r3, [r4, #12]
 8008518:	f04f 30ff 	mov.w	r0, #4294967295
 800851c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008520:	4407      	add	r7, r0
 8008522:	eba8 0800 	sub.w	r8, r8, r0
 8008526:	e7e7      	b.n	80084f8 <__sflush_r+0xd4>
 8008528:	dfbffffe 	.word	0xdfbffffe

0800852c <_fflush_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	690b      	ldr	r3, [r1, #16]
 8008530:	4605      	mov	r5, r0
 8008532:	460c      	mov	r4, r1
 8008534:	b913      	cbnz	r3, 800853c <_fflush_r+0x10>
 8008536:	2500      	movs	r5, #0
 8008538:	4628      	mov	r0, r5
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	b118      	cbz	r0, 8008546 <_fflush_r+0x1a>
 800853e:	6a03      	ldr	r3, [r0, #32]
 8008540:	b90b      	cbnz	r3, 8008546 <_fflush_r+0x1a>
 8008542:	f7fe fa2f 	bl	80069a4 <__sinit>
 8008546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0f3      	beq.n	8008536 <_fflush_r+0xa>
 800854e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008550:	07d0      	lsls	r0, r2, #31
 8008552:	d404      	bmi.n	800855e <_fflush_r+0x32>
 8008554:	0599      	lsls	r1, r3, #22
 8008556:	d402      	bmi.n	800855e <_fflush_r+0x32>
 8008558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800855a:	f7fe fb3a 	bl	8006bd2 <__retarget_lock_acquire_recursive>
 800855e:	4628      	mov	r0, r5
 8008560:	4621      	mov	r1, r4
 8008562:	f7ff ff5f 	bl	8008424 <__sflush_r>
 8008566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008568:	07da      	lsls	r2, r3, #31
 800856a:	4605      	mov	r5, r0
 800856c:	d4e4      	bmi.n	8008538 <_fflush_r+0xc>
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	059b      	lsls	r3, r3, #22
 8008572:	d4e1      	bmi.n	8008538 <_fflush_r+0xc>
 8008574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008576:	f7fe fb2d 	bl	8006bd4 <__retarget_lock_release_recursive>
 800857a:	e7dd      	b.n	8008538 <_fflush_r+0xc>

0800857c <memmove>:
 800857c:	4288      	cmp	r0, r1
 800857e:	b510      	push	{r4, lr}
 8008580:	eb01 0402 	add.w	r4, r1, r2
 8008584:	d902      	bls.n	800858c <memmove+0x10>
 8008586:	4284      	cmp	r4, r0
 8008588:	4623      	mov	r3, r4
 800858a:	d807      	bhi.n	800859c <memmove+0x20>
 800858c:	1e43      	subs	r3, r0, #1
 800858e:	42a1      	cmp	r1, r4
 8008590:	d008      	beq.n	80085a4 <memmove+0x28>
 8008592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800859a:	e7f8      	b.n	800858e <memmove+0x12>
 800859c:	4402      	add	r2, r0
 800859e:	4601      	mov	r1, r0
 80085a0:	428a      	cmp	r2, r1
 80085a2:	d100      	bne.n	80085a6 <memmove+0x2a>
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ae:	e7f7      	b.n	80085a0 <memmove+0x24>

080085b0 <_sbrk_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d06      	ldr	r5, [pc, #24]	@ (80085cc <_sbrk_r+0x1c>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	602b      	str	r3, [r5, #0]
 80085bc:	f7f8 ff00 	bl	80013c0 <_sbrk>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_sbrk_r+0x1a>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_sbrk_r+0x1a>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	200003d8 	.word	0x200003d8

080085d0 <memcpy>:
 80085d0:	440a      	add	r2, r1
 80085d2:	4291      	cmp	r1, r2
 80085d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085d8:	d100      	bne.n	80085dc <memcpy+0xc>
 80085da:	4770      	bx	lr
 80085dc:	b510      	push	{r4, lr}
 80085de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085e6:	4291      	cmp	r1, r2
 80085e8:	d1f9      	bne.n	80085de <memcpy+0xe>
 80085ea:	bd10      	pop	{r4, pc}

080085ec <__assert_func>:
 80085ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085ee:	4614      	mov	r4, r2
 80085f0:	461a      	mov	r2, r3
 80085f2:	4b09      	ldr	r3, [pc, #36]	@ (8008618 <__assert_func+0x2c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4605      	mov	r5, r0
 80085f8:	68d8      	ldr	r0, [r3, #12]
 80085fa:	b954      	cbnz	r4, 8008612 <__assert_func+0x26>
 80085fc:	4b07      	ldr	r3, [pc, #28]	@ (800861c <__assert_func+0x30>)
 80085fe:	461c      	mov	r4, r3
 8008600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008604:	9100      	str	r1, [sp, #0]
 8008606:	462b      	mov	r3, r5
 8008608:	4905      	ldr	r1, [pc, #20]	@ (8008620 <__assert_func+0x34>)
 800860a:	f000 f86f 	bl	80086ec <fiprintf>
 800860e:	f000 f87f 	bl	8008710 <abort>
 8008612:	4b04      	ldr	r3, [pc, #16]	@ (8008624 <__assert_func+0x38>)
 8008614:	e7f4      	b.n	8008600 <__assert_func+0x14>
 8008616:	bf00      	nop
 8008618:	20000018 	.word	0x20000018
 800861c:	08008f2e 	.word	0x08008f2e
 8008620:	08008f00 	.word	0x08008f00
 8008624:	08008ef3 	.word	0x08008ef3

08008628 <_calloc_r>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	fba1 5402 	umull	r5, r4, r1, r2
 800862e:	b93c      	cbnz	r4, 8008640 <_calloc_r+0x18>
 8008630:	4629      	mov	r1, r5
 8008632:	f7ff f991 	bl	8007958 <_malloc_r>
 8008636:	4606      	mov	r6, r0
 8008638:	b928      	cbnz	r0, 8008646 <_calloc_r+0x1e>
 800863a:	2600      	movs	r6, #0
 800863c:	4630      	mov	r0, r6
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	220c      	movs	r2, #12
 8008642:	6002      	str	r2, [r0, #0]
 8008644:	e7f9      	b.n	800863a <_calloc_r+0x12>
 8008646:	462a      	mov	r2, r5
 8008648:	4621      	mov	r1, r4
 800864a:	f7fe fa44 	bl	8006ad6 <memset>
 800864e:	e7f5      	b.n	800863c <_calloc_r+0x14>

08008650 <__ascii_mbtowc>:
 8008650:	b082      	sub	sp, #8
 8008652:	b901      	cbnz	r1, 8008656 <__ascii_mbtowc+0x6>
 8008654:	a901      	add	r1, sp, #4
 8008656:	b142      	cbz	r2, 800866a <__ascii_mbtowc+0x1a>
 8008658:	b14b      	cbz	r3, 800866e <__ascii_mbtowc+0x1e>
 800865a:	7813      	ldrb	r3, [r2, #0]
 800865c:	600b      	str	r3, [r1, #0]
 800865e:	7812      	ldrb	r2, [r2, #0]
 8008660:	1e10      	subs	r0, r2, #0
 8008662:	bf18      	it	ne
 8008664:	2001      	movne	r0, #1
 8008666:	b002      	add	sp, #8
 8008668:	4770      	bx	lr
 800866a:	4610      	mov	r0, r2
 800866c:	e7fb      	b.n	8008666 <__ascii_mbtowc+0x16>
 800866e:	f06f 0001 	mvn.w	r0, #1
 8008672:	e7f8      	b.n	8008666 <__ascii_mbtowc+0x16>

08008674 <_realloc_r>:
 8008674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008678:	4680      	mov	r8, r0
 800867a:	4615      	mov	r5, r2
 800867c:	460c      	mov	r4, r1
 800867e:	b921      	cbnz	r1, 800868a <_realloc_r+0x16>
 8008680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008684:	4611      	mov	r1, r2
 8008686:	f7ff b967 	b.w	8007958 <_malloc_r>
 800868a:	b92a      	cbnz	r2, 8008698 <_realloc_r+0x24>
 800868c:	f7ff f8f0 	bl	8007870 <_free_r>
 8008690:	2400      	movs	r4, #0
 8008692:	4620      	mov	r0, r4
 8008694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008698:	f000 f841 	bl	800871e <_malloc_usable_size_r>
 800869c:	4285      	cmp	r5, r0
 800869e:	4606      	mov	r6, r0
 80086a0:	d802      	bhi.n	80086a8 <_realloc_r+0x34>
 80086a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086a6:	d8f4      	bhi.n	8008692 <_realloc_r+0x1e>
 80086a8:	4629      	mov	r1, r5
 80086aa:	4640      	mov	r0, r8
 80086ac:	f7ff f954 	bl	8007958 <_malloc_r>
 80086b0:	4607      	mov	r7, r0
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d0ec      	beq.n	8008690 <_realloc_r+0x1c>
 80086b6:	42b5      	cmp	r5, r6
 80086b8:	462a      	mov	r2, r5
 80086ba:	4621      	mov	r1, r4
 80086bc:	bf28      	it	cs
 80086be:	4632      	movcs	r2, r6
 80086c0:	f7ff ff86 	bl	80085d0 <memcpy>
 80086c4:	4621      	mov	r1, r4
 80086c6:	4640      	mov	r0, r8
 80086c8:	f7ff f8d2 	bl	8007870 <_free_r>
 80086cc:	463c      	mov	r4, r7
 80086ce:	e7e0      	b.n	8008692 <_realloc_r+0x1e>

080086d0 <__ascii_wctomb>:
 80086d0:	4603      	mov	r3, r0
 80086d2:	4608      	mov	r0, r1
 80086d4:	b141      	cbz	r1, 80086e8 <__ascii_wctomb+0x18>
 80086d6:	2aff      	cmp	r2, #255	@ 0xff
 80086d8:	d904      	bls.n	80086e4 <__ascii_wctomb+0x14>
 80086da:	228a      	movs	r2, #138	@ 0x8a
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	f04f 30ff 	mov.w	r0, #4294967295
 80086e2:	4770      	bx	lr
 80086e4:	700a      	strb	r2, [r1, #0]
 80086e6:	2001      	movs	r0, #1
 80086e8:	4770      	bx	lr
	...

080086ec <fiprintf>:
 80086ec:	b40e      	push	{r1, r2, r3}
 80086ee:	b503      	push	{r0, r1, lr}
 80086f0:	4601      	mov	r1, r0
 80086f2:	ab03      	add	r3, sp, #12
 80086f4:	4805      	ldr	r0, [pc, #20]	@ (800870c <fiprintf+0x20>)
 80086f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fa:	6800      	ldr	r0, [r0, #0]
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	f000 f83f 	bl	8008780 <_vfiprintf_r>
 8008702:	b002      	add	sp, #8
 8008704:	f85d eb04 	ldr.w	lr, [sp], #4
 8008708:	b003      	add	sp, #12
 800870a:	4770      	bx	lr
 800870c:	20000018 	.word	0x20000018

08008710 <abort>:
 8008710:	b508      	push	{r3, lr}
 8008712:	2006      	movs	r0, #6
 8008714:	f000 fa08 	bl	8008b28 <raise>
 8008718:	2001      	movs	r0, #1
 800871a:	f7f8 fdd9 	bl	80012d0 <_exit>

0800871e <_malloc_usable_size_r>:
 800871e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008722:	1f18      	subs	r0, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	bfbc      	itt	lt
 8008728:	580b      	ldrlt	r3, [r1, r0]
 800872a:	18c0      	addlt	r0, r0, r3
 800872c:	4770      	bx	lr

0800872e <__sfputc_r>:
 800872e:	6893      	ldr	r3, [r2, #8]
 8008730:	3b01      	subs	r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	b410      	push	{r4}
 8008736:	6093      	str	r3, [r2, #8]
 8008738:	da08      	bge.n	800874c <__sfputc_r+0x1e>
 800873a:	6994      	ldr	r4, [r2, #24]
 800873c:	42a3      	cmp	r3, r4
 800873e:	db01      	blt.n	8008744 <__sfputc_r+0x16>
 8008740:	290a      	cmp	r1, #10
 8008742:	d103      	bne.n	800874c <__sfputc_r+0x1e>
 8008744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008748:	f000 b932 	b.w	80089b0 <__swbuf_r>
 800874c:	6813      	ldr	r3, [r2, #0]
 800874e:	1c58      	adds	r0, r3, #1
 8008750:	6010      	str	r0, [r2, #0]
 8008752:	7019      	strb	r1, [r3, #0]
 8008754:	4608      	mov	r0, r1
 8008756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800875a:	4770      	bx	lr

0800875c <__sfputs_r>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	4606      	mov	r6, r0
 8008760:	460f      	mov	r7, r1
 8008762:	4614      	mov	r4, r2
 8008764:	18d5      	adds	r5, r2, r3
 8008766:	42ac      	cmp	r4, r5
 8008768:	d101      	bne.n	800876e <__sfputs_r+0x12>
 800876a:	2000      	movs	r0, #0
 800876c:	e007      	b.n	800877e <__sfputs_r+0x22>
 800876e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008772:	463a      	mov	r2, r7
 8008774:	4630      	mov	r0, r6
 8008776:	f7ff ffda 	bl	800872e <__sfputc_r>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d1f3      	bne.n	8008766 <__sfputs_r+0xa>
 800877e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008780 <_vfiprintf_r>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	460d      	mov	r5, r1
 8008786:	b09d      	sub	sp, #116	@ 0x74
 8008788:	4614      	mov	r4, r2
 800878a:	4698      	mov	r8, r3
 800878c:	4606      	mov	r6, r0
 800878e:	b118      	cbz	r0, 8008798 <_vfiprintf_r+0x18>
 8008790:	6a03      	ldr	r3, [r0, #32]
 8008792:	b90b      	cbnz	r3, 8008798 <_vfiprintf_r+0x18>
 8008794:	f7fe f906 	bl	80069a4 <__sinit>
 8008798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800879a:	07d9      	lsls	r1, r3, #31
 800879c:	d405      	bmi.n	80087aa <_vfiprintf_r+0x2a>
 800879e:	89ab      	ldrh	r3, [r5, #12]
 80087a0:	059a      	lsls	r2, r3, #22
 80087a2:	d402      	bmi.n	80087aa <_vfiprintf_r+0x2a>
 80087a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087a6:	f7fe fa14 	bl	8006bd2 <__retarget_lock_acquire_recursive>
 80087aa:	89ab      	ldrh	r3, [r5, #12]
 80087ac:	071b      	lsls	r3, r3, #28
 80087ae:	d501      	bpl.n	80087b4 <_vfiprintf_r+0x34>
 80087b0:	692b      	ldr	r3, [r5, #16]
 80087b2:	b99b      	cbnz	r3, 80087dc <_vfiprintf_r+0x5c>
 80087b4:	4629      	mov	r1, r5
 80087b6:	4630      	mov	r0, r6
 80087b8:	f000 f938 	bl	8008a2c <__swsetup_r>
 80087bc:	b170      	cbz	r0, 80087dc <_vfiprintf_r+0x5c>
 80087be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087c0:	07dc      	lsls	r4, r3, #31
 80087c2:	d504      	bpl.n	80087ce <_vfiprintf_r+0x4e>
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
 80087c8:	b01d      	add	sp, #116	@ 0x74
 80087ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	0598      	lsls	r0, r3, #22
 80087d2:	d4f7      	bmi.n	80087c4 <_vfiprintf_r+0x44>
 80087d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087d6:	f7fe f9fd 	bl	8006bd4 <__retarget_lock_release_recursive>
 80087da:	e7f3      	b.n	80087c4 <_vfiprintf_r+0x44>
 80087dc:	2300      	movs	r3, #0
 80087de:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e0:	2320      	movs	r3, #32
 80087e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ea:	2330      	movs	r3, #48	@ 0x30
 80087ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800899c <_vfiprintf_r+0x21c>
 80087f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087f4:	f04f 0901 	mov.w	r9, #1
 80087f8:	4623      	mov	r3, r4
 80087fa:	469a      	mov	sl, r3
 80087fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008800:	b10a      	cbz	r2, 8008806 <_vfiprintf_r+0x86>
 8008802:	2a25      	cmp	r2, #37	@ 0x25
 8008804:	d1f9      	bne.n	80087fa <_vfiprintf_r+0x7a>
 8008806:	ebba 0b04 	subs.w	fp, sl, r4
 800880a:	d00b      	beq.n	8008824 <_vfiprintf_r+0xa4>
 800880c:	465b      	mov	r3, fp
 800880e:	4622      	mov	r2, r4
 8008810:	4629      	mov	r1, r5
 8008812:	4630      	mov	r0, r6
 8008814:	f7ff ffa2 	bl	800875c <__sfputs_r>
 8008818:	3001      	adds	r0, #1
 800881a:	f000 80a7 	beq.w	800896c <_vfiprintf_r+0x1ec>
 800881e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008820:	445a      	add	r2, fp
 8008822:	9209      	str	r2, [sp, #36]	@ 0x24
 8008824:	f89a 3000 	ldrb.w	r3, [sl]
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 809f 	beq.w	800896c <_vfiprintf_r+0x1ec>
 800882e:	2300      	movs	r3, #0
 8008830:	f04f 32ff 	mov.w	r2, #4294967295
 8008834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008838:	f10a 0a01 	add.w	sl, sl, #1
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	9307      	str	r3, [sp, #28]
 8008840:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008844:	931a      	str	r3, [sp, #104]	@ 0x68
 8008846:	4654      	mov	r4, sl
 8008848:	2205      	movs	r2, #5
 800884a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884e:	4853      	ldr	r0, [pc, #332]	@ (800899c <_vfiprintf_r+0x21c>)
 8008850:	f7f7 fcbe 	bl	80001d0 <memchr>
 8008854:	9a04      	ldr	r2, [sp, #16]
 8008856:	b9d8      	cbnz	r0, 8008890 <_vfiprintf_r+0x110>
 8008858:	06d1      	lsls	r1, r2, #27
 800885a:	bf44      	itt	mi
 800885c:	2320      	movmi	r3, #32
 800885e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008862:	0713      	lsls	r3, r2, #28
 8008864:	bf44      	itt	mi
 8008866:	232b      	movmi	r3, #43	@ 0x2b
 8008868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800886c:	f89a 3000 	ldrb.w	r3, [sl]
 8008870:	2b2a      	cmp	r3, #42	@ 0x2a
 8008872:	d015      	beq.n	80088a0 <_vfiprintf_r+0x120>
 8008874:	9a07      	ldr	r2, [sp, #28]
 8008876:	4654      	mov	r4, sl
 8008878:	2000      	movs	r0, #0
 800887a:	f04f 0c0a 	mov.w	ip, #10
 800887e:	4621      	mov	r1, r4
 8008880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008884:	3b30      	subs	r3, #48	@ 0x30
 8008886:	2b09      	cmp	r3, #9
 8008888:	d94b      	bls.n	8008922 <_vfiprintf_r+0x1a2>
 800888a:	b1b0      	cbz	r0, 80088ba <_vfiprintf_r+0x13a>
 800888c:	9207      	str	r2, [sp, #28]
 800888e:	e014      	b.n	80088ba <_vfiprintf_r+0x13a>
 8008890:	eba0 0308 	sub.w	r3, r0, r8
 8008894:	fa09 f303 	lsl.w	r3, r9, r3
 8008898:	4313      	orrs	r3, r2
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	46a2      	mov	sl, r4
 800889e:	e7d2      	b.n	8008846 <_vfiprintf_r+0xc6>
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	1d19      	adds	r1, r3, #4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	9103      	str	r1, [sp, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bfbb      	ittet	lt
 80088ac:	425b      	neglt	r3, r3
 80088ae:	f042 0202 	orrlt.w	r2, r2, #2
 80088b2:	9307      	strge	r3, [sp, #28]
 80088b4:	9307      	strlt	r3, [sp, #28]
 80088b6:	bfb8      	it	lt
 80088b8:	9204      	strlt	r2, [sp, #16]
 80088ba:	7823      	ldrb	r3, [r4, #0]
 80088bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80088be:	d10a      	bne.n	80088d6 <_vfiprintf_r+0x156>
 80088c0:	7863      	ldrb	r3, [r4, #1]
 80088c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c4:	d132      	bne.n	800892c <_vfiprintf_r+0x1ac>
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	1d1a      	adds	r2, r3, #4
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	9203      	str	r2, [sp, #12]
 80088ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088d2:	3402      	adds	r4, #2
 80088d4:	9305      	str	r3, [sp, #20]
 80088d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089ac <_vfiprintf_r+0x22c>
 80088da:	7821      	ldrb	r1, [r4, #0]
 80088dc:	2203      	movs	r2, #3
 80088de:	4650      	mov	r0, sl
 80088e0:	f7f7 fc76 	bl	80001d0 <memchr>
 80088e4:	b138      	cbz	r0, 80088f6 <_vfiprintf_r+0x176>
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	eba0 000a 	sub.w	r0, r0, sl
 80088ec:	2240      	movs	r2, #64	@ 0x40
 80088ee:	4082      	lsls	r2, r0
 80088f0:	4313      	orrs	r3, r2
 80088f2:	3401      	adds	r4, #1
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fa:	4829      	ldr	r0, [pc, #164]	@ (80089a0 <_vfiprintf_r+0x220>)
 80088fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008900:	2206      	movs	r2, #6
 8008902:	f7f7 fc65 	bl	80001d0 <memchr>
 8008906:	2800      	cmp	r0, #0
 8008908:	d03f      	beq.n	800898a <_vfiprintf_r+0x20a>
 800890a:	4b26      	ldr	r3, [pc, #152]	@ (80089a4 <_vfiprintf_r+0x224>)
 800890c:	bb1b      	cbnz	r3, 8008956 <_vfiprintf_r+0x1d6>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	3307      	adds	r3, #7
 8008912:	f023 0307 	bic.w	r3, r3, #7
 8008916:	3308      	adds	r3, #8
 8008918:	9303      	str	r3, [sp, #12]
 800891a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800891c:	443b      	add	r3, r7
 800891e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008920:	e76a      	b.n	80087f8 <_vfiprintf_r+0x78>
 8008922:	fb0c 3202 	mla	r2, ip, r2, r3
 8008926:	460c      	mov	r4, r1
 8008928:	2001      	movs	r0, #1
 800892a:	e7a8      	b.n	800887e <_vfiprintf_r+0xfe>
 800892c:	2300      	movs	r3, #0
 800892e:	3401      	adds	r4, #1
 8008930:	9305      	str	r3, [sp, #20]
 8008932:	4619      	mov	r1, r3
 8008934:	f04f 0c0a 	mov.w	ip, #10
 8008938:	4620      	mov	r0, r4
 800893a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800893e:	3a30      	subs	r2, #48	@ 0x30
 8008940:	2a09      	cmp	r2, #9
 8008942:	d903      	bls.n	800894c <_vfiprintf_r+0x1cc>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0c6      	beq.n	80088d6 <_vfiprintf_r+0x156>
 8008948:	9105      	str	r1, [sp, #20]
 800894a:	e7c4      	b.n	80088d6 <_vfiprintf_r+0x156>
 800894c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008950:	4604      	mov	r4, r0
 8008952:	2301      	movs	r3, #1
 8008954:	e7f0      	b.n	8008938 <_vfiprintf_r+0x1b8>
 8008956:	ab03      	add	r3, sp, #12
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	462a      	mov	r2, r5
 800895c:	4b12      	ldr	r3, [pc, #72]	@ (80089a8 <_vfiprintf_r+0x228>)
 800895e:	a904      	add	r1, sp, #16
 8008960:	4630      	mov	r0, r6
 8008962:	f7fd fbdb 	bl	800611c <_printf_float>
 8008966:	4607      	mov	r7, r0
 8008968:	1c78      	adds	r0, r7, #1
 800896a:	d1d6      	bne.n	800891a <_vfiprintf_r+0x19a>
 800896c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800896e:	07d9      	lsls	r1, r3, #31
 8008970:	d405      	bmi.n	800897e <_vfiprintf_r+0x1fe>
 8008972:	89ab      	ldrh	r3, [r5, #12]
 8008974:	059a      	lsls	r2, r3, #22
 8008976:	d402      	bmi.n	800897e <_vfiprintf_r+0x1fe>
 8008978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800897a:	f7fe f92b 	bl	8006bd4 <__retarget_lock_release_recursive>
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	065b      	lsls	r3, r3, #25
 8008982:	f53f af1f 	bmi.w	80087c4 <_vfiprintf_r+0x44>
 8008986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008988:	e71e      	b.n	80087c8 <_vfiprintf_r+0x48>
 800898a:	ab03      	add	r3, sp, #12
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	462a      	mov	r2, r5
 8008990:	4b05      	ldr	r3, [pc, #20]	@ (80089a8 <_vfiprintf_r+0x228>)
 8008992:	a904      	add	r1, sp, #16
 8008994:	4630      	mov	r0, r6
 8008996:	f7fd fe59 	bl	800664c <_printf_i>
 800899a:	e7e4      	b.n	8008966 <_vfiprintf_r+0x1e6>
 800899c:	08008ed8 	.word	0x08008ed8
 80089a0:	08008ee2 	.word	0x08008ee2
 80089a4:	0800611d 	.word	0x0800611d
 80089a8:	0800875d 	.word	0x0800875d
 80089ac:	08008ede 	.word	0x08008ede

080089b0 <__swbuf_r>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	460e      	mov	r6, r1
 80089b4:	4614      	mov	r4, r2
 80089b6:	4605      	mov	r5, r0
 80089b8:	b118      	cbz	r0, 80089c2 <__swbuf_r+0x12>
 80089ba:	6a03      	ldr	r3, [r0, #32]
 80089bc:	b90b      	cbnz	r3, 80089c2 <__swbuf_r+0x12>
 80089be:	f7fd fff1 	bl	80069a4 <__sinit>
 80089c2:	69a3      	ldr	r3, [r4, #24]
 80089c4:	60a3      	str	r3, [r4, #8]
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	071a      	lsls	r2, r3, #28
 80089ca:	d501      	bpl.n	80089d0 <__swbuf_r+0x20>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	b943      	cbnz	r3, 80089e2 <__swbuf_r+0x32>
 80089d0:	4621      	mov	r1, r4
 80089d2:	4628      	mov	r0, r5
 80089d4:	f000 f82a 	bl	8008a2c <__swsetup_r>
 80089d8:	b118      	cbz	r0, 80089e2 <__swbuf_r+0x32>
 80089da:	f04f 37ff 	mov.w	r7, #4294967295
 80089de:	4638      	mov	r0, r7
 80089e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	1a98      	subs	r0, r3, r2
 80089e8:	6963      	ldr	r3, [r4, #20]
 80089ea:	b2f6      	uxtb	r6, r6
 80089ec:	4283      	cmp	r3, r0
 80089ee:	4637      	mov	r7, r6
 80089f0:	dc05      	bgt.n	80089fe <__swbuf_r+0x4e>
 80089f2:	4621      	mov	r1, r4
 80089f4:	4628      	mov	r0, r5
 80089f6:	f7ff fd99 	bl	800852c <_fflush_r>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1ed      	bne.n	80089da <__swbuf_r+0x2a>
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	60a3      	str	r3, [r4, #8]
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	701e      	strb	r6, [r3, #0]
 8008a0c:	6962      	ldr	r2, [r4, #20]
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d004      	beq.n	8008a1e <__swbuf_r+0x6e>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	07db      	lsls	r3, r3, #31
 8008a18:	d5e1      	bpl.n	80089de <__swbuf_r+0x2e>
 8008a1a:	2e0a      	cmp	r6, #10
 8008a1c:	d1df      	bne.n	80089de <__swbuf_r+0x2e>
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f7ff fd83 	bl	800852c <_fflush_r>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d0d9      	beq.n	80089de <__swbuf_r+0x2e>
 8008a2a:	e7d6      	b.n	80089da <__swbuf_r+0x2a>

08008a2c <__swsetup_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4b29      	ldr	r3, [pc, #164]	@ (8008ad4 <__swsetup_r+0xa8>)
 8008a30:	4605      	mov	r5, r0
 8008a32:	6818      	ldr	r0, [r3, #0]
 8008a34:	460c      	mov	r4, r1
 8008a36:	b118      	cbz	r0, 8008a40 <__swsetup_r+0x14>
 8008a38:	6a03      	ldr	r3, [r0, #32]
 8008a3a:	b90b      	cbnz	r3, 8008a40 <__swsetup_r+0x14>
 8008a3c:	f7fd ffb2 	bl	80069a4 <__sinit>
 8008a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a44:	0719      	lsls	r1, r3, #28
 8008a46:	d422      	bmi.n	8008a8e <__swsetup_r+0x62>
 8008a48:	06da      	lsls	r2, r3, #27
 8008a4a:	d407      	bmi.n	8008a5c <__swsetup_r+0x30>
 8008a4c:	2209      	movs	r2, #9
 8008a4e:	602a      	str	r2, [r5, #0]
 8008a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5a:	e033      	b.n	8008ac4 <__swsetup_r+0x98>
 8008a5c:	0758      	lsls	r0, r3, #29
 8008a5e:	d512      	bpl.n	8008a86 <__swsetup_r+0x5a>
 8008a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a62:	b141      	cbz	r1, 8008a76 <__swsetup_r+0x4a>
 8008a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	d002      	beq.n	8008a72 <__swsetup_r+0x46>
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	f7fe feff 	bl	8007870 <_free_r>
 8008a72:	2300      	movs	r3, #0
 8008a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6063      	str	r3, [r4, #4]
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	f043 0308 	orr.w	r3, r3, #8
 8008a8c:	81a3      	strh	r3, [r4, #12]
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	b94b      	cbnz	r3, 8008aa6 <__swsetup_r+0x7a>
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a9c:	d003      	beq.n	8008aa6 <__swsetup_r+0x7a>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f000 f883 	bl	8008bac <__smakebuf_r>
 8008aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aaa:	f013 0201 	ands.w	r2, r3, #1
 8008aae:	d00a      	beq.n	8008ac6 <__swsetup_r+0x9a>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	60a2      	str	r2, [r4, #8]
 8008ab4:	6962      	ldr	r2, [r4, #20]
 8008ab6:	4252      	negs	r2, r2
 8008ab8:	61a2      	str	r2, [r4, #24]
 8008aba:	6922      	ldr	r2, [r4, #16]
 8008abc:	b942      	cbnz	r2, 8008ad0 <__swsetup_r+0xa4>
 8008abe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ac2:	d1c5      	bne.n	8008a50 <__swsetup_r+0x24>
 8008ac4:	bd38      	pop	{r3, r4, r5, pc}
 8008ac6:	0799      	lsls	r1, r3, #30
 8008ac8:	bf58      	it	pl
 8008aca:	6962      	ldrpl	r2, [r4, #20]
 8008acc:	60a2      	str	r2, [r4, #8]
 8008ace:	e7f4      	b.n	8008aba <__swsetup_r+0x8e>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	e7f7      	b.n	8008ac4 <__swsetup_r+0x98>
 8008ad4:	20000018 	.word	0x20000018

08008ad8 <_raise_r>:
 8008ad8:	291f      	cmp	r1, #31
 8008ada:	b538      	push	{r3, r4, r5, lr}
 8008adc:	4605      	mov	r5, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	d904      	bls.n	8008aec <_raise_r+0x14>
 8008ae2:	2316      	movs	r3, #22
 8008ae4:	6003      	str	r3, [r0, #0]
 8008ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008aee:	b112      	cbz	r2, 8008af6 <_raise_r+0x1e>
 8008af0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008af4:	b94b      	cbnz	r3, 8008b0a <_raise_r+0x32>
 8008af6:	4628      	mov	r0, r5
 8008af8:	f000 f830 	bl	8008b5c <_getpid_r>
 8008afc:	4622      	mov	r2, r4
 8008afe:	4601      	mov	r1, r0
 8008b00:	4628      	mov	r0, r5
 8008b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b06:	f000 b817 	b.w	8008b38 <_kill_r>
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d00a      	beq.n	8008b24 <_raise_r+0x4c>
 8008b0e:	1c59      	adds	r1, r3, #1
 8008b10:	d103      	bne.n	8008b1a <_raise_r+0x42>
 8008b12:	2316      	movs	r3, #22
 8008b14:	6003      	str	r3, [r0, #0]
 8008b16:	2001      	movs	r0, #1
 8008b18:	e7e7      	b.n	8008aea <_raise_r+0x12>
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b20:	4620      	mov	r0, r4
 8008b22:	4798      	blx	r3
 8008b24:	2000      	movs	r0, #0
 8008b26:	e7e0      	b.n	8008aea <_raise_r+0x12>

08008b28 <raise>:
 8008b28:	4b02      	ldr	r3, [pc, #8]	@ (8008b34 <raise+0xc>)
 8008b2a:	4601      	mov	r1, r0
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	f7ff bfd3 	b.w	8008ad8 <_raise_r>
 8008b32:	bf00      	nop
 8008b34:	20000018 	.word	0x20000018

08008b38 <_kill_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d07      	ldr	r5, [pc, #28]	@ (8008b58 <_kill_r+0x20>)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4608      	mov	r0, r1
 8008b42:	4611      	mov	r1, r2
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	f7f8 fbb3 	bl	80012b0 <_kill>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	d102      	bne.n	8008b54 <_kill_r+0x1c>
 8008b4e:	682b      	ldr	r3, [r5, #0]
 8008b50:	b103      	cbz	r3, 8008b54 <_kill_r+0x1c>
 8008b52:	6023      	str	r3, [r4, #0]
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
 8008b56:	bf00      	nop
 8008b58:	200003d8 	.word	0x200003d8

08008b5c <_getpid_r>:
 8008b5c:	f7f8 bba0 	b.w	80012a0 <_getpid>

08008b60 <__swhatbuf_r>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	460c      	mov	r4, r1
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	b096      	sub	sp, #88	@ 0x58
 8008b6c:	4615      	mov	r5, r2
 8008b6e:	461e      	mov	r6, r3
 8008b70:	da0d      	bge.n	8008b8e <__swhatbuf_r+0x2e>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b78:	f04f 0100 	mov.w	r1, #0
 8008b7c:	bf14      	ite	ne
 8008b7e:	2340      	movne	r3, #64	@ 0x40
 8008b80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b84:	2000      	movs	r0, #0
 8008b86:	6031      	str	r1, [r6, #0]
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	b016      	add	sp, #88	@ 0x58
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	466a      	mov	r2, sp
 8008b90:	f000 f848 	bl	8008c24 <_fstat_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	dbec      	blt.n	8008b72 <__swhatbuf_r+0x12>
 8008b98:	9901      	ldr	r1, [sp, #4]
 8008b9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ba2:	4259      	negs	r1, r3
 8008ba4:	4159      	adcs	r1, r3
 8008ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008baa:	e7eb      	b.n	8008b84 <__swhatbuf_r+0x24>

08008bac <__smakebuf_r>:
 8008bac:	898b      	ldrh	r3, [r1, #12]
 8008bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb0:	079d      	lsls	r5, r3, #30
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	d507      	bpl.n	8008bc8 <__smakebuf_r+0x1c>
 8008bb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	b003      	add	sp, #12
 8008bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc8:	ab01      	add	r3, sp, #4
 8008bca:	466a      	mov	r2, sp
 8008bcc:	f7ff ffc8 	bl	8008b60 <__swhatbuf_r>
 8008bd0:	9f00      	ldr	r7, [sp, #0]
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f7fe febe 	bl	8007958 <_malloc_r>
 8008bdc:	b948      	cbnz	r0, 8008bf2 <__smakebuf_r+0x46>
 8008bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be2:	059a      	lsls	r2, r3, #22
 8008be4:	d4ee      	bmi.n	8008bc4 <__smakebuf_r+0x18>
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	f043 0302 	orr.w	r3, r3, #2
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	e7e2      	b.n	8008bb8 <__smakebuf_r+0xc>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	6020      	str	r0, [r4, #0]
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c02:	b15b      	cbz	r3, 8008c1c <__smakebuf_r+0x70>
 8008c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f000 f81d 	bl	8008c48 <_isatty_r>
 8008c0e:	b128      	cbz	r0, 8008c1c <__smakebuf_r+0x70>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f023 0303 	bic.w	r3, r3, #3
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	431d      	orrs	r5, r3
 8008c20:	81a5      	strh	r5, [r4, #12]
 8008c22:	e7cf      	b.n	8008bc4 <__smakebuf_r+0x18>

08008c24 <_fstat_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	@ (8008c44 <_fstat_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7f8 fb9d 	bl	8001370 <_fstat>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_fstat_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_fstat_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	200003d8 	.word	0x200003d8

08008c48 <_isatty_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d06      	ldr	r5, [pc, #24]	@ (8008c64 <_isatty_r+0x1c>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7f8 fb9c 	bl	8001390 <_isatty>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_isatty_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_isatty_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	200003d8 	.word	0x200003d8

08008c68 <_init>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	bf00      	nop
 8008c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6e:	bc08      	pop	{r3}
 8008c70:	469e      	mov	lr, r3
 8008c72:	4770      	bx	lr

08008c74 <_fini>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	bf00      	nop
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr
